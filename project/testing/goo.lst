     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "caar"
   469 000005DE 0400000000000000        	dq 4
   470 000005E6 63616172                	db 0x63, 0x61, 0x61, 0x72
   471                                  	; L_constants + 1514:
   472 000005EA 03                      	db T_string	; "cadr"
   473 000005EB 0400000000000000        	dq 4
   474 000005F3 63616472                	db 0x63, 0x61, 0x64, 0x72
   475                                  	; L_constants + 1527:
   476 000005F7 03                      	db T_string	; "cdar"
   477 000005F8 0400000000000000        	dq 4
   478 00000600 63646172                	db 0x63, 0x64, 0x61, 0x72
   479                                  	; L_constants + 1540:
   480 00000604 03                      	db T_string	; "cddr"
   481 00000605 0400000000000000        	dq 4
   482 0000060D 63646472                	db 0x63, 0x64, 0x64, 0x72
   483                                  	; L_constants + 1553:
   484 00000611 03                      	db T_string	; "caaar"
   485 00000612 0500000000000000        	dq 5
   486 0000061A 6361616172              	db 0x63, 0x61, 0x61, 0x61, 0x72
   487                                  	; L_constants + 1567:
   488 0000061F 03                      	db T_string	; "caadr"
   489 00000620 0500000000000000        	dq 5
   490 00000628 6361616472              	db 0x63, 0x61, 0x61, 0x64, 0x72
   491                                  	; L_constants + 1581:
   492 0000062D 03                      	db T_string	; "cadar"
   493 0000062E 0500000000000000        	dq 5
   494 00000636 6361646172              	db 0x63, 0x61, 0x64, 0x61, 0x72
   495                                  	; L_constants + 1595:
   496 0000063B 03                      	db T_string	; "caddr"
   497 0000063C 0500000000000000        	dq 5
   498 00000644 6361646472              	db 0x63, 0x61, 0x64, 0x64, 0x72
   499                                  	; L_constants + 1609:
   500 00000649 03                      	db T_string	; "cdaar"
   501 0000064A 0500000000000000        	dq 5
   502 00000652 6364616172              	db 0x63, 0x64, 0x61, 0x61, 0x72
   503                                  	; L_constants + 1623:
   504 00000657 03                      	db T_string	; "cdadr"
   505 00000658 0500000000000000        	dq 5
   506 00000660 6364616472              	db 0x63, 0x64, 0x61, 0x64, 0x72
   507                                  	; L_constants + 1637:
   508 00000665 03                      	db T_string	; "cddar"
   509 00000666 0500000000000000        	dq 5
   510 0000066E 6364646172              	db 0x63, 0x64, 0x64, 0x61, 0x72
   511                                  	; L_constants + 1651:
   512 00000673 03                      	db T_string	; "cdddr"
   513 00000674 0500000000000000        	dq 5
   514 0000067C 6364646472              	db 0x63, 0x64, 0x64, 0x64, 0x72
   515                                  	; L_constants + 1665:
   516 00000681 03                      	db T_string	; "caaaar"
   517 00000682 0600000000000000        	dq 6
   518 0000068A 636161616172            	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
   519                                  	; L_constants + 1680:
   520 00000690 03                      	db T_string	; "caaadr"
   521 00000691 0600000000000000        	dq 6
   522 00000699 636161616472            	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
   523                                  	; L_constants + 1695:
   524 0000069F 03                      	db T_string	; "caadar"
   525 000006A0 0600000000000000        	dq 6
   526 000006A8 636161646172            	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
   527                                  	; L_constants + 1710:
   528 000006AE 03                      	db T_string	; "caaddr"
   529 000006AF 0600000000000000        	dq 6
   530 000006B7 636161646472            	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
   531                                  	; L_constants + 1725:
   532 000006BD 03                      	db T_string	; "cadaar"
   533 000006BE 0600000000000000        	dq 6
   534 000006C6 636164616172            	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
   535                                  	; L_constants + 1740:
   536 000006CC 03                      	db T_string	; "cadadr"
   537 000006CD 0600000000000000        	dq 6
   538 000006D5 636164616472            	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
   539                                  	; L_constants + 1755:
   540 000006DB 03                      	db T_string	; "caddar"
   541 000006DC 0600000000000000        	dq 6
   542 000006E4 636164646172            	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
   543                                  	; L_constants + 1770:
   544 000006EA 03                      	db T_string	; "cadddr"
   545 000006EB 0600000000000000        	dq 6
   546 000006F3 636164646472            	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
   547                                  	; L_constants + 1785:
   548 000006F9 03                      	db T_string	; "cdaaar"
   549 000006FA 0600000000000000        	dq 6
   550 00000702 636461616172            	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
   551                                  	; L_constants + 1800:
   552 00000708 03                      	db T_string	; "cdaadr"
   553 00000709 0600000000000000        	dq 6
   554 00000711 636461616472            	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
   555                                  	; L_constants + 1815:
   556 00000717 03                      	db T_string	; "cdadar"
   557 00000718 0600000000000000        	dq 6
   558 00000720 636461646172            	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
   559                                  	; L_constants + 1830:
   560 00000726 03                      	db T_string	; "cdaddr"
   561 00000727 0600000000000000        	dq 6
   562 0000072F 636461646472            	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
   563                                  	; L_constants + 1845:
   564 00000735 03                      	db T_string	; "cddaar"
   565 00000736 0600000000000000        	dq 6
   566 0000073E 636464616172            	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
   567                                  	; L_constants + 1860:
   568 00000744 03                      	db T_string	; "cddadr"
   569 00000745 0600000000000000        	dq 6
   570 0000074D 636464616472            	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
   571                                  	; L_constants + 1875:
   572 00000753 03                      	db T_string	; "cdddar"
   573 00000754 0600000000000000        	dq 6
   574 0000075C 636464646172            	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
   575                                  	; L_constants + 1890:
   576 00000762 03                      	db T_string	; "cddddr"
   577 00000763 0600000000000000        	dq 6
   578 0000076B 636464646472            	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
   579                                  	; L_constants + 1905:
   580 00000771 03                      	db T_string	; "list?"
   581 00000772 0500000000000000        	dq 5
   582 0000077A 6C6973743F              	db 0x6C, 0x69, 0x73, 0x74, 0x3F
   583                                  	; L_constants + 1919:
   584 0000077F 03                      	db T_string	; "list"
   585 00000780 0400000000000000        	dq 4
   586 00000788 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   587                                  	; L_constants + 1932:
   588 0000078C 03                      	db T_string	; "not"
   589 0000078D 0300000000000000        	dq 3
   590 00000795 6E6F74                  	db 0x6E, 0x6F, 0x74
   591                                  	; L_constants + 1944:
   592 00000798 03                      	db T_string	; "rational?"
   593 00000799 0900000000000000        	dq 9
   594 000007A1 726174696F6E616C        	db 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C
   595 000007A9 3F                      	db 0x3F
   596                                  	; L_constants + 1962:
   597 000007AA 03                      	db T_string	; "list*"
   598 000007AB 0500000000000000        	dq 5
   599 000007B3 6C6973742A              	db 0x6C, 0x69, 0x73, 0x74, 0x2A
   600                                  	; L_constants + 1976:
   601 000007B8 03                      	db T_string	; "whatever"
   602 000007B9 0800000000000000        	dq 8
   603 000007C1 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   604                                  	; L_constants + 1993:
   605 000007C9 41                      	db T_interned_symbol	; whatever
   606 000007CA [B807000000000000]      	dq L_constants + 1976
   607                                  	; L_constants + 2002:
   608 000007D2 03                      	db T_string	; "apply"
   609 000007D3 0500000000000000        	dq 5
   610 000007DB 6170706C79              	db 0x61, 0x70, 0x70, 0x6C, 0x79
   611                                  	; L_constants + 2016:
   612 000007E0 03                      	db T_string	; "ormap"
   613 000007E1 0500000000000000        	dq 5
   614 000007E9 6F726D6170              	db 0x6F, 0x72, 0x6D, 0x61, 0x70
   615                                  	; L_constants + 2030:
   616 000007EE 03                      	db T_string	; "map"
   617 000007EF 0300000000000000        	dq 3
   618 000007F7 6D6170                  	db 0x6D, 0x61, 0x70
   619                                  	; L_constants + 2042:
   620 000007FA 03                      	db T_string	; "andmap"
   621 000007FB 0600000000000000        	dq 6
   622 00000803 616E646D6170            	db 0x61, 0x6E, 0x64, 0x6D, 0x61, 0x70
   623                                  	; L_constants + 2057:
   624 00000809 03                      	db T_string	; "reverse"
   625 0000080A 0700000000000000        	dq 7
   626 00000812 72657665727365          	db 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   627                                  	; L_constants + 2073:
   628 00000819 03                      	db T_string	; "fold-left"
   629 0000081A 0900000000000000        	dq 9
   630 00000822 666F6C642D6C6566        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x6C, 0x65, 0x66
   631 0000082A 74                      	db 0x74
   632                                  	; L_constants + 2091:
   633 0000082B 03                      	db T_string	; "append"
   634 0000082C 0600000000000000        	dq 6
   635 00000834 617070656E64            	db 0x61, 0x70, 0x70, 0x65, 0x6E, 0x64
   636                                  	; L_constants + 2106:
   637 0000083A 03                      	db T_string	; "fold-right"
   638 0000083B 0A00000000000000        	dq 10
   639 00000843 666F6C642D726967        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x72, 0x69, 0x67
   640 0000084B 6874                    	db 0x68, 0x74
   641                                  	; L_constants + 2125:
   642 0000084D 03                      	db T_string	; "+"
   643 0000084E 0100000000000000        	dq 1
   644 00000856 2B                      	db 0x2B
   645                                  	; L_constants + 2135:
   646 00000857 11                      	db T_integer	; 0
   647 00000858 0000000000000000        	dq 0
   648                                  	; L_constants + 2144:
   649 00000860 03                      	db T_string	; "__bin_integer_to_fr...
   650 00000861 1900000000000000        	dq 25
   651 00000869 5F5F62696E5F696E        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x5F, 0x69, 0x6E
   652 00000871 74656765725F746F        	db 0x74, 0x65, 0x67, 0x65, 0x72, 0x5F, 0x74, 0x6F
   653 00000879 5F6672616374696F        	db 0x5F, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F
   654 00000881 6E                      	db 0x6E
   655                                  	; L_constants + 2178:
   656 00000882 41                      	db T_interned_symbol	; +
   657 00000883 [4D08000000000000]      	dq L_constants + 2125
   658                                  	; L_constants + 2187:
   659 0000088B 03                      	db T_string	; "all arguments need ...
   660 0000088C 2000000000000000        	dq 32
   661 00000894 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
   662 0000089C 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
   663 000008A4 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   664 000008AC 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   665                                  	; L_constants + 2228:
   666 000008B4 03                      	db T_string	; "-"
   667 000008B5 0100000000000000        	dq 1
   668 000008BD 2D                      	db 0x2D
   669                                  	; L_constants + 2238:
   670 000008BE 03                      	db T_string	; "real"
   671 000008BF 0400000000000000        	dq 4
   672 000008C7 7265616C                	db 0x72, 0x65, 0x61, 0x6C
   673                                  	; L_constants + 2251:
   674 000008CB 41                      	db T_interned_symbol	; -
   675 000008CC [B408000000000000]      	dq L_constants + 2228
   676                                  	; L_constants + 2260:
   677 000008D4 03                      	db T_string	; "*"
   678 000008D5 0100000000000000        	dq 1
   679 000008DD 2A                      	db 0x2A
   680                                  	; L_constants + 2270:
   681 000008DE 11                      	db T_integer	; 1
   682 000008DF 0100000000000000        	dq 1
   683                                  	; L_constants + 2279:
   684 000008E7 41                      	db T_interned_symbol	; *
   685 000008E8 [D408000000000000]      	dq L_constants + 2260
   686                                  	; L_constants + 2288:
   687 000008F0 03                      	db T_string	; "/"
   688 000008F1 0100000000000000        	dq 1
   689 000008F9 2F                      	db 0x2F
   690                                  	; L_constants + 2298:
   691 000008FA 41                      	db T_interned_symbol	; /
   692 000008FB [F008000000000000]      	dq L_constants + 2288
   693                                  	; L_constants + 2307:
   694 00000903 03                      	db T_string	; "fact"
   695 00000904 0400000000000000        	dq 4
   696 0000090C 66616374                	db 0x66, 0x61, 0x63, 0x74
   697                                  	; L_constants + 2320:
   698 00000910 03                      	db T_string	; "<"
   699 00000911 0100000000000000        	dq 1
   700 00000919 3C                      	db 0x3C
   701                                  	; L_constants + 2330:
   702 0000091A 03                      	db T_string	; "<="
   703 0000091B 0200000000000000        	dq 2
   704 00000923 3C3D                    	db 0x3C, 0x3D
   705                                  	; L_constants + 2341:
   706 00000925 03                      	db T_string	; ">"
   707 00000926 0100000000000000        	dq 1
   708 0000092E 3E                      	db 0x3E
   709                                  	; L_constants + 2351:
   710 0000092F 03                      	db T_string	; ">="
   711 00000930 0200000000000000        	dq 2
   712 00000938 3E3D                    	db 0x3E, 0x3D
   713                                  	; L_constants + 2362:
   714 0000093A 03                      	db T_string	; "="
   715 0000093B 0100000000000000        	dq 1
   716 00000943 3D                      	db 0x3D
   717                                  	; L_constants + 2372:
   718 00000944 03                      	db T_string	; "generic-comparator"
   719 00000945 1200000000000000        	dq 18
   720 0000094D 67656E657269632D        	db 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2D
   721 00000955 636F6D7061726174        	db 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x61, 0x74
   722 0000095D 6F72                    	db 0x6F, 0x72
   723                                  	; L_constants + 2399:
   724 0000095F 41                      	db T_interned_symbol	; generic-comparator
   725 00000960 [4409000000000000]      	dq L_constants + 2372
   726                                  	; L_constants + 2408:
   727 00000968 03                      	db T_string	; "all the arguments m...
   728 00000969 2100000000000000        	dq 33
   729 00000971 616C6C2074686520        	db 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20
   730 00000979 617267756D656E74        	db 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74
   731 00000981 73206D7573742062        	db 0x73, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62
   732 00000989 65206E756D626572        	db 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72
   733 00000991 73                      	db 0x73
   734                                  	; L_constants + 2450:
   735 00000992 03                      	db T_string	; "char<?"
   736 00000993 0600000000000000        	dq 6
   737 0000099B 636861723C3F            	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3F
   738                                  	; L_constants + 2465:
   739 000009A1 03                      	db T_string	; "char<=?"
   740 000009A2 0700000000000000        	dq 7
   741 000009AA 636861723C3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3D, 0x3F
   742                                  	; L_constants + 2481:
   743 000009B1 03                      	db T_string	; "char=?"
   744 000009B2 0600000000000000        	dq 6
   745 000009BA 636861723D3F            	db 0x63, 0x68, 0x61, 0x72, 0x3D, 0x3F
   746                                  	; L_constants + 2496:
   747 000009C0 03                      	db T_string	; "char>?"
   748 000009C1 0600000000000000        	dq 6
   749 000009C9 636861723E3F            	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3F
   750                                  	; L_constants + 2511:
   751 000009CF 03                      	db T_string	; "char>=?"
   752 000009D0 0700000000000000        	dq 7
   753 000009D8 636861723E3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3D, 0x3F
   754                                  	; L_constants + 2527:
   755 000009DF 03                      	db T_string	; "char-downcase"
   756 000009E0 0D00000000000000        	dq 13
   757 000009E8 636861722D646F77        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x64, 0x6F, 0x77
   758 000009F0 6E63617365              	db 0x6E, 0x63, 0x61, 0x73, 0x65
   759                                  	; L_constants + 2549:
   760 000009F5 03                      	db T_string	; "char-upcase"
   761 000009F6 0B00000000000000        	dq 11
   762 000009FE 636861722D757063        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x75, 0x70, 0x63
   763 00000A06 617365                  	db 0x61, 0x73, 0x65
   764                                  	; L_constants + 2569:
   765 00000A09 0241                    	db T_char, 0x41	; #\A
   766                                  	; L_constants + 2571:
   767 00000A0B 025A                    	db T_char, 0x5A	; #\Z
   768                                  	; L_constants + 2573:
   769 00000A0D 0261                    	db T_char, 0x61	; #\a
   770                                  	; L_constants + 2575:
   771 00000A0F 027A                    	db T_char, 0x7A	; #\z
   772                                  	; L_constants + 2577:
   773 00000A11 03                      	db T_string	; "char-ci<?"
   774 00000A12 0900000000000000        	dq 9
   775 00000A1A 636861722D63693C        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
   776 00000A22 3F                      	db 0x3F
   777                                  	; L_constants + 2595:
   778 00000A23 03                      	db T_string	; "char-ci<=?"
   779 00000A24 0A00000000000000        	dq 10
   780 00000A2C 636861722D63693C        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
   781 00000A34 3D3F                    	db 0x3D, 0x3F
   782                                  	; L_constants + 2614:
   783 00000A36 03                      	db T_string	; "char-ci=?"
   784 00000A37 0900000000000000        	dq 9
   785 00000A3F 636861722D63693D        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3D
   786 00000A47 3F                      	db 0x3F
   787                                  	; L_constants + 2632:
   788 00000A48 03                      	db T_string	; "char-ci>?"
   789 00000A49 0900000000000000        	dq 9
   790 00000A51 636861722D63693E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
   791 00000A59 3F                      	db 0x3F
   792                                  	; L_constants + 2650:
   793 00000A5A 03                      	db T_string	; "char-ci>=?"
   794 00000A5B 0A00000000000000        	dq 10
   795 00000A63 636861722D63693E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
   796 00000A6B 3D3F                    	db 0x3D, 0x3F
   797                                  	; L_constants + 2669:
   798 00000A6D 03                      	db T_string	; "string-downcase"
   799 00000A6E 0F00000000000000        	dq 15
   800 00000A76 737472696E672D64        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x64
   801 00000A7E 6F776E63617365          	db 0x6F, 0x77, 0x6E, 0x63, 0x61, 0x73, 0x65
   802                                  	; L_constants + 2693:
   803 00000A85 03                      	db T_string	; "string-upcase"
   804 00000A86 0D00000000000000        	dq 13
   805 00000A8E 737472696E672D75        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x75
   806 00000A96 7063617365              	db 0x70, 0x63, 0x61, 0x73, 0x65
   807                                  	; L_constants + 2715:
   808 00000A9B 03                      	db T_string	; "list->string"
   809 00000A9C 0C00000000000000        	dq 12
   810 00000AA4 6C6973742D3E7374        	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x73, 0x74
   811 00000AAC 72696E67                	db 0x72, 0x69, 0x6E, 0x67
   812                                  	; L_constants + 2736:
   813 00000AB0 03                      	db T_string	; "string->list"
   814 00000AB1 0C00000000000000        	dq 12
   815 00000AB9 737472696E672D3E        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x3E
   816 00000AC1 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   817                                  	; L_constants + 2757:
   818 00000AC5 03                      	db T_string	; "string<?"
   819 00000AC6 0800000000000000        	dq 8
   820 00000ACE 737472696E673C3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3F
   821                                  	; L_constants + 2774:
   822 00000AD6 03                      	db T_string	; "string<=?"
   823 00000AD7 0900000000000000        	dq 9
   824 00000ADF 737472696E673C3D        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3D
   825 00000AE7 3F                      	db 0x3F
   826                                  	; L_constants + 2792:
   827 00000AE8 03                      	db T_string	; "string=?"
   828 00000AE9 0800000000000000        	dq 8
   829 00000AF1 737472696E673D3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3D, 0x3F
   830                                  	; L_constants + 2809:
   831 00000AF9 03                      	db T_string	; "string>=?"
   832 00000AFA 0900000000000000        	dq 9
   833 00000B02 737472696E673E3D        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3D
   834 00000B0A 3F                      	db 0x3F
   835                                  	; L_constants + 2827:
   836 00000B0B 03                      	db T_string	; "string>?"
   837 00000B0C 0800000000000000        	dq 8
   838 00000B14 737472696E673E3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3F
   839                                  	; L_constants + 2844:
   840 00000B1C 03                      	db T_string	; "string-ci<?"
   841 00000B1D 0B00000000000000        	dq 11
   842 00000B25 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   843 00000B2D 693C3F                  	db 0x69, 0x3C, 0x3F
   844                                  	; L_constants + 2864:
   845 00000B30 03                      	db T_string	; "string-ci<=?"
   846 00000B31 0C00000000000000        	dq 12
   847 00000B39 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   848 00000B41 693C3D3F                	db 0x69, 0x3C, 0x3D, 0x3F
   849                                  	; L_constants + 2885:
   850 00000B45 03                      	db T_string	; "string-ci=?"
   851 00000B46 0B00000000000000        	dq 11
   852 00000B4E 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   853 00000B56 693D3F                  	db 0x69, 0x3D, 0x3F
   854                                  	; L_constants + 2905:
   855 00000B59 03                      	db T_string	; "string-ci>=?"
   856 00000B5A 0C00000000000000        	dq 12
   857 00000B62 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   858 00000B6A 693E3D3F                	db 0x69, 0x3E, 0x3D, 0x3F
   859                                  	; L_constants + 2926:
   860 00000B6E 03                      	db T_string	; "string-ci>?"
   861 00000B6F 0B00000000000000        	dq 11
   862 00000B77 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   863 00000B7F 693E3F                  	db 0x69, 0x3E, 0x3F
   864                                  	; L_constants + 2946:
   865 00000B82 41                      	db T_interned_symbol	; make-vector
   866 00000B83 [4804000000000000]      	dq L_constants + 1096
   867                                  	; L_constants + 2955:
   868 00000B8B 03                      	db T_string	; "Usage: (make-vector...
   869 00000B8C 2B00000000000000        	dq 43
   870 00000B94 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   871 00000B9C 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   872 00000BA4 746F722073697A65        	db 0x74, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x7A, 0x65
   873 00000BAC 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   874 00000BB4 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   875 00000BBC 6C7429                  	db 0x6C, 0x74, 0x29
   876                                  	; L_constants + 3007:
   877 00000BBF 41                      	db T_interned_symbol	; make-string
   878 00000BC0 [5C04000000000000]      	dq L_constants + 1116
   879                                  	; L_constants + 3016:
   880 00000BC8 03                      	db T_string	; "Usage: (make-string...
   881 00000BC9 2B00000000000000        	dq 43
   882 00000BD1 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   883 00000BD9 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   884 00000BE1 696E672073697A65        	db 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x7A, 0x65
   885 00000BE9 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   886 00000BF1 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   887 00000BF9 6C7429                  	db 0x6C, 0x74, 0x29
   888                                  	; L_constants + 3068:
   889 00000BFC 03                      	db T_string	; "list->vector"
   890 00000BFD 0C00000000000000        	dq 12
   891 00000C05 6C6973742D3E7665        	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x76, 0x65
   892 00000C0D 63746F72                	db 0x63, 0x74, 0x6F, 0x72
   893                                  	; L_constants + 3089:
   894 00000C11 03                      	db T_string	; "vector"
   895 00000C12 0600000000000000        	dq 6
   896 00000C1A 766563746F72            	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72
   897                                  	; L_constants + 3104:
   898 00000C20 03                      	db T_string	; "vector->list"
   899 00000C21 0C00000000000000        	dq 12
   900 00000C29 766563746F722D3E        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x3E
   901 00000C31 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   902                                  	; L_constants + 3125:
   903 00000C35 03                      	db T_string	; "random"
   904 00000C36 0600000000000000        	dq 6
   905 00000C3E 72616E646F6D            	db 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D
   906                                  	; L_constants + 3140:
   907 00000C44 03                      	db T_string	; "positive?"
   908 00000C45 0900000000000000        	dq 9
   909 00000C4D 706F736974697665        	db 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65
   910 00000C55 3F                      	db 0x3F
   911                                  	; L_constants + 3158:
   912 00000C56 03                      	db T_string	; "negative?"
   913 00000C57 0900000000000000        	dq 9
   914 00000C5F 6E65676174697665        	db 0x6E, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65
   915 00000C67 3F                      	db 0x3F
   916                                  	; L_constants + 3176:
   917 00000C68 03                      	db T_string	; "even?"
   918 00000C69 0500000000000000        	dq 5
   919 00000C71 6576656E3F              	db 0x65, 0x76, 0x65, 0x6E, 0x3F
   920                                  	; L_constants + 3190:
   921 00000C76 11                      	db T_integer	; 2
   922 00000C77 0200000000000000        	dq 2
   923                                  	; L_constants + 3199:
   924 00000C7F 03                      	db T_string	; "odd?"
   925 00000C80 0400000000000000        	dq 4
   926 00000C88 6F64643F                	db 0x6F, 0x64, 0x64, 0x3F
   927                                  	; L_constants + 3212:
   928 00000C8C 03                      	db T_string	; "abs"
   929 00000C8D 0300000000000000        	dq 3
   930 00000C95 616273                  	db 0x61, 0x62, 0x73
   931                                  	; L_constants + 3224:
   932 00000C98 03                      	db T_string	; "equal?"
   933 00000C99 0600000000000000        	dq 6
   934 00000CA1 657175616C3F            	db 0x65, 0x71, 0x75, 0x61, 0x6C, 0x3F
   935                                  	; L_constants + 3239:
   936 00000CA7 03                      	db T_string	; "assoc"
   937 00000CA8 0500000000000000        	dq 5
   938 00000CB0 6173736F63              	db 0x61, 0x73, 0x73, 0x6F, 0x63
   939                                  	; L_constants + 3253:
   940 00000CB5 03                      	db T_string	; "string-append"
   941 00000CB6 0D00000000000000        	dq 13
   942 00000CBE 737472696E672D61        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x61
   943 00000CC6 7070656E64              	db 0x70, 0x70, 0x65, 0x6E, 0x64
   944                                  	; L_constants + 3275:
   945 00000CCB 03                      	db T_string	; "vector-append"
   946 00000CCC 0D00000000000000        	dq 13
   947 00000CD4 766563746F722D61        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x61
   948 00000CDC 7070656E64              	db 0x70, 0x70, 0x65, 0x6E, 0x64
   949                                  	; L_constants + 3297:
   950 00000CE1 03                      	db T_string	; "string-reverse"
   951 00000CE2 0E00000000000000        	dq 14
   952 00000CEA 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   953 00000CF2 657665727365            	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   954                                  	; L_constants + 3320:
   955 00000CF8 03                      	db T_string	; "vector-reverse"
   956 00000CF9 0E00000000000000        	dq 14
   957 00000D01 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   958 00000D09 657665727365            	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   959                                  	; L_constants + 3343:
   960 00000D0F 03                      	db T_string	; "string-reverse!"
   961 00000D10 0F00000000000000        	dq 15
   962 00000D18 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   963 00000D20 65766572736521          	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
   964                                  	; L_constants + 3367:
   965 00000D27 03                      	db T_string	; "vector-reverse!"
   966 00000D28 0F00000000000000        	dq 15
   967 00000D30 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   968 00000D38 65766572736521          	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
   969                                  	; L_constants + 3391:
   970 00000D3F 03                      	db T_string	; "make-list-thunk"
   971 00000D40 0F00000000000000        	dq 15
   972 00000D48 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   973 00000D50 742D7468756E6B          	db 0x74, 0x2D, 0x74, 0x68, 0x75, 0x6E, 0x6B
   974                                  	; L_constants + 3415:
   975 00000D57 03                      	db T_string	; "make-string-thunk"
   976 00000D58 1100000000000000        	dq 17
   977 00000D60 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   978 00000D68 696E672D7468756E        	db 0x69, 0x6E, 0x67, 0x2D, 0x74, 0x68, 0x75, 0x6E
   979 00000D70 6B                      	db 0x6B
   980                                  	; L_constants + 3441:
   981 00000D71 03                      	db T_string	; "make-vector-thunk"
   982 00000D72 1100000000000000        	dq 17
   983 00000D7A 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   984 00000D82 746F722D7468756E        	db 0x74, 0x6F, 0x72, 0x2D, 0x74, 0x68, 0x75, 0x6E
   985 00000D8A 6B                      	db 0x6B
   986                                  	; L_constants + 3467:
   987 00000D8B 03                      	db T_string	; "logarithm"
   988 00000D8C 0900000000000000        	dq 9
   989 00000D94 6C6F676172697468        	db 0x6C, 0x6F, 0x67, 0x61, 0x72, 0x69, 0x74, 0x68
   990 00000D9C 6D                      	db 0x6D
   991                                  	; L_constants + 3485:
   992 00000D9D 13                      	db T_real	; 1.000000
   993 00000D9E 000000000000F03F        	dq 1.000000
   994                                  	; L_constants + 3494:
   995 00000DA6 03                      	db T_string	; "newline"
   996 00000DA7 0700000000000000        	dq 7
   997 00000DAF 6E65776C696E65          	db 0x6E, 0x65, 0x77, 0x6C, 0x69, 0x6E, 0x65
   998                                  	; L_constants + 3510:
   999 00000DB6 020A                    	db T_char, 0x0A	; #\newline
  1000                                  	; L_constants + 3512:
  1001 00000DB8 03                      	db T_string	; "void"
  1002 00000DB9 0400000000000000        	dq 4
  1003 00000DC1 766F6964                	db 0x76, 0x6F, 0x69, 0x64
  1004                                  	; L_constants + 3525:
  1005 00000DC5 11                      	db T_integer	; 3
  1006 00000DC6 0300000000000000        	dq 3
  1007                                  	; L_constants + 3534:
  1008 00000DCE 11                      	db T_integer	; 4
  1009 00000DCF 0400000000000000        	dq 4
  1010                                  free_var_0:	; location of *
  1011 00000DD7 [DF0D000000000000]      	dq .undefined_object
  1012                                  .undefined_object:
  1013 00000DDF 05                      	db T_undefined
  1014 00000DE0 [D408000000000000]      	dq L_constants + 2260
  1015                                  
  1016                                  free_var_1:	; location of +
  1017 00000DE8 [F00D000000000000]      	dq .undefined_object
  1018                                  .undefined_object:
  1019 00000DF0 05                      	db T_undefined
  1020 00000DF1 [4D08000000000000]      	dq L_constants + 2125
  1021                                  
  1022                                  free_var_2:	; location of -
  1023 00000DF9 [010E000000000000]      	dq .undefined_object
  1024                                  .undefined_object:
  1025 00000E01 05                      	db T_undefined
  1026 00000E02 [B408000000000000]      	dq L_constants + 2228
  1027                                  
  1028                                  free_var_3:	; location of /
  1029 00000E0A [120E000000000000]      	dq .undefined_object
  1030                                  .undefined_object:
  1031 00000E12 05                      	db T_undefined
  1032 00000E13 [F008000000000000]      	dq L_constants + 2288
  1033                                  
  1034                                  free_var_4:	; location of <
  1035 00000E1B [230E000000000000]      	dq .undefined_object
  1036                                  .undefined_object:
  1037 00000E23 05                      	db T_undefined
  1038 00000E24 [1009000000000000]      	dq L_constants + 2320
  1039                                  
  1040                                  free_var_5:	; location of <=
  1041 00000E2C [340E000000000000]      	dq .undefined_object
  1042                                  .undefined_object:
  1043 00000E34 05                      	db T_undefined
  1044 00000E35 [1A09000000000000]      	dq L_constants + 2330
  1045                                  
  1046                                  free_var_6:	; location of =
  1047 00000E3D [450E000000000000]      	dq .undefined_object
  1048                                  .undefined_object:
  1049 00000E45 05                      	db T_undefined
  1050 00000E46 [3A09000000000000]      	dq L_constants + 2362
  1051                                  
  1052                                  free_var_7:	; location of >
  1053 00000E4E [560E000000000000]      	dq .undefined_object
  1054                                  .undefined_object:
  1055 00000E56 05                      	db T_undefined
  1056 00000E57 [2509000000000000]      	dq L_constants + 2341
  1057                                  
  1058                                  free_var_8:	; location of >=
  1059 00000E5F [670E000000000000]      	dq .undefined_object
  1060                                  .undefined_object:
  1061 00000E67 05                      	db T_undefined
  1062 00000E68 [2F09000000000000]      	dq L_constants + 2351
  1063                                  
  1064                                  free_var_9:	; location of __bin-add-qq
  1065 00000E70 [780E000000000000]      	dq .undefined_object
  1066                                  .undefined_object:
  1067 00000E78 05                      	db T_undefined
  1068 00000E79 [6902000000000000]      	dq L_constants + 617
  1069                                  
  1070                                  free_var_10:	; location of __bin-add-rr
  1071 00000E81 [890E000000000000]      	dq .undefined_object
  1072                                  .undefined_object:
  1073 00000E89 05                      	db T_undefined
  1074 00000E8A [1502000000000000]      	dq L_constants + 533
  1075                                  
  1076                                  free_var_11:	; location of __bin-add-zz
  1077 00000E92 [9A0E000000000000]      	dq .undefined_object
  1078                                  .undefined_object:
  1079 00000E9A 05                      	db T_undefined
  1080 00000E9B [BD02000000000000]      	dq L_constants + 701
  1081                                  
  1082                                  free_var_12:	; location of __bin-apply
  1083 00000EA3 [AB0E000000000000]      	dq .undefined_object
  1084                                  .undefined_object:
  1085 00000EAB 05                      	db T_undefined
  1086 00000EAC [0102000000000000]      	dq L_constants + 513
  1087                                  
  1088                                  free_var_13:	; location of __bin-div-qq
  1089 00000EB4 [BC0E000000000000]      	dq .undefined_object
  1090                                  .undefined_object:
  1091 00000EBC 05                      	db T_undefined
  1092 00000EBD [A802000000000000]      	dq L_constants + 680
  1093                                  
  1094                                  free_var_14:	; location of __bin-div-rr
  1095 00000EC5 [CD0E000000000000]      	dq .undefined_object
  1096                                  .undefined_object:
  1097 00000ECD 05                      	db T_undefined
  1098 00000ECE [5402000000000000]      	dq L_constants + 596
  1099                                  
  1100                                  free_var_15:	; location of __bin-div-zz
  1101 00000ED6 [DE0E000000000000]      	dq .undefined_object
  1102                                  .undefined_object:
  1103 00000EDE 05                      	db T_undefined
  1104 00000EDF [FC02000000000000]      	dq L_constants + 764
  1105                                  
  1106                                  free_var_16:	; location of __bin-equal-qq
  1107 00000EE7 [EF0E000000000000]      	dq .undefined_object
  1108                                  .undefined_object:
  1109 00000EEF 05                      	db T_undefined
  1110 00000EF0 [8703000000000000]      	dq L_constants + 903
  1111                                  
  1112                                  free_var_17:	; location of __bin-equal-rr
  1113 00000EF8 [000F000000000000]      	dq .undefined_object
  1114                                  .undefined_object:
  1115 00000F00 05                      	db T_undefined
  1116 00000F01 [7003000000000000]      	dq L_constants + 880
  1117                                  
  1118                                  free_var_18:	; location of __bin-equal-zz
  1119 00000F09 [110F000000000000]      	dq .undefined_object
  1120                                  .undefined_object:
  1121 00000F11 05                      	db T_undefined
  1122 00000F12 [9E03000000000000]      	dq L_constants + 926
  1123                                  
  1124                                  free_var_19:	; location of __bin-less-than-qq
  1125 00000F1A [220F000000000000]      	dq .undefined_object
  1126                                  .undefined_object:
  1127 00000F22 05                      	db T_undefined
  1128 00000F23 [3A03000000000000]      	dq L_constants + 826
  1129                                  
  1130                                  free_var_20:	; location of __bin-less-than-rr
  1131 00000F2B [330F000000000000]      	dq .undefined_object
  1132                                  .undefined_object:
  1133 00000F33 05                      	db T_undefined
  1134 00000F34 [1F03000000000000]      	dq L_constants + 799
  1135                                  
  1136                                  free_var_21:	; location of __bin-less-than-zz
  1137 00000F3C [440F000000000000]      	dq .undefined_object
  1138                                  .undefined_object:
  1139 00000F44 05                      	db T_undefined
  1140 00000F45 [5503000000000000]      	dq L_constants + 853
  1141                                  
  1142                                  free_var_22:	; location of __bin-mul-qq
  1143 00000F4D [550F000000000000]      	dq .undefined_object
  1144                                  .undefined_object:
  1145 00000F55 05                      	db T_undefined
  1146 00000F56 [9302000000000000]      	dq L_constants + 659
  1147                                  
  1148                                  free_var_23:	; location of __bin-mul-rr
  1149 00000F5E [660F000000000000]      	dq .undefined_object
  1150                                  .undefined_object:
  1151 00000F66 05                      	db T_undefined
  1152 00000F67 [3F02000000000000]      	dq L_constants + 575
  1153                                  
  1154                                  free_var_24:	; location of __bin-mul-zz
  1155 00000F6F [770F000000000000]      	dq .undefined_object
  1156                                  .undefined_object:
  1157 00000F77 05                      	db T_undefined
  1158 00000F78 [E702000000000000]      	dq L_constants + 743
  1159                                  
  1160                                  free_var_25:	; location of __bin-sub-qq
  1161 00000F80 [880F000000000000]      	dq .undefined_object
  1162                                  .undefined_object:
  1163 00000F88 05                      	db T_undefined
  1164 00000F89 [7E02000000000000]      	dq L_constants + 638
  1165                                  
  1166                                  free_var_26:	; location of __bin-sub-rr
  1167 00000F91 [990F000000000000]      	dq .undefined_object
  1168                                  .undefined_object:
  1169 00000F99 05                      	db T_undefined
  1170 00000F9A [2A02000000000000]      	dq L_constants + 554
  1171                                  
  1172                                  free_var_27:	; location of __bin-sub-zz
  1173 00000FA2 [AA0F000000000000]      	dq .undefined_object
  1174                                  .undefined_object:
  1175 00000FAA 05                      	db T_undefined
  1176 00000FAB [D202000000000000]      	dq L_constants + 722
  1177                                  
  1178                                  free_var_28:	; location of __bin_integer_to_fraction
  1179 00000FB3 [BB0F000000000000]      	dq .undefined_object
  1180                                  .undefined_object:
  1181 00000FBB 05                      	db T_undefined
  1182 00000FBC [6008000000000000]      	dq L_constants + 2144
  1183                                  
  1184                                  free_var_29:	; location of __integer-to-fraction
  1185 00000FC4 [CC0F000000000000]      	dq .undefined_object
  1186                                  .undefined_object:
  1187 00000FCC 05                      	db T_undefined
  1188 00000FCD [A204000000000000]      	dq L_constants + 1186
  1189                                  
  1190                                  free_var_30:	; location of abs
  1191 00000FD5 [DD0F000000000000]      	dq .undefined_object
  1192                                  .undefined_object:
  1193 00000FDD 05                      	db T_undefined
  1194 00000FDE [8C0C000000000000]      	dq L_constants + 3212
  1195                                  
  1196                                  free_var_31:	; location of andmap
  1197 00000FE6 [EE0F000000000000]      	dq .undefined_object
  1198                                  .undefined_object:
  1199 00000FEE 05                      	db T_undefined
  1200 00000FEF [FA07000000000000]      	dq L_constants + 2042
  1201                                  
  1202                                  free_var_32:	; location of append
  1203 00000FF7 [FF0F000000000000]      	dq .undefined_object
  1204                                  .undefined_object:
  1205 00000FFF 05                      	db T_undefined
  1206 00001000 [2B08000000000000]      	dq L_constants + 2091
  1207                                  
  1208                                  free_var_33:	; location of apply
  1209 00001008 [1010000000000000]      	dq .undefined_object
  1210                                  .undefined_object:
  1211 00001010 05                      	db T_undefined
  1212 00001011 [D207000000000000]      	dq L_constants + 2002
  1213                                  
  1214                                  free_var_34:	; location of assoc
  1215 00001019 [2110000000000000]      	dq .undefined_object
  1216                                  .undefined_object:
  1217 00001021 05                      	db T_undefined
  1218 00001022 [A70C000000000000]      	dq L_constants + 3239
  1219                                  
  1220                                  free_var_35:	; location of caaaar
  1221 0000102A [3210000000000000]      	dq .undefined_object
  1222                                  .undefined_object:
  1223 00001032 05                      	db T_undefined
  1224 00001033 [8106000000000000]      	dq L_constants + 1665
  1225                                  
  1226                                  free_var_36:	; location of caaadr
  1227 0000103B [4310000000000000]      	dq .undefined_object
  1228                                  .undefined_object:
  1229 00001043 05                      	db T_undefined
  1230 00001044 [9006000000000000]      	dq L_constants + 1680
  1231                                  
  1232                                  free_var_37:	; location of caaar
  1233 0000104C [5410000000000000]      	dq .undefined_object
  1234                                  .undefined_object:
  1235 00001054 05                      	db T_undefined
  1236 00001055 [1106000000000000]      	dq L_constants + 1553
  1237                                  
  1238                                  free_var_38:	; location of caadar
  1239 0000105D [6510000000000000]      	dq .undefined_object
  1240                                  .undefined_object:
  1241 00001065 05                      	db T_undefined
  1242 00001066 [9F06000000000000]      	dq L_constants + 1695
  1243                                  
  1244                                  free_var_39:	; location of caaddr
  1245 0000106E [7610000000000000]      	dq .undefined_object
  1246                                  .undefined_object:
  1247 00001076 05                      	db T_undefined
  1248 00001077 [AE06000000000000]      	dq L_constants + 1710
  1249                                  
  1250                                  free_var_40:	; location of caadr
  1251 0000107F [8710000000000000]      	dq .undefined_object
  1252                                  .undefined_object:
  1253 00001087 05                      	db T_undefined
  1254 00001088 [1F06000000000000]      	dq L_constants + 1567
  1255                                  
  1256                                  free_var_41:	; location of caar
  1257 00001090 [9810000000000000]      	dq .undefined_object
  1258                                  .undefined_object:
  1259 00001098 05                      	db T_undefined
  1260 00001099 [DD05000000000000]      	dq L_constants + 1501
  1261                                  
  1262                                  free_var_42:	; location of cadaar
  1263 000010A1 [A910000000000000]      	dq .undefined_object
  1264                                  .undefined_object:
  1265 000010A9 05                      	db T_undefined
  1266 000010AA [BD06000000000000]      	dq L_constants + 1725
  1267                                  
  1268                                  free_var_43:	; location of cadadr
  1269 000010B2 [BA10000000000000]      	dq .undefined_object
  1270                                  .undefined_object:
  1271 000010BA 05                      	db T_undefined
  1272 000010BB [CC06000000000000]      	dq L_constants + 1740
  1273                                  
  1274                                  free_var_44:	; location of cadar
  1275 000010C3 [CB10000000000000]      	dq .undefined_object
  1276                                  .undefined_object:
  1277 000010CB 05                      	db T_undefined
  1278 000010CC [2D06000000000000]      	dq L_constants + 1581
  1279                                  
  1280                                  free_var_45:	; location of caddar
  1281 000010D4 [DC10000000000000]      	dq .undefined_object
  1282                                  .undefined_object:
  1283 000010DC 05                      	db T_undefined
  1284 000010DD [DB06000000000000]      	dq L_constants + 1755
  1285                                  
  1286                                  free_var_46:	; location of cadddr
  1287 000010E5 [ED10000000000000]      	dq .undefined_object
  1288                                  .undefined_object:
  1289 000010ED 05                      	db T_undefined
  1290 000010EE [EA06000000000000]      	dq L_constants + 1770
  1291                                  
  1292                                  free_var_47:	; location of caddr
  1293 000010F6 [FE10000000000000]      	dq .undefined_object
  1294                                  .undefined_object:
  1295 000010FE 05                      	db T_undefined
  1296 000010FF [3B06000000000000]      	dq L_constants + 1595
  1297                                  
  1298                                  free_var_48:	; location of cadr
  1299 00001107 [0F11000000000000]      	dq .undefined_object
  1300                                  .undefined_object:
  1301 0000110F 05                      	db T_undefined
  1302 00001110 [EA05000000000000]      	dq L_constants + 1514
  1303                                  
  1304                                  free_var_49:	; location of car
  1305 00001118 [2011000000000000]      	dq .undefined_object
  1306                                  .undefined_object:
  1307 00001120 05                      	db T_undefined
  1308 00001121 [1501000000000000]      	dq L_constants + 277
  1309                                  
  1310                                  free_var_50:	; location of cdaaar
  1311 00001129 [3111000000000000]      	dq .undefined_object
  1312                                  .undefined_object:
  1313 00001131 05                      	db T_undefined
  1314 00001132 [F906000000000000]      	dq L_constants + 1785
  1315                                  
  1316                                  free_var_51:	; location of cdaadr
  1317 0000113A [4211000000000000]      	dq .undefined_object
  1318                                  .undefined_object:
  1319 00001142 05                      	db T_undefined
  1320 00001143 [0807000000000000]      	dq L_constants + 1800
  1321                                  
  1322                                  free_var_52:	; location of cdaar
  1323 0000114B [5311000000000000]      	dq .undefined_object
  1324                                  .undefined_object:
  1325 00001153 05                      	db T_undefined
  1326 00001154 [4906000000000000]      	dq L_constants + 1609
  1327                                  
  1328                                  free_var_53:	; location of cdadar
  1329 0000115C [6411000000000000]      	dq .undefined_object
  1330                                  .undefined_object:
  1331 00001164 05                      	db T_undefined
  1332 00001165 [1707000000000000]      	dq L_constants + 1815
  1333                                  
  1334                                  free_var_54:	; location of cdaddr
  1335 0000116D [7511000000000000]      	dq .undefined_object
  1336                                  .undefined_object:
  1337 00001175 05                      	db T_undefined
  1338 00001176 [2607000000000000]      	dq L_constants + 1830
  1339                                  
  1340                                  free_var_55:	; location of cdadr
  1341 0000117E [8611000000000000]      	dq .undefined_object
  1342                                  .undefined_object:
  1343 00001186 05                      	db T_undefined
  1344 00001187 [5706000000000000]      	dq L_constants + 1623
  1345                                  
  1346                                  free_var_56:	; location of cdar
  1347 0000118F [9711000000000000]      	dq .undefined_object
  1348                                  .undefined_object:
  1349 00001197 05                      	db T_undefined
  1350 00001198 [F705000000000000]      	dq L_constants + 1527
  1351                                  
  1352                                  free_var_57:	; location of cddaar
  1353 000011A0 [A811000000000000]      	dq .undefined_object
  1354                                  .undefined_object:
  1355 000011A8 05                      	db T_undefined
  1356 000011A9 [3507000000000000]      	dq L_constants + 1845
  1357                                  
  1358                                  free_var_58:	; location of cddadr
  1359 000011B1 [B911000000000000]      	dq .undefined_object
  1360                                  .undefined_object:
  1361 000011B9 05                      	db T_undefined
  1362 000011BA [4407000000000000]      	dq L_constants + 1860
  1363                                  
  1364                                  free_var_59:	; location of cddar
  1365 000011C2 [CA11000000000000]      	dq .undefined_object
  1366                                  .undefined_object:
  1367 000011CA 05                      	db T_undefined
  1368 000011CB [6506000000000000]      	dq L_constants + 1637
  1369                                  
  1370                                  free_var_60:	; location of cdddar
  1371 000011D3 [DB11000000000000]      	dq .undefined_object
  1372                                  .undefined_object:
  1373 000011DB 05                      	db T_undefined
  1374 000011DC [5307000000000000]      	dq L_constants + 1875
  1375                                  
  1376                                  free_var_61:	; location of cddddr
  1377 000011E4 [EC11000000000000]      	dq .undefined_object
  1378                                  .undefined_object:
  1379 000011EC 05                      	db T_undefined
  1380 000011ED [6207000000000000]      	dq L_constants + 1890
  1381                                  
  1382                                  free_var_62:	; location of cdddr
  1383 000011F5 [FD11000000000000]      	dq .undefined_object
  1384                                  .undefined_object:
  1385 000011FD 05                      	db T_undefined
  1386 000011FE [7306000000000000]      	dq L_constants + 1651
  1387                                  
  1388                                  free_var_63:	; location of cddr
  1389 00001206 [0E12000000000000]      	dq .undefined_object
  1390                                  .undefined_object:
  1391 0000120E 05                      	db T_undefined
  1392 0000120F [0406000000000000]      	dq L_constants + 1540
  1393                                  
  1394                                  free_var_64:	; location of cdr
  1395 00001217 [1F12000000000000]      	dq .undefined_object
  1396                                  .undefined_object:
  1397 0000121F 05                      	db T_undefined
  1398 00001220 [2101000000000000]      	dq L_constants + 289
  1399                                  
  1400                                  free_var_65:	; location of char->integer
  1401 00001228 [3012000000000000]      	dq .undefined_object
  1402                                  .undefined_object:
  1403 00001230 05                      	db T_undefined
  1404 00001231 [A901000000000000]      	dq L_constants + 425
  1405                                  
  1406                                  free_var_66:	; location of char-ci<=?
  1407 00001239 [4112000000000000]      	dq .undefined_object
  1408                                  .undefined_object:
  1409 00001241 05                      	db T_undefined
  1410 00001242 [230A000000000000]      	dq L_constants + 2595
  1411                                  
  1412                                  free_var_67:	; location of char-ci<?
  1413 0000124A [5212000000000000]      	dq .undefined_object
  1414                                  .undefined_object:
  1415 00001252 05                      	db T_undefined
  1416 00001253 [110A000000000000]      	dq L_constants + 2577
  1417                                  
  1418                                  free_var_68:	; location of char-ci=?
  1419 0000125B [6312000000000000]      	dq .undefined_object
  1420                                  .undefined_object:
  1421 00001263 05                      	db T_undefined
  1422 00001264 [360A000000000000]      	dq L_constants + 2614
  1423                                  
  1424                                  free_var_69:	; location of char-ci>=?
  1425 0000126C [7412000000000000]      	dq .undefined_object
  1426                                  .undefined_object:
  1427 00001274 05                      	db T_undefined
  1428 00001275 [5A0A000000000000]      	dq L_constants + 2650
  1429                                  
  1430                                  free_var_70:	; location of char-ci>?
  1431 0000127D [8512000000000000]      	dq .undefined_object
  1432                                  .undefined_object:
  1433 00001285 05                      	db T_undefined
  1434 00001286 [480A000000000000]      	dq L_constants + 2632
  1435                                  
  1436                                  free_var_71:	; location of char-downcase
  1437 0000128E [9612000000000000]      	dq .undefined_object
  1438                                  .undefined_object:
  1439 00001296 05                      	db T_undefined
  1440 00001297 [DF09000000000000]      	dq L_constants + 2527
  1441                                  
  1442                                  free_var_72:	; location of char-upcase
  1443 0000129F [A712000000000000]      	dq .undefined_object
  1444                                  .undefined_object:
  1445 000012A7 05                      	db T_undefined
  1446 000012A8 [F509000000000000]      	dq L_constants + 2549
  1447                                  
  1448                                  free_var_73:	; location of char<=?
  1449 000012B0 [B812000000000000]      	dq .undefined_object
  1450                                  .undefined_object:
  1451 000012B8 05                      	db T_undefined
  1452 000012B9 [A109000000000000]      	dq L_constants + 2465
  1453                                  
  1454                                  free_var_74:	; location of char<?
  1455 000012C1 [C912000000000000]      	dq .undefined_object
  1456                                  .undefined_object:
  1457 000012C9 05                      	db T_undefined
  1458 000012CA [9209000000000000]      	dq L_constants + 2450
  1459                                  
  1460                                  free_var_75:	; location of char=?
  1461 000012D2 [DA12000000000000]      	dq .undefined_object
  1462                                  .undefined_object:
  1463 000012DA 05                      	db T_undefined
  1464 000012DB [B109000000000000]      	dq L_constants + 2481
  1465                                  
  1466                                  free_var_76:	; location of char>=?
  1467 000012E3 [EB12000000000000]      	dq .undefined_object
  1468                                  .undefined_object:
  1469 000012EB 05                      	db T_undefined
  1470 000012EC [CF09000000000000]      	dq L_constants + 2511
  1471                                  
  1472                                  free_var_77:	; location of char>?
  1473 000012F4 [FC12000000000000]      	dq .undefined_object
  1474                                  .undefined_object:
  1475 000012FC 05                      	db T_undefined
  1476 000012FD [C009000000000000]      	dq L_constants + 2496
  1477                                  
  1478                                  free_var_78:	; location of char?
  1479 00001305 [0D13000000000000]      	dq .undefined_object
  1480                                  .undefined_object:
  1481 0000130D 05                      	db T_undefined
  1482 0000130E [3000000000000000]      	dq L_constants + 48
  1483                                  
  1484                                  free_var_79:	; location of cons
  1485 00001316 [1E13000000000000]      	dq .undefined_object
  1486                                  .undefined_object:
  1487 0000131E 05                      	db T_undefined
  1488 0000131F [DF00000000000000]      	dq L_constants + 223
  1489                                  
  1490                                  free_var_80:	; location of eq?
  1491 00001327 [2F13000000000000]      	dq .undefined_object
  1492                                  .undefined_object:
  1493 0000132F 05                      	db T_undefined
  1494 00001330 [9604000000000000]      	dq L_constants + 1174
  1495                                  
  1496                                  free_var_81:	; location of equal?
  1497 00001338 [4013000000000000]      	dq .undefined_object
  1498                                  .undefined_object:
  1499 00001340 05                      	db T_undefined
  1500 00001341 [980C000000000000]      	dq L_constants + 3224
  1501                                  
  1502                                  free_var_82:	; location of error
  1503 00001349 [5113000000000000]      	dq .undefined_object
  1504                                  .undefined_object:
  1505 00001351 05                      	db T_undefined
  1506 00001352 [1103000000000000]      	dq L_constants + 785
  1507                                  
  1508                                  free_var_83:	; location of even?
  1509 0000135A [6213000000000000]      	dq .undefined_object
  1510                                  .undefined_object:
  1511 00001362 05                      	db T_undefined
  1512 00001363 [680C000000000000]      	dq L_constants + 3176
  1513                                  
  1514                                  free_var_84:	; location of fact
  1515 0000136B [7313000000000000]      	dq .undefined_object
  1516                                  .undefined_object:
  1517 00001373 05                      	db T_undefined
  1518 00001374 [0309000000000000]      	dq L_constants + 2307
  1519                                  
  1520                                  free_var_85:	; location of fold-left
  1521 0000137C [8413000000000000]      	dq .undefined_object
  1522                                  .undefined_object:
  1523 00001384 05                      	db T_undefined
  1524 00001385 [1908000000000000]      	dq L_constants + 2073
  1525                                  
  1526                                  free_var_86:	; location of fold-right
  1527 0000138D [9513000000000000]      	dq .undefined_object
  1528                                  .undefined_object:
  1529 00001395 05                      	db T_undefined
  1530 00001396 [3A08000000000000]      	dq L_constants + 2106
  1531                                  
  1532                                  free_var_87:	; location of fraction->real
  1533 0000139E [A613000000000000]      	dq .undefined_object
  1534                                  .undefined_object:
  1535 000013A6 05                      	db T_undefined
  1536 000013A7 [9201000000000000]      	dq L_constants + 402
  1537                                  
  1538                                  free_var_88:	; location of fraction?
  1539 000013AF [B713000000000000]      	dq .undefined_object
  1540                                  .undefined_object:
  1541 000013B7 05                      	db T_undefined
  1542 000013B8 [9800000000000000]      	dq L_constants + 152
  1543                                  
  1544                                  free_var_89:	; location of integer->char
  1545 000013C0 [C813000000000000]      	dq .undefined_object
  1546                                  .undefined_object:
  1547 000013C8 05                      	db T_undefined
  1548 000013C9 [BF01000000000000]      	dq L_constants + 447
  1549                                  
  1550                                  free_var_90:	; location of integer->real
  1551 000013D1 [D913000000000000]      	dq .undefined_object
  1552                                  .undefined_object:
  1553 000013D9 05                      	db T_undefined
  1554 000013DA [7C01000000000000]      	dq L_constants + 380
  1555                                  
  1556                                  free_var_91:	; location of integer?
  1557 000013E2 [EA13000000000000]      	dq .undefined_object
  1558                                  .undefined_object:
  1559 000013EA 05                      	db T_undefined
  1560 000013EB [F001000000000000]      	dq L_constants + 496
  1561                                  
  1562                                  free_var_92:	; location of list
  1563 000013F3 [FB13000000000000]      	dq .undefined_object
  1564                                  .undefined_object:
  1565 000013FB 05                      	db T_undefined
  1566 000013FC [7F07000000000000]      	dq L_constants + 1919
  1567                                  
  1568                                  free_var_93:	; location of list*
  1569 00001404 [0C14000000000000]      	dq .undefined_object
  1570                                  .undefined_object:
  1571 0000140C 05                      	db T_undefined
  1572 0000140D [AA07000000000000]      	dq L_constants + 1962
  1573                                  
  1574                                  free_var_94:	; location of list->string
  1575 00001415 [1D14000000000000]      	dq .undefined_object
  1576                                  .undefined_object:
  1577 0000141D 05                      	db T_undefined
  1578 0000141E [9B0A000000000000]      	dq L_constants + 2715
  1579                                  
  1580                                  free_var_95:	; location of list->vector
  1581 00001426 [2E14000000000000]      	dq .undefined_object
  1582                                  .undefined_object:
  1583 0000142E 05                      	db T_undefined
  1584 0000142F [FC0B000000000000]      	dq L_constants + 3068
  1585                                  
  1586                                  free_var_96:	; location of list?
  1587 00001437 [3F14000000000000]      	dq .undefined_object
  1588                                  .undefined_object:
  1589 0000143F 05                      	db T_undefined
  1590 00001440 [7107000000000000]      	dq L_constants + 1905
  1591                                  
  1592                                  free_var_97:	; location of logarithm
  1593 00001448 [5014000000000000]      	dq .undefined_object
  1594                                  .undefined_object:
  1595 00001450 05                      	db T_undefined
  1596 00001451 [8B0D000000000000]      	dq L_constants + 3467
  1597                                  
  1598                                  free_var_98:	; location of make-list-thunk
  1599 00001459 [6114000000000000]      	dq .undefined_object
  1600                                  .undefined_object:
  1601 00001461 05                      	db T_undefined
  1602 00001462 [3F0D000000000000]      	dq L_constants + 3391
  1603                                  
  1604                                  free_var_99:	; location of make-string
  1605 0000146A [7214000000000000]      	dq .undefined_object
  1606                                  .undefined_object:
  1607 00001472 05                      	db T_undefined
  1608 00001473 [5C04000000000000]      	dq L_constants + 1116
  1609                                  
  1610                                  free_var_100:	; location of make-string-thunk
  1611 0000147B [8314000000000000]      	dq .undefined_object
  1612                                  .undefined_object:
  1613 00001483 05                      	db T_undefined
  1614 00001484 [570D000000000000]      	dq L_constants + 3415
  1615                                  
  1616                                  free_var_101:	; location of make-vector
  1617 0000148C [9414000000000000]      	dq .undefined_object
  1618                                  .undefined_object:
  1619 00001494 05                      	db T_undefined
  1620 00001495 [4804000000000000]      	dq L_constants + 1096
  1621                                  
  1622                                  free_var_102:	; location of make-vector-thunk
  1623 0000149D [A514000000000000]      	dq .undefined_object
  1624                                  .undefined_object:
  1625 000014A5 05                      	db T_undefined
  1626 000014A6 [710D000000000000]      	dq L_constants + 3441
  1627                                  
  1628                                  free_var_103:	; location of map
  1629 000014AE [B614000000000000]      	dq .undefined_object
  1630                                  .undefined_object:
  1631 000014B6 05                      	db T_undefined
  1632 000014B7 [EE07000000000000]      	dq L_constants + 2030
  1633                                  
  1634                                  free_var_104:	; location of negative?
  1635 000014BF [C714000000000000]      	dq .undefined_object
  1636                                  .undefined_object:
  1637 000014C7 05                      	db T_undefined
  1638 000014C8 [560C000000000000]      	dq L_constants + 3158
  1639                                  
  1640                                  free_var_105:	; location of newline
  1641 000014D0 [D814000000000000]      	dq .undefined_object
  1642                                  .undefined_object:
  1643 000014D8 05                      	db T_undefined
  1644 000014D9 [A60D000000000000]      	dq L_constants + 3494
  1645                                  
  1646                                  free_var_106:	; location of not
  1647 000014E1 [E914000000000000]      	dq .undefined_object
  1648                                  .undefined_object:
  1649 000014E9 05                      	db T_undefined
  1650 000014EA [8C07000000000000]      	dq L_constants + 1932
  1651                                  
  1652                                  free_var_107:	; location of null?
  1653 000014F2 [FA14000000000000]      	dq .undefined_object
  1654                                  .undefined_object:
  1655 000014FA 05                      	db T_undefined
  1656 000014FB [0600000000000000]      	dq L_constants + 6
  1657                                  
  1658                                  free_var_108:	; location of number?
  1659 00001503 [0B15000000000000]      	dq .undefined_object
  1660                                  .undefined_object:
  1661 0000150B 05                      	db T_undefined
  1662 0000150C [BB00000000000000]      	dq L_constants + 187
  1663                                  
  1664                                  free_var_109:	; location of odd?
  1665 00001514 [1C15000000000000]      	dq .undefined_object
  1666                                  .undefined_object:
  1667 0000151C 05                      	db T_undefined
  1668 0000151D [7F0C000000000000]      	dq L_constants + 3199
  1669                                  
  1670                                  free_var_110:	; location of ormap
  1671 00001525 [2D15000000000000]      	dq .undefined_object
  1672                                  .undefined_object:
  1673 0000152D 05                      	db T_undefined
  1674 0000152E [E007000000000000]      	dq L_constants + 2016
  1675                                  
  1676                                  free_var_111:	; location of pair?
  1677 00001536 [3E15000000000000]      	dq .undefined_object
  1678                                  .undefined_object:
  1679 0000153E 05                      	db T_undefined
  1680 0000153F [1400000000000000]      	dq L_constants + 20
  1681                                  
  1682                                  free_var_112:	; location of positive?
  1683 00001547 [4F15000000000000]      	dq .undefined_object
  1684                                  .undefined_object:
  1685 0000154F 05                      	db T_undefined
  1686 00001550 [440C000000000000]      	dq L_constants + 3140
  1687                                  
  1688                                  free_var_113:	; location of random
  1689 00001558 [6015000000000000]      	dq .undefined_object
  1690                                  .undefined_object:
  1691 00001560 05                      	db T_undefined
  1692 00001561 [350C000000000000]      	dq L_constants + 3125
  1693                                  
  1694                                  free_var_114:	; location of rational?
  1695 00001569 [7115000000000000]      	dq .undefined_object
  1696                                  .undefined_object:
  1697 00001571 05                      	db T_undefined
  1698 00001572 [9807000000000000]      	dq L_constants + 1944
  1699                                  
  1700                                  free_var_115:	; location of real
  1701 0000157A [8215000000000000]      	dq .undefined_object
  1702                                  .undefined_object:
  1703 00001582 05                      	db T_undefined
  1704 00001583 [BE08000000000000]      	dq L_constants + 2238
  1705                                  
  1706                                  free_var_116:	; location of real?
  1707 0000158B [9315000000000000]      	dq .undefined_object
  1708                                  .undefined_object:
  1709 00001593 05                      	db T_undefined
  1710 00001594 [8A00000000000000]      	dq L_constants + 138
  1711                                  
  1712                                  free_var_117:	; location of remainder
  1713 0000159C [A415000000000000]      	dq .undefined_object
  1714                                  .undefined_object:
  1715 000015A4 05                      	db T_undefined
  1716 000015A5 [C603000000000000]      	dq L_constants + 966
  1717                                  
  1718                                  free_var_118:	; location of reverse
  1719 000015AD [B515000000000000]      	dq .undefined_object
  1720                                  .undefined_object:
  1721 000015B5 05                      	db T_undefined
  1722 000015B6 [0908000000000000]      	dq L_constants + 2057
  1723                                  
  1724                                  free_var_119:	; location of string->list
  1725 000015BE [C615000000000000]      	dq .undefined_object
  1726                                  .undefined_object:
  1727 000015C6 05                      	db T_undefined
  1728 000015C7 [B00A000000000000]      	dq L_constants + 2736
  1729                                  
  1730                                  free_var_120:	; location of string-append
  1731 000015CF [D715000000000000]      	dq .undefined_object
  1732                                  .undefined_object:
  1733 000015D7 05                      	db T_undefined
  1734 000015D8 [B50C000000000000]      	dq L_constants + 3253
  1735                                  
  1736                                  free_var_121:	; location of string-ci<=?
  1737 000015E0 [E815000000000000]      	dq .undefined_object
  1738                                  .undefined_object:
  1739 000015E8 05                      	db T_undefined
  1740 000015E9 [300B000000000000]      	dq L_constants + 2864
  1741                                  
  1742                                  free_var_122:	; location of string-ci<?
  1743 000015F1 [F915000000000000]      	dq .undefined_object
  1744                                  .undefined_object:
  1745 000015F9 05                      	db T_undefined
  1746 000015FA [1C0B000000000000]      	dq L_constants + 2844
  1747                                  
  1748                                  free_var_123:	; location of string-ci=?
  1749 00001602 [0A16000000000000]      	dq .undefined_object
  1750                                  .undefined_object:
  1751 0000160A 05                      	db T_undefined
  1752 0000160B [450B000000000000]      	dq L_constants + 2885
  1753                                  
  1754                                  free_var_124:	; location of string-ci>=?
  1755 00001613 [1B16000000000000]      	dq .undefined_object
  1756                                  .undefined_object:
  1757 0000161B 05                      	db T_undefined
  1758 0000161C [590B000000000000]      	dq L_constants + 2905
  1759                                  
  1760                                  free_var_125:	; location of string-ci>?
  1761 00001624 [2C16000000000000]      	dq .undefined_object
  1762                                  .undefined_object:
  1763 0000162C 05                      	db T_undefined
  1764 0000162D [6E0B000000000000]      	dq L_constants + 2926
  1765                                  
  1766                                  free_var_126:	; location of string-downcase
  1767 00001635 [3D16000000000000]      	dq .undefined_object
  1768                                  .undefined_object:
  1769 0000163D 05                      	db T_undefined
  1770 0000163E [6D0A000000000000]      	dq L_constants + 2669
  1771                                  
  1772                                  free_var_127:	; location of string-length
  1773 00001646 [4E16000000000000]      	dq .undefined_object
  1774                                  .undefined_object:
  1775 0000164E 05                      	db T_undefined
  1776 0000164F [2D01000000000000]      	dq L_constants + 301
  1777                                  
  1778                                  free_var_128:	; location of string-ref
  1779 00001657 [5F16000000000000]      	dq .undefined_object
  1780                                  .undefined_object:
  1781 0000165F 05                      	db T_undefined
  1782 00001660 [FA03000000000000]      	dq L_constants + 1018
  1783                                  
  1784                                  free_var_129:	; location of string-reverse
  1785 00001668 [7016000000000000]      	dq .undefined_object
  1786                                  .undefined_object:
  1787 00001670 05                      	db T_undefined
  1788 00001671 [E10C000000000000]      	dq L_constants + 3297
  1789                                  
  1790                                  free_var_130:	; location of string-reverse!
  1791 00001679 [8116000000000000]      	dq .undefined_object
  1792                                  .undefined_object:
  1793 00001681 05                      	db T_undefined
  1794 00001682 [0F0D000000000000]      	dq L_constants + 3343
  1795                                  
  1796                                  free_var_131:	; location of string-set!
  1797 0000168A [9216000000000000]      	dq .undefined_object
  1798                                  .undefined_object:
  1799 00001692 05                      	db T_undefined
  1800 00001693 [3404000000000000]      	dq L_constants + 1076
  1801                                  
  1802                                  free_var_132:	; location of string-upcase
  1803 0000169B [A316000000000000]      	dq .undefined_object
  1804                                  .undefined_object:
  1805 000016A3 05                      	db T_undefined
  1806 000016A4 [850A000000000000]      	dq L_constants + 2693
  1807                                  
  1808                                  free_var_133:	; location of string<=?
  1809 000016AC [B416000000000000]      	dq .undefined_object
  1810                                  .undefined_object:
  1811 000016B4 05                      	db T_undefined
  1812 000016B5 [D60A000000000000]      	dq L_constants + 2774
  1813                                  
  1814                                  free_var_134:	; location of string<?
  1815 000016BD [C516000000000000]      	dq .undefined_object
  1816                                  .undefined_object:
  1817 000016C5 05                      	db T_undefined
  1818 000016C6 [C50A000000000000]      	dq L_constants + 2757
  1819                                  
  1820                                  free_var_135:	; location of string=?
  1821 000016CE [D616000000000000]      	dq .undefined_object
  1822                                  .undefined_object:
  1823 000016D6 05                      	db T_undefined
  1824 000016D7 [E80A000000000000]      	dq L_constants + 2792
  1825                                  
  1826                                  free_var_136:	; location of string>=?
  1827 000016DF [E716000000000000]      	dq .undefined_object
  1828                                  .undefined_object:
  1829 000016E7 05                      	db T_undefined
  1830 000016E8 [F90A000000000000]      	dq L_constants + 2809
  1831                                  
  1832                                  free_var_137:	; location of string>?
  1833 000016F0 [F816000000000000]      	dq .undefined_object
  1834                                  .undefined_object:
  1835 000016F8 05                      	db T_undefined
  1836 000016F9 [0B0B000000000000]      	dq L_constants + 2827
  1837                                  
  1838                                  free_var_138:	; location of string?
  1839 00001701 [0917000000000000]      	dq .undefined_object
  1840                                  .undefined_object:
  1841 00001709 05                      	db T_undefined
  1842 0000170A [3E00000000000000]      	dq L_constants + 62
  1843                                  
  1844                                  free_var_139:	; location of trng
  1845 00001712 [1A17000000000000]      	dq .undefined_object
  1846                                  .undefined_object:
  1847 0000171A 05                      	db T_undefined
  1848 0000171B [D501000000000000]      	dq L_constants + 469
  1849                                  
  1850                                  free_var_140:	; location of vector
  1851 00001723 [2B17000000000000]      	dq .undefined_object
  1852                                  .undefined_object:
  1853 0000172B 05                      	db T_undefined
  1854 0000172C [110C000000000000]      	dq L_constants + 3089
  1855                                  
  1856                                  free_var_141:	; location of vector->list
  1857 00001734 [3C17000000000000]      	dq .undefined_object
  1858                                  .undefined_object:
  1859 0000173C 05                      	db T_undefined
  1860 0000173D [200C000000000000]      	dq L_constants + 3104
  1861                                  
  1862                                  free_var_142:	; location of vector-append
  1863 00001745 [4D17000000000000]      	dq .undefined_object
  1864                                  .undefined_object:
  1865 0000174D 05                      	db T_undefined
  1866 0000174E [CB0C000000000000]      	dq L_constants + 3275
  1867                                  
  1868                                  free_var_143:	; location of vector-length
  1869 00001756 [5E17000000000000]      	dq .undefined_object
  1870                                  .undefined_object:
  1871 0000175E 05                      	db T_undefined
  1872 0000175F [4301000000000000]      	dq L_constants + 323
  1873                                  
  1874                                  free_var_144:	; location of vector-ref
  1875 00001767 [6F17000000000000]      	dq .undefined_object
  1876                                  .undefined_object:
  1877 0000176F 05                      	db T_undefined
  1878 00001770 [0D04000000000000]      	dq L_constants + 1037
  1879                                  
  1880                                  free_var_145:	; location of vector-reverse
  1881 00001778 [8017000000000000]      	dq .undefined_object
  1882                                  .undefined_object:
  1883 00001780 05                      	db T_undefined
  1884 00001781 [F80C000000000000]      	dq L_constants + 3320
  1885                                  
  1886                                  free_var_146:	; location of vector-reverse!
  1887 00001789 [9117000000000000]      	dq .undefined_object
  1888                                  .undefined_object:
  1889 00001791 05                      	db T_undefined
  1890 00001792 [270D000000000000]      	dq L_constants + 3367
  1891                                  
  1892                                  free_var_147:	; location of vector-set!
  1893 0000179A [A217000000000000]      	dq .undefined_object
  1894                                  .undefined_object:
  1895 000017A2 05                      	db T_undefined
  1896 000017A3 [2004000000000000]      	dq L_constants + 1056
  1897                                  
  1898                                  free_var_148:	; location of vector?
  1899 000017AB [B317000000000000]      	dq .undefined_object
  1900                                  .undefined_object:
  1901 000017B3 05                      	db T_undefined
  1902 000017B4 [6700000000000000]      	dq L_constants + 103
  1903                                  
  1904                                  free_var_149:	; location of void
  1905 000017BC [C417000000000000]      	dq .undefined_object
  1906                                  .undefined_object:
  1907 000017C4 05                      	db T_undefined
  1908 000017C5 [B80D000000000000]      	dq L_constants + 3512
  1909                                  
  1910                                  free_var_150:	; location of write-char
  1911 000017CD [D517000000000000]      	dq .undefined_object
  1912                                  .undefined_object:
  1913 000017D5 05                      	db T_undefined
  1914 000017D6 [0201000000000000]      	dq L_constants + 258
  1915                                  
  1916                                  free_var_151:	; location of zero?
  1917 000017DE [E617000000000000]      	dq .undefined_object
  1918                                  .undefined_object:
  1919 000017E6 05                      	db T_undefined
  1920 000017E7 [E201000000000000]      	dq L_constants + 482
  1921                                  
  1922                                  
  1923                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
  1924                                  global main
  1925                                  section .text
  1926                                  main:
  1927 00000000 C8000000                        enter 0, 0
  1928 00000004 6A00                            push 0
  1929 00000006 6A00                            push 0
  1930 00000008 68[E76F0100]                    push Lend
  1931 0000000D C8000000                        enter 0, 0
  1932                                  	; building closure for null?
  1933 00000011 48BF-                   	mov rdi, free_var_107
  1933 00000013 [F214000000000000] 
  1934 0000001B 48BE-                   	mov rsi, L_code_ptr_is_null
  1934 0000001D [827B010000000000] 
  1935 00000025 E858790100              	call bind_primitive
  1936                                  
  1937                                  	; building closure for pair?
  1938 0000002A 48BF-                   	mov rdi, free_var_111
  1938 0000002C [3615000000000000] 
  1939 00000034 48BE-                   	mov rsi, L_code_ptr_is_pair
  1939 00000036 [B47B010000000000] 
  1940 0000003E E83F790100              	call bind_primitive
  1941                                  
  1942                                  	; building closure for char?
  1943 00000043 48BF-                   	mov rdi, free_var_78
  1943 00000045 [0513000000000000] 
  1944 0000004D 48BE-                   	mov rsi, L_code_ptr_is_char
  1944 0000004F [187C010000000000] 
  1945 00000057 E826790100              	call bind_primitive
  1946                                  
  1947                                  	; building closure for string?
  1948 0000005C 48BF-                   	mov rdi, free_var_138
  1948 0000005E [0117000000000000] 
  1949 00000066 48BE-                   	mov rsi, L_code_ptr_is_string
  1949 00000068 [4A7C010000000000] 
  1950 00000070 E80D790100              	call bind_primitive
  1951                                  
  1952                                  	; building closure for vector?
  1953 00000075 48BF-                   	mov rdi, free_var_148
  1953 00000077 [AB17000000000000] 
  1954 0000007F 48BE-                   	mov rsi, L_code_ptr_is_vector
  1954 00000081 [487D010000000000] 
  1955 00000089 E8F4780100              	call bind_primitive
  1956                                  
  1957                                  	; building closure for real?
  1958 0000008E 48BF-                   	mov rdi, free_var_116
  1958 00000090 [8B15000000000000] 
  1959 00000098 48BE-                   	mov rsi, L_code_ptr_is_real
  1959 0000009A [AC7D010000000000] 
  1960 000000A2 E8DB780100              	call bind_primitive
  1961                                  
  1962                                  	; building closure for fraction?
  1963 000000A7 48BF-                   	mov rdi, free_var_88
  1963 000000A9 [AF13000000000000] 
  1964 000000B1 48BE-                   	mov rsi, L_code_ptr_is_fraction
  1964 000000B3 [DE7D010000000000] 
  1965 000000BB E8C2780100              	call bind_primitive
  1966                                  
  1967                                  	; building closure for number?
  1968 000000C0 48BF-                   	mov rdi, free_var_108
  1968 000000C2 [0315000000000000] 
  1969 000000CA 48BE-                   	mov rsi, L_code_ptr_is_number
  1969 000000CC [AC7E010000000000] 
  1970 000000D4 E8A9780100              	call bind_primitive
  1971                                  
  1972                                  	; building closure for cons
  1973 000000D9 48BF-                   	mov rdi, free_var_79
  1973 000000DB [1613000000000000] 
  1974 000000E3 48BE-                   	mov rsi, L_code_ptr_cons
  1974 000000E5 [147F010000000000] 
  1975 000000ED E890780100              	call bind_primitive
  1976                                  
  1977                                  	; building closure for write-char
  1978 000000F2 48BF-                   	mov rdi, free_var_150
  1978 000000F4 [CD17000000000000] 
  1979 000000FC 48BE-                   	mov rsi, L_code_ptr_write_char
  1979 000000FE [6A7F010000000000] 
  1980 00000106 E877780100              	call bind_primitive
  1981                                  
  1982                                  	; building closure for car
  1983 0000010B 48BF-                   	mov rdi, free_var_49
  1983 0000010D [1811000000000000] 
  1984 00000115 48BE-                   	mov rsi, L_code_ptr_car
  1984 00000117 [BD7F010000000000] 
  1985 0000011F E85E780100              	call bind_primitive
  1986                                  
  1987                                  	; building closure for cdr
  1988 00000124 48BF-                   	mov rdi, free_var_64
  1988 00000126 [1712000000000000] 
  1989 0000012E 48BE-                   	mov rsi, L_code_ptr_cdr
  1989 00000130 [E17F010000000000] 
  1990 00000138 E845780100              	call bind_primitive
  1991                                  
  1992                                  	; building closure for string-length
  1993 0000013D 48BF-                   	mov rdi, free_var_127
  1993 0000013F [4616000000000000] 
  1994 00000147 48BE-                   	mov rsi, L_code_ptr_string_length
  1994 00000149 [0580010000000000] 
  1995 00000151 E82C780100              	call bind_primitive
  1996                                  
  1997                                  	; building closure for vector-length
  1998 00000156 48BF-                   	mov rdi, free_var_143
  1998 00000158 [5617000000000000] 
  1999 00000160 48BE-                   	mov rsi, L_code_ptr_vector_length
  1999 00000162 [2E80010000000000] 
  2000 0000016A E813780100              	call bind_primitive
  2001                                  
  2002                                  	; building closure for integer->real
  2003 0000016F 48BF-                   	mov rdi, free_var_90
  2003 00000171 [D113000000000000] 
  2004 00000179 48BE-                   	mov rsi, L_code_ptr_integer_to_real
  2004 0000017B [9F80010000000000] 
  2005 00000183 E8FA770100              	call bind_primitive
  2006                                  
  2007                                  	; building closure for fraction->real
  2008 00000188 48BF-                   	mov rdi, free_var_87
  2008 0000018A [9E13000000000000] 
  2009 00000192 48BE-                   	mov rsi, L_code_ptr_fraction_to_real
  2009 00000194 [CD80010000000000] 
  2010 0000019C E8E1770100              	call bind_primitive
  2011                                  
  2012                                  	; building closure for char->integer
  2013 000001A1 48BF-                   	mov rdi, free_var_65
  2013 000001A3 [2812000000000000] 
  2014 000001AB 48BE-                   	mov rsi, L_code_ptr_char_to_integer
  2014 000001AD [0881010000000000] 
  2015 000001B5 E8C8770100              	call bind_primitive
  2016                                  
  2017                                  	; building closure for integer->char
  2018 000001BA 48BF-                   	mov rdi, free_var_89
  2018 000001BC [C013000000000000] 
  2019 000001C4 48BE-                   	mov rsi, L_code_ptr_integer_to_char
  2019 000001C6 [7781010000000000] 
  2020 000001CE E8AF770100              	call bind_primitive
  2021                                  
  2022                                  	; building closure for trng
  2023 000001D3 48BF-                   	mov rdi, free_var_139
  2023 000001D5 [1217000000000000] 
  2024 000001DD 48BE-                   	mov rsi, L_code_ptr_trng
  2024 000001DF [C281010000000000] 
  2025 000001E7 E896770100              	call bind_primitive
  2026                                  
  2027                                  	; building closure for zero?
  2028 000001EC 48BF-                   	mov rdi, free_var_151
  2028 000001EE [DE17000000000000] 
  2029 000001F6 48BE-                   	mov rsi, L_code_ptr_is_zero
  2029 000001F8 [E181010000000000] 
  2030 00000200 E87D770100              	call bind_primitive
  2031                                  
  2032                                  	; building closure for integer?
  2033 00000205 48BF-                   	mov rdi, free_var_91
  2033 00000207 [E213000000000000] 
  2034 0000020F 48BE-                   	mov rsi, L_code_ptr_is_integer
  2034 00000211 [4682010000000000] 
  2035 00000219 E864770100              	call bind_primitive
  2036                                  
  2037                                  	; building closure for __bin-apply
  2038 0000021E 48BF-                   	mov rdi, free_var_12
  2038 00000220 [A30E000000000000] 
  2039 00000228 48BE-                   	mov rsi, L_code_ptr_bin_apply
  2039 0000022A [F27A010000000000] 
  2040 00000232 E84B770100              	call bind_primitive
  2041                                  
  2042                                  	; building closure for __bin-add-rr
  2043 00000237 48BF-                   	mov rdi, free_var_10
  2043 00000239 [810E000000000000] 
  2044 00000241 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
  2044 00000243 [7882010000000000] 
  2045 0000024B E832770100              	call bind_primitive
  2046                                  
  2047                                  	; building closure for __bin-sub-rr
  2048 00000250 48BF-                   	mov rdi, free_var_26
  2048 00000252 [910F000000000000] 
  2049 0000025A 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
  2049 0000025C [B882010000000000] 
  2050 00000264 E819770100              	call bind_primitive
  2051                                  
  2052                                  	; building closure for __bin-mul-rr
  2053 00000269 48BF-                   	mov rdi, free_var_23
  2053 0000026B [5E0F000000000000] 
  2054 00000273 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
  2054 00000275 [F882010000000000] 
  2055 0000027D E800770100              	call bind_primitive
  2056                                  
  2057                                  	; building closure for __bin-div-rr
  2058 00000282 48BF-                   	mov rdi, free_var_14
  2058 00000284 [C50E000000000000] 
  2059 0000028C 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
  2059 0000028E [3883010000000000] 
  2060 00000296 E8E7760100              	call bind_primitive
  2061                                  
  2062                                  	; building closure for __bin-add-qq
  2063 0000029B 48BF-                   	mov rdi, free_var_9
  2063 0000029D [700E000000000000] 
  2064 000002A5 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
  2064 000002A7 [C283010000000000] 
  2065 000002AF E8CE760100              	call bind_primitive
  2066                                  
  2067                                  	; building closure for __bin-sub-qq
  2068 000002B4 48BF-                   	mov rdi, free_var_25
  2068 000002B6 [800F000000000000] 
  2069 000002BE 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
  2069 000002C0 [6284010000000000] 
  2070 000002C8 E8B5760100              	call bind_primitive
  2071                                  
  2072                                  	; building closure for __bin-mul-qq
  2073 000002CD 48BF-                   	mov rdi, free_var_22
  2073 000002CF [4D0F000000000000] 
  2074 000002D7 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
  2074 000002D9 [0785010000000000] 
  2075 000002E1 E89C760100              	call bind_primitive
  2076                                  
  2077                                  	; building closure for __bin-div-qq
  2078 000002E6 48BF-                   	mov rdi, free_var_13
  2078 000002E8 [B40E000000000000] 
  2079 000002F0 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
  2079 000002F2 [A185010000000000] 
  2080 000002FA E883760100              	call bind_primitive
  2081                                  
  2082                                  	; building closure for __bin-add-zz
  2083 000002FF 48BF-                   	mov rdi, free_var_11
  2083 00000301 [920E000000000000] 
  2084 00000309 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_zz
  2084 0000030B [8683010000000000] 
  2085 00000313 E86A760100              	call bind_primitive
  2086                                  
  2087                                  	; building closure for __bin-sub-zz
  2088 00000318 48BF-                   	mov rdi, free_var_27
  2088 0000031A [A20F000000000000] 
  2089 00000322 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_zz
  2089 00000324 [2684010000000000] 
  2090 0000032C E851760100              	call bind_primitive
  2091                                  
  2092                                  	; building closure for __bin-mul-zz
  2093 00000331 48BF-                   	mov rdi, free_var_24
  2093 00000333 [6F0F000000000000] 
  2094 0000033B 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_zz
  2094 0000033D [C684010000000000] 
  2095 00000345 E838760100              	call bind_primitive
  2096                                  
  2097                                  	; building closure for __bin-div-zz
  2098 0000034A 48BF-                   	mov rdi, free_var_15
  2098 0000034C [D60E000000000000] 
  2099 00000354 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_zz
  2099 00000356 [5B85010000000000] 
  2100 0000035E E81F760100              	call bind_primitive
  2101                                  
  2102                                  	; building closure for error
  2103 00000363 48BF-                   	mov rdi, free_var_82
  2103 00000365 [4913000000000000] 
  2104 0000036D 48BE-                   	mov rsi, L_code_ptr_error
  2104 0000036F [8B86010000000000] 
  2105 00000377 E806760100              	call bind_primitive
  2106                                  
  2107                                  	; building closure for __bin-less-than-rr
  2108 0000037C 48BF-                   	mov rdi, free_var_20
  2108 0000037E [2B0F000000000000] 
  2109 00000386 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
  2109 00000388 [4787010000000000] 
  2110 00000390 E8ED750100              	call bind_primitive
  2111                                  
  2112                                  	; building closure for __bin-less-than-qq
  2113 00000395 48BF-                   	mov rdi, free_var_19
  2113 00000397 [1A0F000000000000] 
  2114 0000039F 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
  2114 000003A1 [E987010000000000] 
  2115 000003A9 E8D4750100              	call bind_primitive
  2116                                  
  2117                                  	; building closure for __bin-less-than-zz
  2118 000003AE 48BF-                   	mov rdi, free_var_21
  2118 000003B0 [3C0F000000000000] 
  2119 000003B8 48BE-                   	mov rsi, L_code_ptr_raw_less_than_zz
  2119 000003BA [9A87010000000000] 
  2120 000003C2 E8BB750100              	call bind_primitive
  2121                                  
  2122                                  	; building closure for __bin-equal-rr
  2123 000003C7 48BF-                   	mov rdi, free_var_17
  2123 000003C9 [F80E000000000000] 
  2124 000003D1 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
  2124 000003D3 [4888010000000000] 
  2125 000003DB E8A2750100              	call bind_primitive
  2126                                  
  2127                                  	; building closure for __bin-equal-qq
  2128 000003E0 48BF-                   	mov rdi, free_var_16
  2128 000003E2 [E70E000000000000] 
  2129 000003EA 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
  2129 000003EC [EA88010000000000] 
  2130 000003F4 E889750100              	call bind_primitive
  2131                                  
  2132                                  	; building closure for __bin-equal-zz
  2133 000003F9 48BF-                   	mov rdi, free_var_18
  2133 000003FB [090F000000000000] 
  2134 00000403 48BE-                   	mov rsi, L_code_ptr_raw_equal_zz
  2134 00000405 [9B88010000000000] 
  2135 0000040D E870750100              	call bind_primitive
  2136                                  
  2137                                  	; building closure for remainder
  2138 00000412 48BF-                   	mov rdi, free_var_117
  2138 00000414 [9C15000000000000] 
  2139 0000041C 48BE-                   	mov rsi, L_code_ptr_remainder
  2139 0000041E [9589010000000000] 
  2140 00000426 E857750100              	call bind_primitive
  2141                                  
  2142                                  	; building closure for string-ref
  2143 0000042B 48BF-                   	mov rdi, free_var_128
  2143 0000042D [5716000000000000] 
  2144 00000435 48BE-                   	mov rsi, L_code_ptr_string_ref
  2144 00000437 [458A010000000000] 
  2145 0000043F E83E750100              	call bind_primitive
  2146                                  
  2147                                  	; building closure for vector-ref
  2148 00000444 48BF-                   	mov rdi, free_var_144
  2148 00000446 [6717000000000000] 
  2149 0000044E 48BE-                   	mov rsi, L_code_ptr_vector_ref
  2149 00000450 [A18A010000000000] 
  2150 00000458 E825750100              	call bind_primitive
  2151                                  
  2152                                  	; building closure for vector-set!
  2153 0000045D 48BF-                   	mov rdi, free_var_147
  2153 0000045F [9A17000000000000] 
  2154 00000467 48BE-                   	mov rsi, L_code_ptr_vector_set
  2154 00000469 [EE8A010000000000] 
  2155 00000471 E80C750100              	call bind_primitive
  2156                                  
  2157                                  	; building closure for string-set!
  2158 00000476 48BF-                   	mov rdi, free_var_131
  2158 00000478 [8A16000000000000] 
  2159 00000480 48BE-                   	mov rsi, L_code_ptr_string_set
  2159 00000482 [498B010000000000] 
  2160 0000048A E8F3740100              	call bind_primitive
  2161                                  
  2162                                  	; building closure for make-vector
  2163 0000048F 48BF-                   	mov rdi, free_var_101
  2163 00000491 [8C14000000000000] 
  2164 00000499 48BE-                   	mov rsi, L_code_ptr_make_vector
  2164 0000049B [AF8B010000000000] 
  2165 000004A3 E8DA740100              	call bind_primitive
  2166                                  
  2167                                  	; building closure for make-string
  2168 000004A8 48BF-                   	mov rdi, free_var_99
  2168 000004AA [6A14000000000000] 
  2169 000004B2 48BE-                   	mov rsi, L_code_ptr_make_string
  2169 000004B4 [0A8C010000000000] 
  2170 000004BC E8C1740100              	call bind_primitive
  2171                                  
  2172                                  	; building closure for eq?
  2173 000004C1 48BF-                   	mov rdi, free_var_80
  2173 000004C3 [2713000000000000] 
  2174 000004CB 48BE-                   	mov rsi, L_code_ptr_is_eq
  2174 000004CD [BF8C010000000000] 
  2175 000004D5 E8A8740100              	call bind_primitive
  2176                                  
  2177                                  	; building closure for __integer-to-fraction
  2178 000004DA 48BF-                   	mov rdi, free_var_29
  2178 000004DC [C40F000000000000] 
  2179 000004E4 48BE-                   	mov rsi, L_code_ptr_integer_to_fraction
  2179 000004E6 [3981010000000000] 
  2180 000004EE E88F740100              	call bind_primitive
  2181                                  
  2182 000004F3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2183 000004F8 E8556C0100              	call malloc
  2184 000004FD 50                      	push rax
  2185 000004FE BF00000000              	mov rdi, 8 * 0	; new rib
  2186 00000503 E84A6C0100              	call malloc
  2187 00000508 50                      	push rax
  2188 00000509 BF08000000              	mov rdi, 8 * 1	; extended env
  2189 0000050E E83F6C0100              	call malloc
  2190 00000513 488B7D10                	mov rdi, ENV
  2191 00000517 BE00000000              	mov rsi, 0
  2192 0000051C BA01000000              	mov rdx, 1
  2193                                  .L_lambda_simple_env_loop_022f:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  2194 00000521 4883FE00                	cmp rsi, 0
  2195 00000525 7410                    	je .L_lambda_simple_env_end_022f
  2196 00000527 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2197 0000052B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2198 0000052F 48FFC6                  	inc rsi
  2199 00000532 48FFC2                  	inc rdx
  2200 00000535 EBEA                    	jmp .L_lambda_simple_env_loop_022f
  2201                                  .L_lambda_simple_env_end_022f:
  2202 00000537 5B                      	pop rbx
  2203 00000538 BE00000000              	mov rsi, 0
  2204                                  .L_lambda_simple_params_loop_022f:	; copy params
  2205 0000053D 4883FE00                	cmp rsi, 0
  2206 00000541 740E                    	je .L_lambda_simple_params_end_022f
  2207 00000543 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2208 00000548 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2209 0000054C 48FFC6                  	inc rsi
  2210 0000054F EBEC                    	jmp .L_lambda_simple_params_loop_022f
  2211                                  .L_lambda_simple_params_end_022f:
  2212 00000551 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  2213 00000554 4889C3                  	mov rbx, rax
  2214 00000557 58                      	pop rax
  2215 00000558 C60004                  	mov byte [rax], T_closure
  2216 0000055B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2217 0000055F 48C74009[6C050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_022f
  2218 00000567 E9BF000000              	jmp .L_lambda_simple_end_022f
  2219                                  .L_lambda_simple_code_022f:	; lambda-simple body
  2220 0000056C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2221 00000572 740B                    	je .L_lambda_simple_arity_check_ok_022f
  2222 00000574 FF742410                	push qword [rsp + 8 * 2]
  2223 00000578 6A01                    	push 1
  2224 0000057A E98C6B0100              	jmp L_error_incorrect_arity_simple
  2225                                  .L_lambda_simple_arity_check_ok_022f:
  2226 0000057F C8000000                	enter 0, 0
  2227                                  	; preparing a tail-call
  2228                                  	; preparing a non-tail-call
  2229 00000583 488B4520                	mov rax, PARAM(0)	; param x
  2230 00000587 50                      	push rax
  2231 00000588 6A01                    	push 1	; arg count
  2232 0000058A 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  2233 00000592 803805                  	cmp byte [rax], T_undefined
  2234 00000595 0F848A6A0100            	je L_error_fvar_undefined
  2235 0000059B 803804                  	cmp byte [rax], T_closure
  2236 0000059E 0F85056B0100            	jne L_error_non_closure
  2237 000005A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2238 000005A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2239 000005AA 50                      	push rax
  2240 000005AB 6A01                    	push 1	; arg count
  2241 000005AD 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  2242 000005B5 803805                  	cmp byte [rax], T_undefined
  2243 000005B8 0F84676A0100            	je L_error_fvar_undefined
  2244 000005BE 803804                  	cmp byte [rax], T_closure
  2245 000005C1 0F85E26A0100            	jne L_error_non_closure
  2246 000005C7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2247 000005CA 4C8B4009                	mov r8, qword [rax + 1 + 8]
  2248 000005CE FF7508                  	push qword [rbp + 8]				; push old return address
  2249 000005D1 FF7500                  	push qword [rbp]					; push old rbp
  2250                                  	;; move stack up ;;
  2251 000005D4 488B5D18                	mov rbx, [rbp + 3*8]
  2252 000005D8 4889DE                  	mov rsi, rbx						; save old size in rsi
  2253 000005DB 4883C303                	add rbx, 3
  2254 000005DF 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  2255 000005E7 B901000000              	mov rcx, 1
  2256 000005EC 4883C104                	add rcx, 4				; num of iterations in rcx
  2257                                  .L_tc_recycle_frame_loop_02d7:
  2258 000005F0 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  2259 000005F8 488B143C                	mov rdx, [rsp + rdi]
  2260 000005FC 4889541D00              	mov [rbp + rbx], rdx
  2261 00000601 4883EB08                	sub rbx, 8
  2262 00000605 48FFC9                  	dec rcx
  2263 00000608 4883F900                	cmp rcx, 0
  2264 0000060C 75E2                    	jne .L_tc_recycle_frame_loop_02d7
  2265 0000060E 4889F3                  	mov rbx, rsi
  2266 00000611 4883EB01                	sub rbx, 1
  2267 00000615 488D1CDD00000000        	lea rbx, [rbx*8]
  2268 0000061D 4801DD                  	add rbp, rbx
  2269 00000620 4889EC                  	mov rsp, rbp         ; fix stack pointers
  2270 00000623 5D                      	pop rbp
  2271 00000624 41FFE0                  	jmp r8
  2272 00000627 C9                      	leave
  2273 00000628 C21800                  	ret AND_KILL_FRAME(1)
  2274                                  .L_lambda_simple_end_022f:	; new closure is in rax
  2275 0000062B 48890425[90100000]      	mov qword [free_var_41], rax
  2276 00000633 48B8-                   	mov rax, sob_void
  2276 00000635 [0000000000000000] 
  2277                                  
  2278 0000063D 4889C7                  	mov rdi, rax
  2279 00000640 E8626D0100              	call print_sexpr_if_not_void
  2280 00000645 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2281 0000064A E8036B0100              	call malloc
  2282 0000064F 50                      	push rax
  2283 00000650 BF00000000              	mov rdi, 8 * 0	; new rib
  2284 00000655 E8F86A0100              	call malloc
  2285 0000065A 50                      	push rax
  2286 0000065B BF08000000              	mov rdi, 8 * 1	; extended env
  2287 00000660 E8ED6A0100              	call malloc
  2288 00000665 488B7D10                	mov rdi, ENV
  2289 00000669 BE00000000              	mov rsi, 0
  2290 0000066E BA01000000              	mov rdx, 1
  2291                                  .L_lambda_simple_env_loop_0230:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  2292 00000673 4883FE00                	cmp rsi, 0
  2293 00000677 7410                    	je .L_lambda_simple_env_end_0230
  2294 00000679 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2295 0000067D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2296 00000681 48FFC6                  	inc rsi
  2297 00000684 48FFC2                  	inc rdx
  2298 00000687 EBEA                    	jmp .L_lambda_simple_env_loop_0230
  2299                                  .L_lambda_simple_env_end_0230:
  2300 00000689 5B                      	pop rbx
  2301 0000068A BE00000000              	mov rsi, 0
  2302                                  .L_lambda_simple_params_loop_0230:	; copy params
  2303 0000068F 4883FE00                	cmp rsi, 0
  2304 00000693 740E                    	je .L_lambda_simple_params_end_0230
  2305 00000695 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2306 0000069A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2307 0000069E 48FFC6                  	inc rsi
  2308 000006A1 EBEC                    	jmp .L_lambda_simple_params_loop_0230
  2309                                  .L_lambda_simple_params_end_0230:
  2310 000006A3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  2311 000006A6 4889C3                  	mov rbx, rax
  2312 000006A9 58                      	pop rax
  2313 000006AA C60004                  	mov byte [rax], T_closure
  2314 000006AD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2315 000006B1 48C74009[BE060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0230
  2316 000006B9 E9BF000000              	jmp .L_lambda_simple_end_0230
  2317                                  .L_lambda_simple_code_0230:	; lambda-simple body
  2318 000006BE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2319 000006C4 740B                    	je .L_lambda_simple_arity_check_ok_0230
  2320 000006C6 FF742410                	push qword [rsp + 8 * 2]
  2321 000006CA 6A01                    	push 1
  2322 000006CC E93A6A0100              	jmp L_error_incorrect_arity_simple
  2323                                  .L_lambda_simple_arity_check_ok_0230:
  2324 000006D1 C8000000                	enter 0, 0
  2325                                  	; preparing a tail-call
  2326                                  	; preparing a non-tail-call
  2327 000006D5 488B4520                	mov rax, PARAM(0)	; param x
  2328 000006D9 50                      	push rax
  2329 000006DA 6A01                    	push 1	; arg count
  2330 000006DC 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  2331 000006E4 803805                  	cmp byte [rax], T_undefined
  2332 000006E7 0F8438690100            	je L_error_fvar_undefined
  2333 000006ED 803804                  	cmp byte [rax], T_closure
  2334 000006F0 0F85B3690100            	jne L_error_non_closure
  2335 000006F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2336 000006F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2337 000006FC 50                      	push rax
  2338 000006FD 6A01                    	push 1	; arg count
  2339 000006FF 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  2340 00000707 803805                  	cmp byte [rax], T_undefined
  2341 0000070A 0F8415690100            	je L_error_fvar_undefined
  2342 00000710 803804                  	cmp byte [rax], T_closure
  2343 00000713 0F8590690100            	jne L_error_non_closure
  2344 00000719 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2345 0000071C 4C8B4009                	mov r8, qword [rax + 1 + 8]
  2346 00000720 FF7508                  	push qword [rbp + 8]				; push old return address
  2347 00000723 FF7500                  	push qword [rbp]					; push old rbp
  2348                                  	;; move stack up ;;
  2349 00000726 488B5D18                	mov rbx, [rbp + 3*8]
  2350 0000072A 4889DE                  	mov rsi, rbx						; save old size in rsi
  2351 0000072D 4883C303                	add rbx, 3
  2352 00000731 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  2353 00000739 B901000000              	mov rcx, 1
  2354 0000073E 4883C104                	add rcx, 4				; num of iterations in rcx
  2355                                  .L_tc_recycle_frame_loop_02d8:
  2356 00000742 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  2357 0000074A 488B143C                	mov rdx, [rsp + rdi]
  2358 0000074E 4889541D00              	mov [rbp + rbx], rdx
  2359 00000753 4883EB08                	sub rbx, 8
  2360 00000757 48FFC9                  	dec rcx
  2361 0000075A 4883F900                	cmp rcx, 0
  2362 0000075E 75E2                    	jne .L_tc_recycle_frame_loop_02d8
  2363 00000760 4889F3                  	mov rbx, rsi
  2364 00000763 4883EB01                	sub rbx, 1
  2365 00000767 488D1CDD00000000        	lea rbx, [rbx*8]
  2366 0000076F 4801DD                  	add rbp, rbx
  2367 00000772 4889EC                  	mov rsp, rbp         ; fix stack pointers
  2368 00000775 5D                      	pop rbp
  2369 00000776 41FFE0                  	jmp r8
  2370 00000779 C9                      	leave
  2371 0000077A C21800                  	ret AND_KILL_FRAME(1)
  2372                                  .L_lambda_simple_end_0230:	; new closure is in rax
  2373 0000077D 48890425[07110000]      	mov qword [free_var_48], rax
  2374 00000785 48B8-                   	mov rax, sob_void
  2374 00000787 [0000000000000000] 
  2375                                  
  2376 0000078F 4889C7                  	mov rdi, rax
  2377 00000792 E8106C0100              	call print_sexpr_if_not_void
  2378 00000797 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2379 0000079C E8B1690100              	call malloc
  2380 000007A1 50                      	push rax
  2381 000007A2 BF00000000              	mov rdi, 8 * 0	; new rib
  2382 000007A7 E8A6690100              	call malloc
  2383 000007AC 50                      	push rax
  2384 000007AD BF08000000              	mov rdi, 8 * 1	; extended env
  2385 000007B2 E89B690100              	call malloc
  2386 000007B7 488B7D10                	mov rdi, ENV
  2387 000007BB BE00000000              	mov rsi, 0
  2388 000007C0 BA01000000              	mov rdx, 1
  2389                                  .L_lambda_simple_env_loop_0231:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  2390 000007C5 4883FE00                	cmp rsi, 0
  2391 000007C9 7410                    	je .L_lambda_simple_env_end_0231
  2392 000007CB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2393 000007CF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2394 000007D3 48FFC6                  	inc rsi
  2395 000007D6 48FFC2                  	inc rdx
  2396 000007D9 EBEA                    	jmp .L_lambda_simple_env_loop_0231
  2397                                  .L_lambda_simple_env_end_0231:
  2398 000007DB 5B                      	pop rbx
  2399 000007DC BE00000000              	mov rsi, 0
  2400                                  .L_lambda_simple_params_loop_0231:	; copy params
  2401 000007E1 4883FE00                	cmp rsi, 0
  2402 000007E5 740E                    	je .L_lambda_simple_params_end_0231
  2403 000007E7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2404 000007EC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2405 000007F0 48FFC6                  	inc rsi
  2406 000007F3 EBEC                    	jmp .L_lambda_simple_params_loop_0231
  2407                                  .L_lambda_simple_params_end_0231:
  2408 000007F5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  2409 000007F8 4889C3                  	mov rbx, rax
  2410 000007FB 58                      	pop rax
  2411 000007FC C60004                  	mov byte [rax], T_closure
  2412 000007FF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2413 00000803 48C74009[10080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0231
  2414 0000080B E9BF000000              	jmp .L_lambda_simple_end_0231
  2415                                  .L_lambda_simple_code_0231:	; lambda-simple body
  2416 00000810 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2417 00000816 740B                    	je .L_lambda_simple_arity_check_ok_0231
  2418 00000818 FF742410                	push qword [rsp + 8 * 2]
  2419 0000081C 6A01                    	push 1
  2420 0000081E E9E8680100              	jmp L_error_incorrect_arity_simple
  2421                                  .L_lambda_simple_arity_check_ok_0231:
  2422 00000823 C8000000                	enter 0, 0
  2423                                  	; preparing a tail-call
  2424                                  	; preparing a non-tail-call
  2425 00000827 488B4520                	mov rax, PARAM(0)	; param x
  2426 0000082B 50                      	push rax
  2427 0000082C 6A01                    	push 1	; arg count
  2428 0000082E 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  2429 00000836 803805                  	cmp byte [rax], T_undefined
  2430 00000839 0F84E6670100            	je L_error_fvar_undefined
  2431 0000083F 803804                  	cmp byte [rax], T_closure
  2432 00000842 0F8561680100            	jne L_error_non_closure
  2433 00000848 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2434 0000084B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2435 0000084E 50                      	push rax
  2436 0000084F 6A01                    	push 1	; arg count
  2437 00000851 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  2438 00000859 803805                  	cmp byte [rax], T_undefined
  2439 0000085C 0F84C3670100            	je L_error_fvar_undefined
  2440 00000862 803804                  	cmp byte [rax], T_closure
  2441 00000865 0F853E680100            	jne L_error_non_closure
  2442 0000086B FF7001                  	push SOB_CLOSURE_ENV(rax)
  2443 0000086E 4C8B4009                	mov r8, qword [rax + 1 + 8]
  2444 00000872 FF7508                  	push qword [rbp + 8]				; push old return address
  2445 00000875 FF7500                  	push qword [rbp]					; push old rbp
  2446                                  	;; move stack up ;;
  2447 00000878 488B5D18                	mov rbx, [rbp + 3*8]
  2448 0000087C 4889DE                  	mov rsi, rbx						; save old size in rsi
  2449 0000087F 4883C303                	add rbx, 3
  2450 00000883 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  2451 0000088B B901000000              	mov rcx, 1
  2452 00000890 4883C104                	add rcx, 4				; num of iterations in rcx
  2453                                  .L_tc_recycle_frame_loop_02d9:
  2454 00000894 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  2455 0000089C 488B143C                	mov rdx, [rsp + rdi]
  2456 000008A0 4889541D00              	mov [rbp + rbx], rdx
  2457 000008A5 4883EB08                	sub rbx, 8
  2458 000008A9 48FFC9                  	dec rcx
  2459 000008AC 4883F900                	cmp rcx, 0
  2460 000008B0 75E2                    	jne .L_tc_recycle_frame_loop_02d9
  2461 000008B2 4889F3                  	mov rbx, rsi
  2462 000008B5 4883EB01                	sub rbx, 1
  2463 000008B9 488D1CDD00000000        	lea rbx, [rbx*8]
  2464 000008C1 4801DD                  	add rbp, rbx
  2465 000008C4 4889EC                  	mov rsp, rbp         ; fix stack pointers
  2466 000008C7 5D                      	pop rbp
  2467 000008C8 41FFE0                  	jmp r8
  2468 000008CB C9                      	leave
  2469 000008CC C21800                  	ret AND_KILL_FRAME(1)
  2470                                  .L_lambda_simple_end_0231:	; new closure is in rax
  2471 000008CF 48890425[8F110000]      	mov qword [free_var_56], rax
  2472 000008D7 48B8-                   	mov rax, sob_void
  2472 000008D9 [0000000000000000] 
  2473                                  
  2474 000008E1 4889C7                  	mov rdi, rax
  2475 000008E4 E8BE6A0100              	call print_sexpr_if_not_void
  2476 000008E9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2477 000008EE E85F680100              	call malloc
  2478 000008F3 50                      	push rax
  2479 000008F4 BF00000000              	mov rdi, 8 * 0	; new rib
  2480 000008F9 E854680100              	call malloc
  2481 000008FE 50                      	push rax
  2482 000008FF BF08000000              	mov rdi, 8 * 1	; extended env
  2483 00000904 E849680100              	call malloc
  2484 00000909 488B7D10                	mov rdi, ENV
  2485 0000090D BE00000000              	mov rsi, 0
  2486 00000912 BA01000000              	mov rdx, 1
  2487                                  .L_lambda_simple_env_loop_0232:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  2488 00000917 4883FE00                	cmp rsi, 0
  2489 0000091B 7410                    	je .L_lambda_simple_env_end_0232
  2490 0000091D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2491 00000921 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2492 00000925 48FFC6                  	inc rsi
  2493 00000928 48FFC2                  	inc rdx
  2494 0000092B EBEA                    	jmp .L_lambda_simple_env_loop_0232
  2495                                  .L_lambda_simple_env_end_0232:
  2496 0000092D 5B                      	pop rbx
  2497 0000092E BE00000000              	mov rsi, 0
  2498                                  .L_lambda_simple_params_loop_0232:	; copy params
  2499 00000933 4883FE00                	cmp rsi, 0
  2500 00000937 740E                    	je .L_lambda_simple_params_end_0232
  2501 00000939 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2502 0000093E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2503 00000942 48FFC6                  	inc rsi
  2504 00000945 EBEC                    	jmp .L_lambda_simple_params_loop_0232
  2505                                  .L_lambda_simple_params_end_0232:
  2506 00000947 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  2507 0000094A 4889C3                  	mov rbx, rax
  2508 0000094D 58                      	pop rax
  2509 0000094E C60004                  	mov byte [rax], T_closure
  2510 00000951 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2511 00000955 48C74009[62090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0232
  2512 0000095D E9BF000000              	jmp .L_lambda_simple_end_0232
  2513                                  .L_lambda_simple_code_0232:	; lambda-simple body
  2514 00000962 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2515 00000968 740B                    	je .L_lambda_simple_arity_check_ok_0232
  2516 0000096A FF742410                	push qword [rsp + 8 * 2]
  2517 0000096E 6A01                    	push 1
  2518 00000970 E996670100              	jmp L_error_incorrect_arity_simple
  2519                                  .L_lambda_simple_arity_check_ok_0232:
  2520 00000975 C8000000                	enter 0, 0
  2521                                  	; preparing a tail-call
  2522                                  	; preparing a non-tail-call
  2523 00000979 488B4520                	mov rax, PARAM(0)	; param x
  2524 0000097D 50                      	push rax
  2525 0000097E 6A01                    	push 1	; arg count
  2526 00000980 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  2527 00000988 803805                  	cmp byte [rax], T_undefined
  2528 0000098B 0F8494660100            	je L_error_fvar_undefined
  2529 00000991 803804                  	cmp byte [rax], T_closure
  2530 00000994 0F850F670100            	jne L_error_non_closure
  2531 0000099A FF7001                  	push SOB_CLOSURE_ENV(rax)
  2532 0000099D FF5009                  	call SOB_CLOSURE_CODE(rax)
  2533 000009A0 50                      	push rax
  2534 000009A1 6A01                    	push 1	; arg count
  2535 000009A3 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  2536 000009AB 803805                  	cmp byte [rax], T_undefined
  2537 000009AE 0F8471660100            	je L_error_fvar_undefined
  2538 000009B4 803804                  	cmp byte [rax], T_closure
  2539 000009B7 0F85EC660100            	jne L_error_non_closure
  2540 000009BD FF7001                  	push SOB_CLOSURE_ENV(rax)
  2541 000009C0 4C8B4009                	mov r8, qword [rax + 1 + 8]
  2542 000009C4 FF7508                  	push qword [rbp + 8]				; push old return address
  2543 000009C7 FF7500                  	push qword [rbp]					; push old rbp
  2544                                  	;; move stack up ;;
  2545 000009CA 488B5D18                	mov rbx, [rbp + 3*8]
  2546 000009CE 4889DE                  	mov rsi, rbx						; save old size in rsi
  2547 000009D1 4883C303                	add rbx, 3
  2548 000009D5 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  2549 000009DD B901000000              	mov rcx, 1
  2550 000009E2 4883C104                	add rcx, 4				; num of iterations in rcx
  2551                                  .L_tc_recycle_frame_loop_02da:
  2552 000009E6 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  2553 000009EE 488B143C                	mov rdx, [rsp + rdi]
  2554 000009F2 4889541D00              	mov [rbp + rbx], rdx
  2555 000009F7 4883EB08                	sub rbx, 8
  2556 000009FB 48FFC9                  	dec rcx
  2557 000009FE 4883F900                	cmp rcx, 0
  2558 00000A02 75E2                    	jne .L_tc_recycle_frame_loop_02da
  2559 00000A04 4889F3                  	mov rbx, rsi
  2560 00000A07 4883EB01                	sub rbx, 1
  2561 00000A0B 488D1CDD00000000        	lea rbx, [rbx*8]
  2562 00000A13 4801DD                  	add rbp, rbx
  2563 00000A16 4889EC                  	mov rsp, rbp         ; fix stack pointers
  2564 00000A19 5D                      	pop rbp
  2565 00000A1A 41FFE0                  	jmp r8
  2566 00000A1D C9                      	leave
  2567 00000A1E C21800                  	ret AND_KILL_FRAME(1)
  2568                                  .L_lambda_simple_end_0232:	; new closure is in rax
  2569 00000A21 48890425[06120000]      	mov qword [free_var_63], rax
  2570 00000A29 48B8-                   	mov rax, sob_void
  2570 00000A2B [0000000000000000] 
  2571                                  
  2572 00000A33 4889C7                  	mov rdi, rax
  2573 00000A36 E86C690100              	call print_sexpr_if_not_void
  2574 00000A3B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2575 00000A40 E80D670100              	call malloc
  2576 00000A45 50                      	push rax
  2577 00000A46 BF00000000              	mov rdi, 8 * 0	; new rib
  2578 00000A4B E802670100              	call malloc
  2579 00000A50 50                      	push rax
  2580 00000A51 BF08000000              	mov rdi, 8 * 1	; extended env
  2581 00000A56 E8F7660100              	call malloc
  2582 00000A5B 488B7D10                	mov rdi, ENV
  2583 00000A5F BE00000000              	mov rsi, 0
  2584 00000A64 BA01000000              	mov rdx, 1
  2585                                  .L_lambda_simple_env_loop_0233:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  2586 00000A69 4883FE00                	cmp rsi, 0
  2587 00000A6D 7410                    	je .L_lambda_simple_env_end_0233
  2588 00000A6F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2589 00000A73 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2590 00000A77 48FFC6                  	inc rsi
  2591 00000A7A 48FFC2                  	inc rdx
  2592 00000A7D EBEA                    	jmp .L_lambda_simple_env_loop_0233
  2593                                  .L_lambda_simple_env_end_0233:
  2594 00000A7F 5B                      	pop rbx
  2595 00000A80 BE00000000              	mov rsi, 0
  2596                                  .L_lambda_simple_params_loop_0233:	; copy params
  2597 00000A85 4883FE00                	cmp rsi, 0
  2598 00000A89 740E                    	je .L_lambda_simple_params_end_0233
  2599 00000A8B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2600 00000A90 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2601 00000A94 48FFC6                  	inc rsi
  2602 00000A97 EBEC                    	jmp .L_lambda_simple_params_loop_0233
  2603                                  .L_lambda_simple_params_end_0233:
  2604 00000A99 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  2605 00000A9C 4889C3                  	mov rbx, rax
  2606 00000A9F 58                      	pop rax
  2607 00000AA0 C60004                  	mov byte [rax], T_closure
  2608 00000AA3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2609 00000AA7 48C74009[B40A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0233
  2610 00000AAF E9BF000000              	jmp .L_lambda_simple_end_0233
  2611                                  .L_lambda_simple_code_0233:	; lambda-simple body
  2612 00000AB4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2613 00000ABA 740B                    	je .L_lambda_simple_arity_check_ok_0233
  2614 00000ABC FF742410                	push qword [rsp + 8 * 2]
  2615 00000AC0 6A01                    	push 1
  2616 00000AC2 E944660100              	jmp L_error_incorrect_arity_simple
  2617                                  .L_lambda_simple_arity_check_ok_0233:
  2618 00000AC7 C8000000                	enter 0, 0
  2619                                  	; preparing a tail-call
  2620                                  	; preparing a non-tail-call
  2621 00000ACB 488B4520                	mov rax, PARAM(0)	; param x
  2622 00000ACF 50                      	push rax
  2623 00000AD0 6A01                    	push 1	; arg count
  2624 00000AD2 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  2625 00000ADA 803805                  	cmp byte [rax], T_undefined
  2626 00000ADD 0F8442650100            	je L_error_fvar_undefined
  2627 00000AE3 803804                  	cmp byte [rax], T_closure
  2628 00000AE6 0F85BD650100            	jne L_error_non_closure
  2629 00000AEC FF7001                  	push SOB_CLOSURE_ENV(rax)
  2630 00000AEF FF5009                  	call SOB_CLOSURE_CODE(rax)
  2631 00000AF2 50                      	push rax
  2632 00000AF3 6A01                    	push 1	; arg count
  2633 00000AF5 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  2634 00000AFD 803805                  	cmp byte [rax], T_undefined
  2635 00000B00 0F841F650100            	je L_error_fvar_undefined
  2636 00000B06 803804                  	cmp byte [rax], T_closure
  2637 00000B09 0F859A650100            	jne L_error_non_closure
  2638 00000B0F FF7001                  	push SOB_CLOSURE_ENV(rax)
  2639 00000B12 4C8B4009                	mov r8, qword [rax + 1 + 8]
  2640 00000B16 FF7508                  	push qword [rbp + 8]				; push old return address
  2641 00000B19 FF7500                  	push qword [rbp]					; push old rbp
  2642                                  	;; move stack up ;;
  2643 00000B1C 488B5D18                	mov rbx, [rbp + 3*8]
  2644 00000B20 4889DE                  	mov rsi, rbx						; save old size in rsi
  2645 00000B23 4883C303                	add rbx, 3
  2646 00000B27 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  2647 00000B2F B901000000              	mov rcx, 1
  2648 00000B34 4883C104                	add rcx, 4				; num of iterations in rcx
  2649                                  .L_tc_recycle_frame_loop_02db:
  2650 00000B38 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  2651 00000B40 488B143C                	mov rdx, [rsp + rdi]
  2652 00000B44 4889541D00              	mov [rbp + rbx], rdx
  2653 00000B49 4883EB08                	sub rbx, 8
  2654 00000B4D 48FFC9                  	dec rcx
  2655 00000B50 4883F900                	cmp rcx, 0
  2656 00000B54 75E2                    	jne .L_tc_recycle_frame_loop_02db
  2657 00000B56 4889F3                  	mov rbx, rsi
  2658 00000B59 4883EB01                	sub rbx, 1
  2659 00000B5D 488D1CDD00000000        	lea rbx, [rbx*8]
  2660 00000B65 4801DD                  	add rbp, rbx
  2661 00000B68 4889EC                  	mov rsp, rbp         ; fix stack pointers
  2662 00000B6B 5D                      	pop rbp
  2663 00000B6C 41FFE0                  	jmp r8
  2664 00000B6F C9                      	leave
  2665 00000B70 C21800                  	ret AND_KILL_FRAME(1)
  2666                                  .L_lambda_simple_end_0233:	; new closure is in rax
  2667 00000B73 48890425[4C100000]      	mov qword [free_var_37], rax
  2668 00000B7B 48B8-                   	mov rax, sob_void
  2668 00000B7D [0000000000000000] 
  2669                                  
  2670 00000B85 4889C7                  	mov rdi, rax
  2671 00000B88 E81A680100              	call print_sexpr_if_not_void
  2672 00000B8D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2673 00000B92 E8BB650100              	call malloc
  2674 00000B97 50                      	push rax
  2675 00000B98 BF00000000              	mov rdi, 8 * 0	; new rib
  2676 00000B9D E8B0650100              	call malloc
  2677 00000BA2 50                      	push rax
  2678 00000BA3 BF08000000              	mov rdi, 8 * 1	; extended env
  2679 00000BA8 E8A5650100              	call malloc
  2680 00000BAD 488B7D10                	mov rdi, ENV
  2681 00000BB1 BE00000000              	mov rsi, 0
  2682 00000BB6 BA01000000              	mov rdx, 1
  2683                                  .L_lambda_simple_env_loop_0234:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  2684 00000BBB 4883FE00                	cmp rsi, 0
  2685 00000BBF 7410                    	je .L_lambda_simple_env_end_0234
  2686 00000BC1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2687 00000BC5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2688 00000BC9 48FFC6                  	inc rsi
  2689 00000BCC 48FFC2                  	inc rdx
  2690 00000BCF EBEA                    	jmp .L_lambda_simple_env_loop_0234
  2691                                  .L_lambda_simple_env_end_0234:
  2692 00000BD1 5B                      	pop rbx
  2693 00000BD2 BE00000000              	mov rsi, 0
  2694                                  .L_lambda_simple_params_loop_0234:	; copy params
  2695 00000BD7 4883FE00                	cmp rsi, 0
  2696 00000BDB 740E                    	je .L_lambda_simple_params_end_0234
  2697 00000BDD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2698 00000BE2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2699 00000BE6 48FFC6                  	inc rsi
  2700 00000BE9 EBEC                    	jmp .L_lambda_simple_params_loop_0234
  2701                                  .L_lambda_simple_params_end_0234:
  2702 00000BEB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  2703 00000BEE 4889C3                  	mov rbx, rax
  2704 00000BF1 58                      	pop rax
  2705 00000BF2 C60004                  	mov byte [rax], T_closure
  2706 00000BF5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2707 00000BF9 48C74009[060C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0234
  2708 00000C01 E9BF000000              	jmp .L_lambda_simple_end_0234
  2709                                  .L_lambda_simple_code_0234:	; lambda-simple body
  2710 00000C06 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2711 00000C0C 740B                    	je .L_lambda_simple_arity_check_ok_0234
  2712 00000C0E FF742410                	push qword [rsp + 8 * 2]
  2713 00000C12 6A01                    	push 1
  2714 00000C14 E9F2640100              	jmp L_error_incorrect_arity_simple
  2715                                  .L_lambda_simple_arity_check_ok_0234:
  2716 00000C19 C8000000                	enter 0, 0
  2717                                  	; preparing a tail-call
  2718                                  	; preparing a non-tail-call
  2719 00000C1D 488B4520                	mov rax, PARAM(0)	; param x
  2720 00000C21 50                      	push rax
  2721 00000C22 6A01                    	push 1	; arg count
  2722 00000C24 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  2723 00000C2C 803805                  	cmp byte [rax], T_undefined
  2724 00000C2F 0F84F0630100            	je L_error_fvar_undefined
  2725 00000C35 803804                  	cmp byte [rax], T_closure
  2726 00000C38 0F856B640100            	jne L_error_non_closure
  2727 00000C3E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2728 00000C41 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2729 00000C44 50                      	push rax
  2730 00000C45 6A01                    	push 1	; arg count
  2731 00000C47 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  2732 00000C4F 803805                  	cmp byte [rax], T_undefined
  2733 00000C52 0F84CD630100            	je L_error_fvar_undefined
  2734 00000C58 803804                  	cmp byte [rax], T_closure
  2735 00000C5B 0F8548640100            	jne L_error_non_closure
  2736 00000C61 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2737 00000C64 4C8B4009                	mov r8, qword [rax + 1 + 8]
  2738 00000C68 FF7508                  	push qword [rbp + 8]				; push old return address
  2739 00000C6B FF7500                  	push qword [rbp]					; push old rbp
  2740                                  	;; move stack up ;;
  2741 00000C6E 488B5D18                	mov rbx, [rbp + 3*8]
  2742 00000C72 4889DE                  	mov rsi, rbx						; save old size in rsi
  2743 00000C75 4883C303                	add rbx, 3
  2744 00000C79 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  2745 00000C81 B901000000              	mov rcx, 1
  2746 00000C86 4883C104                	add rcx, 4				; num of iterations in rcx
  2747                                  .L_tc_recycle_frame_loop_02dc:
  2748 00000C8A 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  2749 00000C92 488B143C                	mov rdx, [rsp + rdi]
  2750 00000C96 4889541D00              	mov [rbp + rbx], rdx
  2751 00000C9B 4883EB08                	sub rbx, 8
  2752 00000C9F 48FFC9                  	dec rcx
  2753 00000CA2 4883F900                	cmp rcx, 0
  2754 00000CA6 75E2                    	jne .L_tc_recycle_frame_loop_02dc
  2755 00000CA8 4889F3                  	mov rbx, rsi
  2756 00000CAB 4883EB01                	sub rbx, 1
  2757 00000CAF 488D1CDD00000000        	lea rbx, [rbx*8]
  2758 00000CB7 4801DD                  	add rbp, rbx
  2759 00000CBA 4889EC                  	mov rsp, rbp         ; fix stack pointers
  2760 00000CBD 5D                      	pop rbp
  2761 00000CBE 41FFE0                  	jmp r8
  2762 00000CC1 C9                      	leave
  2763 00000CC2 C21800                  	ret AND_KILL_FRAME(1)
  2764                                  .L_lambda_simple_end_0234:	; new closure is in rax
  2765 00000CC5 48890425[7F100000]      	mov qword [free_var_40], rax
  2766 00000CCD 48B8-                   	mov rax, sob_void
  2766 00000CCF [0000000000000000] 
  2767                                  
  2768 00000CD7 4889C7                  	mov rdi, rax
  2769 00000CDA E8C8660100              	call print_sexpr_if_not_void
  2770 00000CDF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2771 00000CE4 E869640100              	call malloc
  2772 00000CE9 50                      	push rax
  2773 00000CEA BF00000000              	mov rdi, 8 * 0	; new rib
  2774 00000CEF E85E640100              	call malloc
  2775 00000CF4 50                      	push rax
  2776 00000CF5 BF08000000              	mov rdi, 8 * 1	; extended env
  2777 00000CFA E853640100              	call malloc
  2778 00000CFF 488B7D10                	mov rdi, ENV
  2779 00000D03 BE00000000              	mov rsi, 0
  2780 00000D08 BA01000000              	mov rdx, 1
  2781                                  .L_lambda_simple_env_loop_0235:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  2782 00000D0D 4883FE00                	cmp rsi, 0
  2783 00000D11 7410                    	je .L_lambda_simple_env_end_0235
  2784 00000D13 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2785 00000D17 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2786 00000D1B 48FFC6                  	inc rsi
  2787 00000D1E 48FFC2                  	inc rdx
  2788 00000D21 EBEA                    	jmp .L_lambda_simple_env_loop_0235
  2789                                  .L_lambda_simple_env_end_0235:
  2790 00000D23 5B                      	pop rbx
  2791 00000D24 BE00000000              	mov rsi, 0
  2792                                  .L_lambda_simple_params_loop_0235:	; copy params
  2793 00000D29 4883FE00                	cmp rsi, 0
  2794 00000D2D 740E                    	je .L_lambda_simple_params_end_0235
  2795 00000D2F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2796 00000D34 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2797 00000D38 48FFC6                  	inc rsi
  2798 00000D3B EBEC                    	jmp .L_lambda_simple_params_loop_0235
  2799                                  .L_lambda_simple_params_end_0235:
  2800 00000D3D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  2801 00000D40 4889C3                  	mov rbx, rax
  2802 00000D43 58                      	pop rax
  2803 00000D44 C60004                  	mov byte [rax], T_closure
  2804 00000D47 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2805 00000D4B 48C74009[580D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0235
  2806 00000D53 E9BF000000              	jmp .L_lambda_simple_end_0235
  2807                                  .L_lambda_simple_code_0235:	; lambda-simple body
  2808 00000D58 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2809 00000D5E 740B                    	je .L_lambda_simple_arity_check_ok_0235
  2810 00000D60 FF742410                	push qword [rsp + 8 * 2]
  2811 00000D64 6A01                    	push 1
  2812 00000D66 E9A0630100              	jmp L_error_incorrect_arity_simple
  2813                                  .L_lambda_simple_arity_check_ok_0235:
  2814 00000D6B C8000000                	enter 0, 0
  2815                                  	; preparing a tail-call
  2816                                  	; preparing a non-tail-call
  2817 00000D6F 488B4520                	mov rax, PARAM(0)	; param x
  2818 00000D73 50                      	push rax
  2819 00000D74 6A01                    	push 1	; arg count
  2820 00000D76 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  2821 00000D7E 803805                  	cmp byte [rax], T_undefined
  2822 00000D81 0F849E620100            	je L_error_fvar_undefined
  2823 00000D87 803804                  	cmp byte [rax], T_closure
  2824 00000D8A 0F8519630100            	jne L_error_non_closure
  2825 00000D90 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2826 00000D93 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2827 00000D96 50                      	push rax
  2828 00000D97 6A01                    	push 1	; arg count
  2829 00000D99 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  2830 00000DA1 803805                  	cmp byte [rax], T_undefined
  2831 00000DA4 0F847B620100            	je L_error_fvar_undefined
  2832 00000DAA 803804                  	cmp byte [rax], T_closure
  2833 00000DAD 0F85F6620100            	jne L_error_non_closure
  2834 00000DB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2835 00000DB6 4C8B4009                	mov r8, qword [rax + 1 + 8]
  2836 00000DBA FF7508                  	push qword [rbp + 8]				; push old return address
  2837 00000DBD FF7500                  	push qword [rbp]					; push old rbp
  2838                                  	;; move stack up ;;
  2839 00000DC0 488B5D18                	mov rbx, [rbp + 3*8]
  2840 00000DC4 4889DE                  	mov rsi, rbx						; save old size in rsi
  2841 00000DC7 4883C303                	add rbx, 3
  2842 00000DCB 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  2843 00000DD3 B901000000              	mov rcx, 1
  2844 00000DD8 4883C104                	add rcx, 4				; num of iterations in rcx
  2845                                  .L_tc_recycle_frame_loop_02dd:
  2846 00000DDC 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  2847 00000DE4 488B143C                	mov rdx, [rsp + rdi]
  2848 00000DE8 4889541D00              	mov [rbp + rbx], rdx
  2849 00000DED 4883EB08                	sub rbx, 8
  2850 00000DF1 48FFC9                  	dec rcx
  2851 00000DF4 4883F900                	cmp rcx, 0
  2852 00000DF8 75E2                    	jne .L_tc_recycle_frame_loop_02dd
  2853 00000DFA 4889F3                  	mov rbx, rsi
  2854 00000DFD 4883EB01                	sub rbx, 1
  2855 00000E01 488D1CDD00000000        	lea rbx, [rbx*8]
  2856 00000E09 4801DD                  	add rbp, rbx
  2857 00000E0C 4889EC                  	mov rsp, rbp         ; fix stack pointers
  2858 00000E0F 5D                      	pop rbp
  2859 00000E10 41FFE0                  	jmp r8
  2860 00000E13 C9                      	leave
  2861 00000E14 C21800                  	ret AND_KILL_FRAME(1)
  2862                                  .L_lambda_simple_end_0235:	; new closure is in rax
  2863 00000E17 48890425[C3100000]      	mov qword [free_var_44], rax
  2864 00000E1F 48B8-                   	mov rax, sob_void
  2864 00000E21 [0000000000000000] 
  2865                                  
  2866 00000E29 4889C7                  	mov rdi, rax
  2867 00000E2C E876650100              	call print_sexpr_if_not_void
  2868 00000E31 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2869 00000E36 E817630100              	call malloc
  2870 00000E3B 50                      	push rax
  2871 00000E3C BF00000000              	mov rdi, 8 * 0	; new rib
  2872 00000E41 E80C630100              	call malloc
  2873 00000E46 50                      	push rax
  2874 00000E47 BF08000000              	mov rdi, 8 * 1	; extended env
  2875 00000E4C E801630100              	call malloc
  2876 00000E51 488B7D10                	mov rdi, ENV
  2877 00000E55 BE00000000              	mov rsi, 0
  2878 00000E5A BA01000000              	mov rdx, 1
  2879                                  .L_lambda_simple_env_loop_0236:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  2880 00000E5F 4883FE00                	cmp rsi, 0
  2881 00000E63 7410                    	je .L_lambda_simple_env_end_0236
  2882 00000E65 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2883 00000E69 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2884 00000E6D 48FFC6                  	inc rsi
  2885 00000E70 48FFC2                  	inc rdx
  2886 00000E73 EBEA                    	jmp .L_lambda_simple_env_loop_0236
  2887                                  .L_lambda_simple_env_end_0236:
  2888 00000E75 5B                      	pop rbx
  2889 00000E76 BE00000000              	mov rsi, 0
  2890                                  .L_lambda_simple_params_loop_0236:	; copy params
  2891 00000E7B 4883FE00                	cmp rsi, 0
  2892 00000E7F 740E                    	je .L_lambda_simple_params_end_0236
  2893 00000E81 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2894 00000E86 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2895 00000E8A 48FFC6                  	inc rsi
  2896 00000E8D EBEC                    	jmp .L_lambda_simple_params_loop_0236
  2897                                  .L_lambda_simple_params_end_0236:
  2898 00000E8F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  2899 00000E92 4889C3                  	mov rbx, rax
  2900 00000E95 58                      	pop rax
  2901 00000E96 C60004                  	mov byte [rax], T_closure
  2902 00000E99 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2903 00000E9D 48C74009[AA0E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0236
  2904 00000EA5 E9BF000000              	jmp .L_lambda_simple_end_0236
  2905                                  .L_lambda_simple_code_0236:	; lambda-simple body
  2906 00000EAA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2907 00000EB0 740B                    	je .L_lambda_simple_arity_check_ok_0236
  2908 00000EB2 FF742410                	push qword [rsp + 8 * 2]
  2909 00000EB6 6A01                    	push 1
  2910 00000EB8 E94E620100              	jmp L_error_incorrect_arity_simple
  2911                                  .L_lambda_simple_arity_check_ok_0236:
  2912 00000EBD C8000000                	enter 0, 0
  2913                                  	; preparing a tail-call
  2914                                  	; preparing a non-tail-call
  2915 00000EC1 488B4520                	mov rax, PARAM(0)	; param x
  2916 00000EC5 50                      	push rax
  2917 00000EC6 6A01                    	push 1	; arg count
  2918 00000EC8 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  2919 00000ED0 803805                  	cmp byte [rax], T_undefined
  2920 00000ED3 0F844C610100            	je L_error_fvar_undefined
  2921 00000ED9 803804                  	cmp byte [rax], T_closure
  2922 00000EDC 0F85C7610100            	jne L_error_non_closure
  2923 00000EE2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2924 00000EE5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2925 00000EE8 50                      	push rax
  2926 00000EE9 6A01                    	push 1	; arg count
  2927 00000EEB 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  2928 00000EF3 803805                  	cmp byte [rax], T_undefined
  2929 00000EF6 0F8429610100            	je L_error_fvar_undefined
  2930 00000EFC 803804                  	cmp byte [rax], T_closure
  2931 00000EFF 0F85A4610100            	jne L_error_non_closure
  2932 00000F05 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2933 00000F08 4C8B4009                	mov r8, qword [rax + 1 + 8]
  2934 00000F0C FF7508                  	push qword [rbp + 8]				; push old return address
  2935 00000F0F FF7500                  	push qword [rbp]					; push old rbp
  2936                                  	;; move stack up ;;
  2937 00000F12 488B5D18                	mov rbx, [rbp + 3*8]
  2938 00000F16 4889DE                  	mov rsi, rbx						; save old size in rsi
  2939 00000F19 4883C303                	add rbx, 3
  2940 00000F1D 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  2941 00000F25 B901000000              	mov rcx, 1
  2942 00000F2A 4883C104                	add rcx, 4				; num of iterations in rcx
  2943                                  .L_tc_recycle_frame_loop_02de:
  2944 00000F2E 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  2945 00000F36 488B143C                	mov rdx, [rsp + rdi]
  2946 00000F3A 4889541D00              	mov [rbp + rbx], rdx
  2947 00000F3F 4883EB08                	sub rbx, 8
  2948 00000F43 48FFC9                  	dec rcx
  2949 00000F46 4883F900                	cmp rcx, 0
  2950 00000F4A 75E2                    	jne .L_tc_recycle_frame_loop_02de
  2951 00000F4C 4889F3                  	mov rbx, rsi
  2952 00000F4F 4883EB01                	sub rbx, 1
  2953 00000F53 488D1CDD00000000        	lea rbx, [rbx*8]
  2954 00000F5B 4801DD                  	add rbp, rbx
  2955 00000F5E 4889EC                  	mov rsp, rbp         ; fix stack pointers
  2956 00000F61 5D                      	pop rbp
  2957 00000F62 41FFE0                  	jmp r8
  2958 00000F65 C9                      	leave
  2959 00000F66 C21800                  	ret AND_KILL_FRAME(1)
  2960                                  .L_lambda_simple_end_0236:	; new closure is in rax
  2961 00000F69 48890425[F6100000]      	mov qword [free_var_47], rax
  2962 00000F71 48B8-                   	mov rax, sob_void
  2962 00000F73 [0000000000000000] 
  2963                                  
  2964 00000F7B 4889C7                  	mov rdi, rax
  2965 00000F7E E824640100              	call print_sexpr_if_not_void
  2966 00000F83 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2967 00000F88 E8C5610100              	call malloc
  2968 00000F8D 50                      	push rax
  2969 00000F8E BF00000000              	mov rdi, 8 * 0	; new rib
  2970 00000F93 E8BA610100              	call malloc
  2971 00000F98 50                      	push rax
  2972 00000F99 BF08000000              	mov rdi, 8 * 1	; extended env
  2973 00000F9E E8AF610100              	call malloc
  2974 00000FA3 488B7D10                	mov rdi, ENV
  2975 00000FA7 BE00000000              	mov rsi, 0
  2976 00000FAC BA01000000              	mov rdx, 1
  2977                                  .L_lambda_simple_env_loop_0237:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  2978 00000FB1 4883FE00                	cmp rsi, 0
  2979 00000FB5 7410                    	je .L_lambda_simple_env_end_0237
  2980 00000FB7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2981 00000FBB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2982 00000FBF 48FFC6                  	inc rsi
  2983 00000FC2 48FFC2                  	inc rdx
  2984 00000FC5 EBEA                    	jmp .L_lambda_simple_env_loop_0237
  2985                                  .L_lambda_simple_env_end_0237:
  2986 00000FC7 5B                      	pop rbx
  2987 00000FC8 BE00000000              	mov rsi, 0
  2988                                  .L_lambda_simple_params_loop_0237:	; copy params
  2989 00000FCD 4883FE00                	cmp rsi, 0
  2990 00000FD1 740E                    	je .L_lambda_simple_params_end_0237
  2991 00000FD3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2992 00000FD8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2993 00000FDC 48FFC6                  	inc rsi
  2994 00000FDF EBEC                    	jmp .L_lambda_simple_params_loop_0237
  2995                                  .L_lambda_simple_params_end_0237:
  2996 00000FE1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  2997 00000FE4 4889C3                  	mov rbx, rax
  2998 00000FE7 58                      	pop rax
  2999 00000FE8 C60004                  	mov byte [rax], T_closure
  3000 00000FEB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3001 00000FEF 48C74009[FC0F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0237
  3002 00000FF7 E9BF000000              	jmp .L_lambda_simple_end_0237
  3003                                  .L_lambda_simple_code_0237:	; lambda-simple body
  3004 00000FFC 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3005 00001002 740B                    	je .L_lambda_simple_arity_check_ok_0237
  3006 00001004 FF742410                	push qword [rsp + 8 * 2]
  3007 00001008 6A01                    	push 1
  3008 0000100A E9FC600100              	jmp L_error_incorrect_arity_simple
  3009                                  .L_lambda_simple_arity_check_ok_0237:
  3010 0000100F C8000000                	enter 0, 0
  3011                                  	; preparing a tail-call
  3012                                  	; preparing a non-tail-call
  3013 00001013 488B4520                	mov rax, PARAM(0)	; param x
  3014 00001017 50                      	push rax
  3015 00001018 6A01                    	push 1	; arg count
  3016 0000101A 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  3017 00001022 803805                  	cmp byte [rax], T_undefined
  3018 00001025 0F84FA5F0100            	je L_error_fvar_undefined
  3019 0000102B 803804                  	cmp byte [rax], T_closure
  3020 0000102E 0F8575600100            	jne L_error_non_closure
  3021 00001034 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3022 00001037 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3023 0000103A 50                      	push rax
  3024 0000103B 6A01                    	push 1	; arg count
  3025 0000103D 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  3026 00001045 803805                  	cmp byte [rax], T_undefined
  3027 00001048 0F84D75F0100            	je L_error_fvar_undefined
  3028 0000104E 803804                  	cmp byte [rax], T_closure
  3029 00001051 0F8552600100            	jne L_error_non_closure
  3030 00001057 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3031 0000105A 4C8B4009                	mov r8, qword [rax + 1 + 8]
  3032 0000105E FF7508                  	push qword [rbp + 8]				; push old return address
  3033 00001061 FF7500                  	push qword [rbp]					; push old rbp
  3034                                  	;; move stack up ;;
  3035 00001064 488B5D18                	mov rbx, [rbp + 3*8]
  3036 00001068 4889DE                  	mov rsi, rbx						; save old size in rsi
  3037 0000106B 4883C303                	add rbx, 3
  3038 0000106F 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  3039 00001077 B901000000              	mov rcx, 1
  3040 0000107C 4883C104                	add rcx, 4				; num of iterations in rcx
  3041                                  .L_tc_recycle_frame_loop_02df:
  3042 00001080 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  3043 00001088 488B143C                	mov rdx, [rsp + rdi]
  3044 0000108C 4889541D00              	mov [rbp + rbx], rdx
  3045 00001091 4883EB08                	sub rbx, 8
  3046 00001095 48FFC9                  	dec rcx
  3047 00001098 4883F900                	cmp rcx, 0
  3048 0000109C 75E2                    	jne .L_tc_recycle_frame_loop_02df
  3049 0000109E 4889F3                  	mov rbx, rsi
  3050 000010A1 4883EB01                	sub rbx, 1
  3051 000010A5 488D1CDD00000000        	lea rbx, [rbx*8]
  3052 000010AD 4801DD                  	add rbp, rbx
  3053 000010B0 4889EC                  	mov rsp, rbp         ; fix stack pointers
  3054 000010B3 5D                      	pop rbp
  3055 000010B4 41FFE0                  	jmp r8
  3056 000010B7 C9                      	leave
  3057 000010B8 C21800                  	ret AND_KILL_FRAME(1)
  3058                                  .L_lambda_simple_end_0237:	; new closure is in rax
  3059 000010BB 48890425[4B110000]      	mov qword [free_var_52], rax
  3060 000010C3 48B8-                   	mov rax, sob_void
  3060 000010C5 [0000000000000000] 
  3061                                  
  3062 000010CD 4889C7                  	mov rdi, rax
  3063 000010D0 E8D2620100              	call print_sexpr_if_not_void
  3064 000010D5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3065 000010DA E873600100              	call malloc
  3066 000010DF 50                      	push rax
  3067 000010E0 BF00000000              	mov rdi, 8 * 0	; new rib
  3068 000010E5 E868600100              	call malloc
  3069 000010EA 50                      	push rax
  3070 000010EB BF08000000              	mov rdi, 8 * 1	; extended env
  3071 000010F0 E85D600100              	call malloc
  3072 000010F5 488B7D10                	mov rdi, ENV
  3073 000010F9 BE00000000              	mov rsi, 0
  3074 000010FE BA01000000              	mov rdx, 1
  3075                                  .L_lambda_simple_env_loop_0238:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  3076 00001103 4883FE00                	cmp rsi, 0
  3077 00001107 7410                    	je .L_lambda_simple_env_end_0238
  3078 00001109 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3079 0000110D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3080 00001111 48FFC6                  	inc rsi
  3081 00001114 48FFC2                  	inc rdx
  3082 00001117 EBEA                    	jmp .L_lambda_simple_env_loop_0238
  3083                                  .L_lambda_simple_env_end_0238:
  3084 00001119 5B                      	pop rbx
  3085 0000111A BE00000000              	mov rsi, 0
  3086                                  .L_lambda_simple_params_loop_0238:	; copy params
  3087 0000111F 4883FE00                	cmp rsi, 0
  3088 00001123 740E                    	je .L_lambda_simple_params_end_0238
  3089 00001125 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3090 0000112A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3091 0000112E 48FFC6                  	inc rsi
  3092 00001131 EBEC                    	jmp .L_lambda_simple_params_loop_0238
  3093                                  .L_lambda_simple_params_end_0238:
  3094 00001133 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  3095 00001136 4889C3                  	mov rbx, rax
  3096 00001139 58                      	pop rax
  3097 0000113A C60004                  	mov byte [rax], T_closure
  3098 0000113D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3099 00001141 48C74009[4E110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0238
  3100 00001149 E9BF000000              	jmp .L_lambda_simple_end_0238
  3101                                  .L_lambda_simple_code_0238:	; lambda-simple body
  3102 0000114E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3103 00001154 740B                    	je .L_lambda_simple_arity_check_ok_0238
  3104 00001156 FF742410                	push qword [rsp + 8 * 2]
  3105 0000115A 6A01                    	push 1
  3106 0000115C E9AA5F0100              	jmp L_error_incorrect_arity_simple
  3107                                  .L_lambda_simple_arity_check_ok_0238:
  3108 00001161 C8000000                	enter 0, 0
  3109                                  	; preparing a tail-call
  3110                                  	; preparing a non-tail-call
  3111 00001165 488B4520                	mov rax, PARAM(0)	; param x
  3112 00001169 50                      	push rax
  3113 0000116A 6A01                    	push 1	; arg count
  3114 0000116C 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  3115 00001174 803805                  	cmp byte [rax], T_undefined
  3116 00001177 0F84A85E0100            	je L_error_fvar_undefined
  3117 0000117D 803804                  	cmp byte [rax], T_closure
  3118 00001180 0F85235F0100            	jne L_error_non_closure
  3119 00001186 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3120 00001189 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3121 0000118C 50                      	push rax
  3122 0000118D 6A01                    	push 1	; arg count
  3123 0000118F 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  3124 00001197 803805                  	cmp byte [rax], T_undefined
  3125 0000119A 0F84855E0100            	je L_error_fvar_undefined
  3126 000011A0 803804                  	cmp byte [rax], T_closure
  3127 000011A3 0F85005F0100            	jne L_error_non_closure
  3128 000011A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3129 000011AC 4C8B4009                	mov r8, qword [rax + 1 + 8]
  3130 000011B0 FF7508                  	push qword [rbp + 8]				; push old return address
  3131 000011B3 FF7500                  	push qword [rbp]					; push old rbp
  3132                                  	;; move stack up ;;
  3133 000011B6 488B5D18                	mov rbx, [rbp + 3*8]
  3134 000011BA 4889DE                  	mov rsi, rbx						; save old size in rsi
  3135 000011BD 4883C303                	add rbx, 3
  3136 000011C1 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  3137 000011C9 B901000000              	mov rcx, 1
  3138 000011CE 4883C104                	add rcx, 4				; num of iterations in rcx
  3139                                  .L_tc_recycle_frame_loop_02e0:
  3140 000011D2 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  3141 000011DA 488B143C                	mov rdx, [rsp + rdi]
  3142 000011DE 4889541D00              	mov [rbp + rbx], rdx
  3143 000011E3 4883EB08                	sub rbx, 8
  3144 000011E7 48FFC9                  	dec rcx
  3145 000011EA 4883F900                	cmp rcx, 0
  3146 000011EE 75E2                    	jne .L_tc_recycle_frame_loop_02e0
  3147 000011F0 4889F3                  	mov rbx, rsi
  3148 000011F3 4883EB01                	sub rbx, 1
  3149 000011F7 488D1CDD00000000        	lea rbx, [rbx*8]
  3150 000011FF 4801DD                  	add rbp, rbx
  3151 00001202 4889EC                  	mov rsp, rbp         ; fix stack pointers
  3152 00001205 5D                      	pop rbp
  3153 00001206 41FFE0                  	jmp r8
  3154 00001209 C9                      	leave
  3155 0000120A C21800                  	ret AND_KILL_FRAME(1)
  3156                                  .L_lambda_simple_end_0238:	; new closure is in rax
  3157 0000120D 48890425[7E110000]      	mov qword [free_var_55], rax
  3158 00001215 48B8-                   	mov rax, sob_void
  3158 00001217 [0000000000000000] 
  3159                                  
  3160 0000121F 4889C7                  	mov rdi, rax
  3161 00001222 E880610100              	call print_sexpr_if_not_void
  3162 00001227 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3163 0000122C E8215F0100              	call malloc
  3164 00001231 50                      	push rax
  3165 00001232 BF00000000              	mov rdi, 8 * 0	; new rib
  3166 00001237 E8165F0100              	call malloc
  3167 0000123C 50                      	push rax
  3168 0000123D BF08000000              	mov rdi, 8 * 1	; extended env
  3169 00001242 E80B5F0100              	call malloc
  3170 00001247 488B7D10                	mov rdi, ENV
  3171 0000124B BE00000000              	mov rsi, 0
  3172 00001250 BA01000000              	mov rdx, 1
  3173                                  .L_lambda_simple_env_loop_0239:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  3174 00001255 4883FE00                	cmp rsi, 0
  3175 00001259 7410                    	je .L_lambda_simple_env_end_0239
  3176 0000125B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3177 0000125F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3178 00001263 48FFC6                  	inc rsi
  3179 00001266 48FFC2                  	inc rdx
  3180 00001269 EBEA                    	jmp .L_lambda_simple_env_loop_0239
  3181                                  .L_lambda_simple_env_end_0239:
  3182 0000126B 5B                      	pop rbx
  3183 0000126C BE00000000              	mov rsi, 0
  3184                                  .L_lambda_simple_params_loop_0239:	; copy params
  3185 00001271 4883FE00                	cmp rsi, 0
  3186 00001275 740E                    	je .L_lambda_simple_params_end_0239
  3187 00001277 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3188 0000127C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3189 00001280 48FFC6                  	inc rsi
  3190 00001283 EBEC                    	jmp .L_lambda_simple_params_loop_0239
  3191                                  .L_lambda_simple_params_end_0239:
  3192 00001285 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  3193 00001288 4889C3                  	mov rbx, rax
  3194 0000128B 58                      	pop rax
  3195 0000128C C60004                  	mov byte [rax], T_closure
  3196 0000128F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3197 00001293 48C74009[A0120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0239
  3198 0000129B E9BF000000              	jmp .L_lambda_simple_end_0239
  3199                                  .L_lambda_simple_code_0239:	; lambda-simple body
  3200 000012A0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3201 000012A6 740B                    	je .L_lambda_simple_arity_check_ok_0239
  3202 000012A8 FF742410                	push qword [rsp + 8 * 2]
  3203 000012AC 6A01                    	push 1
  3204 000012AE E9585E0100              	jmp L_error_incorrect_arity_simple
  3205                                  .L_lambda_simple_arity_check_ok_0239:
  3206 000012B3 C8000000                	enter 0, 0
  3207                                  	; preparing a tail-call
  3208                                  	; preparing a non-tail-call
  3209 000012B7 488B4520                	mov rax, PARAM(0)	; param x
  3210 000012BB 50                      	push rax
  3211 000012BC 6A01                    	push 1	; arg count
  3212 000012BE 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  3213 000012C6 803805                  	cmp byte [rax], T_undefined
  3214 000012C9 0F84565D0100            	je L_error_fvar_undefined
  3215 000012CF 803804                  	cmp byte [rax], T_closure
  3216 000012D2 0F85D15D0100            	jne L_error_non_closure
  3217 000012D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3218 000012DB FF5009                  	call SOB_CLOSURE_CODE(rax)
  3219 000012DE 50                      	push rax
  3220 000012DF 6A01                    	push 1	; arg count
  3221 000012E1 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  3222 000012E9 803805                  	cmp byte [rax], T_undefined
  3223 000012EC 0F84335D0100            	je L_error_fvar_undefined
  3224 000012F2 803804                  	cmp byte [rax], T_closure
  3225 000012F5 0F85AE5D0100            	jne L_error_non_closure
  3226 000012FB FF7001                  	push SOB_CLOSURE_ENV(rax)
  3227 000012FE 4C8B4009                	mov r8, qword [rax + 1 + 8]
  3228 00001302 FF7508                  	push qword [rbp + 8]				; push old return address
  3229 00001305 FF7500                  	push qword [rbp]					; push old rbp
  3230                                  	;; move stack up ;;
  3231 00001308 488B5D18                	mov rbx, [rbp + 3*8]
  3232 0000130C 4889DE                  	mov rsi, rbx						; save old size in rsi
  3233 0000130F 4883C303                	add rbx, 3
  3234 00001313 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  3235 0000131B B901000000              	mov rcx, 1
  3236 00001320 4883C104                	add rcx, 4				; num of iterations in rcx
  3237                                  .L_tc_recycle_frame_loop_02e1:
  3238 00001324 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  3239 0000132C 488B143C                	mov rdx, [rsp + rdi]
  3240 00001330 4889541D00              	mov [rbp + rbx], rdx
  3241 00001335 4883EB08                	sub rbx, 8
  3242 00001339 48FFC9                  	dec rcx
  3243 0000133C 4883F900                	cmp rcx, 0
  3244 00001340 75E2                    	jne .L_tc_recycle_frame_loop_02e1
  3245 00001342 4889F3                  	mov rbx, rsi
  3246 00001345 4883EB01                	sub rbx, 1
  3247 00001349 488D1CDD00000000        	lea rbx, [rbx*8]
  3248 00001351 4801DD                  	add rbp, rbx
  3249 00001354 4889EC                  	mov rsp, rbp         ; fix stack pointers
  3250 00001357 5D                      	pop rbp
  3251 00001358 41FFE0                  	jmp r8
  3252 0000135B C9                      	leave
  3253 0000135C C21800                  	ret AND_KILL_FRAME(1)
  3254                                  .L_lambda_simple_end_0239:	; new closure is in rax
  3255 0000135F 48890425[C2110000]      	mov qword [free_var_59], rax
  3256 00001367 48B8-                   	mov rax, sob_void
  3256 00001369 [0000000000000000] 
  3257                                  
  3258 00001371 4889C7                  	mov rdi, rax
  3259 00001374 E82E600100              	call print_sexpr_if_not_void
  3260 00001379 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3261 0000137E E8CF5D0100              	call malloc
  3262 00001383 50                      	push rax
  3263 00001384 BF00000000              	mov rdi, 8 * 0	; new rib
  3264 00001389 E8C45D0100              	call malloc
  3265 0000138E 50                      	push rax
  3266 0000138F BF08000000              	mov rdi, 8 * 1	; extended env
  3267 00001394 E8B95D0100              	call malloc
  3268 00001399 488B7D10                	mov rdi, ENV
  3269 0000139D BE00000000              	mov rsi, 0
  3270 000013A2 BA01000000              	mov rdx, 1
  3271                                  .L_lambda_simple_env_loop_023a:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  3272 000013A7 4883FE00                	cmp rsi, 0
  3273 000013AB 7410                    	je .L_lambda_simple_env_end_023a
  3274 000013AD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3275 000013B1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3276 000013B5 48FFC6                  	inc rsi
  3277 000013B8 48FFC2                  	inc rdx
  3278 000013BB EBEA                    	jmp .L_lambda_simple_env_loop_023a
  3279                                  .L_lambda_simple_env_end_023a:
  3280 000013BD 5B                      	pop rbx
  3281 000013BE BE00000000              	mov rsi, 0
  3282                                  .L_lambda_simple_params_loop_023a:	; copy params
  3283 000013C3 4883FE00                	cmp rsi, 0
  3284 000013C7 740E                    	je .L_lambda_simple_params_end_023a
  3285 000013C9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3286 000013CE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3287 000013D2 48FFC6                  	inc rsi
  3288 000013D5 EBEC                    	jmp .L_lambda_simple_params_loop_023a
  3289                                  .L_lambda_simple_params_end_023a:
  3290 000013D7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  3291 000013DA 4889C3                  	mov rbx, rax
  3292 000013DD 58                      	pop rax
  3293 000013DE C60004                  	mov byte [rax], T_closure
  3294 000013E1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3295 000013E5 48C74009[F2130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_023a
  3296 000013ED E9BF000000              	jmp .L_lambda_simple_end_023a
  3297                                  .L_lambda_simple_code_023a:	; lambda-simple body
  3298 000013F2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3299 000013F8 740B                    	je .L_lambda_simple_arity_check_ok_023a
  3300 000013FA FF742410                	push qword [rsp + 8 * 2]
  3301 000013FE 6A01                    	push 1
  3302 00001400 E9065D0100              	jmp L_error_incorrect_arity_simple
  3303                                  .L_lambda_simple_arity_check_ok_023a:
  3304 00001405 C8000000                	enter 0, 0
  3305                                  	; preparing a tail-call
  3306                                  	; preparing a non-tail-call
  3307 00001409 488B4520                	mov rax, PARAM(0)	; param x
  3308 0000140D 50                      	push rax
  3309 0000140E 6A01                    	push 1	; arg count
  3310 00001410 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  3311 00001418 803805                  	cmp byte [rax], T_undefined
  3312 0000141B 0F84045C0100            	je L_error_fvar_undefined
  3313 00001421 803804                  	cmp byte [rax], T_closure
  3314 00001424 0F857F5C0100            	jne L_error_non_closure
  3315 0000142A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3316 0000142D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3317 00001430 50                      	push rax
  3318 00001431 6A01                    	push 1	; arg count
  3319 00001433 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  3320 0000143B 803805                  	cmp byte [rax], T_undefined
  3321 0000143E 0F84E15B0100            	je L_error_fvar_undefined
  3322 00001444 803804                  	cmp byte [rax], T_closure
  3323 00001447 0F855C5C0100            	jne L_error_non_closure
  3324 0000144D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3325 00001450 4C8B4009                	mov r8, qword [rax + 1 + 8]
  3326 00001454 FF7508                  	push qword [rbp + 8]				; push old return address
  3327 00001457 FF7500                  	push qword [rbp]					; push old rbp
  3328                                  	;; move stack up ;;
  3329 0000145A 488B5D18                	mov rbx, [rbp + 3*8]
  3330 0000145E 4889DE                  	mov rsi, rbx						; save old size in rsi
  3331 00001461 4883C303                	add rbx, 3
  3332 00001465 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  3333 0000146D B901000000              	mov rcx, 1
  3334 00001472 4883C104                	add rcx, 4				; num of iterations in rcx
  3335                                  .L_tc_recycle_frame_loop_02e2:
  3336 00001476 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  3337 0000147E 488B143C                	mov rdx, [rsp + rdi]
  3338 00001482 4889541D00              	mov [rbp + rbx], rdx
  3339 00001487 4883EB08                	sub rbx, 8
  3340 0000148B 48FFC9                  	dec rcx
  3341 0000148E 4883F900                	cmp rcx, 0
  3342 00001492 75E2                    	jne .L_tc_recycle_frame_loop_02e2
  3343 00001494 4889F3                  	mov rbx, rsi
  3344 00001497 4883EB01                	sub rbx, 1
  3345 0000149B 488D1CDD00000000        	lea rbx, [rbx*8]
  3346 000014A3 4801DD                  	add rbp, rbx
  3347 000014A6 4889EC                  	mov rsp, rbp         ; fix stack pointers
  3348 000014A9 5D                      	pop rbp
  3349 000014AA 41FFE0                  	jmp r8
  3350 000014AD C9                      	leave
  3351 000014AE C21800                  	ret AND_KILL_FRAME(1)
  3352                                  .L_lambda_simple_end_023a:	; new closure is in rax
  3353 000014B1 48890425[F5110000]      	mov qword [free_var_62], rax
  3354 000014B9 48B8-                   	mov rax, sob_void
  3354 000014BB [0000000000000000] 
  3355                                  
  3356 000014C3 4889C7                  	mov rdi, rax
  3357 000014C6 E8DC5E0100              	call print_sexpr_if_not_void
  3358 000014CB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3359 000014D0 E87D5C0100              	call malloc
  3360 000014D5 50                      	push rax
  3361 000014D6 BF00000000              	mov rdi, 8 * 0	; new rib
  3362 000014DB E8725C0100              	call malloc
  3363 000014E0 50                      	push rax
  3364 000014E1 BF08000000              	mov rdi, 8 * 1	; extended env
  3365 000014E6 E8675C0100              	call malloc
  3366 000014EB 488B7D10                	mov rdi, ENV
  3367 000014EF BE00000000              	mov rsi, 0
  3368 000014F4 BA01000000              	mov rdx, 1
  3369                                  .L_lambda_simple_env_loop_023b:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  3370 000014F9 4883FE00                	cmp rsi, 0
  3371 000014FD 7410                    	je .L_lambda_simple_env_end_023b
  3372 000014FF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3373 00001503 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3374 00001507 48FFC6                  	inc rsi
  3375 0000150A 48FFC2                  	inc rdx
  3376 0000150D EBEA                    	jmp .L_lambda_simple_env_loop_023b
  3377                                  .L_lambda_simple_env_end_023b:
  3378 0000150F 5B                      	pop rbx
  3379 00001510 BE00000000              	mov rsi, 0
  3380                                  .L_lambda_simple_params_loop_023b:	; copy params
  3381 00001515 4883FE00                	cmp rsi, 0
  3382 00001519 740E                    	je .L_lambda_simple_params_end_023b
  3383 0000151B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3384 00001520 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3385 00001524 48FFC6                  	inc rsi
  3386 00001527 EBEC                    	jmp .L_lambda_simple_params_loop_023b
  3387                                  .L_lambda_simple_params_end_023b:
  3388 00001529 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  3389 0000152C 4889C3                  	mov rbx, rax
  3390 0000152F 58                      	pop rax
  3391 00001530 C60004                  	mov byte [rax], T_closure
  3392 00001533 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3393 00001537 48C74009[44150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_023b
  3394 0000153F E9BF000000              	jmp .L_lambda_simple_end_023b
  3395                                  .L_lambda_simple_code_023b:	; lambda-simple body
  3396 00001544 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3397 0000154A 740B                    	je .L_lambda_simple_arity_check_ok_023b
  3398 0000154C FF742410                	push qword [rsp + 8 * 2]
  3399 00001550 6A01                    	push 1
  3400 00001552 E9B45B0100              	jmp L_error_incorrect_arity_simple
  3401                                  .L_lambda_simple_arity_check_ok_023b:
  3402 00001557 C8000000                	enter 0, 0
  3403                                  	; preparing a tail-call
  3404                                  	; preparing a non-tail-call
  3405 0000155B 488B4520                	mov rax, PARAM(0)	; param x
  3406 0000155F 50                      	push rax
  3407 00001560 6A01                    	push 1	; arg count
  3408 00001562 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  3409 0000156A 803805                  	cmp byte [rax], T_undefined
  3410 0000156D 0F84B25A0100            	je L_error_fvar_undefined
  3411 00001573 803804                  	cmp byte [rax], T_closure
  3412 00001576 0F852D5B0100            	jne L_error_non_closure
  3413 0000157C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3414 0000157F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3415 00001582 50                      	push rax
  3416 00001583 6A01                    	push 1	; arg count
  3417 00001585 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  3418 0000158D 803805                  	cmp byte [rax], T_undefined
  3419 00001590 0F848F5A0100            	je L_error_fvar_undefined
  3420 00001596 803804                  	cmp byte [rax], T_closure
  3421 00001599 0F850A5B0100            	jne L_error_non_closure
  3422 0000159F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3423 000015A2 4C8B4009                	mov r8, qword [rax + 1 + 8]
  3424 000015A6 FF7508                  	push qword [rbp + 8]				; push old return address
  3425 000015A9 FF7500                  	push qword [rbp]					; push old rbp
  3426                                  	;; move stack up ;;
  3427 000015AC 488B5D18                	mov rbx, [rbp + 3*8]
  3428 000015B0 4889DE                  	mov rsi, rbx						; save old size in rsi
  3429 000015B3 4883C303                	add rbx, 3
  3430 000015B7 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  3431 000015BF B901000000              	mov rcx, 1
  3432 000015C4 4883C104                	add rcx, 4				; num of iterations in rcx
  3433                                  .L_tc_recycle_frame_loop_02e3:
  3434 000015C8 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  3435 000015D0 488B143C                	mov rdx, [rsp + rdi]
  3436 000015D4 4889541D00              	mov [rbp + rbx], rdx
  3437 000015D9 4883EB08                	sub rbx, 8
  3438 000015DD 48FFC9                  	dec rcx
  3439 000015E0 4883F900                	cmp rcx, 0
  3440 000015E4 75E2                    	jne .L_tc_recycle_frame_loop_02e3
  3441 000015E6 4889F3                  	mov rbx, rsi
  3442 000015E9 4883EB01                	sub rbx, 1
  3443 000015ED 488D1CDD00000000        	lea rbx, [rbx*8]
  3444 000015F5 4801DD                  	add rbp, rbx
  3445 000015F8 4889EC                  	mov rsp, rbp         ; fix stack pointers
  3446 000015FB 5D                      	pop rbp
  3447 000015FC 41FFE0                  	jmp r8
  3448 000015FF C9                      	leave
  3449 00001600 C21800                  	ret AND_KILL_FRAME(1)
  3450                                  .L_lambda_simple_end_023b:	; new closure is in rax
  3451 00001603 48890425[2A100000]      	mov qword [free_var_35], rax
  3452 0000160B 48B8-                   	mov rax, sob_void
  3452 0000160D [0000000000000000] 
  3453                                  
  3454 00001615 4889C7                  	mov rdi, rax
  3455 00001618 E88A5D0100              	call print_sexpr_if_not_void
  3456 0000161D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3457 00001622 E82B5B0100              	call malloc
  3458 00001627 50                      	push rax
  3459 00001628 BF00000000              	mov rdi, 8 * 0	; new rib
  3460 0000162D E8205B0100              	call malloc
  3461 00001632 50                      	push rax
  3462 00001633 BF08000000              	mov rdi, 8 * 1	; extended env
  3463 00001638 E8155B0100              	call malloc
  3464 0000163D 488B7D10                	mov rdi, ENV
  3465 00001641 BE00000000              	mov rsi, 0
  3466 00001646 BA01000000              	mov rdx, 1
  3467                                  .L_lambda_simple_env_loop_023c:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  3468 0000164B 4883FE00                	cmp rsi, 0
  3469 0000164F 7410                    	je .L_lambda_simple_env_end_023c
  3470 00001651 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3471 00001655 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3472 00001659 48FFC6                  	inc rsi
  3473 0000165C 48FFC2                  	inc rdx
  3474 0000165F EBEA                    	jmp .L_lambda_simple_env_loop_023c
  3475                                  .L_lambda_simple_env_end_023c:
  3476 00001661 5B                      	pop rbx
  3477 00001662 BE00000000              	mov rsi, 0
  3478                                  .L_lambda_simple_params_loop_023c:	; copy params
  3479 00001667 4883FE00                	cmp rsi, 0
  3480 0000166B 740E                    	je .L_lambda_simple_params_end_023c
  3481 0000166D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3482 00001672 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3483 00001676 48FFC6                  	inc rsi
  3484 00001679 EBEC                    	jmp .L_lambda_simple_params_loop_023c
  3485                                  .L_lambda_simple_params_end_023c:
  3486 0000167B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  3487 0000167E 4889C3                  	mov rbx, rax
  3488 00001681 58                      	pop rax
  3489 00001682 C60004                  	mov byte [rax], T_closure
  3490 00001685 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3491 00001689 48C74009[96160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_023c
  3492 00001691 E9BF000000              	jmp .L_lambda_simple_end_023c
  3493                                  .L_lambda_simple_code_023c:	; lambda-simple body
  3494 00001696 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3495 0000169C 740B                    	je .L_lambda_simple_arity_check_ok_023c
  3496 0000169E FF742410                	push qword [rsp + 8 * 2]
  3497 000016A2 6A01                    	push 1
  3498 000016A4 E9625A0100              	jmp L_error_incorrect_arity_simple
  3499                                  .L_lambda_simple_arity_check_ok_023c:
  3500 000016A9 C8000000                	enter 0, 0
  3501                                  	; preparing a tail-call
  3502                                  	; preparing a non-tail-call
  3503 000016AD 488B4520                	mov rax, PARAM(0)	; param x
  3504 000016B1 50                      	push rax
  3505 000016B2 6A01                    	push 1	; arg count
  3506 000016B4 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  3507 000016BC 803805                  	cmp byte [rax], T_undefined
  3508 000016BF 0F8460590100            	je L_error_fvar_undefined
  3509 000016C5 803804                  	cmp byte [rax], T_closure
  3510 000016C8 0F85DB590100            	jne L_error_non_closure
  3511 000016CE FF7001                  	push SOB_CLOSURE_ENV(rax)
  3512 000016D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3513 000016D4 50                      	push rax
  3514 000016D5 6A01                    	push 1	; arg count
  3515 000016D7 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  3516 000016DF 803805                  	cmp byte [rax], T_undefined
  3517 000016E2 0F843D590100            	je L_error_fvar_undefined
  3518 000016E8 803804                  	cmp byte [rax], T_closure
  3519 000016EB 0F85B8590100            	jne L_error_non_closure
  3520 000016F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3521 000016F4 4C8B4009                	mov r8, qword [rax + 1 + 8]
  3522 000016F8 FF7508                  	push qword [rbp + 8]				; push old return address
  3523 000016FB FF7500                  	push qword [rbp]					; push old rbp
  3524                                  	;; move stack up ;;
  3525 000016FE 488B5D18                	mov rbx, [rbp + 3*8]
  3526 00001702 4889DE                  	mov rsi, rbx						; save old size in rsi
  3527 00001705 4883C303                	add rbx, 3
  3528 00001709 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  3529 00001711 B901000000              	mov rcx, 1
  3530 00001716 4883C104                	add rcx, 4				; num of iterations in rcx
  3531                                  .L_tc_recycle_frame_loop_02e4:
  3532 0000171A 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  3533 00001722 488B143C                	mov rdx, [rsp + rdi]
  3534 00001726 4889541D00              	mov [rbp + rbx], rdx
  3535 0000172B 4883EB08                	sub rbx, 8
  3536 0000172F 48FFC9                  	dec rcx
  3537 00001732 4883F900                	cmp rcx, 0
  3538 00001736 75E2                    	jne .L_tc_recycle_frame_loop_02e4
  3539 00001738 4889F3                  	mov rbx, rsi
  3540 0000173B 4883EB01                	sub rbx, 1
  3541 0000173F 488D1CDD00000000        	lea rbx, [rbx*8]
  3542 00001747 4801DD                  	add rbp, rbx
  3543 0000174A 4889EC                  	mov rsp, rbp         ; fix stack pointers
  3544 0000174D 5D                      	pop rbp
  3545 0000174E 41FFE0                  	jmp r8
  3546 00001751 C9                      	leave
  3547 00001752 C21800                  	ret AND_KILL_FRAME(1)
  3548                                  .L_lambda_simple_end_023c:	; new closure is in rax
  3549 00001755 48890425[3B100000]      	mov qword [free_var_36], rax
  3550 0000175D 48B8-                   	mov rax, sob_void
  3550 0000175F [0000000000000000] 
  3551                                  
  3552 00001767 4889C7                  	mov rdi, rax
  3553 0000176A E8385C0100              	call print_sexpr_if_not_void
  3554 0000176F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3555 00001774 E8D9590100              	call malloc
  3556 00001779 50                      	push rax
  3557 0000177A BF00000000              	mov rdi, 8 * 0	; new rib
  3558 0000177F E8CE590100              	call malloc
  3559 00001784 50                      	push rax
  3560 00001785 BF08000000              	mov rdi, 8 * 1	; extended env
  3561 0000178A E8C3590100              	call malloc
  3562 0000178F 488B7D10                	mov rdi, ENV
  3563 00001793 BE00000000              	mov rsi, 0
  3564 00001798 BA01000000              	mov rdx, 1
  3565                                  .L_lambda_simple_env_loop_023d:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  3566 0000179D 4883FE00                	cmp rsi, 0
  3567 000017A1 7410                    	je .L_lambda_simple_env_end_023d
  3568 000017A3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3569 000017A7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3570 000017AB 48FFC6                  	inc rsi
  3571 000017AE 48FFC2                  	inc rdx
  3572 000017B1 EBEA                    	jmp .L_lambda_simple_env_loop_023d
  3573                                  .L_lambda_simple_env_end_023d:
  3574 000017B3 5B                      	pop rbx
  3575 000017B4 BE00000000              	mov rsi, 0
  3576                                  .L_lambda_simple_params_loop_023d:	; copy params
  3577 000017B9 4883FE00                	cmp rsi, 0
  3578 000017BD 740E                    	je .L_lambda_simple_params_end_023d
  3579 000017BF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3580 000017C4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3581 000017C8 48FFC6                  	inc rsi
  3582 000017CB EBEC                    	jmp .L_lambda_simple_params_loop_023d
  3583                                  .L_lambda_simple_params_end_023d:
  3584 000017CD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  3585 000017D0 4889C3                  	mov rbx, rax
  3586 000017D3 58                      	pop rax
  3587 000017D4 C60004                  	mov byte [rax], T_closure
  3588 000017D7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3589 000017DB 48C74009[E8170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_023d
  3590 000017E3 E9BF000000              	jmp .L_lambda_simple_end_023d
  3591                                  .L_lambda_simple_code_023d:	; lambda-simple body
  3592 000017E8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3593 000017EE 740B                    	je .L_lambda_simple_arity_check_ok_023d
  3594 000017F0 FF742410                	push qword [rsp + 8 * 2]
  3595 000017F4 6A01                    	push 1
  3596 000017F6 E910590100              	jmp L_error_incorrect_arity_simple
  3597                                  .L_lambda_simple_arity_check_ok_023d:
  3598 000017FB C8000000                	enter 0, 0
  3599                                  	; preparing a tail-call
  3600                                  	; preparing a non-tail-call
  3601 000017FF 488B4520                	mov rax, PARAM(0)	; param x
  3602 00001803 50                      	push rax
  3603 00001804 6A01                    	push 1	; arg count
  3604 00001806 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  3605 0000180E 803805                  	cmp byte [rax], T_undefined
  3606 00001811 0F840E580100            	je L_error_fvar_undefined
  3607 00001817 803804                  	cmp byte [rax], T_closure
  3608 0000181A 0F8589580100            	jne L_error_non_closure
  3609 00001820 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3610 00001823 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3611 00001826 50                      	push rax
  3612 00001827 6A01                    	push 1	; arg count
  3613 00001829 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  3614 00001831 803805                  	cmp byte [rax], T_undefined
  3615 00001834 0F84EB570100            	je L_error_fvar_undefined
  3616 0000183A 803804                  	cmp byte [rax], T_closure
  3617 0000183D 0F8566580100            	jne L_error_non_closure
  3618 00001843 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3619 00001846 4C8B4009                	mov r8, qword [rax + 1 + 8]
  3620 0000184A FF7508                  	push qword [rbp + 8]				; push old return address
  3621 0000184D FF7500                  	push qword [rbp]					; push old rbp
  3622                                  	;; move stack up ;;
  3623 00001850 488B5D18                	mov rbx, [rbp + 3*8]
  3624 00001854 4889DE                  	mov rsi, rbx						; save old size in rsi
  3625 00001857 4883C303                	add rbx, 3
  3626 0000185B 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  3627 00001863 B901000000              	mov rcx, 1
  3628 00001868 4883C104                	add rcx, 4				; num of iterations in rcx
  3629                                  .L_tc_recycle_frame_loop_02e5:
  3630 0000186C 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  3631 00001874 488B143C                	mov rdx, [rsp + rdi]
  3632 00001878 4889541D00              	mov [rbp + rbx], rdx
  3633 0000187D 4883EB08                	sub rbx, 8
  3634 00001881 48FFC9                  	dec rcx
  3635 00001884 4883F900                	cmp rcx, 0
  3636 00001888 75E2                    	jne .L_tc_recycle_frame_loop_02e5
  3637 0000188A 4889F3                  	mov rbx, rsi
  3638 0000188D 4883EB01                	sub rbx, 1
  3639 00001891 488D1CDD00000000        	lea rbx, [rbx*8]
  3640 00001899 4801DD                  	add rbp, rbx
  3641 0000189C 4889EC                  	mov rsp, rbp         ; fix stack pointers
  3642 0000189F 5D                      	pop rbp
  3643 000018A0 41FFE0                  	jmp r8
  3644 000018A3 C9                      	leave
  3645 000018A4 C21800                  	ret AND_KILL_FRAME(1)
  3646                                  .L_lambda_simple_end_023d:	; new closure is in rax
  3647 000018A7 48890425[5D100000]      	mov qword [free_var_38], rax
  3648 000018AF 48B8-                   	mov rax, sob_void
  3648 000018B1 [0000000000000000] 
  3649                                  
  3650 000018B9 4889C7                  	mov rdi, rax
  3651 000018BC E8E65A0100              	call print_sexpr_if_not_void
  3652 000018C1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3653 000018C6 E887580100              	call malloc
  3654 000018CB 50                      	push rax
  3655 000018CC BF00000000              	mov rdi, 8 * 0	; new rib
  3656 000018D1 E87C580100              	call malloc
  3657 000018D6 50                      	push rax
  3658 000018D7 BF08000000              	mov rdi, 8 * 1	; extended env
  3659 000018DC E871580100              	call malloc
  3660 000018E1 488B7D10                	mov rdi, ENV
  3661 000018E5 BE00000000              	mov rsi, 0
  3662 000018EA BA01000000              	mov rdx, 1
  3663                                  .L_lambda_simple_env_loop_023e:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  3664 000018EF 4883FE00                	cmp rsi, 0
  3665 000018F3 7410                    	je .L_lambda_simple_env_end_023e
  3666 000018F5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3667 000018F9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3668 000018FD 48FFC6                  	inc rsi
  3669 00001900 48FFC2                  	inc rdx
  3670 00001903 EBEA                    	jmp .L_lambda_simple_env_loop_023e
  3671                                  .L_lambda_simple_env_end_023e:
  3672 00001905 5B                      	pop rbx
  3673 00001906 BE00000000              	mov rsi, 0
  3674                                  .L_lambda_simple_params_loop_023e:	; copy params
  3675 0000190B 4883FE00                	cmp rsi, 0
  3676 0000190F 740E                    	je .L_lambda_simple_params_end_023e
  3677 00001911 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3678 00001916 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3679 0000191A 48FFC6                  	inc rsi
  3680 0000191D EBEC                    	jmp .L_lambda_simple_params_loop_023e
  3681                                  .L_lambda_simple_params_end_023e:
  3682 0000191F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  3683 00001922 4889C3                  	mov rbx, rax
  3684 00001925 58                      	pop rax
  3685 00001926 C60004                  	mov byte [rax], T_closure
  3686 00001929 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3687 0000192D 48C74009[3A190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_023e
  3688 00001935 E9BF000000              	jmp .L_lambda_simple_end_023e
  3689                                  .L_lambda_simple_code_023e:	; lambda-simple body
  3690 0000193A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3691 00001940 740B                    	je .L_lambda_simple_arity_check_ok_023e
  3692 00001942 FF742410                	push qword [rsp + 8 * 2]
  3693 00001946 6A01                    	push 1
  3694 00001948 E9BE570100              	jmp L_error_incorrect_arity_simple
  3695                                  .L_lambda_simple_arity_check_ok_023e:
  3696 0000194D C8000000                	enter 0, 0
  3697                                  	; preparing a tail-call
  3698                                  	; preparing a non-tail-call
  3699 00001951 488B4520                	mov rax, PARAM(0)	; param x
  3700 00001955 50                      	push rax
  3701 00001956 6A01                    	push 1	; arg count
  3702 00001958 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  3703 00001960 803805                  	cmp byte [rax], T_undefined
  3704 00001963 0F84BC560100            	je L_error_fvar_undefined
  3705 00001969 803804                  	cmp byte [rax], T_closure
  3706 0000196C 0F8537570100            	jne L_error_non_closure
  3707 00001972 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3708 00001975 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3709 00001978 50                      	push rax
  3710 00001979 6A01                    	push 1	; arg count
  3711 0000197B 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  3712 00001983 803805                  	cmp byte [rax], T_undefined
  3713 00001986 0F8499560100            	je L_error_fvar_undefined
  3714 0000198C 803804                  	cmp byte [rax], T_closure
  3715 0000198F 0F8514570100            	jne L_error_non_closure
  3716 00001995 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3717 00001998 4C8B4009                	mov r8, qword [rax + 1 + 8]
  3718 0000199C FF7508                  	push qword [rbp + 8]				; push old return address
  3719 0000199F FF7500                  	push qword [rbp]					; push old rbp
  3720                                  	;; move stack up ;;
  3721 000019A2 488B5D18                	mov rbx, [rbp + 3*8]
  3722 000019A6 4889DE                  	mov rsi, rbx						; save old size in rsi
  3723 000019A9 4883C303                	add rbx, 3
  3724 000019AD 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  3725 000019B5 B901000000              	mov rcx, 1
  3726 000019BA 4883C104                	add rcx, 4				; num of iterations in rcx
  3727                                  .L_tc_recycle_frame_loop_02e6:
  3728 000019BE 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  3729 000019C6 488B143C                	mov rdx, [rsp + rdi]
  3730 000019CA 4889541D00              	mov [rbp + rbx], rdx
  3731 000019CF 4883EB08                	sub rbx, 8
  3732 000019D3 48FFC9                  	dec rcx
  3733 000019D6 4883F900                	cmp rcx, 0
  3734 000019DA 75E2                    	jne .L_tc_recycle_frame_loop_02e6
  3735 000019DC 4889F3                  	mov rbx, rsi
  3736 000019DF 4883EB01                	sub rbx, 1
  3737 000019E3 488D1CDD00000000        	lea rbx, [rbx*8]
  3738 000019EB 4801DD                  	add rbp, rbx
  3739 000019EE 4889EC                  	mov rsp, rbp         ; fix stack pointers
  3740 000019F1 5D                      	pop rbp
  3741 000019F2 41FFE0                  	jmp r8
  3742 000019F5 C9                      	leave
  3743 000019F6 C21800                  	ret AND_KILL_FRAME(1)
  3744                                  .L_lambda_simple_end_023e:	; new closure is in rax
  3745 000019F9 48890425[6E100000]      	mov qword [free_var_39], rax
  3746 00001A01 48B8-                   	mov rax, sob_void
  3746 00001A03 [0000000000000000] 
  3747                                  
  3748 00001A0B 4889C7                  	mov rdi, rax
  3749 00001A0E E894590100              	call print_sexpr_if_not_void
  3750 00001A13 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3751 00001A18 E835570100              	call malloc
  3752 00001A1D 50                      	push rax
  3753 00001A1E BF00000000              	mov rdi, 8 * 0	; new rib
  3754 00001A23 E82A570100              	call malloc
  3755 00001A28 50                      	push rax
  3756 00001A29 BF08000000              	mov rdi, 8 * 1	; extended env
  3757 00001A2E E81F570100              	call malloc
  3758 00001A33 488B7D10                	mov rdi, ENV
  3759 00001A37 BE00000000              	mov rsi, 0
  3760 00001A3C BA01000000              	mov rdx, 1
  3761                                  .L_lambda_simple_env_loop_023f:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  3762 00001A41 4883FE00                	cmp rsi, 0
  3763 00001A45 7410                    	je .L_lambda_simple_env_end_023f
  3764 00001A47 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3765 00001A4B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3766 00001A4F 48FFC6                  	inc rsi
  3767 00001A52 48FFC2                  	inc rdx
  3768 00001A55 EBEA                    	jmp .L_lambda_simple_env_loop_023f
  3769                                  .L_lambda_simple_env_end_023f:
  3770 00001A57 5B                      	pop rbx
  3771 00001A58 BE00000000              	mov rsi, 0
  3772                                  .L_lambda_simple_params_loop_023f:	; copy params
  3773 00001A5D 4883FE00                	cmp rsi, 0
  3774 00001A61 740E                    	je .L_lambda_simple_params_end_023f
  3775 00001A63 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3776 00001A68 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3777 00001A6C 48FFC6                  	inc rsi
  3778 00001A6F EBEC                    	jmp .L_lambda_simple_params_loop_023f
  3779                                  .L_lambda_simple_params_end_023f:
  3780 00001A71 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  3781 00001A74 4889C3                  	mov rbx, rax
  3782 00001A77 58                      	pop rax
  3783 00001A78 C60004                  	mov byte [rax], T_closure
  3784 00001A7B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3785 00001A7F 48C74009[8C1A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_023f
  3786 00001A87 E9BF000000              	jmp .L_lambda_simple_end_023f
  3787                                  .L_lambda_simple_code_023f:	; lambda-simple body
  3788 00001A8C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3789 00001A92 740B                    	je .L_lambda_simple_arity_check_ok_023f
  3790 00001A94 FF742410                	push qword [rsp + 8 * 2]
  3791 00001A98 6A01                    	push 1
  3792 00001A9A E96C560100              	jmp L_error_incorrect_arity_simple
  3793                                  .L_lambda_simple_arity_check_ok_023f:
  3794 00001A9F C8000000                	enter 0, 0
  3795                                  	; preparing a tail-call
  3796                                  	; preparing a non-tail-call
  3797 00001AA3 488B4520                	mov rax, PARAM(0)	; param x
  3798 00001AA7 50                      	push rax
  3799 00001AA8 6A01                    	push 1	; arg count
  3800 00001AAA 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  3801 00001AB2 803805                  	cmp byte [rax], T_undefined
  3802 00001AB5 0F846A550100            	je L_error_fvar_undefined
  3803 00001ABB 803804                  	cmp byte [rax], T_closure
  3804 00001ABE 0F85E5550100            	jne L_error_non_closure
  3805 00001AC4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3806 00001AC7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3807 00001ACA 50                      	push rax
  3808 00001ACB 6A01                    	push 1	; arg count
  3809 00001ACD 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  3810 00001AD5 803805                  	cmp byte [rax], T_undefined
  3811 00001AD8 0F8447550100            	je L_error_fvar_undefined
  3812 00001ADE 803804                  	cmp byte [rax], T_closure
  3813 00001AE1 0F85C2550100            	jne L_error_non_closure
  3814 00001AE7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3815 00001AEA 4C8B4009                	mov r8, qword [rax + 1 + 8]
  3816 00001AEE FF7508                  	push qword [rbp + 8]				; push old return address
  3817 00001AF1 FF7500                  	push qword [rbp]					; push old rbp
  3818                                  	;; move stack up ;;
  3819 00001AF4 488B5D18                	mov rbx, [rbp + 3*8]
  3820 00001AF8 4889DE                  	mov rsi, rbx						; save old size in rsi
  3821 00001AFB 4883C303                	add rbx, 3
  3822 00001AFF 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  3823 00001B07 B901000000              	mov rcx, 1
  3824 00001B0C 4883C104                	add rcx, 4				; num of iterations in rcx
  3825                                  .L_tc_recycle_frame_loop_02e7:
  3826 00001B10 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  3827 00001B18 488B143C                	mov rdx, [rsp + rdi]
  3828 00001B1C 4889541D00              	mov [rbp + rbx], rdx
  3829 00001B21 4883EB08                	sub rbx, 8
  3830 00001B25 48FFC9                  	dec rcx
  3831 00001B28 4883F900                	cmp rcx, 0
  3832 00001B2C 75E2                    	jne .L_tc_recycle_frame_loop_02e7
  3833 00001B2E 4889F3                  	mov rbx, rsi
  3834 00001B31 4883EB01                	sub rbx, 1
  3835 00001B35 488D1CDD00000000        	lea rbx, [rbx*8]
  3836 00001B3D 4801DD                  	add rbp, rbx
  3837 00001B40 4889EC                  	mov rsp, rbp         ; fix stack pointers
  3838 00001B43 5D                      	pop rbp
  3839 00001B44 41FFE0                  	jmp r8
  3840 00001B47 C9                      	leave
  3841 00001B48 C21800                  	ret AND_KILL_FRAME(1)
  3842                                  .L_lambda_simple_end_023f:	; new closure is in rax
  3843 00001B4B 48890425[A1100000]      	mov qword [free_var_42], rax
  3844 00001B53 48B8-                   	mov rax, sob_void
  3844 00001B55 [0000000000000000] 
  3845                                  
  3846 00001B5D 4889C7                  	mov rdi, rax
  3847 00001B60 E842580100              	call print_sexpr_if_not_void
  3848 00001B65 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3849 00001B6A E8E3550100              	call malloc
  3850 00001B6F 50                      	push rax
  3851 00001B70 BF00000000              	mov rdi, 8 * 0	; new rib
  3852 00001B75 E8D8550100              	call malloc
  3853 00001B7A 50                      	push rax
  3854 00001B7B BF08000000              	mov rdi, 8 * 1	; extended env
  3855 00001B80 E8CD550100              	call malloc
  3856 00001B85 488B7D10                	mov rdi, ENV
  3857 00001B89 BE00000000              	mov rsi, 0
  3858 00001B8E BA01000000              	mov rdx, 1
  3859                                  .L_lambda_simple_env_loop_0240:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  3860 00001B93 4883FE00                	cmp rsi, 0
  3861 00001B97 7410                    	je .L_lambda_simple_env_end_0240
  3862 00001B99 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3863 00001B9D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3864 00001BA1 48FFC6                  	inc rsi
  3865 00001BA4 48FFC2                  	inc rdx
  3866 00001BA7 EBEA                    	jmp .L_lambda_simple_env_loop_0240
  3867                                  .L_lambda_simple_env_end_0240:
  3868 00001BA9 5B                      	pop rbx
  3869 00001BAA BE00000000              	mov rsi, 0
  3870                                  .L_lambda_simple_params_loop_0240:	; copy params
  3871 00001BAF 4883FE00                	cmp rsi, 0
  3872 00001BB3 740E                    	je .L_lambda_simple_params_end_0240
  3873 00001BB5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3874 00001BBA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3875 00001BBE 48FFC6                  	inc rsi
  3876 00001BC1 EBEC                    	jmp .L_lambda_simple_params_loop_0240
  3877                                  .L_lambda_simple_params_end_0240:
  3878 00001BC3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  3879 00001BC6 4889C3                  	mov rbx, rax
  3880 00001BC9 58                      	pop rax
  3881 00001BCA C60004                  	mov byte [rax], T_closure
  3882 00001BCD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3883 00001BD1 48C74009[DE1B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0240
  3884 00001BD9 E9BF000000              	jmp .L_lambda_simple_end_0240
  3885                                  .L_lambda_simple_code_0240:	; lambda-simple body
  3886 00001BDE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3887 00001BE4 740B                    	je .L_lambda_simple_arity_check_ok_0240
  3888 00001BE6 FF742410                	push qword [rsp + 8 * 2]
  3889 00001BEA 6A01                    	push 1
  3890 00001BEC E91A550100              	jmp L_error_incorrect_arity_simple
  3891                                  .L_lambda_simple_arity_check_ok_0240:
  3892 00001BF1 C8000000                	enter 0, 0
  3893                                  	; preparing a tail-call
  3894                                  	; preparing a non-tail-call
  3895 00001BF5 488B4520                	mov rax, PARAM(0)	; param x
  3896 00001BF9 50                      	push rax
  3897 00001BFA 6A01                    	push 1	; arg count
  3898 00001BFC 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  3899 00001C04 803805                  	cmp byte [rax], T_undefined
  3900 00001C07 0F8418540100            	je L_error_fvar_undefined
  3901 00001C0D 803804                  	cmp byte [rax], T_closure
  3902 00001C10 0F8593540100            	jne L_error_non_closure
  3903 00001C16 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3904 00001C19 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3905 00001C1C 50                      	push rax
  3906 00001C1D 6A01                    	push 1	; arg count
  3907 00001C1F 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  3908 00001C27 803805                  	cmp byte [rax], T_undefined
  3909 00001C2A 0F84F5530100            	je L_error_fvar_undefined
  3910 00001C30 803804                  	cmp byte [rax], T_closure
  3911 00001C33 0F8570540100            	jne L_error_non_closure
  3912 00001C39 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3913 00001C3C 4C8B4009                	mov r8, qword [rax + 1 + 8]
  3914 00001C40 FF7508                  	push qword [rbp + 8]				; push old return address
  3915 00001C43 FF7500                  	push qword [rbp]					; push old rbp
  3916                                  	;; move stack up ;;
  3917 00001C46 488B5D18                	mov rbx, [rbp + 3*8]
  3918 00001C4A 4889DE                  	mov rsi, rbx						; save old size in rsi
  3919 00001C4D 4883C303                	add rbx, 3
  3920 00001C51 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  3921 00001C59 B901000000              	mov rcx, 1
  3922 00001C5E 4883C104                	add rcx, 4				; num of iterations in rcx
  3923                                  .L_tc_recycle_frame_loop_02e8:
  3924 00001C62 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  3925 00001C6A 488B143C                	mov rdx, [rsp + rdi]
  3926 00001C6E 4889541D00              	mov [rbp + rbx], rdx
  3927 00001C73 4883EB08                	sub rbx, 8
  3928 00001C77 48FFC9                  	dec rcx
  3929 00001C7A 4883F900                	cmp rcx, 0
  3930 00001C7E 75E2                    	jne .L_tc_recycle_frame_loop_02e8
  3931 00001C80 4889F3                  	mov rbx, rsi
  3932 00001C83 4883EB01                	sub rbx, 1
  3933 00001C87 488D1CDD00000000        	lea rbx, [rbx*8]
  3934 00001C8F 4801DD                  	add rbp, rbx
  3935 00001C92 4889EC                  	mov rsp, rbp         ; fix stack pointers
  3936 00001C95 5D                      	pop rbp
  3937 00001C96 41FFE0                  	jmp r8
  3938 00001C99 C9                      	leave
  3939 00001C9A C21800                  	ret AND_KILL_FRAME(1)
  3940                                  .L_lambda_simple_end_0240:	; new closure is in rax
  3941 00001C9D 48890425[B2100000]      	mov qword [free_var_43], rax
  3942 00001CA5 48B8-                   	mov rax, sob_void
  3942 00001CA7 [0000000000000000] 
  3943                                  
  3944 00001CAF 4889C7                  	mov rdi, rax
  3945 00001CB2 E8F0560100              	call print_sexpr_if_not_void
  3946 00001CB7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3947 00001CBC E891540100              	call malloc
  3948 00001CC1 50                      	push rax
  3949 00001CC2 BF00000000              	mov rdi, 8 * 0	; new rib
  3950 00001CC7 E886540100              	call malloc
  3951 00001CCC 50                      	push rax
  3952 00001CCD BF08000000              	mov rdi, 8 * 1	; extended env
  3953 00001CD2 E87B540100              	call malloc
  3954 00001CD7 488B7D10                	mov rdi, ENV
  3955 00001CDB BE00000000              	mov rsi, 0
  3956 00001CE0 BA01000000              	mov rdx, 1
  3957                                  .L_lambda_simple_env_loop_0241:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  3958 00001CE5 4883FE00                	cmp rsi, 0
  3959 00001CE9 7410                    	je .L_lambda_simple_env_end_0241
  3960 00001CEB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3961 00001CEF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3962 00001CF3 48FFC6                  	inc rsi
  3963 00001CF6 48FFC2                  	inc rdx
  3964 00001CF9 EBEA                    	jmp .L_lambda_simple_env_loop_0241
  3965                                  .L_lambda_simple_env_end_0241:
  3966 00001CFB 5B                      	pop rbx
  3967 00001CFC BE00000000              	mov rsi, 0
  3968                                  .L_lambda_simple_params_loop_0241:	; copy params
  3969 00001D01 4883FE00                	cmp rsi, 0
  3970 00001D05 740E                    	je .L_lambda_simple_params_end_0241
  3971 00001D07 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3972 00001D0C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3973 00001D10 48FFC6                  	inc rsi
  3974 00001D13 EBEC                    	jmp .L_lambda_simple_params_loop_0241
  3975                                  .L_lambda_simple_params_end_0241:
  3976 00001D15 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  3977 00001D18 4889C3                  	mov rbx, rax
  3978 00001D1B 58                      	pop rax
  3979 00001D1C C60004                  	mov byte [rax], T_closure
  3980 00001D1F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3981 00001D23 48C74009[301D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0241
  3982 00001D2B E9BF000000              	jmp .L_lambda_simple_end_0241
  3983                                  .L_lambda_simple_code_0241:	; lambda-simple body
  3984 00001D30 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3985 00001D36 740B                    	je .L_lambda_simple_arity_check_ok_0241
  3986 00001D38 FF742410                	push qword [rsp + 8 * 2]
  3987 00001D3C 6A01                    	push 1
  3988 00001D3E E9C8530100              	jmp L_error_incorrect_arity_simple
  3989                                  .L_lambda_simple_arity_check_ok_0241:
  3990 00001D43 C8000000                	enter 0, 0
  3991                                  	; preparing a tail-call
  3992                                  	; preparing a non-tail-call
  3993 00001D47 488B4520                	mov rax, PARAM(0)	; param x
  3994 00001D4B 50                      	push rax
  3995 00001D4C 6A01                    	push 1	; arg count
  3996 00001D4E 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  3997 00001D56 803805                  	cmp byte [rax], T_undefined
  3998 00001D59 0F84C6520100            	je L_error_fvar_undefined
  3999 00001D5F 803804                  	cmp byte [rax], T_closure
  4000 00001D62 0F8541530100            	jne L_error_non_closure
  4001 00001D68 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4002 00001D6B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4003 00001D6E 50                      	push rax
  4004 00001D6F 6A01                    	push 1	; arg count
  4005 00001D71 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  4006 00001D79 803805                  	cmp byte [rax], T_undefined
  4007 00001D7C 0F84A3520100            	je L_error_fvar_undefined
  4008 00001D82 803804                  	cmp byte [rax], T_closure
  4009 00001D85 0F851E530100            	jne L_error_non_closure
  4010 00001D8B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4011 00001D8E 4C8B4009                	mov r8, qword [rax + 1 + 8]
  4012 00001D92 FF7508                  	push qword [rbp + 8]				; push old return address
  4013 00001D95 FF7500                  	push qword [rbp]					; push old rbp
  4014                                  	;; move stack up ;;
  4015 00001D98 488B5D18                	mov rbx, [rbp + 3*8]
  4016 00001D9C 4889DE                  	mov rsi, rbx						; save old size in rsi
  4017 00001D9F 4883C303                	add rbx, 3
  4018 00001DA3 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  4019 00001DAB B901000000              	mov rcx, 1
  4020 00001DB0 4883C104                	add rcx, 4				; num of iterations in rcx
  4021                                  .L_tc_recycle_frame_loop_02e9:
  4022 00001DB4 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  4023 00001DBC 488B143C                	mov rdx, [rsp + rdi]
  4024 00001DC0 4889541D00              	mov [rbp + rbx], rdx
  4025 00001DC5 4883EB08                	sub rbx, 8
  4026 00001DC9 48FFC9                  	dec rcx
  4027 00001DCC 4883F900                	cmp rcx, 0
  4028 00001DD0 75E2                    	jne .L_tc_recycle_frame_loop_02e9
  4029 00001DD2 4889F3                  	mov rbx, rsi
  4030 00001DD5 4883EB01                	sub rbx, 1
  4031 00001DD9 488D1CDD00000000        	lea rbx, [rbx*8]
  4032 00001DE1 4801DD                  	add rbp, rbx
  4033 00001DE4 4889EC                  	mov rsp, rbp         ; fix stack pointers
  4034 00001DE7 5D                      	pop rbp
  4035 00001DE8 41FFE0                  	jmp r8
  4036 00001DEB C9                      	leave
  4037 00001DEC C21800                  	ret AND_KILL_FRAME(1)
  4038                                  .L_lambda_simple_end_0241:	; new closure is in rax
  4039 00001DEF 48890425[D4100000]      	mov qword [free_var_45], rax
  4040 00001DF7 48B8-                   	mov rax, sob_void
  4040 00001DF9 [0000000000000000] 
  4041                                  
  4042 00001E01 4889C7                  	mov rdi, rax
  4043 00001E04 E89E550100              	call print_sexpr_if_not_void
  4044 00001E09 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4045 00001E0E E83F530100              	call malloc
  4046 00001E13 50                      	push rax
  4047 00001E14 BF00000000              	mov rdi, 8 * 0	; new rib
  4048 00001E19 E834530100              	call malloc
  4049 00001E1E 50                      	push rax
  4050 00001E1F BF08000000              	mov rdi, 8 * 1	; extended env
  4051 00001E24 E829530100              	call malloc
  4052 00001E29 488B7D10                	mov rdi, ENV
  4053 00001E2D BE00000000              	mov rsi, 0
  4054 00001E32 BA01000000              	mov rdx, 1
  4055                                  .L_lambda_simple_env_loop_0242:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  4056 00001E37 4883FE00                	cmp rsi, 0
  4057 00001E3B 7410                    	je .L_lambda_simple_env_end_0242
  4058 00001E3D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4059 00001E41 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4060 00001E45 48FFC6                  	inc rsi
  4061 00001E48 48FFC2                  	inc rdx
  4062 00001E4B EBEA                    	jmp .L_lambda_simple_env_loop_0242
  4063                                  .L_lambda_simple_env_end_0242:
  4064 00001E4D 5B                      	pop rbx
  4065 00001E4E BE00000000              	mov rsi, 0
  4066                                  .L_lambda_simple_params_loop_0242:	; copy params
  4067 00001E53 4883FE00                	cmp rsi, 0
  4068 00001E57 740E                    	je .L_lambda_simple_params_end_0242
  4069 00001E59 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4070 00001E5E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4071 00001E62 48FFC6                  	inc rsi
  4072 00001E65 EBEC                    	jmp .L_lambda_simple_params_loop_0242
  4073                                  .L_lambda_simple_params_end_0242:
  4074 00001E67 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  4075 00001E6A 4889C3                  	mov rbx, rax
  4076 00001E6D 58                      	pop rax
  4077 00001E6E C60004                  	mov byte [rax], T_closure
  4078 00001E71 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4079 00001E75 48C74009[821E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0242
  4080 00001E7D E9BF000000              	jmp .L_lambda_simple_end_0242
  4081                                  .L_lambda_simple_code_0242:	; lambda-simple body
  4082 00001E82 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4083 00001E88 740B                    	je .L_lambda_simple_arity_check_ok_0242
  4084 00001E8A FF742410                	push qword [rsp + 8 * 2]
  4085 00001E8E 6A01                    	push 1
  4086 00001E90 E976520100              	jmp L_error_incorrect_arity_simple
  4087                                  .L_lambda_simple_arity_check_ok_0242:
  4088 00001E95 C8000000                	enter 0, 0
  4089                                  	; preparing a tail-call
  4090                                  	; preparing a non-tail-call
  4091 00001E99 488B4520                	mov rax, PARAM(0)	; param x
  4092 00001E9D 50                      	push rax
  4093 00001E9E 6A01                    	push 1	; arg count
  4094 00001EA0 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  4095 00001EA8 803805                  	cmp byte [rax], T_undefined
  4096 00001EAB 0F8474510100            	je L_error_fvar_undefined
  4097 00001EB1 803804                  	cmp byte [rax], T_closure
  4098 00001EB4 0F85EF510100            	jne L_error_non_closure
  4099 00001EBA FF7001                  	push SOB_CLOSURE_ENV(rax)
  4100 00001EBD FF5009                  	call SOB_CLOSURE_CODE(rax)
  4101 00001EC0 50                      	push rax
  4102 00001EC1 6A01                    	push 1	; arg count
  4103 00001EC3 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  4104 00001ECB 803805                  	cmp byte [rax], T_undefined
  4105 00001ECE 0F8451510100            	je L_error_fvar_undefined
  4106 00001ED4 803804                  	cmp byte [rax], T_closure
  4107 00001ED7 0F85CC510100            	jne L_error_non_closure
  4108 00001EDD FF7001                  	push SOB_CLOSURE_ENV(rax)
  4109 00001EE0 4C8B4009                	mov r8, qword [rax + 1 + 8]
  4110 00001EE4 FF7508                  	push qword [rbp + 8]				; push old return address
  4111 00001EE7 FF7500                  	push qword [rbp]					; push old rbp
  4112                                  	;; move stack up ;;
  4113 00001EEA 488B5D18                	mov rbx, [rbp + 3*8]
  4114 00001EEE 4889DE                  	mov rsi, rbx						; save old size in rsi
  4115 00001EF1 4883C303                	add rbx, 3
  4116 00001EF5 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  4117 00001EFD B901000000              	mov rcx, 1
  4118 00001F02 4883C104                	add rcx, 4				; num of iterations in rcx
  4119                                  .L_tc_recycle_frame_loop_02ea:
  4120 00001F06 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  4121 00001F0E 488B143C                	mov rdx, [rsp + rdi]
  4122 00001F12 4889541D00              	mov [rbp + rbx], rdx
  4123 00001F17 4883EB08                	sub rbx, 8
  4124 00001F1B 48FFC9                  	dec rcx
  4125 00001F1E 4883F900                	cmp rcx, 0
  4126 00001F22 75E2                    	jne .L_tc_recycle_frame_loop_02ea
  4127 00001F24 4889F3                  	mov rbx, rsi
  4128 00001F27 4883EB01                	sub rbx, 1
  4129 00001F2B 488D1CDD00000000        	lea rbx, [rbx*8]
  4130 00001F33 4801DD                  	add rbp, rbx
  4131 00001F36 4889EC                  	mov rsp, rbp         ; fix stack pointers
  4132 00001F39 5D                      	pop rbp
  4133 00001F3A 41FFE0                  	jmp r8
  4134 00001F3D C9                      	leave
  4135 00001F3E C21800                  	ret AND_KILL_FRAME(1)
  4136                                  .L_lambda_simple_end_0242:	; new closure is in rax
  4137 00001F41 48890425[E5100000]      	mov qword [free_var_46], rax
  4138 00001F49 48B8-                   	mov rax, sob_void
  4138 00001F4B [0000000000000000] 
  4139                                  
  4140 00001F53 4889C7                  	mov rdi, rax
  4141 00001F56 E84C540100              	call print_sexpr_if_not_void
  4142 00001F5B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4143 00001F60 E8ED510100              	call malloc
  4144 00001F65 50                      	push rax
  4145 00001F66 BF00000000              	mov rdi, 8 * 0	; new rib
  4146 00001F6B E8E2510100              	call malloc
  4147 00001F70 50                      	push rax
  4148 00001F71 BF08000000              	mov rdi, 8 * 1	; extended env
  4149 00001F76 E8D7510100              	call malloc
  4150 00001F7B 488B7D10                	mov rdi, ENV
  4151 00001F7F BE00000000              	mov rsi, 0
  4152 00001F84 BA01000000              	mov rdx, 1
  4153                                  .L_lambda_simple_env_loop_0243:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  4154 00001F89 4883FE00                	cmp rsi, 0
  4155 00001F8D 7410                    	je .L_lambda_simple_env_end_0243
  4156 00001F8F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4157 00001F93 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4158 00001F97 48FFC6                  	inc rsi
  4159 00001F9A 48FFC2                  	inc rdx
  4160 00001F9D EBEA                    	jmp .L_lambda_simple_env_loop_0243
  4161                                  .L_lambda_simple_env_end_0243:
  4162 00001F9F 5B                      	pop rbx
  4163 00001FA0 BE00000000              	mov rsi, 0
  4164                                  .L_lambda_simple_params_loop_0243:	; copy params
  4165 00001FA5 4883FE00                	cmp rsi, 0
  4166 00001FA9 740E                    	je .L_lambda_simple_params_end_0243
  4167 00001FAB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4168 00001FB0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4169 00001FB4 48FFC6                  	inc rsi
  4170 00001FB7 EBEC                    	jmp .L_lambda_simple_params_loop_0243
  4171                                  .L_lambda_simple_params_end_0243:
  4172 00001FB9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  4173 00001FBC 4889C3                  	mov rbx, rax
  4174 00001FBF 58                      	pop rax
  4175 00001FC0 C60004                  	mov byte [rax], T_closure
  4176 00001FC3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4177 00001FC7 48C74009[D41F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0243
  4178 00001FCF E9BF000000              	jmp .L_lambda_simple_end_0243
  4179                                  .L_lambda_simple_code_0243:	; lambda-simple body
  4180 00001FD4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4181 00001FDA 740B                    	je .L_lambda_simple_arity_check_ok_0243
  4182 00001FDC FF742410                	push qword [rsp + 8 * 2]
  4183 00001FE0 6A01                    	push 1
  4184 00001FE2 E924510100              	jmp L_error_incorrect_arity_simple
  4185                                  .L_lambda_simple_arity_check_ok_0243:
  4186 00001FE7 C8000000                	enter 0, 0
  4187                                  	; preparing a tail-call
  4188                                  	; preparing a non-tail-call
  4189 00001FEB 488B4520                	mov rax, PARAM(0)	; param x
  4190 00001FEF 50                      	push rax
  4191 00001FF0 6A01                    	push 1	; arg count
  4192 00001FF2 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  4193 00001FFA 803805                  	cmp byte [rax], T_undefined
  4194 00001FFD 0F8422500100            	je L_error_fvar_undefined
  4195 00002003 803804                  	cmp byte [rax], T_closure
  4196 00002006 0F859D500100            	jne L_error_non_closure
  4197 0000200C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4198 0000200F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4199 00002012 50                      	push rax
  4200 00002013 6A01                    	push 1	; arg count
  4201 00002015 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  4202 0000201D 803805                  	cmp byte [rax], T_undefined
  4203 00002020 0F84FF4F0100            	je L_error_fvar_undefined
  4204 00002026 803804                  	cmp byte [rax], T_closure
  4205 00002029 0F857A500100            	jne L_error_non_closure
  4206 0000202F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4207 00002032 4C8B4009                	mov r8, qword [rax + 1 + 8]
  4208 00002036 FF7508                  	push qword [rbp + 8]				; push old return address
  4209 00002039 FF7500                  	push qword [rbp]					; push old rbp
  4210                                  	;; move stack up ;;
  4211 0000203C 488B5D18                	mov rbx, [rbp + 3*8]
  4212 00002040 4889DE                  	mov rsi, rbx						; save old size in rsi
  4213 00002043 4883C303                	add rbx, 3
  4214 00002047 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  4215 0000204F B901000000              	mov rcx, 1
  4216 00002054 4883C104                	add rcx, 4				; num of iterations in rcx
  4217                                  .L_tc_recycle_frame_loop_02eb:
  4218 00002058 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  4219 00002060 488B143C                	mov rdx, [rsp + rdi]
  4220 00002064 4889541D00              	mov [rbp + rbx], rdx
  4221 00002069 4883EB08                	sub rbx, 8
  4222 0000206D 48FFC9                  	dec rcx
  4223 00002070 4883F900                	cmp rcx, 0
  4224 00002074 75E2                    	jne .L_tc_recycle_frame_loop_02eb
  4225 00002076 4889F3                  	mov rbx, rsi
  4226 00002079 4883EB01                	sub rbx, 1
  4227 0000207D 488D1CDD00000000        	lea rbx, [rbx*8]
  4228 00002085 4801DD                  	add rbp, rbx
  4229 00002088 4889EC                  	mov rsp, rbp         ; fix stack pointers
  4230 0000208B 5D                      	pop rbp
  4231 0000208C 41FFE0                  	jmp r8
  4232 0000208F C9                      	leave
  4233 00002090 C21800                  	ret AND_KILL_FRAME(1)
  4234                                  .L_lambda_simple_end_0243:	; new closure is in rax
  4235 00002093 48890425[29110000]      	mov qword [free_var_50], rax
  4236 0000209B 48B8-                   	mov rax, sob_void
  4236 0000209D [0000000000000000] 
  4237                                  
  4238 000020A5 4889C7                  	mov rdi, rax
  4239 000020A8 E8FA520100              	call print_sexpr_if_not_void
  4240 000020AD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4241 000020B2 E89B500100              	call malloc
  4242 000020B7 50                      	push rax
  4243 000020B8 BF00000000              	mov rdi, 8 * 0	; new rib
  4244 000020BD E890500100              	call malloc
  4245 000020C2 50                      	push rax
  4246 000020C3 BF08000000              	mov rdi, 8 * 1	; extended env
  4247 000020C8 E885500100              	call malloc
  4248 000020CD 488B7D10                	mov rdi, ENV
  4249 000020D1 BE00000000              	mov rsi, 0
  4250 000020D6 BA01000000              	mov rdx, 1
  4251                                  .L_lambda_simple_env_loop_0244:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  4252 000020DB 4883FE00                	cmp rsi, 0
  4253 000020DF 7410                    	je .L_lambda_simple_env_end_0244
  4254 000020E1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4255 000020E5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4256 000020E9 48FFC6                  	inc rsi
  4257 000020EC 48FFC2                  	inc rdx
  4258 000020EF EBEA                    	jmp .L_lambda_simple_env_loop_0244
  4259                                  .L_lambda_simple_env_end_0244:
  4260 000020F1 5B                      	pop rbx
  4261 000020F2 BE00000000              	mov rsi, 0
  4262                                  .L_lambda_simple_params_loop_0244:	; copy params
  4263 000020F7 4883FE00                	cmp rsi, 0
  4264 000020FB 740E                    	je .L_lambda_simple_params_end_0244
  4265 000020FD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4266 00002102 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4267 00002106 48FFC6                  	inc rsi
  4268 00002109 EBEC                    	jmp .L_lambda_simple_params_loop_0244
  4269                                  .L_lambda_simple_params_end_0244:
  4270 0000210B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  4271 0000210E 4889C3                  	mov rbx, rax
  4272 00002111 58                      	pop rax
  4273 00002112 C60004                  	mov byte [rax], T_closure
  4274 00002115 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4275 00002119 48C74009[26210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0244
  4276 00002121 E9BF000000              	jmp .L_lambda_simple_end_0244
  4277                                  .L_lambda_simple_code_0244:	; lambda-simple body
  4278 00002126 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4279 0000212C 740B                    	je .L_lambda_simple_arity_check_ok_0244
  4280 0000212E FF742410                	push qword [rsp + 8 * 2]
  4281 00002132 6A01                    	push 1
  4282 00002134 E9D24F0100              	jmp L_error_incorrect_arity_simple
  4283                                  .L_lambda_simple_arity_check_ok_0244:
  4284 00002139 C8000000                	enter 0, 0
  4285                                  	; preparing a tail-call
  4286                                  	; preparing a non-tail-call
  4287 0000213D 488B4520                	mov rax, PARAM(0)	; param x
  4288 00002141 50                      	push rax
  4289 00002142 6A01                    	push 1	; arg count
  4290 00002144 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  4291 0000214C 803805                  	cmp byte [rax], T_undefined
  4292 0000214F 0F84D04E0100            	je L_error_fvar_undefined
  4293 00002155 803804                  	cmp byte [rax], T_closure
  4294 00002158 0F854B4F0100            	jne L_error_non_closure
  4295 0000215E FF7001                  	push SOB_CLOSURE_ENV(rax)
  4296 00002161 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4297 00002164 50                      	push rax
  4298 00002165 6A01                    	push 1	; arg count
  4299 00002167 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  4300 0000216F 803805                  	cmp byte [rax], T_undefined
  4301 00002172 0F84AD4E0100            	je L_error_fvar_undefined
  4302 00002178 803804                  	cmp byte [rax], T_closure
  4303 0000217B 0F85284F0100            	jne L_error_non_closure
  4304 00002181 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4305 00002184 4C8B4009                	mov r8, qword [rax + 1 + 8]
  4306 00002188 FF7508                  	push qword [rbp + 8]				; push old return address
  4307 0000218B FF7500                  	push qword [rbp]					; push old rbp
  4308                                  	;; move stack up ;;
  4309 0000218E 488B5D18                	mov rbx, [rbp + 3*8]
  4310 00002192 4889DE                  	mov rsi, rbx						; save old size in rsi
  4311 00002195 4883C303                	add rbx, 3
  4312 00002199 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  4313 000021A1 B901000000              	mov rcx, 1
  4314 000021A6 4883C104                	add rcx, 4				; num of iterations in rcx
  4315                                  .L_tc_recycle_frame_loop_02ec:
  4316 000021AA 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  4317 000021B2 488B143C                	mov rdx, [rsp + rdi]
  4318 000021B6 4889541D00              	mov [rbp + rbx], rdx
  4319 000021BB 4883EB08                	sub rbx, 8
  4320 000021BF 48FFC9                  	dec rcx
  4321 000021C2 4883F900                	cmp rcx, 0
  4322 000021C6 75E2                    	jne .L_tc_recycle_frame_loop_02ec
  4323 000021C8 4889F3                  	mov rbx, rsi
  4324 000021CB 4883EB01                	sub rbx, 1
  4325 000021CF 488D1CDD00000000        	lea rbx, [rbx*8]
  4326 000021D7 4801DD                  	add rbp, rbx
  4327 000021DA 4889EC                  	mov rsp, rbp         ; fix stack pointers
  4328 000021DD 5D                      	pop rbp
  4329 000021DE 41FFE0                  	jmp r8
  4330 000021E1 C9                      	leave
  4331 000021E2 C21800                  	ret AND_KILL_FRAME(1)
  4332                                  .L_lambda_simple_end_0244:	; new closure is in rax
  4333 000021E5 48890425[3A110000]      	mov qword [free_var_51], rax
  4334 000021ED 48B8-                   	mov rax, sob_void
  4334 000021EF [0000000000000000] 
  4335                                  
  4336 000021F7 4889C7                  	mov rdi, rax
  4337 000021FA E8A8510100              	call print_sexpr_if_not_void
  4338 000021FF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4339 00002204 E8494F0100              	call malloc
  4340 00002209 50                      	push rax
  4341 0000220A BF00000000              	mov rdi, 8 * 0	; new rib
  4342 0000220F E83E4F0100              	call malloc
  4343 00002214 50                      	push rax
  4344 00002215 BF08000000              	mov rdi, 8 * 1	; extended env
  4345 0000221A E8334F0100              	call malloc
  4346 0000221F 488B7D10                	mov rdi, ENV
  4347 00002223 BE00000000              	mov rsi, 0
  4348 00002228 BA01000000              	mov rdx, 1
  4349                                  .L_lambda_simple_env_loop_0245:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  4350 0000222D 4883FE00                	cmp rsi, 0
  4351 00002231 7410                    	je .L_lambda_simple_env_end_0245
  4352 00002233 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4353 00002237 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4354 0000223B 48FFC6                  	inc rsi
  4355 0000223E 48FFC2                  	inc rdx
  4356 00002241 EBEA                    	jmp .L_lambda_simple_env_loop_0245
  4357                                  .L_lambda_simple_env_end_0245:
  4358 00002243 5B                      	pop rbx
  4359 00002244 BE00000000              	mov rsi, 0
  4360                                  .L_lambda_simple_params_loop_0245:	; copy params
  4361 00002249 4883FE00                	cmp rsi, 0
  4362 0000224D 740E                    	je .L_lambda_simple_params_end_0245
  4363 0000224F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4364 00002254 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4365 00002258 48FFC6                  	inc rsi
  4366 0000225B EBEC                    	jmp .L_lambda_simple_params_loop_0245
  4367                                  .L_lambda_simple_params_end_0245:
  4368 0000225D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  4369 00002260 4889C3                  	mov rbx, rax
  4370 00002263 58                      	pop rax
  4371 00002264 C60004                  	mov byte [rax], T_closure
  4372 00002267 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4373 0000226B 48C74009[78220000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0245
  4374 00002273 E9BF000000              	jmp .L_lambda_simple_end_0245
  4375                                  .L_lambda_simple_code_0245:	; lambda-simple body
  4376 00002278 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4377 0000227E 740B                    	je .L_lambda_simple_arity_check_ok_0245
  4378 00002280 FF742410                	push qword [rsp + 8 * 2]
  4379 00002284 6A01                    	push 1
  4380 00002286 E9804E0100              	jmp L_error_incorrect_arity_simple
  4381                                  .L_lambda_simple_arity_check_ok_0245:
  4382 0000228B C8000000                	enter 0, 0
  4383                                  	; preparing a tail-call
  4384                                  	; preparing a non-tail-call
  4385 0000228F 488B4520                	mov rax, PARAM(0)	; param x
  4386 00002293 50                      	push rax
  4387 00002294 6A01                    	push 1	; arg count
  4388 00002296 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  4389 0000229E 803805                  	cmp byte [rax], T_undefined
  4390 000022A1 0F847E4D0100            	je L_error_fvar_undefined
  4391 000022A7 803804                  	cmp byte [rax], T_closure
  4392 000022AA 0F85F94D0100            	jne L_error_non_closure
  4393 000022B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4394 000022B3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4395 000022B6 50                      	push rax
  4396 000022B7 6A01                    	push 1	; arg count
  4397 000022B9 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  4398 000022C1 803805                  	cmp byte [rax], T_undefined
  4399 000022C4 0F845B4D0100            	je L_error_fvar_undefined
  4400 000022CA 803804                  	cmp byte [rax], T_closure
  4401 000022CD 0F85D64D0100            	jne L_error_non_closure
  4402 000022D3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4403 000022D6 4C8B4009                	mov r8, qword [rax + 1 + 8]
  4404 000022DA FF7508                  	push qword [rbp + 8]				; push old return address
  4405 000022DD FF7500                  	push qword [rbp]					; push old rbp
  4406                                  	;; move stack up ;;
  4407 000022E0 488B5D18                	mov rbx, [rbp + 3*8]
  4408 000022E4 4889DE                  	mov rsi, rbx						; save old size in rsi
  4409 000022E7 4883C303                	add rbx, 3
  4410 000022EB 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  4411 000022F3 B901000000              	mov rcx, 1
  4412 000022F8 4883C104                	add rcx, 4				; num of iterations in rcx
  4413                                  .L_tc_recycle_frame_loop_02ed:
  4414 000022FC 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  4415 00002304 488B143C                	mov rdx, [rsp + rdi]
  4416 00002308 4889541D00              	mov [rbp + rbx], rdx
  4417 0000230D 4883EB08                	sub rbx, 8
  4418 00002311 48FFC9                  	dec rcx
  4419 00002314 4883F900                	cmp rcx, 0
  4420 00002318 75E2                    	jne .L_tc_recycle_frame_loop_02ed
  4421 0000231A 4889F3                  	mov rbx, rsi
  4422 0000231D 4883EB01                	sub rbx, 1
  4423 00002321 488D1CDD00000000        	lea rbx, [rbx*8]
  4424 00002329 4801DD                  	add rbp, rbx
  4425 0000232C 4889EC                  	mov rsp, rbp         ; fix stack pointers
  4426 0000232F 5D                      	pop rbp
  4427 00002330 41FFE0                  	jmp r8
  4428 00002333 C9                      	leave
  4429 00002334 C21800                  	ret AND_KILL_FRAME(1)
  4430                                  .L_lambda_simple_end_0245:	; new closure is in rax
  4431 00002337 48890425[5C110000]      	mov qword [free_var_53], rax
  4432 0000233F 48B8-                   	mov rax, sob_void
  4432 00002341 [0000000000000000] 
  4433                                  
  4434 00002349 4889C7                  	mov rdi, rax
  4435 0000234C E856500100              	call print_sexpr_if_not_void
  4436 00002351 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4437 00002356 E8F74D0100              	call malloc
  4438 0000235B 50                      	push rax
  4439 0000235C BF00000000              	mov rdi, 8 * 0	; new rib
  4440 00002361 E8EC4D0100              	call malloc
  4441 00002366 50                      	push rax
  4442 00002367 BF08000000              	mov rdi, 8 * 1	; extended env
  4443 0000236C E8E14D0100              	call malloc
  4444 00002371 488B7D10                	mov rdi, ENV
  4445 00002375 BE00000000              	mov rsi, 0
  4446 0000237A BA01000000              	mov rdx, 1
  4447                                  .L_lambda_simple_env_loop_0246:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  4448 0000237F 4883FE00                	cmp rsi, 0
  4449 00002383 7410                    	je .L_lambda_simple_env_end_0246
  4450 00002385 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4451 00002389 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4452 0000238D 48FFC6                  	inc rsi
  4453 00002390 48FFC2                  	inc rdx
  4454 00002393 EBEA                    	jmp .L_lambda_simple_env_loop_0246
  4455                                  .L_lambda_simple_env_end_0246:
  4456 00002395 5B                      	pop rbx
  4457 00002396 BE00000000              	mov rsi, 0
  4458                                  .L_lambda_simple_params_loop_0246:	; copy params
  4459 0000239B 4883FE00                	cmp rsi, 0
  4460 0000239F 740E                    	je .L_lambda_simple_params_end_0246
  4461 000023A1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4462 000023A6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4463 000023AA 48FFC6                  	inc rsi
  4464 000023AD EBEC                    	jmp .L_lambda_simple_params_loop_0246
  4465                                  .L_lambda_simple_params_end_0246:
  4466 000023AF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  4467 000023B2 4889C3                  	mov rbx, rax
  4468 000023B5 58                      	pop rax
  4469 000023B6 C60004                  	mov byte [rax], T_closure
  4470 000023B9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4471 000023BD 48C74009[CA230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0246
  4472 000023C5 E9BF000000              	jmp .L_lambda_simple_end_0246
  4473                                  .L_lambda_simple_code_0246:	; lambda-simple body
  4474 000023CA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4475 000023D0 740B                    	je .L_lambda_simple_arity_check_ok_0246
  4476 000023D2 FF742410                	push qword [rsp + 8 * 2]
  4477 000023D6 6A01                    	push 1
  4478 000023D8 E92E4D0100              	jmp L_error_incorrect_arity_simple
  4479                                  .L_lambda_simple_arity_check_ok_0246:
  4480 000023DD C8000000                	enter 0, 0
  4481                                  	; preparing a tail-call
  4482                                  	; preparing a non-tail-call
  4483 000023E1 488B4520                	mov rax, PARAM(0)	; param x
  4484 000023E5 50                      	push rax
  4485 000023E6 6A01                    	push 1	; arg count
  4486 000023E8 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  4487 000023F0 803805                  	cmp byte [rax], T_undefined
  4488 000023F3 0F842C4C0100            	je L_error_fvar_undefined
  4489 000023F9 803804                  	cmp byte [rax], T_closure
  4490 000023FC 0F85A74C0100            	jne L_error_non_closure
  4491 00002402 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4492 00002405 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4493 00002408 50                      	push rax
  4494 00002409 6A01                    	push 1	; arg count
  4495 0000240B 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  4496 00002413 803805                  	cmp byte [rax], T_undefined
  4497 00002416 0F84094C0100            	je L_error_fvar_undefined
  4498 0000241C 803804                  	cmp byte [rax], T_closure
  4499 0000241F 0F85844C0100            	jne L_error_non_closure
  4500 00002425 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4501 00002428 4C8B4009                	mov r8, qword [rax + 1 + 8]
  4502 0000242C FF7508                  	push qword [rbp + 8]				; push old return address
  4503 0000242F FF7500                  	push qword [rbp]					; push old rbp
  4504                                  	;; move stack up ;;
  4505 00002432 488B5D18                	mov rbx, [rbp + 3*8]
  4506 00002436 4889DE                  	mov rsi, rbx						; save old size in rsi
  4507 00002439 4883C303                	add rbx, 3
  4508 0000243D 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  4509 00002445 B901000000              	mov rcx, 1
  4510 0000244A 4883C104                	add rcx, 4				; num of iterations in rcx
  4511                                  .L_tc_recycle_frame_loop_02ee:
  4512 0000244E 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  4513 00002456 488B143C                	mov rdx, [rsp + rdi]
  4514 0000245A 4889541D00              	mov [rbp + rbx], rdx
  4515 0000245F 4883EB08                	sub rbx, 8
  4516 00002463 48FFC9                  	dec rcx
  4517 00002466 4883F900                	cmp rcx, 0
  4518 0000246A 75E2                    	jne .L_tc_recycle_frame_loop_02ee
  4519 0000246C 4889F3                  	mov rbx, rsi
  4520 0000246F 4883EB01                	sub rbx, 1
  4521 00002473 488D1CDD00000000        	lea rbx, [rbx*8]
  4522 0000247B 4801DD                  	add rbp, rbx
  4523 0000247E 4889EC                  	mov rsp, rbp         ; fix stack pointers
  4524 00002481 5D                      	pop rbp
  4525 00002482 41FFE0                  	jmp r8
  4526 00002485 C9                      	leave
  4527 00002486 C21800                  	ret AND_KILL_FRAME(1)
  4528                                  .L_lambda_simple_end_0246:	; new closure is in rax
  4529 00002489 48890425[6D110000]      	mov qword [free_var_54], rax
  4530 00002491 48B8-                   	mov rax, sob_void
  4530 00002493 [0000000000000000] 
  4531                                  
  4532 0000249B 4889C7                  	mov rdi, rax
  4533 0000249E E8044F0100              	call print_sexpr_if_not_void
  4534 000024A3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4535 000024A8 E8A54C0100              	call malloc
  4536 000024AD 50                      	push rax
  4537 000024AE BF00000000              	mov rdi, 8 * 0	; new rib
  4538 000024B3 E89A4C0100              	call malloc
  4539 000024B8 50                      	push rax
  4540 000024B9 BF08000000              	mov rdi, 8 * 1	; extended env
  4541 000024BE E88F4C0100              	call malloc
  4542 000024C3 488B7D10                	mov rdi, ENV
  4543 000024C7 BE00000000              	mov rsi, 0
  4544 000024CC BA01000000              	mov rdx, 1
  4545                                  .L_lambda_simple_env_loop_0247:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  4546 000024D1 4883FE00                	cmp rsi, 0
  4547 000024D5 7410                    	je .L_lambda_simple_env_end_0247
  4548 000024D7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4549 000024DB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4550 000024DF 48FFC6                  	inc rsi
  4551 000024E2 48FFC2                  	inc rdx
  4552 000024E5 EBEA                    	jmp .L_lambda_simple_env_loop_0247
  4553                                  .L_lambda_simple_env_end_0247:
  4554 000024E7 5B                      	pop rbx
  4555 000024E8 BE00000000              	mov rsi, 0
  4556                                  .L_lambda_simple_params_loop_0247:	; copy params
  4557 000024ED 4883FE00                	cmp rsi, 0
  4558 000024F1 740E                    	je .L_lambda_simple_params_end_0247
  4559 000024F3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4560 000024F8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4561 000024FC 48FFC6                  	inc rsi
  4562 000024FF EBEC                    	jmp .L_lambda_simple_params_loop_0247
  4563                                  .L_lambda_simple_params_end_0247:
  4564 00002501 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  4565 00002504 4889C3                  	mov rbx, rax
  4566 00002507 58                      	pop rax
  4567 00002508 C60004                  	mov byte [rax], T_closure
  4568 0000250B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4569 0000250F 48C74009[1C250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0247
  4570 00002517 E9BF000000              	jmp .L_lambda_simple_end_0247
  4571                                  .L_lambda_simple_code_0247:	; lambda-simple body
  4572 0000251C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4573 00002522 740B                    	je .L_lambda_simple_arity_check_ok_0247
  4574 00002524 FF742410                	push qword [rsp + 8 * 2]
  4575 00002528 6A01                    	push 1
  4576 0000252A E9DC4B0100              	jmp L_error_incorrect_arity_simple
  4577                                  .L_lambda_simple_arity_check_ok_0247:
  4578 0000252F C8000000                	enter 0, 0
  4579                                  	; preparing a tail-call
  4580                                  	; preparing a non-tail-call
  4581 00002533 488B4520                	mov rax, PARAM(0)	; param x
  4582 00002537 50                      	push rax
  4583 00002538 6A01                    	push 1	; arg count
  4584 0000253A 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  4585 00002542 803805                  	cmp byte [rax], T_undefined
  4586 00002545 0F84DA4A0100            	je L_error_fvar_undefined
  4587 0000254B 803804                  	cmp byte [rax], T_closure
  4588 0000254E 0F85554B0100            	jne L_error_non_closure
  4589 00002554 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4590 00002557 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4591 0000255A 50                      	push rax
  4592 0000255B 6A01                    	push 1	; arg count
  4593 0000255D 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  4594 00002565 803805                  	cmp byte [rax], T_undefined
  4595 00002568 0F84B74A0100            	je L_error_fvar_undefined
  4596 0000256E 803804                  	cmp byte [rax], T_closure
  4597 00002571 0F85324B0100            	jne L_error_non_closure
  4598 00002577 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4599 0000257A 4C8B4009                	mov r8, qword [rax + 1 + 8]
  4600 0000257E FF7508                  	push qword [rbp + 8]				; push old return address
  4601 00002581 FF7500                  	push qword [rbp]					; push old rbp
  4602                                  	;; move stack up ;;
  4603 00002584 488B5D18                	mov rbx, [rbp + 3*8]
  4604 00002588 4889DE                  	mov rsi, rbx						; save old size in rsi
  4605 0000258B 4883C303                	add rbx, 3
  4606 0000258F 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  4607 00002597 B901000000              	mov rcx, 1
  4608 0000259C 4883C104                	add rcx, 4				; num of iterations in rcx
  4609                                  .L_tc_recycle_frame_loop_02ef:
  4610 000025A0 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  4611 000025A8 488B143C                	mov rdx, [rsp + rdi]
  4612 000025AC 4889541D00              	mov [rbp + rbx], rdx
  4613 000025B1 4883EB08                	sub rbx, 8
  4614 000025B5 48FFC9                  	dec rcx
  4615 000025B8 4883F900                	cmp rcx, 0
  4616 000025BC 75E2                    	jne .L_tc_recycle_frame_loop_02ef
  4617 000025BE 4889F3                  	mov rbx, rsi
  4618 000025C1 4883EB01                	sub rbx, 1
  4619 000025C5 488D1CDD00000000        	lea rbx, [rbx*8]
  4620 000025CD 4801DD                  	add rbp, rbx
  4621 000025D0 4889EC                  	mov rsp, rbp         ; fix stack pointers
  4622 000025D3 5D                      	pop rbp
  4623 000025D4 41FFE0                  	jmp r8
  4624 000025D7 C9                      	leave
  4625 000025D8 C21800                  	ret AND_KILL_FRAME(1)
  4626                                  .L_lambda_simple_end_0247:	; new closure is in rax
  4627 000025DB 48890425[A0110000]      	mov qword [free_var_57], rax
  4628 000025E3 48B8-                   	mov rax, sob_void
  4628 000025E5 [0000000000000000] 
  4629                                  
  4630 000025ED 4889C7                  	mov rdi, rax
  4631 000025F0 E8B24D0100              	call print_sexpr_if_not_void
  4632 000025F5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4633 000025FA E8534B0100              	call malloc
  4634 000025FF 50                      	push rax
  4635 00002600 BF00000000              	mov rdi, 8 * 0	; new rib
  4636 00002605 E8484B0100              	call malloc
  4637 0000260A 50                      	push rax
  4638 0000260B BF08000000              	mov rdi, 8 * 1	; extended env
  4639 00002610 E83D4B0100              	call malloc
  4640 00002615 488B7D10                	mov rdi, ENV
  4641 00002619 BE00000000              	mov rsi, 0
  4642 0000261E BA01000000              	mov rdx, 1
  4643                                  .L_lambda_simple_env_loop_0248:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  4644 00002623 4883FE00                	cmp rsi, 0
  4645 00002627 7410                    	je .L_lambda_simple_env_end_0248
  4646 00002629 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4647 0000262D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4648 00002631 48FFC6                  	inc rsi
  4649 00002634 48FFC2                  	inc rdx
  4650 00002637 EBEA                    	jmp .L_lambda_simple_env_loop_0248
  4651                                  .L_lambda_simple_env_end_0248:
  4652 00002639 5B                      	pop rbx
  4653 0000263A BE00000000              	mov rsi, 0
  4654                                  .L_lambda_simple_params_loop_0248:	; copy params
  4655 0000263F 4883FE00                	cmp rsi, 0
  4656 00002643 740E                    	je .L_lambda_simple_params_end_0248
  4657 00002645 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4658 0000264A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4659 0000264E 48FFC6                  	inc rsi
  4660 00002651 EBEC                    	jmp .L_lambda_simple_params_loop_0248
  4661                                  .L_lambda_simple_params_end_0248:
  4662 00002653 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  4663 00002656 4889C3                  	mov rbx, rax
  4664 00002659 58                      	pop rax
  4665 0000265A C60004                  	mov byte [rax], T_closure
  4666 0000265D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4667 00002661 48C74009[6E260000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0248
  4668 00002669 E9BF000000              	jmp .L_lambda_simple_end_0248
  4669                                  .L_lambda_simple_code_0248:	; lambda-simple body
  4670 0000266E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4671 00002674 740B                    	je .L_lambda_simple_arity_check_ok_0248
  4672 00002676 FF742410                	push qword [rsp + 8 * 2]
  4673 0000267A 6A01                    	push 1
  4674 0000267C E98A4A0100              	jmp L_error_incorrect_arity_simple
  4675                                  .L_lambda_simple_arity_check_ok_0248:
  4676 00002681 C8000000                	enter 0, 0
  4677                                  	; preparing a tail-call
  4678                                  	; preparing a non-tail-call
  4679 00002685 488B4520                	mov rax, PARAM(0)	; param x
  4680 00002689 50                      	push rax
  4681 0000268A 6A01                    	push 1	; arg count
  4682 0000268C 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  4683 00002694 803805                  	cmp byte [rax], T_undefined
  4684 00002697 0F8488490100            	je L_error_fvar_undefined
  4685 0000269D 803804                  	cmp byte [rax], T_closure
  4686 000026A0 0F85034A0100            	jne L_error_non_closure
  4687 000026A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4688 000026A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4689 000026AC 50                      	push rax
  4690 000026AD 6A01                    	push 1	; arg count
  4691 000026AF 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  4692 000026B7 803805                  	cmp byte [rax], T_undefined
  4693 000026BA 0F8465490100            	je L_error_fvar_undefined
  4694 000026C0 803804                  	cmp byte [rax], T_closure
  4695 000026C3 0F85E0490100            	jne L_error_non_closure
  4696 000026C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4697 000026CC 4C8B4009                	mov r8, qword [rax + 1 + 8]
  4698 000026D0 FF7508                  	push qword [rbp + 8]				; push old return address
  4699 000026D3 FF7500                  	push qword [rbp]					; push old rbp
  4700                                  	;; move stack up ;;
  4701 000026D6 488B5D18                	mov rbx, [rbp + 3*8]
  4702 000026DA 4889DE                  	mov rsi, rbx						; save old size in rsi
  4703 000026DD 4883C303                	add rbx, 3
  4704 000026E1 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  4705 000026E9 B901000000              	mov rcx, 1
  4706 000026EE 4883C104                	add rcx, 4				; num of iterations in rcx
  4707                                  .L_tc_recycle_frame_loop_02f0:
  4708 000026F2 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  4709 000026FA 488B143C                	mov rdx, [rsp + rdi]
  4710 000026FE 4889541D00              	mov [rbp + rbx], rdx
  4711 00002703 4883EB08                	sub rbx, 8
  4712 00002707 48FFC9                  	dec rcx
  4713 0000270A 4883F900                	cmp rcx, 0
  4714 0000270E 75E2                    	jne .L_tc_recycle_frame_loop_02f0
  4715 00002710 4889F3                  	mov rbx, rsi
  4716 00002713 4883EB01                	sub rbx, 1
  4717 00002717 488D1CDD00000000        	lea rbx, [rbx*8]
  4718 0000271F 4801DD                  	add rbp, rbx
  4719 00002722 4889EC                  	mov rsp, rbp         ; fix stack pointers
  4720 00002725 5D                      	pop rbp
  4721 00002726 41FFE0                  	jmp r8
  4722 00002729 C9                      	leave
  4723 0000272A C21800                  	ret AND_KILL_FRAME(1)
  4724                                  .L_lambda_simple_end_0248:	; new closure is in rax
  4725 0000272D 48890425[B1110000]      	mov qword [free_var_58], rax
  4726 00002735 48B8-                   	mov rax, sob_void
  4726 00002737 [0000000000000000] 
  4727                                  
  4728 0000273F 4889C7                  	mov rdi, rax
  4729 00002742 E8604C0100              	call print_sexpr_if_not_void
  4730 00002747 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4731 0000274C E8014A0100              	call malloc
  4732 00002751 50                      	push rax
  4733 00002752 BF00000000              	mov rdi, 8 * 0	; new rib
  4734 00002757 E8F6490100              	call malloc
  4735 0000275C 50                      	push rax
  4736 0000275D BF08000000              	mov rdi, 8 * 1	; extended env
  4737 00002762 E8EB490100              	call malloc
  4738 00002767 488B7D10                	mov rdi, ENV
  4739 0000276B BE00000000              	mov rsi, 0
  4740 00002770 BA01000000              	mov rdx, 1
  4741                                  .L_lambda_simple_env_loop_0249:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  4742 00002775 4883FE00                	cmp rsi, 0
  4743 00002779 7410                    	je .L_lambda_simple_env_end_0249
  4744 0000277B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4745 0000277F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4746 00002783 48FFC6                  	inc rsi
  4747 00002786 48FFC2                  	inc rdx
  4748 00002789 EBEA                    	jmp .L_lambda_simple_env_loop_0249
  4749                                  .L_lambda_simple_env_end_0249:
  4750 0000278B 5B                      	pop rbx
  4751 0000278C BE00000000              	mov rsi, 0
  4752                                  .L_lambda_simple_params_loop_0249:	; copy params
  4753 00002791 4883FE00                	cmp rsi, 0
  4754 00002795 740E                    	je .L_lambda_simple_params_end_0249
  4755 00002797 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4756 0000279C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4757 000027A0 48FFC6                  	inc rsi
  4758 000027A3 EBEC                    	jmp .L_lambda_simple_params_loop_0249
  4759                                  .L_lambda_simple_params_end_0249:
  4760 000027A5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  4761 000027A8 4889C3                  	mov rbx, rax
  4762 000027AB 58                      	pop rax
  4763 000027AC C60004                  	mov byte [rax], T_closure
  4764 000027AF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4765 000027B3 48C74009[C0270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0249
  4766 000027BB E9BF000000              	jmp .L_lambda_simple_end_0249
  4767                                  .L_lambda_simple_code_0249:	; lambda-simple body
  4768 000027C0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4769 000027C6 740B                    	je .L_lambda_simple_arity_check_ok_0249
  4770 000027C8 FF742410                	push qword [rsp + 8 * 2]
  4771 000027CC 6A01                    	push 1
  4772 000027CE E938490100              	jmp L_error_incorrect_arity_simple
  4773                                  .L_lambda_simple_arity_check_ok_0249:
  4774 000027D3 C8000000                	enter 0, 0
  4775                                  	; preparing a tail-call
  4776                                  	; preparing a non-tail-call
  4777 000027D7 488B4520                	mov rax, PARAM(0)	; param x
  4778 000027DB 50                      	push rax
  4779 000027DC 6A01                    	push 1	; arg count
  4780 000027DE 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  4781 000027E6 803805                  	cmp byte [rax], T_undefined
  4782 000027E9 0F8436480100            	je L_error_fvar_undefined
  4783 000027EF 803804                  	cmp byte [rax], T_closure
  4784 000027F2 0F85B1480100            	jne L_error_non_closure
  4785 000027F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4786 000027FB FF5009                  	call SOB_CLOSURE_CODE(rax)
  4787 000027FE 50                      	push rax
  4788 000027FF 6A01                    	push 1	; arg count
  4789 00002801 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  4790 00002809 803805                  	cmp byte [rax], T_undefined
  4791 0000280C 0F8413480100            	je L_error_fvar_undefined
  4792 00002812 803804                  	cmp byte [rax], T_closure
  4793 00002815 0F858E480100            	jne L_error_non_closure
  4794 0000281B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4795 0000281E 4C8B4009                	mov r8, qword [rax + 1 + 8]
  4796 00002822 FF7508                  	push qword [rbp + 8]				; push old return address
  4797 00002825 FF7500                  	push qword [rbp]					; push old rbp
  4798                                  	;; move stack up ;;
  4799 00002828 488B5D18                	mov rbx, [rbp + 3*8]
  4800 0000282C 4889DE                  	mov rsi, rbx						; save old size in rsi
  4801 0000282F 4883C303                	add rbx, 3
  4802 00002833 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  4803 0000283B B901000000              	mov rcx, 1
  4804 00002840 4883C104                	add rcx, 4				; num of iterations in rcx
  4805                                  .L_tc_recycle_frame_loop_02f1:
  4806 00002844 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  4807 0000284C 488B143C                	mov rdx, [rsp + rdi]
  4808 00002850 4889541D00              	mov [rbp + rbx], rdx
  4809 00002855 4883EB08                	sub rbx, 8
  4810 00002859 48FFC9                  	dec rcx
  4811 0000285C 4883F900                	cmp rcx, 0
  4812 00002860 75E2                    	jne .L_tc_recycle_frame_loop_02f1
  4813 00002862 4889F3                  	mov rbx, rsi
  4814 00002865 4883EB01                	sub rbx, 1
  4815 00002869 488D1CDD00000000        	lea rbx, [rbx*8]
  4816 00002871 4801DD                  	add rbp, rbx
  4817 00002874 4889EC                  	mov rsp, rbp         ; fix stack pointers
  4818 00002877 5D                      	pop rbp
  4819 00002878 41FFE0                  	jmp r8
  4820 0000287B C9                      	leave
  4821 0000287C C21800                  	ret AND_KILL_FRAME(1)
  4822                                  .L_lambda_simple_end_0249:	; new closure is in rax
  4823 0000287F 48890425[D3110000]      	mov qword [free_var_60], rax
  4824 00002887 48B8-                   	mov rax, sob_void
  4824 00002889 [0000000000000000] 
  4825                                  
  4826 00002891 4889C7                  	mov rdi, rax
  4827 00002894 E80E4B0100              	call print_sexpr_if_not_void
  4828 00002899 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4829 0000289E E8AF480100              	call malloc
  4830 000028A3 50                      	push rax
  4831 000028A4 BF00000000              	mov rdi, 8 * 0	; new rib
  4832 000028A9 E8A4480100              	call malloc
  4833 000028AE 50                      	push rax
  4834 000028AF BF08000000              	mov rdi, 8 * 1	; extended env
  4835 000028B4 E899480100              	call malloc
  4836 000028B9 488B7D10                	mov rdi, ENV
  4837 000028BD BE00000000              	mov rsi, 0
  4838 000028C2 BA01000000              	mov rdx, 1
  4839                                  .L_lambda_simple_env_loop_024a:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  4840 000028C7 4883FE00                	cmp rsi, 0
  4841 000028CB 7410                    	je .L_lambda_simple_env_end_024a
  4842 000028CD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4843 000028D1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4844 000028D5 48FFC6                  	inc rsi
  4845 000028D8 48FFC2                  	inc rdx
  4846 000028DB EBEA                    	jmp .L_lambda_simple_env_loop_024a
  4847                                  .L_lambda_simple_env_end_024a:
  4848 000028DD 5B                      	pop rbx
  4849 000028DE BE00000000              	mov rsi, 0
  4850                                  .L_lambda_simple_params_loop_024a:	; copy params
  4851 000028E3 4883FE00                	cmp rsi, 0
  4852 000028E7 740E                    	je .L_lambda_simple_params_end_024a
  4853 000028E9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4854 000028EE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4855 000028F2 48FFC6                  	inc rsi
  4856 000028F5 EBEC                    	jmp .L_lambda_simple_params_loop_024a
  4857                                  .L_lambda_simple_params_end_024a:
  4858 000028F7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  4859 000028FA 4889C3                  	mov rbx, rax
  4860 000028FD 58                      	pop rax
  4861 000028FE C60004                  	mov byte [rax], T_closure
  4862 00002901 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4863 00002905 48C74009[12290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_024a
  4864 0000290D E9BF000000              	jmp .L_lambda_simple_end_024a
  4865                                  .L_lambda_simple_code_024a:	; lambda-simple body
  4866 00002912 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4867 00002918 740B                    	je .L_lambda_simple_arity_check_ok_024a
  4868 0000291A FF742410                	push qword [rsp + 8 * 2]
  4869 0000291E 6A01                    	push 1
  4870 00002920 E9E6470100              	jmp L_error_incorrect_arity_simple
  4871                                  .L_lambda_simple_arity_check_ok_024a:
  4872 00002925 C8000000                	enter 0, 0
  4873                                  	; preparing a tail-call
  4874                                  	; preparing a non-tail-call
  4875 00002929 488B4520                	mov rax, PARAM(0)	; param x
  4876 0000292D 50                      	push rax
  4877 0000292E 6A01                    	push 1	; arg count
  4878 00002930 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  4879 00002938 803805                  	cmp byte [rax], T_undefined
  4880 0000293B 0F84E4460100            	je L_error_fvar_undefined
  4881 00002941 803804                  	cmp byte [rax], T_closure
  4882 00002944 0F855F470100            	jne L_error_non_closure
  4883 0000294A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4884 0000294D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4885 00002950 50                      	push rax
  4886 00002951 6A01                    	push 1	; arg count
  4887 00002953 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  4888 0000295B 803805                  	cmp byte [rax], T_undefined
  4889 0000295E 0F84C1460100            	je L_error_fvar_undefined
  4890 00002964 803804                  	cmp byte [rax], T_closure
  4891 00002967 0F853C470100            	jne L_error_non_closure
  4892 0000296D FF7001                  	push SOB_CLOSURE_ENV(rax)
  4893 00002970 4C8B4009                	mov r8, qword [rax + 1 + 8]
  4894 00002974 FF7508                  	push qword [rbp + 8]				; push old return address
  4895 00002977 FF7500                  	push qword [rbp]					; push old rbp
  4896                                  	;; move stack up ;;
  4897 0000297A 488B5D18                	mov rbx, [rbp + 3*8]
  4898 0000297E 4889DE                  	mov rsi, rbx						; save old size in rsi
  4899 00002981 4883C303                	add rbx, 3
  4900 00002985 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  4901 0000298D B901000000              	mov rcx, 1
  4902 00002992 4883C104                	add rcx, 4				; num of iterations in rcx
  4903                                  .L_tc_recycle_frame_loop_02f2:
  4904 00002996 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  4905 0000299E 488B143C                	mov rdx, [rsp + rdi]
  4906 000029A2 4889541D00              	mov [rbp + rbx], rdx
  4907 000029A7 4883EB08                	sub rbx, 8
  4908 000029AB 48FFC9                  	dec rcx
  4909 000029AE 4883F900                	cmp rcx, 0
  4910 000029B2 75E2                    	jne .L_tc_recycle_frame_loop_02f2
  4911 000029B4 4889F3                  	mov rbx, rsi
  4912 000029B7 4883EB01                	sub rbx, 1
  4913 000029BB 488D1CDD00000000        	lea rbx, [rbx*8]
  4914 000029C3 4801DD                  	add rbp, rbx
  4915 000029C6 4889EC                  	mov rsp, rbp         ; fix stack pointers
  4916 000029C9 5D                      	pop rbp
  4917 000029CA 41FFE0                  	jmp r8
  4918 000029CD C9                      	leave
  4919 000029CE C21800                  	ret AND_KILL_FRAME(1)
  4920                                  .L_lambda_simple_end_024a:	; new closure is in rax
  4921 000029D1 48890425[E4110000]      	mov qword [free_var_61], rax
  4922 000029D9 48B8-                   	mov rax, sob_void
  4922 000029DB [0000000000000000] 
  4923                                  
  4924 000029E3 4889C7                  	mov rdi, rax
  4925 000029E6 E8BC490100              	call print_sexpr_if_not_void
  4926 000029EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4927 000029F0 E85D470100              	call malloc
  4928 000029F5 50                      	push rax
  4929 000029F6 BF00000000              	mov rdi, 8 * 0	; new rib
  4930 000029FB E852470100              	call malloc
  4931 00002A00 50                      	push rax
  4932 00002A01 BF08000000              	mov rdi, 8 * 1	; extended env
  4933 00002A06 E847470100              	call malloc
  4934 00002A0B 488B7D10                	mov rdi, ENV
  4935 00002A0F BE00000000              	mov rsi, 0
  4936 00002A14 BA01000000              	mov rdx, 1
  4937                                  .L_lambda_simple_env_loop_024b:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  4938 00002A19 4883FE00                	cmp rsi, 0
  4939 00002A1D 7410                    	je .L_lambda_simple_env_end_024b
  4940 00002A1F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4941 00002A23 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4942 00002A27 48FFC6                  	inc rsi
  4943 00002A2A 48FFC2                  	inc rdx
  4944 00002A2D EBEA                    	jmp .L_lambda_simple_env_loop_024b
  4945                                  .L_lambda_simple_env_end_024b:
  4946 00002A2F 5B                      	pop rbx
  4947 00002A30 BE00000000              	mov rsi, 0
  4948                                  .L_lambda_simple_params_loop_024b:	; copy params
  4949 00002A35 4883FE00                	cmp rsi, 0
  4950 00002A39 740E                    	je .L_lambda_simple_params_end_024b
  4951 00002A3B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4952 00002A40 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4953 00002A44 48FFC6                  	inc rsi
  4954 00002A47 EBEC                    	jmp .L_lambda_simple_params_loop_024b
  4955                                  .L_lambda_simple_params_end_024b:
  4956 00002A49 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  4957 00002A4C 4889C3                  	mov rbx, rax
  4958 00002A4F 58                      	pop rax
  4959 00002A50 C60004                  	mov byte [rax], T_closure
  4960 00002A53 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4961 00002A57 48C74009[642A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_024b
  4962 00002A5F E939010000              	jmp .L_lambda_simple_end_024b
  4963                                  .L_lambda_simple_code_024b:	; lambda-simple body
  4964 00002A64 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4965 00002A6A 740B                    	je .L_lambda_simple_arity_check_ok_024b
  4966 00002A6C FF742410                	push qword [rsp + 8 * 2]
  4967 00002A70 6A01                    	push 1
  4968 00002A72 E994460100              	jmp L_error_incorrect_arity_simple
  4969                                  .L_lambda_simple_arity_check_ok_024b:
  4970 00002A77 C8000000                	enter 0, 0
  4971                                  	; preparing a non-tail-call
  4972 00002A7B 488B4520                	mov rax, PARAM(0)	; param e
  4973 00002A7F 50                      	push rax
  4974 00002A80 6A01                    	push 1	; arg count
  4975 00002A82 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  4976 00002A8A 803805                  	cmp byte [rax], T_undefined
  4977 00002A8D 0F8492450100            	je L_error_fvar_undefined
  4978 00002A93 803804                  	cmp byte [rax], T_closure
  4979 00002A96 0F850D460100            	jne L_error_non_closure
  4980 00002A9C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4981 00002A9F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4982 00002AA2 483D[02000000]          	cmp rax, sob_boolean_false
  4983 00002AA8 0F85EB000000            	jne .L_or_end_002b
  4984                                  
  4985                                  	; preparing a non-tail-call
  4986 00002AAE 488B4520                	mov rax, PARAM(0)	; param e
  4987 00002AB2 50                      	push rax
  4988 00002AB3 6A01                    	push 1	; arg count
  4989 00002AB5 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
  4990 00002ABD 803805                  	cmp byte [rax], T_undefined
  4991 00002AC0 0F845F450100            	je L_error_fvar_undefined
  4992 00002AC6 803804                  	cmp byte [rax], T_closure
  4993 00002AC9 0F85DA450100            	jne L_error_non_closure
  4994 00002ACF FF7001                  	push SOB_CLOSURE_ENV(rax)
  4995 00002AD2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4996 00002AD5 483D[02000000]          	cmp rax, sob_boolean_false
  4997 00002ADB 0F84A6000000            	je .L_if_else_0199
  4998                                  	; preparing a tail-call
  4999                                  	; preparing a non-tail-call
  5000 00002AE1 488B4520                	mov rax, PARAM(0)	; param e
  5001 00002AE5 50                      	push rax
  5002 00002AE6 6A01                    	push 1	; arg count
  5003 00002AE8 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  5004 00002AF0 803805                  	cmp byte [rax], T_undefined
  5005 00002AF3 0F842C450100            	je L_error_fvar_undefined
  5006 00002AF9 803804                  	cmp byte [rax], T_closure
  5007 00002AFC 0F85A7450100            	jne L_error_non_closure
  5008 00002B02 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5009 00002B05 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5010 00002B08 50                      	push rax
  5011 00002B09 6A01                    	push 1	; arg count
  5012 00002B0B 488B0425[37140000]      	mov rax, qword [free_var_96]	; free var list?
  5013 00002B13 803805                  	cmp byte [rax], T_undefined
  5014 00002B16 0F8409450100            	je L_error_fvar_undefined
  5015 00002B1C 803804                  	cmp byte [rax], T_closure
  5016 00002B1F 0F8584450100            	jne L_error_non_closure
  5017 00002B25 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5018 00002B28 4C8B4009                	mov r8, qword [rax + 1 + 8]
  5019 00002B2C FF7508                  	push qword [rbp + 8]				; push old return address
  5020 00002B2F FF7500                  	push qword [rbp]					; push old rbp
  5021                                  	;; move stack up ;;
  5022 00002B32 488B5D18                	mov rbx, [rbp + 3*8]
  5023 00002B36 4889DE                  	mov rsi, rbx						; save old size in rsi
  5024 00002B39 4883C303                	add rbx, 3
  5025 00002B3D 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  5026 00002B45 B901000000              	mov rcx, 1
  5027 00002B4A 4883C104                	add rcx, 4				; num of iterations in rcx
  5028                                  .L_tc_recycle_frame_loop_02f3:
  5029 00002B4E 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  5030 00002B56 488B143C                	mov rdx, [rsp + rdi]
  5031 00002B5A 4889541D00              	mov [rbp + rbx], rdx
  5032 00002B5F 4883EB08                	sub rbx, 8
  5033 00002B63 48FFC9                  	dec rcx
  5034 00002B66 4883F900                	cmp rcx, 0
  5035 00002B6A 75E2                    	jne .L_tc_recycle_frame_loop_02f3
  5036 00002B6C 4889F3                  	mov rbx, rsi
  5037 00002B6F 4883EB01                	sub rbx, 1
  5038 00002B73 488D1CDD00000000        	lea rbx, [rbx*8]
  5039 00002B7B 4801DD                  	add rbp, rbx
  5040 00002B7E 4889EC                  	mov rsp, rbp         ; fix stack pointers
  5041 00002B81 5D                      	pop rbp
  5042 00002B82 41FFE0                  	jmp r8
  5043 00002B85 EB0A                    	jmp .L_if_end_0199
  5044                                  .L_if_else_0199:
  5045 00002B87 48B8-                   	mov rax, L_constants + 2
  5045 00002B89 [0200000000000000] 
  5046                                  .L_if_end_0199:
  5047 00002B91 483D[02000000]          	cmp rax, sob_boolean_false
  5048 00002B97 7500                    	jne .L_or_end_002b
  5049                                  .L_or_end_002b:
  5050 00002B99 C9                      	leave
  5051 00002B9A C21800                  	ret AND_KILL_FRAME(1)
  5052                                  .L_lambda_simple_end_024b:	; new closure is in rax
  5053 00002B9D 48890425[37140000]      	mov qword [free_var_96], rax
  5054 00002BA5 48B8-                   	mov rax, sob_void
  5054 00002BA7 [0000000000000000] 
  5055                                  
  5056 00002BAF 4889C7                  	mov rdi, rax
  5057 00002BB2 E8F0470100              	call print_sexpr_if_not_void
  5058 00002BB7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5059 00002BBC E891450100              	call malloc
  5060 00002BC1 50                      	push rax
  5061 00002BC2 BF00000000              	mov rdi, 8 * 0	; new rib
  5062 00002BC7 E886450100              	call malloc
  5063 00002BCC 50                      	push rax
  5064 00002BCD BF08000000              	mov rdi, 8 * 1	; extended env
  5065 00002BD2 E87B450100              	call malloc
  5066 00002BD7 488B7D10                	mov rdi, ENV
  5067 00002BDB BE00000000              	mov rsi, 0
  5068 00002BE0 BA01000000              	mov rdx, 1
  5069                                  .L_lambda_opt_env_loop_0049:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  5070 00002BE5 4883FE00                	cmp rsi, 0
  5071 00002BE9 7410                    	je .L_lambda_opt_env_end_0049
  5072 00002BEB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5073 00002BEF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5074 00002BF3 48FFC6                  	inc rsi
  5075 00002BF6 48FFC2                  	inc rdx
  5076 00002BF9 EBEA                    	jmp .L_lambda_opt_env_loop_0049
  5077                                  .L_lambda_opt_env_end_0049:
  5078 00002BFB 5B                      	pop rbx
  5079 00002BFC BE00000000              	mov rsi, 0
  5080                                  .L_lambda_opt_params_loop_0049:	; copy params
  5081 00002C01 4883FE00                	cmp rsi, 0
  5082 00002C05 740E                    	je .L_lambda_opt_params_end_0049
  5083 00002C07 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5084 00002C0C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5085 00002C10 48FFC6                  	inc rsi
  5086 00002C13 EBEC                    	jmp .L_lambda_opt_params_loop_0049
  5087                                  .L_lambda_opt_params_end_0049:
  5088 00002C15 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  5089 00002C18 4889C3                  	mov rbx, rax
  5090 00002C1B 58                      	pop rax
  5091 00002C1C C60004                  	mov byte [rax], T_closure
  5092 00002C1F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5093 00002C23 48C74009[302C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0049
  5094 00002C2B E9E6000000              	jmp .L_lambda_opt_end_0049
  5095                                  .L_lambda_opt_code_0049:	; lambda-opt body
  5096 00002C30 48837C241000            	cmp qword [rsp + 8 * 2], 0
  5097 00002C36 740D                    	je .L_lambda_opt_arity_check_exact_0049
  5098 00002C38 7F48                    	jg .L_lambda_opt_arity_check_more_0049
  5099 00002C3A FF742410                	push qword [rsp + 8 * 2]
  5100 00002C3E 6A00                    	push 0
  5101 00002C40 E9DA440100              	jmp L_error_incorrect_arity_opt
  5102                                  .L_lambda_opt_arity_check_exact_0049:
  5103 00002C45 48C744241001000000      	mov qword [rsp + 8 * 2], 1	; Update argument count (fixed params + 1 for nil)
  5104 00002C4E 41BA03000000            	mov r10, 3	; r10 = total addresses to adjust (fixed params + 3)
  5105 00002C54 FF3424                  	push qword [rsp]	; Save the top stack element
  5106 00002C57 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
  5107                                  .L_lambda_opt_stack_shrink_loop_00d9:
  5108 00002C5D 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
  5109 00002C60 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_00d9	; Exit loop if all elements processed
  5110 00002C62 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
  5111 00002C67 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
  5112 00002C6B 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
  5113 00002C70 49FFC3                  	inc r11	; Increment loop index
  5114 00002C73 EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_00d9	; Jump back to loop start
  5115                                  .L_lambda_opt_stack_shrink_loop_exit_00d9:
  5116 00002C75 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
  5117 00002C7D E988000000              	jmp .L_lambda_opt_stack_adjusted_0049
  5118                                  .L_lambda_opt_arity_check_more_0049:
  5119 00002C82 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
  5120 00002C87 4983E800                	sub r8, 0	; r8 = count of optional params
  5121 00002C8B 48C744241001000000      	mov qword [rsp + 8 * 2], 1	; Update the number of params (fixed params + 1 for list opt)
  5122 00002C94 41B900000000            	mov r9, 0	; r9 = index of optional argument list
  5123 00002C9A 4E8D54C410              	lea r10, [rsp + 2 * 8 + 0 * 8 + r8 * 8]	; r10 = address of first optional param
  5124 00002C9F 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
  5124 00002CA1 [0100000000000000] 
  5125                                  .L_lambda_opt_stack_shrink_loop_00da:
  5126 00002CA9 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
  5127 00002CAC 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_00da	; Exit loop if all optional params are processed
  5128 00002CAE BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
  5129 00002CB3 E89A440100              	call malloc	; Allocate memory for a new pair
  5130 00002CB8 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
  5131 00002CBC 49F7D9                  	neg r9	; Negate index to access in reverse
  5132 00002CBF 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
  5133 00002CC3 49F7D9                  	neg r9	; Negate index back
  5134 00002CC6 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
  5135 00002CCA C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
  5136 00002CCD 4989C3                  	mov r11, rax	; Update current pair to the newly created one
  5137 00002CD0 49FFC1                  	inc r9	; Increment the index
  5138 00002CD3 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_00da	; Repeat the loop for the next param
  5139                                  .L_lambda_opt_stack_shrink_loop_exit_00da:
  5140 00002CD5 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
  5141 00002CD8 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
  5142 00002CDC 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
  5143 00002CDF 4983C410                	add r12, 16	; Skip fixed params and return address
  5144 00002CE3 41BD03000000            	mov r13, 3	; r13 = loop counter (number of params, old fp, ret addr, lex env)
  5145                                  .L_lambda_opt_stack_shrink_loop_00db:
  5146 00002CE9 4983FD00                	cmp r13, 0	; Check if there are more values to copy
  5147 00002CED 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_00db	; Exit loop if all values are copied
  5148 00002CEF 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
  5149 00002CF3 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
  5150 00002CF6 49FFCD                  	dec r13	; Decrement the loop counter
  5151 00002CF9 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
  5152 00002CFD 4983EC08                	sub r12, 8	; Move the source pointer to the next location
  5153 00002D01 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_00db	; Repeat the loop for the next value
  5154                                  .L_lambda_opt_stack_shrink_loop_exit_00db:
  5155 00002D03 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
  5156 00002D07 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
  5157                                  .L_lambda_opt_stack_adjusted_0049:
  5158 00002D0A C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
  5159 00002D0E 488B4520                	mov rax, PARAM(0)	; param args
  5160 00002D12 C9                      	leave	; Restore the previous stack frame
  5161 00002D13 C21800                  	ret AND_KILL_FRAME(1)
  5162                                  .L_lambda_opt_end_0049:	; new closure is in rax
  5163 00002D16 48890425[F3130000]      	mov qword [free_var_92], rax
  5164 00002D1E 48B8-                   	mov rax, sob_void
  5164 00002D20 [0000000000000000] 
  5165                                  
  5166 00002D28 4889C7                  	mov rdi, rax
  5167 00002D2B E877460100              	call print_sexpr_if_not_void
  5168 00002D30 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5169 00002D35 E818440100              	call malloc
  5170 00002D3A 50                      	push rax
  5171 00002D3B BF00000000              	mov rdi, 8 * 0	; new rib
  5172 00002D40 E80D440100              	call malloc
  5173 00002D45 50                      	push rax
  5174 00002D46 BF08000000              	mov rdi, 8 * 1	; extended env
  5175 00002D4B E802440100              	call malloc
  5176 00002D50 488B7D10                	mov rdi, ENV
  5177 00002D54 BE00000000              	mov rsi, 0
  5178 00002D59 BA01000000              	mov rdx, 1
  5179                                  .L_lambda_simple_env_loop_024c:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  5180 00002D5E 4883FE00                	cmp rsi, 0
  5181 00002D62 7410                    	je .L_lambda_simple_env_end_024c
  5182 00002D64 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5183 00002D68 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5184 00002D6C 48FFC6                  	inc rsi
  5185 00002D6F 48FFC2                  	inc rdx
  5186 00002D72 EBEA                    	jmp .L_lambda_simple_env_loop_024c
  5187                                  .L_lambda_simple_env_end_024c:
  5188 00002D74 5B                      	pop rbx
  5189 00002D75 BE00000000              	mov rsi, 0
  5190                                  .L_lambda_simple_params_loop_024c:	; copy params
  5191 00002D7A 4883FE00                	cmp rsi, 0
  5192 00002D7E 740E                    	je .L_lambda_simple_params_end_024c
  5193 00002D80 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5194 00002D85 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5195 00002D89 48FFC6                  	inc rsi
  5196 00002D8C EBEC                    	jmp .L_lambda_simple_params_loop_024c
  5197                                  .L_lambda_simple_params_end_024c:
  5198 00002D8E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  5199 00002D91 4889C3                  	mov rbx, rax
  5200 00002D94 58                      	pop rax
  5201 00002D95 C60004                  	mov byte [rax], T_closure
  5202 00002D98 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5203 00002D9C 48C74009[A62D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_024c
  5204 00002DA4 EB3D                    	jmp .L_lambda_simple_end_024c
  5205                                  .L_lambda_simple_code_024c:	; lambda-simple body
  5206 00002DA6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5207 00002DAC 740B                    	je .L_lambda_simple_arity_check_ok_024c
  5208 00002DAE FF742410                	push qword [rsp + 8 * 2]
  5209 00002DB2 6A01                    	push 1
  5210 00002DB4 E952430100              	jmp L_error_incorrect_arity_simple
  5211                                  .L_lambda_simple_arity_check_ok_024c:
  5212 00002DB9 C8000000                	enter 0, 0
  5213 00002DBD 488B4520                	mov rax, PARAM(0)	; param x
  5214 00002DC1 483D[02000000]          	cmp rax, sob_boolean_false
  5215 00002DC7 740C                    	je .L_if_else_019a
  5216 00002DC9 48B8-                   	mov rax, L_constants + 2
  5216 00002DCB [0200000000000000] 
  5217 00002DD3 EB0A                    	jmp .L_if_end_019a
  5218                                  .L_if_else_019a:
  5219 00002DD5 48B8-                   	mov rax, L_constants + 3
  5219 00002DD7 [0300000000000000] 
  5220                                  .L_if_end_019a:
  5221 00002DDF C9                      	leave
  5222 00002DE0 C21800                  	ret AND_KILL_FRAME(1)
  5223                                  .L_lambda_simple_end_024c:	; new closure is in rax
  5224 00002DE3 48890425[E1140000]      	mov qword [free_var_106], rax
  5225 00002DEB 48B8-                   	mov rax, sob_void
  5225 00002DED [0000000000000000] 
  5226                                  
  5227 00002DF5 4889C7                  	mov rdi, rax
  5228 00002DF8 E8AA450100              	call print_sexpr_if_not_void
  5229 00002DFD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5230 00002E02 E84B430100              	call malloc
  5231 00002E07 50                      	push rax
  5232 00002E08 BF00000000              	mov rdi, 8 * 0	; new rib
  5233 00002E0D E840430100              	call malloc
  5234 00002E12 50                      	push rax
  5235 00002E13 BF08000000              	mov rdi, 8 * 1	; extended env
  5236 00002E18 E835430100              	call malloc
  5237 00002E1D 488B7D10                	mov rdi, ENV
  5238 00002E21 BE00000000              	mov rsi, 0
  5239 00002E26 BA01000000              	mov rdx, 1
  5240                                  .L_lambda_simple_env_loop_024d:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  5241 00002E2B 4883FE00                	cmp rsi, 0
  5242 00002E2F 7410                    	je .L_lambda_simple_env_end_024d
  5243 00002E31 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5244 00002E35 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5245 00002E39 48FFC6                  	inc rsi
  5246 00002E3C 48FFC2                  	inc rdx
  5247 00002E3F EBEA                    	jmp .L_lambda_simple_env_loop_024d
  5248                                  .L_lambda_simple_env_end_024d:
  5249 00002E41 5B                      	pop rbx
  5250 00002E42 BE00000000              	mov rsi, 0
  5251                                  .L_lambda_simple_params_loop_024d:	; copy params
  5252 00002E47 4883FE00                	cmp rsi, 0
  5253 00002E4B 740E                    	je .L_lambda_simple_params_end_024d
  5254 00002E4D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5255 00002E52 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5256 00002E56 48FFC6                  	inc rsi
  5257 00002E59 EBEC                    	jmp .L_lambda_simple_params_loop_024d
  5258                                  .L_lambda_simple_params_end_024d:
  5259 00002E5B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  5260 00002E5E 4889C3                  	mov rbx, rax
  5261 00002E61 58                      	pop rax
  5262 00002E62 C60004                  	mov byte [rax], T_closure
  5263 00002E65 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5264 00002E69 48C74009[762E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_024d
  5265 00002E71 E9D7000000              	jmp .L_lambda_simple_end_024d
  5266                                  .L_lambda_simple_code_024d:	; lambda-simple body
  5267 00002E76 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5268 00002E7C 740B                    	je .L_lambda_simple_arity_check_ok_024d
  5269 00002E7E FF742410                	push qword [rsp + 8 * 2]
  5270 00002E82 6A01                    	push 1
  5271 00002E84 E982420100              	jmp L_error_incorrect_arity_simple
  5272                                  .L_lambda_simple_arity_check_ok_024d:
  5273 00002E89 C8000000                	enter 0, 0
  5274                                  	; preparing a non-tail-call
  5275 00002E8D 488B4520                	mov rax, PARAM(0)	; param q
  5276 00002E91 50                      	push rax
  5277 00002E92 6A01                    	push 1	; arg count
  5278 00002E94 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
  5279 00002E9C 803805                  	cmp byte [rax], T_undefined
  5280 00002E9F 0F8480410100            	je L_error_fvar_undefined
  5281 00002EA5 803804                  	cmp byte [rax], T_closure
  5282 00002EA8 0F85FB410100            	jne L_error_non_closure
  5283 00002EAE FF7001                  	push SOB_CLOSURE_ENV(rax)
  5284 00002EB1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5285 00002EB4 483D[02000000]          	cmp rax, sob_boolean_false
  5286 00002EBA 0F8589000000            	jne .L_or_end_002c
  5287                                  
  5288                                  	; preparing a tail-call
  5289 00002EC0 488B4520                	mov rax, PARAM(0)	; param q
  5290 00002EC4 50                      	push rax
  5291 00002EC5 6A01                    	push 1	; arg count
  5292 00002EC7 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
  5293 00002ECF 803805                  	cmp byte [rax], T_undefined
  5294 00002ED2 0F844D410100            	je L_error_fvar_undefined
  5295 00002ED8 803804                  	cmp byte [rax], T_closure
  5296 00002EDB 0F85C8410100            	jne L_error_non_closure
  5297 00002EE1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5298 00002EE4 4C8B4009                	mov r8, qword [rax + 1 + 8]
  5299 00002EE8 FF7508                  	push qword [rbp + 8]				; push old return address
  5300 00002EEB FF7500                  	push qword [rbp]					; push old rbp
  5301                                  	;; move stack up ;;
  5302 00002EEE 488B5D18                	mov rbx, [rbp + 3*8]
  5303 00002EF2 4889DE                  	mov rsi, rbx						; save old size in rsi
  5304 00002EF5 4883C303                	add rbx, 3
  5305 00002EF9 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  5306 00002F01 B901000000              	mov rcx, 1
  5307 00002F06 4883C104                	add rcx, 4				; num of iterations in rcx
  5308                                  .L_tc_recycle_frame_loop_02f4:
  5309 00002F0A 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  5310 00002F12 488B143C                	mov rdx, [rsp + rdi]
  5311 00002F16 4889541D00              	mov [rbp + rbx], rdx
  5312 00002F1B 4883EB08                	sub rbx, 8
  5313 00002F1F 48FFC9                  	dec rcx
  5314 00002F22 4883F900                	cmp rcx, 0
  5315 00002F26 75E2                    	jne .L_tc_recycle_frame_loop_02f4
  5316 00002F28 4889F3                  	mov rbx, rsi
  5317 00002F2B 4883EB01                	sub rbx, 1
  5318 00002F2F 488D1CDD00000000        	lea rbx, [rbx*8]
  5319 00002F37 4801DD                  	add rbp, rbx
  5320 00002F3A 4889EC                  	mov rsp, rbp         ; fix stack pointers
  5321 00002F3D 5D                      	pop rbp
  5322 00002F3E 41FFE0                  	jmp r8
  5323 00002F41 483D[02000000]          	cmp rax, sob_boolean_false
  5324 00002F47 7500                    	jne .L_or_end_002c
  5325                                  .L_or_end_002c:
  5326 00002F49 C9                      	leave
  5327 00002F4A C21800                  	ret AND_KILL_FRAME(1)
  5328                                  .L_lambda_simple_end_024d:	; new closure is in rax
  5329 00002F4D 48890425[69150000]      	mov qword [free_var_114], rax
  5330 00002F55 48B8-                   	mov rax, sob_void
  5330 00002F57 [0000000000000000] 
  5331                                  
  5332 00002F5F 4889C7                  	mov rdi, rax
  5333 00002F62 E840440100              	call print_sexpr_if_not_void
  5334                                  	; preparing a non-tail-call
  5335 00002F67 48B8-                   	mov rax, L_constants + 1993
  5335 00002F69 [C907000000000000] 
  5336 00002F71 50                      	push rax
  5337 00002F72 6A01                    	push 1	; arg count
  5338 00002F74 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5339 00002F79 E8D4410100              	call malloc
  5340 00002F7E 50                      	push rax
  5341 00002F7F BF00000000              	mov rdi, 8 * 0	; new rib
  5342 00002F84 E8C9410100              	call malloc
  5343 00002F89 50                      	push rax
  5344 00002F8A BF08000000              	mov rdi, 8 * 1	; extended env
  5345 00002F8F E8BE410100              	call malloc
  5346 00002F94 488B7D10                	mov rdi, ENV
  5347 00002F98 BE00000000              	mov rsi, 0
  5348 00002F9D BA01000000              	mov rdx, 1
  5349                                  .L_lambda_simple_env_loop_024e:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  5350 00002FA2 4883FE00                	cmp rsi, 0
  5351 00002FA6 7410                    	je .L_lambda_simple_env_end_024e
  5352 00002FA8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5353 00002FAC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5354 00002FB0 48FFC6                  	inc rsi
  5355 00002FB3 48FFC2                  	inc rdx
  5356 00002FB6 EBEA                    	jmp .L_lambda_simple_env_loop_024e
  5357                                  .L_lambda_simple_env_end_024e:
  5358 00002FB8 5B                      	pop rbx
  5359 00002FB9 BE00000000              	mov rsi, 0
  5360                                  .L_lambda_simple_params_loop_024e:	; copy params
  5361 00002FBE 4883FE00                	cmp rsi, 0
  5362 00002FC2 740E                    	je .L_lambda_simple_params_end_024e
  5363 00002FC4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5364 00002FC9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5365 00002FCD 48FFC6                  	inc rsi
  5366 00002FD0 EBEC                    	jmp .L_lambda_simple_params_loop_024e
  5367                                  .L_lambda_simple_params_end_024e:
  5368 00002FD2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  5369 00002FD5 4889C3                  	mov rbx, rax
  5370 00002FD8 58                      	pop rax
  5371 00002FD9 C60004                  	mov byte [rax], T_closure
  5372 00002FDC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5373 00002FE0 48C74009[ED2F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_024e
  5374 00002FE8 E9E4030000              	jmp .L_lambda_simple_end_024e
  5375                                  .L_lambda_simple_code_024e:	; lambda-simple body
  5376 00002FED 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5377 00002FF3 740B                    	je .L_lambda_simple_arity_check_ok_024e
  5378 00002FF5 FF742410                	push qword [rsp + 8 * 2]
  5379 00002FF9 6A01                    	push 1
  5380 00002FFB E90B410100              	jmp L_error_incorrect_arity_simple
  5381                                  .L_lambda_simple_arity_check_ok_024e:
  5382 00003000 C8000000                	enter 0, 0
  5383 00003004 BF08000000              	mov rdi, 8
  5384 00003009 E844410100              	call malloc
  5385 0000300E 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
  5386 00003012 488918                  	mov qword[rax], rbx
  5387 00003015 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  5388 00003019 48B8-                   	mov rax, sob_void
  5388 0000301B [0000000000000000] 
  5389                                  
  5390 00003023 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5391 00003028 E825410100              	call malloc
  5392 0000302D 50                      	push rax
  5393 0000302E BF08000000              	mov rdi, 8 * 1	; new rib
  5394 00003033 E81A410100              	call malloc
  5395 00003038 50                      	push rax
  5396 00003039 BF10000000              	mov rdi, 8 * 2	; extended env
  5397 0000303E E80F410100              	call malloc
  5398 00003043 488B7D10                	mov rdi, ENV
  5399 00003047 BE00000000              	mov rsi, 0
  5400 0000304C BA01000000              	mov rdx, 1
  5401                                  .L_lambda_simple_env_loop_024f:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  5402 00003051 4883FE01                	cmp rsi, 1
  5403 00003055 7410                    	je .L_lambda_simple_env_end_024f
  5404 00003057 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5405 0000305B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5406 0000305F 48FFC6                  	inc rsi
  5407 00003062 48FFC2                  	inc rdx
  5408 00003065 EBEA                    	jmp .L_lambda_simple_env_loop_024f
  5409                                  .L_lambda_simple_env_end_024f:
  5410 00003067 5B                      	pop rbx
  5411 00003068 BE00000000              	mov rsi, 0
  5412                                  .L_lambda_simple_params_loop_024f:	; copy params
  5413 0000306D 4883FE01                	cmp rsi, 1
  5414 00003071 740E                    	je .L_lambda_simple_params_end_024f
  5415 00003073 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5416 00003078 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5417 0000307C 48FFC6                  	inc rsi
  5418 0000307F EBEC                    	jmp .L_lambda_simple_params_loop_024f
  5419                                  .L_lambda_simple_params_end_024f:
  5420 00003081 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  5421 00003084 4889C3                  	mov rbx, rax
  5422 00003087 58                      	pop rax
  5423 00003088 C60004                  	mov byte [rax], T_closure
  5424 0000308B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5425 0000308F 48C74009[9C300000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_024f
  5426 00003097 E943010000              	jmp .L_lambda_simple_end_024f
  5427                                  .L_lambda_simple_code_024f:	; lambda-simple body
  5428 0000309C 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5429 000030A2 740B                    	je .L_lambda_simple_arity_check_ok_024f
  5430 000030A4 FF742410                	push qword [rsp + 8 * 2]
  5431 000030A8 6A02                    	push 2
  5432 000030AA E95C400100              	jmp L_error_incorrect_arity_simple
  5433                                  .L_lambda_simple_arity_check_ok_024f:
  5434 000030AF C8000000                	enter 0, 0
  5435                                  	; preparing a non-tail-call
  5436 000030B3 488B4528                	mov rax, PARAM(1)	; param s
  5437 000030B7 50                      	push rax
  5438 000030B8 6A01                    	push 1	; arg count
  5439 000030BA 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  5440 000030C2 803805                  	cmp byte [rax], T_undefined
  5441 000030C5 0F845A3F0100            	je L_error_fvar_undefined
  5442 000030CB 803804                  	cmp byte [rax], T_closure
  5443 000030CE 0F85D53F0100            	jne L_error_non_closure
  5444 000030D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5445 000030D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5446 000030DA 483D[02000000]          	cmp rax, sob_boolean_false
  5447 000030E0 7409                    	je .L_if_else_019b
  5448 000030E2 488B4520                	mov rax, PARAM(0)	; param a
  5449 000030E6 E9F0000000              	jmp .L_if_end_019b
  5450                                  .L_if_else_019b:
  5451                                  	; preparing a tail-call
  5452                                  	; preparing a non-tail-call
  5453                                  	; preparing a non-tail-call
  5454 000030EB 488B4528                	mov rax, PARAM(1)	; param s
  5455 000030EF 50                      	push rax
  5456 000030F0 6A01                    	push 1	; arg count
  5457 000030F2 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  5458 000030FA 803805                  	cmp byte [rax], T_undefined
  5459 000030FD 0F84223F0100            	je L_error_fvar_undefined
  5460 00003103 803804                  	cmp byte [rax], T_closure
  5461 00003106 0F859D3F0100            	jne L_error_non_closure
  5462 0000310C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5463 0000310F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5464 00003112 50                      	push rax
  5465                                  	; preparing a non-tail-call
  5466 00003113 488B4528                	mov rax, PARAM(1)	; param s
  5467 00003117 50                      	push rax
  5468 00003118 6A01                    	push 1	; arg count
  5469 0000311A 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  5470 00003122 803805                  	cmp byte [rax], T_undefined
  5471 00003125 0F84FA3E0100            	je L_error_fvar_undefined
  5472 0000312B 803804                  	cmp byte [rax], T_closure
  5473 0000312E 0F85753F0100            	jne L_error_non_closure
  5474 00003134 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5475 00003137 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5476 0000313A 50                      	push rax
  5477 0000313B 6A02                    	push 2	; arg count
  5478 0000313D 488B4510                	mov rax, ENV
  5479 00003141 488B00                  	mov rax, qword [rax + 8 * 0]
  5480 00003144 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5481 00003147 488B00                  	mov rax, qword [rax]
  5482 0000314A 803804                  	cmp byte [rax], T_closure
  5483 0000314D 0F85563F0100            	jne L_error_non_closure
  5484 00003153 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5485 00003156 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5486 00003159 50                      	push rax
  5487 0000315A 488B4520                	mov rax, PARAM(0)	; param a
  5488 0000315E 50                      	push rax
  5489 0000315F 6A02                    	push 2	; arg count
  5490 00003161 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
  5491 00003169 803805                  	cmp byte [rax], T_undefined
  5492 0000316C 0F84B33E0100            	je L_error_fvar_undefined
  5493 00003172 803804                  	cmp byte [rax], T_closure
  5494 00003175 0F852E3F0100            	jne L_error_non_closure
  5495 0000317B FF7001                  	push SOB_CLOSURE_ENV(rax)
  5496 0000317E 4C8B4009                	mov r8, qword [rax + 1 + 8]
  5497 00003182 FF7508                  	push qword [rbp + 8]				; push old return address
  5498 00003185 FF7500                  	push qword [rbp]					; push old rbp
  5499                                  	;; move stack up ;;
  5500 00003188 488B5D18                	mov rbx, [rbp + 3*8]
  5501 0000318C 4889DE                  	mov rsi, rbx						; save old size in rsi
  5502 0000318F 4883C303                	add rbx, 3
  5503 00003193 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  5504 0000319B B902000000              	mov rcx, 2
  5505 000031A0 4883C104                	add rcx, 4				; num of iterations in rcx
  5506                                  .L_tc_recycle_frame_loop_02f5:
  5507 000031A4 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  5508 000031AC 488B143C                	mov rdx, [rsp + rdi]
  5509 000031B0 4889541D00              	mov [rbp + rbx], rdx
  5510 000031B5 4883EB08                	sub rbx, 8
  5511 000031B9 48FFC9                  	dec rcx
  5512 000031BC 4883F900                	cmp rcx, 0
  5513 000031C0 75E2                    	jne .L_tc_recycle_frame_loop_02f5
  5514 000031C2 4889F3                  	mov rbx, rsi
  5515 000031C5 4883EB02                	sub rbx, 2
  5516 000031C9 488D1CDD00000000        	lea rbx, [rbx*8]
  5517 000031D1 4801DD                  	add rbp, rbx
  5518 000031D4 4889EC                  	mov rsp, rbp         ; fix stack pointers
  5519 000031D7 5D                      	pop rbp
  5520 000031D8 41FFE0                  	jmp r8
  5521                                  .L_if_end_019b:
  5522 000031DB C9                      	leave
  5523 000031DC C22000                  	ret AND_KILL_FRAME(2)
  5524                                  .L_lambda_simple_end_024f:	; new closure is in rax
  5525 000031DF 50                      	push rax
  5526 000031E0 488B4520                	mov rax, PARAM(0)	; param run
  5527 000031E4 8F00                    	pop qword [rax]
  5528 000031E6 48B8-                   	mov rax, sob_void
  5528 000031E8 [0000000000000000] 
  5529                                  
  5530 000031F0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5531 000031F5 E8583F0100              	call malloc
  5532 000031FA 50                      	push rax
  5533 000031FB BF08000000              	mov rdi, 8 * 1	; new rib
  5534 00003200 E84D3F0100              	call malloc
  5535 00003205 50                      	push rax
  5536 00003206 BF10000000              	mov rdi, 8 * 2	; extended env
  5537 0000320B E8423F0100              	call malloc
  5538 00003210 488B7D10                	mov rdi, ENV
  5539 00003214 BE00000000              	mov rsi, 0
  5540 00003219 BA01000000              	mov rdx, 1
  5541                                  .L_lambda_opt_env_loop_004a:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  5542 0000321E 4883FE01                	cmp rsi, 1
  5543 00003222 7410                    	je .L_lambda_opt_env_end_004a
  5544 00003224 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5545 00003228 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5546 0000322C 48FFC6                  	inc rsi
  5547 0000322F 48FFC2                  	inc rdx
  5548 00003232 EBEA                    	jmp .L_lambda_opt_env_loop_004a
  5549                                  .L_lambda_opt_env_end_004a:
  5550 00003234 5B                      	pop rbx
  5551 00003235 BE00000000              	mov rsi, 0
  5552                                  .L_lambda_opt_params_loop_004a:	; copy params
  5553 0000323A 4883FE01                	cmp rsi, 1
  5554 0000323E 740E                    	je .L_lambda_opt_params_end_004a
  5555 00003240 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5556 00003245 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5557 00003249 48FFC6                  	inc rsi
  5558 0000324C EBEC                    	jmp .L_lambda_opt_params_loop_004a
  5559                                  .L_lambda_opt_params_end_004a:
  5560 0000324E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  5561 00003251 4889C3                  	mov rbx, rax
  5562 00003254 58                      	pop rax
  5563 00003255 C60004                  	mov byte [rax], T_closure
  5564 00003258 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5565 0000325C 48C74009[69320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_004a
  5566 00003264 E964010000              	jmp .L_lambda_opt_end_004a
  5567                                  .L_lambda_opt_code_004a:	; lambda-opt body
  5568 00003269 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5569 0000326F 740D                    	je .L_lambda_opt_arity_check_exact_004a
  5570 00003271 7F48                    	jg .L_lambda_opt_arity_check_more_004a
  5571 00003273 FF742410                	push qword [rsp + 8 * 2]
  5572 00003277 6A01                    	push 1
  5573 00003279 E9A13E0100              	jmp L_error_incorrect_arity_opt
  5574                                  .L_lambda_opt_arity_check_exact_004a:
  5575 0000327E 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update argument count (fixed params + 1 for nil)
  5576 00003287 41BA04000000            	mov r10, 4	; r10 = total addresses to adjust (fixed params + 3)
  5577 0000328D FF3424                  	push qword [rsp]	; Save the top stack element
  5578 00003290 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
  5579                                  .L_lambda_opt_stack_shrink_loop_00dc:
  5580 00003296 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
  5581 00003299 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_00dc	; Exit loop if all elements processed
  5582 0000329B 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
  5583 000032A0 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
  5584 000032A4 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
  5585 000032A9 49FFC3                  	inc r11	; Increment loop index
  5586 000032AC EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_00dc	; Jump back to loop start
  5587                                  .L_lambda_opt_stack_shrink_loop_exit_00dc:
  5588 000032AE 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
  5589 000032B6 E988000000              	jmp .L_lambda_opt_stack_adjusted_004a
  5590                                  .L_lambda_opt_arity_check_more_004a:
  5591 000032BB 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
  5592 000032C0 4983E801                	sub r8, 1	; r8 = count of optional params
  5593 000032C4 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update the number of params (fixed params + 1 for list opt)
  5594 000032CD 41B900000000            	mov r9, 0	; r9 = index of optional argument list
  5595 000032D3 4E8D54C418              	lea r10, [rsp + 2 * 8 + 1 * 8 + r8 * 8]	; r10 = address of first optional param
  5596 000032D8 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
  5596 000032DA [0100000000000000] 
  5597                                  .L_lambda_opt_stack_shrink_loop_00dd:
  5598 000032E2 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
  5599 000032E5 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_00dd	; Exit loop if all optional params are processed
  5600 000032E7 BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
  5601 000032EC E8613E0100              	call malloc	; Allocate memory for a new pair
  5602 000032F1 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
  5603 000032F5 49F7D9                  	neg r9	; Negate index to access in reverse
  5604 000032F8 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
  5605 000032FC 49F7D9                  	neg r9	; Negate index back
  5606 000032FF 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
  5607 00003303 C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
  5608 00003306 4989C3                  	mov r11, rax	; Update current pair to the newly created one
  5609 00003309 49FFC1                  	inc r9	; Increment the index
  5610 0000330C EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_00dd	; Repeat the loop for the next param
  5611                                  .L_lambda_opt_stack_shrink_loop_exit_00dd:
  5612 0000330E 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
  5613 00003311 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
  5614 00003315 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
  5615 00003318 4983C418                	add r12, 24	; Skip fixed params and return address
  5616 0000331C 41BD04000000            	mov r13, 4	; r13 = loop counter (number of params, old fp, ret addr, lex env)
  5617                                  .L_lambda_opt_stack_shrink_loop_00de:
  5618 00003322 4983FD00                	cmp r13, 0	; Check if there are more values to copy
  5619 00003326 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_00de	; Exit loop if all values are copied
  5620 00003328 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
  5621 0000332C 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
  5622 0000332F 49FFCD                  	dec r13	; Decrement the loop counter
  5623 00003332 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
  5624 00003336 4983EC08                	sub r12, 8	; Move the source pointer to the next location
  5625 0000333A EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_00de	; Repeat the loop for the next value
  5626                                  .L_lambda_opt_stack_shrink_loop_exit_00de:
  5627 0000333C 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
  5628 00003340 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
  5629                                  .L_lambda_opt_stack_adjusted_004a:
  5630 00003343 C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
  5631                                  	; preparing a tail-call
  5632 00003347 488B4528                	mov rax, PARAM(1)	; param s
  5633 0000334B 50                      	push rax
  5634 0000334C 488B4520                	mov rax, PARAM(0)	; param a
  5635 00003350 50                      	push rax
  5636 00003351 6A02                    	push 2	; arg count
  5637 00003353 488B4510                	mov rax, ENV
  5638 00003357 488B00                  	mov rax, qword [rax + 8 * 0]
  5639 0000335A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5640 0000335D 488B00                  	mov rax, qword [rax]
  5641 00003360 803804                  	cmp byte [rax], T_closure
  5642 00003363 0F85403D0100            	jne L_error_non_closure
  5643 00003369 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5644 0000336C 4C8B4009                	mov r8, qword [rax + 1 + 8]
  5645 00003370 FF7508                  	push qword [rbp + 8]				; push old return address
  5646 00003373 FF7500                  	push qword [rbp]					; push old rbp
  5647                                  	;; move stack up ;;
  5648 00003376 488B5D18                	mov rbx, [rbp + 3*8]
  5649 0000337A 4889DE                  	mov rsi, rbx						; save old size in rsi
  5650 0000337D 4883C303                	add rbx, 3
  5651 00003381 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  5652 00003389 B902000000              	mov rcx, 2
  5653 0000338E 4883C104                	add rcx, 4				; num of iterations in rcx
  5654                                  .L_tc_recycle_frame_loop_02f6:
  5655 00003392 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  5656 0000339A 488B143C                	mov rdx, [rsp + rdi]
  5657 0000339E 4889541D00              	mov [rbp + rbx], rdx
  5658 000033A3 4883EB08                	sub rbx, 8
  5659 000033A7 48FFC9                  	dec rcx
  5660 000033AA 4883F900                	cmp rcx, 0
  5661 000033AE 75E2                    	jne .L_tc_recycle_frame_loop_02f6
  5662 000033B0 4889F3                  	mov rbx, rsi
  5663 000033B3 4883EB02                	sub rbx, 2
  5664 000033B7 488D1CDD00000000        	lea rbx, [rbx*8]
  5665 000033BF 4801DD                  	add rbp, rbx
  5666 000033C2 4889EC                  	mov rsp, rbp         ; fix stack pointers
  5667 000033C5 5D                      	pop rbp
  5668 000033C6 41FFE0                  	jmp r8
  5669 000033C9 C9                      	leave	; Restore the previous stack frame
  5670 000033CA C22000                  	ret AND_KILL_FRAME(2)
  5671                                  .L_lambda_opt_end_004a:	; new closure is in rax
  5672 000033CD C9                      	leave
  5673 000033CE C21800                  	ret AND_KILL_FRAME(1)
  5674                                  .L_lambda_simple_end_024e:	; new closure is in rax
  5675 000033D1 803804                  	cmp byte [rax], T_closure
  5676 000033D4 0F85CF3C0100            	jne L_error_non_closure
  5677 000033DA FF7001                  	push SOB_CLOSURE_ENV(rax)
  5678 000033DD FF5009                  	call SOB_CLOSURE_CODE(rax)
  5679 000033E0 48890425[04140000]      	mov qword [free_var_93], rax
  5680 000033E8 48B8-                   	mov rax, sob_void
  5680 000033EA [0000000000000000] 
  5681                                  
  5682 000033F2 4889C7                  	mov rdi, rax
  5683 000033F5 E8AD3F0100              	call print_sexpr_if_not_void
  5684                                  	; preparing a non-tail-call
  5685 000033FA 48B8-                   	mov rax, L_constants + 1993
  5685 000033FC [C907000000000000] 
  5686 00003404 50                      	push rax
  5687 00003405 6A01                    	push 1	; arg count
  5688 00003407 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5689 0000340C E8413D0100              	call malloc
  5690 00003411 50                      	push rax
  5691 00003412 BF00000000              	mov rdi, 8 * 0	; new rib
  5692 00003417 E8363D0100              	call malloc
  5693 0000341C 50                      	push rax
  5694 0000341D BF08000000              	mov rdi, 8 * 1	; extended env
  5695 00003422 E82B3D0100              	call malloc
  5696 00003427 488B7D10                	mov rdi, ENV
  5697 0000342B BE00000000              	mov rsi, 0
  5698 00003430 BA01000000              	mov rdx, 1
  5699                                  .L_lambda_simple_env_loop_0250:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  5700 00003435 4883FE00                	cmp rsi, 0
  5701 00003439 7410                    	je .L_lambda_simple_env_end_0250
  5702 0000343B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5703 0000343F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5704 00003443 48FFC6                  	inc rsi
  5705 00003446 48FFC2                  	inc rdx
  5706 00003449 EBEA                    	jmp .L_lambda_simple_env_loop_0250
  5707                                  .L_lambda_simple_env_end_0250:
  5708 0000344B 5B                      	pop rbx
  5709 0000344C BE00000000              	mov rsi, 0
  5710                                  .L_lambda_simple_params_loop_0250:	; copy params
  5711 00003451 4883FE00                	cmp rsi, 0
  5712 00003455 740E                    	je .L_lambda_simple_params_end_0250
  5713 00003457 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5714 0000345C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5715 00003460 48FFC6                  	inc rsi
  5716 00003463 EBEC                    	jmp .L_lambda_simple_params_loop_0250
  5717                                  .L_lambda_simple_params_end_0250:
  5718 00003465 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  5719 00003468 4889C3                  	mov rbx, rax
  5720 0000346B 58                      	pop rax
  5721 0000346C C60004                  	mov byte [rax], T_closure
  5722 0000346F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5723 00003473 48C74009[80340000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0250
  5724 0000347B E953040000              	jmp .L_lambda_simple_end_0250
  5725                                  .L_lambda_simple_code_0250:	; lambda-simple body
  5726 00003480 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5727 00003486 740B                    	je .L_lambda_simple_arity_check_ok_0250
  5728 00003488 FF742410                	push qword [rsp + 8 * 2]
  5729 0000348C 6A01                    	push 1
  5730 0000348E E9783C0100              	jmp L_error_incorrect_arity_simple
  5731                                  .L_lambda_simple_arity_check_ok_0250:
  5732 00003493 C8000000                	enter 0, 0
  5733 00003497 BF08000000              	mov rdi, 8
  5734 0000349C E8B13C0100              	call malloc
  5735 000034A1 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
  5736 000034A5 488918                  	mov qword[rax], rbx
  5737 000034A8 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  5738 000034AC 48B8-                   	mov rax, sob_void
  5738 000034AE [0000000000000000] 
  5739                                  
  5740 000034B6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5741 000034BB E8923C0100              	call malloc
  5742 000034C0 50                      	push rax
  5743 000034C1 BF08000000              	mov rdi, 8 * 1	; new rib
  5744 000034C6 E8873C0100              	call malloc
  5745 000034CB 50                      	push rax
  5746 000034CC BF10000000              	mov rdi, 8 * 2	; extended env
  5747 000034D1 E87C3C0100              	call malloc
  5748 000034D6 488B7D10                	mov rdi, ENV
  5749 000034DA BE00000000              	mov rsi, 0
  5750 000034DF BA01000000              	mov rdx, 1
  5751                                  .L_lambda_simple_env_loop_0251:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  5752 000034E4 4883FE01                	cmp rsi, 1
  5753 000034E8 7410                    	je .L_lambda_simple_env_end_0251
  5754 000034EA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5755 000034EE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5756 000034F2 48FFC6                  	inc rsi
  5757 000034F5 48FFC2                  	inc rdx
  5758 000034F8 EBEA                    	jmp .L_lambda_simple_env_loop_0251
  5759                                  .L_lambda_simple_env_end_0251:
  5760 000034FA 5B                      	pop rbx
  5761 000034FB BE00000000              	mov rsi, 0
  5762                                  .L_lambda_simple_params_loop_0251:	; copy params
  5763 00003500 4883FE01                	cmp rsi, 1
  5764 00003504 740E                    	je .L_lambda_simple_params_end_0251
  5765 00003506 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5766 0000350B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5767 0000350F 48FFC6                  	inc rsi
  5768 00003512 EBEC                    	jmp .L_lambda_simple_params_loop_0251
  5769                                  .L_lambda_simple_params_end_0251:
  5770 00003514 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  5771 00003517 4889C3                  	mov rbx, rax
  5772 0000351A 58                      	pop rax
  5773 0000351B C60004                  	mov byte [rax], T_closure
  5774 0000351E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5775 00003522 48C74009[2F350000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0251
  5776 0000352A E944010000              	jmp .L_lambda_simple_end_0251
  5777                                  .L_lambda_simple_code_0251:	; lambda-simple body
  5778 0000352F 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5779 00003535 740B                    	je .L_lambda_simple_arity_check_ok_0251
  5780 00003537 FF742410                	push qword [rsp + 8 * 2]
  5781 0000353B 6A02                    	push 2
  5782 0000353D E9C93B0100              	jmp L_error_incorrect_arity_simple
  5783                                  .L_lambda_simple_arity_check_ok_0251:
  5784 00003542 C8000000                	enter 0, 0
  5785                                  	; preparing a non-tail-call
  5786 00003546 488B4528                	mov rax, PARAM(1)	; param s
  5787 0000354A 50                      	push rax
  5788 0000354B 6A01                    	push 1	; arg count
  5789 0000354D 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
  5790 00003555 803805                  	cmp byte [rax], T_undefined
  5791 00003558 0F84C73A0100            	je L_error_fvar_undefined
  5792 0000355E 803804                  	cmp byte [rax], T_closure
  5793 00003561 0F85423B0100            	jne L_error_non_closure
  5794 00003567 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5795 0000356A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5796 0000356D 483D[02000000]          	cmp rax, sob_boolean_false
  5797 00003573 0F84F2000000            	je .L_if_else_019c
  5798                                  	; preparing a tail-call
  5799                                  	; preparing a non-tail-call
  5800                                  	; preparing a non-tail-call
  5801 00003579 488B4528                	mov rax, PARAM(1)	; param s
  5802 0000357D 50                      	push rax
  5803 0000357E 6A01                    	push 1	; arg count
  5804 00003580 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  5805 00003588 803805                  	cmp byte [rax], T_undefined
  5806 0000358B 0F84943A0100            	je L_error_fvar_undefined
  5807 00003591 803804                  	cmp byte [rax], T_closure
  5808 00003594 0F850F3B0100            	jne L_error_non_closure
  5809 0000359A FF7001                  	push SOB_CLOSURE_ENV(rax)
  5810 0000359D FF5009                  	call SOB_CLOSURE_CODE(rax)
  5811 000035A0 50                      	push rax
  5812                                  	; preparing a non-tail-call
  5813 000035A1 488B4528                	mov rax, PARAM(1)	; param s
  5814 000035A5 50                      	push rax
  5815 000035A6 6A01                    	push 1	; arg count
  5816 000035A8 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  5817 000035B0 803805                  	cmp byte [rax], T_undefined
  5818 000035B3 0F846C3A0100            	je L_error_fvar_undefined
  5819 000035B9 803804                  	cmp byte [rax], T_closure
  5820 000035BC 0F85E73A0100            	jne L_error_non_closure
  5821 000035C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5822 000035C5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5823 000035C8 50                      	push rax
  5824 000035C9 6A02                    	push 2	; arg count
  5825 000035CB 488B4510                	mov rax, ENV
  5826 000035CF 488B00                  	mov rax, qword [rax + 8 * 0]
  5827 000035D2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5828 000035D5 488B00                  	mov rax, qword [rax]
  5829 000035D8 803804                  	cmp byte [rax], T_closure
  5830 000035DB 0F85C83A0100            	jne L_error_non_closure
  5831 000035E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5832 000035E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5833 000035E7 50                      	push rax
  5834 000035E8 488B4520                	mov rax, PARAM(0)	; param a
  5835 000035EC 50                      	push rax
  5836 000035ED 6A02                    	push 2	; arg count
  5837 000035EF 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
  5838 000035F7 803805                  	cmp byte [rax], T_undefined
  5839 000035FA 0F84253A0100            	je L_error_fvar_undefined
  5840 00003600 803804                  	cmp byte [rax], T_closure
  5841 00003603 0F85A03A0100            	jne L_error_non_closure
  5842 00003609 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5843 0000360C 4C8B4009                	mov r8, qword [rax + 1 + 8]
  5844 00003610 FF7508                  	push qword [rbp + 8]				; push old return address
  5845 00003613 FF7500                  	push qword [rbp]					; push old rbp
  5846                                  	;; move stack up ;;
  5847 00003616 488B5D18                	mov rbx, [rbp + 3*8]
  5848 0000361A 4889DE                  	mov rsi, rbx						; save old size in rsi
  5849 0000361D 4883C303                	add rbx, 3
  5850 00003621 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  5851 00003629 B902000000              	mov rcx, 2
  5852 0000362E 4883C104                	add rcx, 4				; num of iterations in rcx
  5853                                  .L_tc_recycle_frame_loop_02f7:
  5854 00003632 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  5855 0000363A 488B143C                	mov rdx, [rsp + rdi]
  5856 0000363E 4889541D00              	mov [rbp + rbx], rdx
  5857 00003643 4883EB08                	sub rbx, 8
  5858 00003647 48FFC9                  	dec rcx
  5859 0000364A 4883F900                	cmp rcx, 0
  5860 0000364E 75E2                    	jne .L_tc_recycle_frame_loop_02f7
  5861 00003650 4889F3                  	mov rbx, rsi
  5862 00003653 4883EB02                	sub rbx, 2
  5863 00003657 488D1CDD00000000        	lea rbx, [rbx*8]
  5864 0000365F 4801DD                  	add rbp, rbx
  5865 00003662 4889EC                  	mov rsp, rbp         ; fix stack pointers
  5866 00003665 5D                      	pop rbp
  5867 00003666 41FFE0                  	jmp r8
  5868 00003669 EB04                    	jmp .L_if_end_019c
  5869                                  .L_if_else_019c:
  5870 0000366B 488B4520                	mov rax, PARAM(0)	; param a
  5871                                  .L_if_end_019c:
  5872 0000366F C9                      	leave
  5873 00003670 C22000                  	ret AND_KILL_FRAME(2)
  5874                                  .L_lambda_simple_end_0251:	; new closure is in rax
  5875 00003673 50                      	push rax
  5876 00003674 488B4520                	mov rax, PARAM(0)	; param run
  5877 00003678 8F00                    	pop qword [rax]
  5878 0000367A 48B8-                   	mov rax, sob_void
  5878 0000367C [0000000000000000] 
  5879                                  
  5880 00003684 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5881 00003689 E8C43A0100              	call malloc
  5882 0000368E 50                      	push rax
  5883 0000368F BF08000000              	mov rdi, 8 * 1	; new rib
  5884 00003694 E8B93A0100              	call malloc
  5885 00003699 50                      	push rax
  5886 0000369A BF10000000              	mov rdi, 8 * 2	; extended env
  5887 0000369F E8AE3A0100              	call malloc
  5888 000036A4 488B7D10                	mov rdi, ENV
  5889 000036A8 BE00000000              	mov rsi, 0
  5890 000036AD BA01000000              	mov rdx, 1
  5891                                  .L_lambda_opt_env_loop_004b:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  5892 000036B2 4883FE01                	cmp rsi, 1
  5893 000036B6 7410                    	je .L_lambda_opt_env_end_004b
  5894 000036B8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5895 000036BC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5896 000036C0 48FFC6                  	inc rsi
  5897 000036C3 48FFC2                  	inc rdx
  5898 000036C6 EBEA                    	jmp .L_lambda_opt_env_loop_004b
  5899                                  .L_lambda_opt_env_end_004b:
  5900 000036C8 5B                      	pop rbx
  5901 000036C9 BE00000000              	mov rsi, 0
  5902                                  .L_lambda_opt_params_loop_004b:	; copy params
  5903 000036CE 4883FE01                	cmp rsi, 1
  5904 000036D2 740E                    	je .L_lambda_opt_params_end_004b
  5905 000036D4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5906 000036D9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5907 000036DD 48FFC6                  	inc rsi
  5908 000036E0 EBEC                    	jmp .L_lambda_opt_params_loop_004b
  5909                                  .L_lambda_opt_params_end_004b:
  5910 000036E2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  5911 000036E5 4889C3                  	mov rbx, rax
  5912 000036E8 58                      	pop rax
  5913 000036E9 C60004                  	mov byte [rax], T_closure
  5914 000036EC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5915 000036F0 48C74009[FD360000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_004b
  5916 000036F8 E9D2010000              	jmp .L_lambda_opt_end_004b
  5917                                  .L_lambda_opt_code_004b:	; lambda-opt body
  5918 000036FD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5919 00003703 740D                    	je .L_lambda_opt_arity_check_exact_004b
  5920 00003705 7F48                    	jg .L_lambda_opt_arity_check_more_004b
  5921 00003707 FF742410                	push qword [rsp + 8 * 2]
  5922 0000370B 6A01                    	push 1
  5923 0000370D E90D3A0100              	jmp L_error_incorrect_arity_opt
  5924                                  .L_lambda_opt_arity_check_exact_004b:
  5925 00003712 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update argument count (fixed params + 1 for nil)
  5926 0000371B 41BA04000000            	mov r10, 4	; r10 = total addresses to adjust (fixed params + 3)
  5927 00003721 FF3424                  	push qword [rsp]	; Save the top stack element
  5928 00003724 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
  5929                                  .L_lambda_opt_stack_shrink_loop_00df:
  5930 0000372A 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
  5931 0000372D 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_00df	; Exit loop if all elements processed
  5932 0000372F 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
  5933 00003734 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
  5934 00003738 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
  5935 0000373D 49FFC3                  	inc r11	; Increment loop index
  5936 00003740 EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_00df	; Jump back to loop start
  5937                                  .L_lambda_opt_stack_shrink_loop_exit_00df:
  5938 00003742 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
  5939 0000374A E988000000              	jmp .L_lambda_opt_stack_adjusted_004b
  5940                                  .L_lambda_opt_arity_check_more_004b:
  5941 0000374F 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
  5942 00003754 4983E801                	sub r8, 1	; r8 = count of optional params
  5943 00003758 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update the number of params (fixed params + 1 for list opt)
  5944 00003761 41B900000000            	mov r9, 0	; r9 = index of optional argument list
  5945 00003767 4E8D54C418              	lea r10, [rsp + 2 * 8 + 1 * 8 + r8 * 8]	; r10 = address of first optional param
  5946 0000376C 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
  5946 0000376E [0100000000000000] 
  5947                                  .L_lambda_opt_stack_shrink_loop_00e0:
  5948 00003776 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
  5949 00003779 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_00e0	; Exit loop if all optional params are processed
  5950 0000377B BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
  5951 00003780 E8CD390100              	call malloc	; Allocate memory for a new pair
  5952 00003785 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
  5953 00003789 49F7D9                  	neg r9	; Negate index to access in reverse
  5954 0000378C 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
  5955 00003790 49F7D9                  	neg r9	; Negate index back
  5956 00003793 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
  5957 00003797 C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
  5958 0000379A 4989C3                  	mov r11, rax	; Update current pair to the newly created one
  5959 0000379D 49FFC1                  	inc r9	; Increment the index
  5960 000037A0 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_00e0	; Repeat the loop for the next param
  5961                                  .L_lambda_opt_stack_shrink_loop_exit_00e0:
  5962 000037A2 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
  5963 000037A5 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
  5964 000037A9 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
  5965 000037AC 4983C418                	add r12, 24	; Skip fixed params and return address
  5966 000037B0 41BD04000000            	mov r13, 4	; r13 = loop counter (number of params, old fp, ret addr, lex env)
  5967                                  .L_lambda_opt_stack_shrink_loop_00e1:
  5968 000037B6 4983FD00                	cmp r13, 0	; Check if there are more values to copy
  5969 000037BA 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_00e1	; Exit loop if all values are copied
  5970 000037BC 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
  5971 000037C0 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
  5972 000037C3 49FFCD                  	dec r13	; Decrement the loop counter
  5973 000037C6 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
  5974 000037CA 4983EC08                	sub r12, 8	; Move the source pointer to the next location
  5975 000037CE EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_00e1	; Repeat the loop for the next value
  5976                                  .L_lambda_opt_stack_shrink_loop_exit_00e1:
  5977 000037D0 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
  5978 000037D4 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
  5979                                  .L_lambda_opt_stack_adjusted_004b:
  5980 000037D7 C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
  5981                                  	; preparing a tail-call
  5982                                  	; preparing a non-tail-call
  5983                                  	; preparing a non-tail-call
  5984 000037DB 488B4528                	mov rax, PARAM(1)	; param s
  5985 000037DF 50                      	push rax
  5986 000037E0 6A01                    	push 1	; arg count
  5987 000037E2 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  5988 000037EA 803805                  	cmp byte [rax], T_undefined
  5989 000037ED 0F8432380100            	je L_error_fvar_undefined
  5990 000037F3 803804                  	cmp byte [rax], T_closure
  5991 000037F6 0F85AD380100            	jne L_error_non_closure
  5992 000037FC FF7001                  	push SOB_CLOSURE_ENV(rax)
  5993 000037FF FF5009                  	call SOB_CLOSURE_CODE(rax)
  5994 00003802 50                      	push rax
  5995                                  	; preparing a non-tail-call
  5996 00003803 488B4528                	mov rax, PARAM(1)	; param s
  5997 00003807 50                      	push rax
  5998 00003808 6A01                    	push 1	; arg count
  5999 0000380A 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  6000 00003812 803805                  	cmp byte [rax], T_undefined
  6001 00003815 0F840A380100            	je L_error_fvar_undefined
  6002 0000381B 803804                  	cmp byte [rax], T_closure
  6003 0000381E 0F8585380100            	jne L_error_non_closure
  6004 00003824 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6005 00003827 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6006 0000382A 50                      	push rax
  6007 0000382B 6A02                    	push 2	; arg count
  6008 0000382D 488B4510                	mov rax, ENV
  6009 00003831 488B00                  	mov rax, qword [rax + 8 * 0]
  6010 00003834 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  6011 00003837 488B00                  	mov rax, qword [rax]
  6012 0000383A 803804                  	cmp byte [rax], T_closure
  6013 0000383D 0F8566380100            	jne L_error_non_closure
  6014 00003843 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6015 00003846 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6016 00003849 50                      	push rax
  6017 0000384A 488B4520                	mov rax, PARAM(0)	; param f
  6018 0000384E 50                      	push rax
  6019 0000384F 6A02                    	push 2	; arg count
  6020 00003851 488B0425[A30E0000]      	mov rax, qword [free_var_12]	; free var __bin-apply
  6021 00003859 803805                  	cmp byte [rax], T_undefined
  6022 0000385C 0F84C3370100            	je L_error_fvar_undefined
  6023 00003862 803804                  	cmp byte [rax], T_closure
  6024 00003865 0F853E380100            	jne L_error_non_closure
  6025 0000386B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6026 0000386E 4C8B4009                	mov r8, qword [rax + 1 + 8]
  6027 00003872 FF7508                  	push qword [rbp + 8]				; push old return address
  6028 00003875 FF7500                  	push qword [rbp]					; push old rbp
  6029                                  	;; move stack up ;;
  6030 00003878 488B5D18                	mov rbx, [rbp + 3*8]
  6031 0000387C 4889DE                  	mov rsi, rbx						; save old size in rsi
  6032 0000387F 4883C303                	add rbx, 3
  6033 00003883 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  6034 0000388B B902000000              	mov rcx, 2
  6035 00003890 4883C104                	add rcx, 4				; num of iterations in rcx
  6036                                  .L_tc_recycle_frame_loop_02f8:
  6037 00003894 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  6038 0000389C 488B143C                	mov rdx, [rsp + rdi]
  6039 000038A0 4889541D00              	mov [rbp + rbx], rdx
  6040 000038A5 4883EB08                	sub rbx, 8
  6041 000038A9 48FFC9                  	dec rcx
  6042 000038AC 4883F900                	cmp rcx, 0
  6043 000038B0 75E2                    	jne .L_tc_recycle_frame_loop_02f8
  6044 000038B2 4889F3                  	mov rbx, rsi
  6045 000038B5 4883EB02                	sub rbx, 2
  6046 000038B9 488D1CDD00000000        	lea rbx, [rbx*8]
  6047 000038C1 4801DD                  	add rbp, rbx
  6048 000038C4 4889EC                  	mov rsp, rbp         ; fix stack pointers
  6049 000038C7 5D                      	pop rbp
  6050 000038C8 41FFE0                  	jmp r8
  6051 000038CB C9                      	leave	; Restore the previous stack frame
  6052 000038CC C22000                  	ret AND_KILL_FRAME(2)
  6053                                  .L_lambda_opt_end_004b:	; new closure is in rax
  6054 000038CF C9                      	leave
  6055 000038D0 C21800                  	ret AND_KILL_FRAME(1)
  6056                                  .L_lambda_simple_end_0250:	; new closure is in rax
  6057 000038D3 803804                  	cmp byte [rax], T_closure
  6058 000038D6 0F85CD370100            	jne L_error_non_closure
  6059 000038DC FF7001                  	push SOB_CLOSURE_ENV(rax)
  6060 000038DF FF5009                  	call SOB_CLOSURE_CODE(rax)
  6061 000038E2 48890425[08100000]      	mov qword [free_var_33], rax
  6062 000038EA 48B8-                   	mov rax, sob_void
  6062 000038EC [0000000000000000] 
  6063                                  
  6064 000038F4 4889C7                  	mov rdi, rax
  6065 000038F7 E8AB3A0100              	call print_sexpr_if_not_void
  6066 000038FC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6067 00003901 E84C380100              	call malloc
  6068 00003906 50                      	push rax
  6069 00003907 BF00000000              	mov rdi, 8 * 0	; new rib
  6070 0000390C E841380100              	call malloc
  6071 00003911 50                      	push rax
  6072 00003912 BF08000000              	mov rdi, 8 * 1	; extended env
  6073 00003917 E836380100              	call malloc
  6074 0000391C 488B7D10                	mov rdi, ENV
  6075 00003920 BE00000000              	mov rsi, 0
  6076 00003925 BA01000000              	mov rdx, 1
  6077                                  .L_lambda_opt_env_loop_004c:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  6078 0000392A 4883FE00                	cmp rsi, 0
  6079 0000392E 7410                    	je .L_lambda_opt_env_end_004c
  6080 00003930 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6081 00003934 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6082 00003938 48FFC6                  	inc rsi
  6083 0000393B 48FFC2                  	inc rdx
  6084 0000393E EBEA                    	jmp .L_lambda_opt_env_loop_004c
  6085                                  .L_lambda_opt_env_end_004c:
  6086 00003940 5B                      	pop rbx
  6087 00003941 BE00000000              	mov rsi, 0
  6088                                  .L_lambda_opt_params_loop_004c:	; copy params
  6089 00003946 4883FE00                	cmp rsi, 0
  6090 0000394A 740E                    	je .L_lambda_opt_params_end_004c
  6091 0000394C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6092 00003951 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6093 00003955 48FFC6                  	inc rsi
  6094 00003958 EBEC                    	jmp .L_lambda_opt_params_loop_004c
  6095                                  .L_lambda_opt_params_end_004c:
  6096 0000395A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  6097 0000395D 4889C3                  	mov rbx, rax
  6098 00003960 58                      	pop rax
  6099 00003961 C60004                  	mov byte [rax], T_closure
  6100 00003964 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6101 00003968 48C74009[75390000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_004c
  6102 00003970 E904050000              	jmp .L_lambda_opt_end_004c
  6103                                  .L_lambda_opt_code_004c:	; lambda-opt body
  6104 00003975 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6105 0000397B 740D                    	je .L_lambda_opt_arity_check_exact_004c
  6106 0000397D 7F48                    	jg .L_lambda_opt_arity_check_more_004c
  6107 0000397F FF742410                	push qword [rsp + 8 * 2]
  6108 00003983 6A01                    	push 1
  6109 00003985 E995370100              	jmp L_error_incorrect_arity_opt
  6110                                  .L_lambda_opt_arity_check_exact_004c:
  6111 0000398A 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update argument count (fixed params + 1 for nil)
  6112 00003993 41BA04000000            	mov r10, 4	; r10 = total addresses to adjust (fixed params + 3)
  6113 00003999 FF3424                  	push qword [rsp]	; Save the top stack element
  6114 0000399C 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
  6115                                  .L_lambda_opt_stack_shrink_loop_00e2:
  6116 000039A2 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
  6117 000039A5 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_00e2	; Exit loop if all elements processed
  6118 000039A7 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
  6119 000039AC 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
  6120 000039B0 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
  6121 000039B5 49FFC3                  	inc r11	; Increment loop index
  6122 000039B8 EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_00e2	; Jump back to loop start
  6123                                  .L_lambda_opt_stack_shrink_loop_exit_00e2:
  6124 000039BA 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
  6125 000039C2 E988000000              	jmp .L_lambda_opt_stack_adjusted_004c
  6126                                  .L_lambda_opt_arity_check_more_004c:
  6127 000039C7 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
  6128 000039CC 4983E801                	sub r8, 1	; r8 = count of optional params
  6129 000039D0 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update the number of params (fixed params + 1 for list opt)
  6130 000039D9 41B900000000            	mov r9, 0	; r9 = index of optional argument list
  6131 000039DF 4E8D54C418              	lea r10, [rsp + 2 * 8 + 1 * 8 + r8 * 8]	; r10 = address of first optional param
  6132 000039E4 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
  6132 000039E6 [0100000000000000] 
  6133                                  .L_lambda_opt_stack_shrink_loop_00e3:
  6134 000039EE 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
  6135 000039F1 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_00e3	; Exit loop if all optional params are processed
  6136 000039F3 BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
  6137 000039F8 E855370100              	call malloc	; Allocate memory for a new pair
  6138 000039FD 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
  6139 00003A01 49F7D9                  	neg r9	; Negate index to access in reverse
  6140 00003A04 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
  6141 00003A08 49F7D9                  	neg r9	; Negate index back
  6142 00003A0B 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
  6143 00003A0F C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
  6144 00003A12 4989C3                  	mov r11, rax	; Update current pair to the newly created one
  6145 00003A15 49FFC1                  	inc r9	; Increment the index
  6146 00003A18 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_00e3	; Repeat the loop for the next param
  6147                                  .L_lambda_opt_stack_shrink_loop_exit_00e3:
  6148 00003A1A 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
  6149 00003A1D 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
  6150 00003A21 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
  6151 00003A24 4983C418                	add r12, 24	; Skip fixed params and return address
  6152 00003A28 41BD04000000            	mov r13, 4	; r13 = loop counter (number of params, old fp, ret addr, lex env)
  6153                                  .L_lambda_opt_stack_shrink_loop_00e4:
  6154 00003A2E 4983FD00                	cmp r13, 0	; Check if there are more values to copy
  6155 00003A32 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_00e4	; Exit loop if all values are copied
  6156 00003A34 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
  6157 00003A38 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
  6158 00003A3B 49FFCD                  	dec r13	; Decrement the loop counter
  6159 00003A3E 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
  6160 00003A42 4983EC08                	sub r12, 8	; Move the source pointer to the next location
  6161 00003A46 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_00e4	; Repeat the loop for the next value
  6162                                  .L_lambda_opt_stack_shrink_loop_exit_00e4:
  6163 00003A48 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
  6164 00003A4C 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
  6165                                  .L_lambda_opt_stack_adjusted_004c:
  6166 00003A4F C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
  6167                                  	; preparing a tail-call
  6168 00003A53 48B8-                   	mov rax, L_constants + 1993
  6168 00003A55 [C907000000000000] 
  6169 00003A5D 50                      	push rax
  6170 00003A5E 6A01                    	push 1	; arg count
  6171 00003A60 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6172 00003A65 E8E8360100              	call malloc
  6173 00003A6A 50                      	push rax
  6174 00003A6B BF10000000              	mov rdi, 8 * 2	; new rib
  6175 00003A70 E8DD360100              	call malloc
  6176 00003A75 50                      	push rax
  6177 00003A76 BF10000000              	mov rdi, 8 * 2	; extended env
  6178 00003A7B E8D2360100              	call malloc
  6179 00003A80 488B7D10                	mov rdi, ENV
  6180 00003A84 BE00000000              	mov rsi, 0
  6181 00003A89 BA01000000              	mov rdx, 1
  6182                                  .L_lambda_simple_env_loop_0252:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  6183 00003A8E 4883FE01                	cmp rsi, 1
  6184 00003A92 7410                    	je .L_lambda_simple_env_end_0252
  6185 00003A94 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6186 00003A98 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6187 00003A9C 48FFC6                  	inc rsi
  6188 00003A9F 48FFC2                  	inc rdx
  6189 00003AA2 EBEA                    	jmp .L_lambda_simple_env_loop_0252
  6190                                  .L_lambda_simple_env_end_0252:
  6191 00003AA4 5B                      	pop rbx
  6192 00003AA5 BE00000000              	mov rsi, 0
  6193                                  .L_lambda_simple_params_loop_0252:	; copy params
  6194 00003AAA 4883FE02                	cmp rsi, 2
  6195 00003AAE 740E                    	je .L_lambda_simple_params_end_0252
  6196 00003AB0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6197 00003AB5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6198 00003AB9 48FFC6                  	inc rsi
  6199 00003ABC EBEC                    	jmp .L_lambda_simple_params_loop_0252
  6200                                  .L_lambda_simple_params_end_0252:
  6201 00003ABE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  6202 00003AC1 4889C3                  	mov rbx, rax
  6203 00003AC4 58                      	pop rax
  6204 00003AC5 C60004                  	mov byte [rax], T_closure
  6205 00003AC8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6206 00003ACC 48C74009[D93A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0252
  6207 00003AD4 E933030000              	jmp .L_lambda_simple_end_0252
  6208                                  .L_lambda_simple_code_0252:	; lambda-simple body
  6209 00003AD9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6210 00003ADF 740B                    	je .L_lambda_simple_arity_check_ok_0252
  6211 00003AE1 FF742410                	push qword [rsp + 8 * 2]
  6212 00003AE5 6A01                    	push 1
  6213 00003AE7 E91F360100              	jmp L_error_incorrect_arity_simple
  6214                                  .L_lambda_simple_arity_check_ok_0252:
  6215 00003AEC C8000000                	enter 0, 0
  6216 00003AF0 BF08000000              	mov rdi, 8
  6217 00003AF5 E858360100              	call malloc
  6218 00003AFA 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
  6219 00003AFE 488918                  	mov qword[rax], rbx
  6220 00003B01 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  6221 00003B05 48B8-                   	mov rax, sob_void
  6221 00003B07 [0000000000000000] 
  6222                                  
  6223 00003B0F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6224 00003B14 E839360100              	call malloc
  6225 00003B19 50                      	push rax
  6226 00003B1A BF08000000              	mov rdi, 8 * 1	; new rib
  6227 00003B1F E82E360100              	call malloc
  6228 00003B24 50                      	push rax
  6229 00003B25 BF18000000              	mov rdi, 8 * 3	; extended env
  6230 00003B2A E823360100              	call malloc
  6231 00003B2F 488B7D10                	mov rdi, ENV
  6232 00003B33 BE00000000              	mov rsi, 0
  6233 00003B38 BA01000000              	mov rdx, 1
  6234                                  .L_lambda_simple_env_loop_0253:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  6235 00003B3D 4883FE02                	cmp rsi, 2
  6236 00003B41 7410                    	je .L_lambda_simple_env_end_0253
  6237 00003B43 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6238 00003B47 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6239 00003B4B 48FFC6                  	inc rsi
  6240 00003B4E 48FFC2                  	inc rdx
  6241 00003B51 EBEA                    	jmp .L_lambda_simple_env_loop_0253
  6242                                  .L_lambda_simple_env_end_0253:
  6243 00003B53 5B                      	pop rbx
  6244 00003B54 BE00000000              	mov rsi, 0
  6245                                  .L_lambda_simple_params_loop_0253:	; copy params
  6246 00003B59 4883FE01                	cmp rsi, 1
  6247 00003B5D 740E                    	je .L_lambda_simple_params_end_0253
  6248 00003B5F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6249 00003B64 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6250 00003B68 48FFC6                  	inc rsi
  6251 00003B6B EBEC                    	jmp .L_lambda_simple_params_loop_0253
  6252                                  .L_lambda_simple_params_end_0253:
  6253 00003B6D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  6254 00003B70 4889C3                  	mov rbx, rax
  6255 00003B73 58                      	pop rax
  6256 00003B74 C60004                  	mov byte [rax], T_closure
  6257 00003B77 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6258 00003B7B 48C74009[883B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0253
  6259 00003B83 E9AB010000              	jmp .L_lambda_simple_end_0253
  6260                                  .L_lambda_simple_code_0253:	; lambda-simple body
  6261 00003B88 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6262 00003B8E 740B                    	je .L_lambda_simple_arity_check_ok_0253
  6263 00003B90 FF742410                	push qword [rsp + 8 * 2]
  6264 00003B94 6A01                    	push 1
  6265 00003B96 E970350100              	jmp L_error_incorrect_arity_simple
  6266                                  .L_lambda_simple_arity_check_ok_0253:
  6267 00003B9B C8000000                	enter 0, 0
  6268                                  	; preparing a non-tail-call
  6269                                  	; preparing a non-tail-call
  6270 00003B9F 488B4520                	mov rax, PARAM(0)	; param s
  6271 00003BA3 50                      	push rax
  6272 00003BA4 6A01                    	push 1	; arg count
  6273 00003BA6 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  6274 00003BAE 803805                  	cmp byte [rax], T_undefined
  6275 00003BB1 0F846E340100            	je L_error_fvar_undefined
  6276 00003BB7 803804                  	cmp byte [rax], T_closure
  6277 00003BBA 0F85E9340100            	jne L_error_non_closure
  6278 00003BC0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6279 00003BC3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6280 00003BC6 50                      	push rax
  6281 00003BC7 6A01                    	push 1	; arg count
  6282 00003BC9 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
  6283 00003BD1 803805                  	cmp byte [rax], T_undefined
  6284 00003BD4 0F844B340100            	je L_error_fvar_undefined
  6285 00003BDA 803804                  	cmp byte [rax], T_closure
  6286 00003BDD 0F85C6340100            	jne L_error_non_closure
  6287 00003BE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6288 00003BE6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6289 00003BE9 483D[02000000]          	cmp rax, sob_boolean_false
  6290 00003BEF 0F8430010000            	je .L_if_else_019d
  6291                                  	; preparing a non-tail-call
  6292                                  	; preparing a non-tail-call
  6293 00003BF5 488B4520                	mov rax, PARAM(0)	; param s
  6294 00003BF9 50                      	push rax
  6295 00003BFA 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  6296 00003C02 803805                  	cmp byte [rax], T_undefined
  6297 00003C05 0F841A340100            	je L_error_fvar_undefined
  6298 00003C0B 50                      	push rax
  6299 00003C0C 6A02                    	push 2	; arg count
  6300 00003C0E 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  6301 00003C16 803805                  	cmp byte [rax], T_undefined
  6302 00003C19 0F8406340100            	je L_error_fvar_undefined
  6303 00003C1F 803804                  	cmp byte [rax], T_closure
  6304 00003C22 0F8581340100            	jne L_error_non_closure
  6305 00003C28 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6306 00003C2B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6307 00003C2E 50                      	push rax
  6308 00003C2F 488B4510                	mov rax, ENV
  6309 00003C33 488B4008                	mov rax, qword [rax + 8 * 1]
  6310 00003C37 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6311 00003C3A 50                      	push rax
  6312 00003C3B 6A02                    	push 2	; arg count
  6313 00003C3D 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
  6314 00003C45 803805                  	cmp byte [rax], T_undefined
  6315 00003C48 0F84D7330100            	je L_error_fvar_undefined
  6316 00003C4E 803804                  	cmp byte [rax], T_closure
  6317 00003C51 0F8552340100            	jne L_error_non_closure
  6318 00003C57 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6319 00003C5A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6320 00003C5D 483D[02000000]          	cmp rax, sob_boolean_false
  6321 00003C63 0F85BA000000            	jne .L_or_end_002d
  6322                                  
  6323                                  	; preparing a tail-call
  6324                                  	; preparing a non-tail-call
  6325 00003C69 488B4520                	mov rax, PARAM(0)	; param s
  6326 00003C6D 50                      	push rax
  6327 00003C6E 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  6328 00003C76 803805                  	cmp byte [rax], T_undefined
  6329 00003C79 0F84A6330100            	je L_error_fvar_undefined
  6330 00003C7F 50                      	push rax
  6331 00003C80 6A02                    	push 2	; arg count
  6332 00003C82 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  6333 00003C8A 803805                  	cmp byte [rax], T_undefined
  6334 00003C8D 0F8492330100            	je L_error_fvar_undefined
  6335 00003C93 803804                  	cmp byte [rax], T_closure
  6336 00003C96 0F850D340100            	jne L_error_non_closure
  6337 00003C9C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6338 00003C9F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6339 00003CA2 50                      	push rax
  6340 00003CA3 6A01                    	push 1	; arg count
  6341 00003CA5 488B4510                	mov rax, ENV
  6342 00003CA9 488B00                  	mov rax, qword [rax + 8 * 0]
  6343 00003CAC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6344 00003CAF 488B00                  	mov rax, qword [rax]
  6345 00003CB2 803804                  	cmp byte [rax], T_closure
  6346 00003CB5 0F85EE330100            	jne L_error_non_closure
  6347 00003CBB FF7001                  	push SOB_CLOSURE_ENV(rax)
  6348 00003CBE 4C8B4009                	mov r8, qword [rax + 1 + 8]
  6349 00003CC2 FF7508                  	push qword [rbp + 8]				; push old return address
  6350 00003CC5 FF7500                  	push qword [rbp]					; push old rbp
  6351                                  	;; move stack up ;;
  6352 00003CC8 488B5D18                	mov rbx, [rbp + 3*8]
  6353 00003CCC 4889DE                  	mov rsi, rbx						; save old size in rsi
  6354 00003CCF 4883C303                	add rbx, 3
  6355 00003CD3 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  6356 00003CDB B901000000              	mov rcx, 1
  6357 00003CE0 4883C104                	add rcx, 4				; num of iterations in rcx
  6358                                  .L_tc_recycle_frame_loop_02fa:
  6359 00003CE4 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  6360 00003CEC 488B143C                	mov rdx, [rsp + rdi]
  6361 00003CF0 4889541D00              	mov [rbp + rbx], rdx
  6362 00003CF5 4883EB08                	sub rbx, 8
  6363 00003CF9 48FFC9                  	dec rcx
  6364 00003CFC 4883F900                	cmp rcx, 0
  6365 00003D00 75E2                    	jne .L_tc_recycle_frame_loop_02fa
  6366 00003D02 4889F3                  	mov rbx, rsi
  6367 00003D05 4883EB01                	sub rbx, 1
  6368 00003D09 488D1CDD00000000        	lea rbx, [rbx*8]
  6369 00003D11 4801DD                  	add rbp, rbx
  6370 00003D14 4889EC                  	mov rsp, rbp         ; fix stack pointers
  6371 00003D17 5D                      	pop rbp
  6372 00003D18 41FFE0                  	jmp r8
  6373 00003D1B 483D[02000000]          	cmp rax, sob_boolean_false
  6374 00003D21 7500                    	jne .L_or_end_002d
  6375                                  .L_or_end_002d:
  6376 00003D23 EB0A                    	jmp .L_if_end_019d
  6377                                  .L_if_else_019d:
  6378 00003D25 48B8-                   	mov rax, L_constants + 2
  6378 00003D27 [0200000000000000] 
  6379                                  .L_if_end_019d:
  6380 00003D2F C9                      	leave
  6381 00003D30 C21800                  	ret AND_KILL_FRAME(1)
  6382                                  .L_lambda_simple_end_0253:	; new closure is in rax
  6383 00003D33 50                      	push rax
  6384 00003D34 488B4520                	mov rax, PARAM(0)	; param loop
  6385 00003D38 8F00                    	pop qword [rax]
  6386 00003D3A 48B8-                   	mov rax, sob_void
  6386 00003D3C [0000000000000000] 
  6387                                  
  6388                                  	; preparing a non-tail-call
  6389 00003D44 488B4510                	mov rax, ENV
  6390 00003D48 488B00                  	mov rax, qword [rax + 8 * 0]
  6391 00003D4B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6392 00003D4F 50                      	push rax
  6393 00003D50 6A01                    	push 1	; arg count
  6394 00003D52 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
  6395 00003D5A 803805                  	cmp byte [rax], T_undefined
  6396 00003D5D 0F84C2320100            	je L_error_fvar_undefined
  6397 00003D63 803804                  	cmp byte [rax], T_closure
  6398 00003D66 0F853D330100            	jne L_error_non_closure
  6399 00003D6C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6400 00003D6F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6401 00003D72 483D[02000000]          	cmp rax, sob_boolean_false
  6402 00003D78 0F8480000000            	je .L_if_else_019e
  6403                                  	; preparing a tail-call
  6404 00003D7E 488B4510                	mov rax, ENV
  6405 00003D82 488B00                  	mov rax, qword [rax + 8 * 0]
  6406 00003D85 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6407 00003D89 50                      	push rax
  6408 00003D8A 6A01                    	push 1	; arg count
  6409 00003D8C 488B4520                	mov rax, PARAM(0)	; param loop
  6410 00003D90 488B00                  	mov rax, qword [rax]
  6411 00003D93 803804                  	cmp byte [rax], T_closure
  6412 00003D96 0F850D330100            	jne L_error_non_closure
  6413 00003D9C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6414 00003D9F 4C8B4009                	mov r8, qword [rax + 1 + 8]
  6415 00003DA3 FF7508                  	push qword [rbp + 8]				; push old return address
  6416 00003DA6 FF7500                  	push qword [rbp]					; push old rbp
  6417                                  	;; move stack up ;;
  6418 00003DA9 488B5D18                	mov rbx, [rbp + 3*8]
  6419 00003DAD 4889DE                  	mov rsi, rbx						; save old size in rsi
  6420 00003DB0 4883C303                	add rbx, 3
  6421 00003DB4 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  6422 00003DBC B901000000              	mov rcx, 1
  6423 00003DC1 4883C104                	add rcx, 4				; num of iterations in rcx
  6424                                  .L_tc_recycle_frame_loop_02fb:
  6425 00003DC5 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  6426 00003DCD 488B143C                	mov rdx, [rsp + rdi]
  6427 00003DD1 4889541D00              	mov [rbp + rbx], rdx
  6428 00003DD6 4883EB08                	sub rbx, 8
  6429 00003DDA 48FFC9                  	dec rcx
  6430 00003DDD 4883F900                	cmp rcx, 0
  6431 00003DE1 75E2                    	jne .L_tc_recycle_frame_loop_02fb
  6432 00003DE3 4889F3                  	mov rbx, rsi
  6433 00003DE6 4883EB01                	sub rbx, 1
  6434 00003DEA 488D1CDD00000000        	lea rbx, [rbx*8]
  6435 00003DF2 4801DD                  	add rbp, rbx
  6436 00003DF5 4889EC                  	mov rsp, rbp         ; fix stack pointers
  6437 00003DF8 5D                      	pop rbp
  6438 00003DF9 41FFE0                  	jmp r8
  6439 00003DFC EB0A                    	jmp .L_if_end_019e
  6440                                  .L_if_else_019e:
  6441 00003DFE 48B8-                   	mov rax, L_constants + 2
  6441 00003E00 [0200000000000000] 
  6442                                  .L_if_end_019e:
  6443 00003E08 C9                      	leave
  6444 00003E09 C21800                  	ret AND_KILL_FRAME(1)
  6445                                  .L_lambda_simple_end_0252:	; new closure is in rax
  6446 00003E0C 803804                  	cmp byte [rax], T_closure
  6447 00003E0F 0F8594320100            	jne L_error_non_closure
  6448 00003E15 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6449 00003E18 4C8B4009                	mov r8, qword [rax + 1 + 8]
  6450 00003E1C FF7508                  	push qword [rbp + 8]				; push old return address
  6451 00003E1F FF7500                  	push qword [rbp]					; push old rbp
  6452                                  	;; move stack up ;;
  6453 00003E22 488B5D18                	mov rbx, [rbp + 3*8]
  6454 00003E26 4889DE                  	mov rsi, rbx						; save old size in rsi
  6455 00003E29 4883C303                	add rbx, 3
  6456 00003E2D 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  6457 00003E35 B901000000              	mov rcx, 1
  6458 00003E3A 4883C104                	add rcx, 4				; num of iterations in rcx
  6459                                  .L_tc_recycle_frame_loop_02f9:
  6460 00003E3E 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  6461 00003E46 488B143C                	mov rdx, [rsp + rdi]
  6462 00003E4A 4889541D00              	mov [rbp + rbx], rdx
  6463 00003E4F 4883EB08                	sub rbx, 8
  6464 00003E53 48FFC9                  	dec rcx
  6465 00003E56 4883F900                	cmp rcx, 0
  6466 00003E5A 75E2                    	jne .L_tc_recycle_frame_loop_02f9
  6467 00003E5C 4889F3                  	mov rbx, rsi
  6468 00003E5F 4883EB01                	sub rbx, 1
  6469 00003E63 488D1CDD00000000        	lea rbx, [rbx*8]
  6470 00003E6B 4801DD                  	add rbp, rbx
  6471 00003E6E 4889EC                  	mov rsp, rbp         ; fix stack pointers
  6472 00003E71 5D                      	pop rbp
  6473 00003E72 41FFE0                  	jmp r8
  6474 00003E75 C9                      	leave	; Restore the previous stack frame
  6475 00003E76 C22000                  	ret AND_KILL_FRAME(2)
  6476                                  .L_lambda_opt_end_004c:	; new closure is in rax
  6477 00003E79 48890425[25150000]      	mov qword [free_var_110], rax
  6478 00003E81 48B8-                   	mov rax, sob_void
  6478 00003E83 [0000000000000000] 
  6479                                  
  6480 00003E8B 4889C7                  	mov rdi, rax
  6481 00003E8E E814350100              	call print_sexpr_if_not_void
  6482 00003E93 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6483 00003E98 E8B5320100              	call malloc
  6484 00003E9D 50                      	push rax
  6485 00003E9E BF00000000              	mov rdi, 8 * 0	; new rib
  6486 00003EA3 E8AA320100              	call malloc
  6487 00003EA8 50                      	push rax
  6488 00003EA9 BF08000000              	mov rdi, 8 * 1	; extended env
  6489 00003EAE E89F320100              	call malloc
  6490 00003EB3 488B7D10                	mov rdi, ENV
  6491 00003EB7 BE00000000              	mov rsi, 0
  6492 00003EBC BA01000000              	mov rdx, 1
  6493                                  .L_lambda_opt_env_loop_004d:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  6494 00003EC1 4883FE00                	cmp rsi, 0
  6495 00003EC5 7410                    	je .L_lambda_opt_env_end_004d
  6496 00003EC7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6497 00003ECB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6498 00003ECF 48FFC6                  	inc rsi
  6499 00003ED2 48FFC2                  	inc rdx
  6500 00003ED5 EBEA                    	jmp .L_lambda_opt_env_loop_004d
  6501                                  .L_lambda_opt_env_end_004d:
  6502 00003ED7 5B                      	pop rbx
  6503 00003ED8 BE00000000              	mov rsi, 0
  6504                                  .L_lambda_opt_params_loop_004d:	; copy params
  6505 00003EDD 4883FE00                	cmp rsi, 0
  6506 00003EE1 740E                    	je .L_lambda_opt_params_end_004d
  6507 00003EE3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6508 00003EE8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6509 00003EEC 48FFC6                  	inc rsi
  6510 00003EEF EBEC                    	jmp .L_lambda_opt_params_loop_004d
  6511                                  .L_lambda_opt_params_end_004d:
  6512 00003EF1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  6513 00003EF4 4889C3                  	mov rbx, rax
  6514 00003EF7 58                      	pop rax
  6515 00003EF8 C60004                  	mov byte [rax], T_closure
  6516 00003EFB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6517 00003EFF 48C74009[0C3F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_004d
  6518 00003F07 E946050000              	jmp .L_lambda_opt_end_004d
  6519                                  .L_lambda_opt_code_004d:	; lambda-opt body
  6520 00003F0C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6521 00003F12 740D                    	je .L_lambda_opt_arity_check_exact_004d
  6522 00003F14 7F48                    	jg .L_lambda_opt_arity_check_more_004d
  6523 00003F16 FF742410                	push qword [rsp + 8 * 2]
  6524 00003F1A 6A01                    	push 1
  6525 00003F1C E9FE310100              	jmp L_error_incorrect_arity_opt
  6526                                  .L_lambda_opt_arity_check_exact_004d:
  6527 00003F21 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update argument count (fixed params + 1 for nil)
  6528 00003F2A 41BA04000000            	mov r10, 4	; r10 = total addresses to adjust (fixed params + 3)
  6529 00003F30 FF3424                  	push qword [rsp]	; Save the top stack element
  6530 00003F33 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
  6531                                  .L_lambda_opt_stack_shrink_loop_00e5:
  6532 00003F39 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
  6533 00003F3C 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_00e5	; Exit loop if all elements processed
  6534 00003F3E 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
  6535 00003F43 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
  6536 00003F47 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
  6537 00003F4C 49FFC3                  	inc r11	; Increment loop index
  6538 00003F4F EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_00e5	; Jump back to loop start
  6539                                  .L_lambda_opt_stack_shrink_loop_exit_00e5:
  6540 00003F51 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
  6541 00003F59 E988000000              	jmp .L_lambda_opt_stack_adjusted_004d
  6542                                  .L_lambda_opt_arity_check_more_004d:
  6543 00003F5E 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
  6544 00003F63 4983E801                	sub r8, 1	; r8 = count of optional params
  6545 00003F67 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update the number of params (fixed params + 1 for list opt)
  6546 00003F70 41B900000000            	mov r9, 0	; r9 = index of optional argument list
  6547 00003F76 4E8D54C418              	lea r10, [rsp + 2 * 8 + 1 * 8 + r8 * 8]	; r10 = address of first optional param
  6548 00003F7B 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
  6548 00003F7D [0100000000000000] 
  6549                                  .L_lambda_opt_stack_shrink_loop_00e6:
  6550 00003F85 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
  6551 00003F88 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_00e6	; Exit loop if all optional params are processed
  6552 00003F8A BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
  6553 00003F8F E8BE310100              	call malloc	; Allocate memory for a new pair
  6554 00003F94 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
  6555 00003F98 49F7D9                  	neg r9	; Negate index to access in reverse
  6556 00003F9B 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
  6557 00003F9F 49F7D9                  	neg r9	; Negate index back
  6558 00003FA2 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
  6559 00003FA6 C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
  6560 00003FA9 4989C3                  	mov r11, rax	; Update current pair to the newly created one
  6561 00003FAC 49FFC1                  	inc r9	; Increment the index
  6562 00003FAF EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_00e6	; Repeat the loop for the next param
  6563                                  .L_lambda_opt_stack_shrink_loop_exit_00e6:
  6564 00003FB1 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
  6565 00003FB4 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
  6566 00003FB8 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
  6567 00003FBB 4983C418                	add r12, 24	; Skip fixed params and return address
  6568 00003FBF 41BD04000000            	mov r13, 4	; r13 = loop counter (number of params, old fp, ret addr, lex env)
  6569                                  .L_lambda_opt_stack_shrink_loop_00e7:
  6570 00003FC5 4983FD00                	cmp r13, 0	; Check if there are more values to copy
  6571 00003FC9 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_00e7	; Exit loop if all values are copied
  6572 00003FCB 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
  6573 00003FCF 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
  6574 00003FD2 49FFCD                  	dec r13	; Decrement the loop counter
  6575 00003FD5 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
  6576 00003FD9 4983EC08                	sub r12, 8	; Move the source pointer to the next location
  6577 00003FDD EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_00e7	; Repeat the loop for the next value
  6578                                  .L_lambda_opt_stack_shrink_loop_exit_00e7:
  6579 00003FDF 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
  6580 00003FE3 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
  6581                                  .L_lambda_opt_stack_adjusted_004d:
  6582 00003FE6 C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
  6583                                  	; preparing a tail-call
  6584 00003FEA 48B8-                   	mov rax, L_constants + 1993
  6584 00003FEC [C907000000000000] 
  6585 00003FF4 50                      	push rax
  6586 00003FF5 6A01                    	push 1	; arg count
  6587 00003FF7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6588 00003FFC E851310100              	call malloc
  6589 00004001 50                      	push rax
  6590 00004002 BF10000000              	mov rdi, 8 * 2	; new rib
  6591 00004007 E846310100              	call malloc
  6592 0000400C 50                      	push rax
  6593 0000400D BF10000000              	mov rdi, 8 * 2	; extended env
  6594 00004012 E83B310100              	call malloc
  6595 00004017 488B7D10                	mov rdi, ENV
  6596 0000401B BE00000000              	mov rsi, 0
  6597 00004020 BA01000000              	mov rdx, 1
  6598                                  .L_lambda_simple_env_loop_0254:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  6599 00004025 4883FE01                	cmp rsi, 1
  6600 00004029 7410                    	je .L_lambda_simple_env_end_0254
  6601 0000402B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6602 0000402F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6603 00004033 48FFC6                  	inc rsi
  6604 00004036 48FFC2                  	inc rdx
  6605 00004039 EBEA                    	jmp .L_lambda_simple_env_loop_0254
  6606                                  .L_lambda_simple_env_end_0254:
  6607 0000403B 5B                      	pop rbx
  6608 0000403C BE00000000              	mov rsi, 0
  6609                                  .L_lambda_simple_params_loop_0254:	; copy params
  6610 00004041 4883FE02                	cmp rsi, 2
  6611 00004045 740E                    	je .L_lambda_simple_params_end_0254
  6612 00004047 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6613 0000404C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6614 00004050 48FFC6                  	inc rsi
  6615 00004053 EBEC                    	jmp .L_lambda_simple_params_loop_0254
  6616                                  .L_lambda_simple_params_end_0254:
  6617 00004055 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  6618 00004058 4889C3                  	mov rbx, rax
  6619 0000405B 58                      	pop rax
  6620 0000405C C60004                  	mov byte [rax], T_closure
  6621 0000405F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6622 00004063 48C74009[70400000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0254
  6623 0000406B E975030000              	jmp .L_lambda_simple_end_0254
  6624                                  .L_lambda_simple_code_0254:	; lambda-simple body
  6625 00004070 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6626 00004076 740B                    	je .L_lambda_simple_arity_check_ok_0254
  6627 00004078 FF742410                	push qword [rsp + 8 * 2]
  6628 0000407C 6A01                    	push 1
  6629 0000407E E988300100              	jmp L_error_incorrect_arity_simple
  6630                                  .L_lambda_simple_arity_check_ok_0254:
  6631 00004083 C8000000                	enter 0, 0
  6632 00004087 BF08000000              	mov rdi, 8
  6633 0000408C E8C1300100              	call malloc
  6634 00004091 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
  6635 00004095 488918                  	mov qword[rax], rbx
  6636 00004098 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  6637 0000409C 48B8-                   	mov rax, sob_void
  6637 0000409E [0000000000000000] 
  6638                                  
  6639 000040A6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6640 000040AB E8A2300100              	call malloc
  6641 000040B0 50                      	push rax
  6642 000040B1 BF08000000              	mov rdi, 8 * 1	; new rib
  6643 000040B6 E897300100              	call malloc
  6644 000040BB 50                      	push rax
  6645 000040BC BF18000000              	mov rdi, 8 * 3	; extended env
  6646 000040C1 E88C300100              	call malloc
  6647 000040C6 488B7D10                	mov rdi, ENV
  6648 000040CA BE00000000              	mov rsi, 0
  6649 000040CF BA01000000              	mov rdx, 1
  6650                                  .L_lambda_simple_env_loop_0255:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  6651 000040D4 4883FE02                	cmp rsi, 2
  6652 000040D8 7410                    	je .L_lambda_simple_env_end_0255
  6653 000040DA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6654 000040DE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6655 000040E2 48FFC6                  	inc rsi
  6656 000040E5 48FFC2                  	inc rdx
  6657 000040E8 EBEA                    	jmp .L_lambda_simple_env_loop_0255
  6658                                  .L_lambda_simple_env_end_0255:
  6659 000040EA 5B                      	pop rbx
  6660 000040EB BE00000000              	mov rsi, 0
  6661                                  .L_lambda_simple_params_loop_0255:	; copy params
  6662 000040F0 4883FE01                	cmp rsi, 1
  6663 000040F4 740E                    	je .L_lambda_simple_params_end_0255
  6664 000040F6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6665 000040FB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6666 000040FF 48FFC6                  	inc rsi
  6667 00004102 EBEC                    	jmp .L_lambda_simple_params_loop_0255
  6668                                  .L_lambda_simple_params_end_0255:
  6669 00004104 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  6670 00004107 4889C3                  	mov rbx, rax
  6671 0000410A 58                      	pop rax
  6672 0000410B C60004                  	mov byte [rax], T_closure
  6673 0000410E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6674 00004112 48C74009[1F410000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0255
  6675 0000411A E9AB010000              	jmp .L_lambda_simple_end_0255
  6676                                  .L_lambda_simple_code_0255:	; lambda-simple body
  6677 0000411F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6678 00004125 740B                    	je .L_lambda_simple_arity_check_ok_0255
  6679 00004127 FF742410                	push qword [rsp + 8 * 2]
  6680 0000412B 6A01                    	push 1
  6681 0000412D E9D92F0100              	jmp L_error_incorrect_arity_simple
  6682                                  .L_lambda_simple_arity_check_ok_0255:
  6683 00004132 C8000000                	enter 0, 0
  6684                                  	; preparing a non-tail-call
  6685                                  	; preparing a non-tail-call
  6686 00004136 488B4520                	mov rax, PARAM(0)	; param s
  6687 0000413A 50                      	push rax
  6688 0000413B 6A01                    	push 1	; arg count
  6689 0000413D 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  6690 00004145 803805                  	cmp byte [rax], T_undefined
  6691 00004148 0F84D72E0100            	je L_error_fvar_undefined
  6692 0000414E 803804                  	cmp byte [rax], T_closure
  6693 00004151 0F85522F0100            	jne L_error_non_closure
  6694 00004157 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6695 0000415A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6696 0000415D 50                      	push rax
  6697 0000415E 6A01                    	push 1	; arg count
  6698 00004160 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  6699 00004168 803805                  	cmp byte [rax], T_undefined
  6700 0000416B 0F84B42E0100            	je L_error_fvar_undefined
  6701 00004171 803804                  	cmp byte [rax], T_closure
  6702 00004174 0F852F2F0100            	jne L_error_non_closure
  6703 0000417A FF7001                  	push SOB_CLOSURE_ENV(rax)
  6704 0000417D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6705 00004180 483D[02000000]          	cmp rax, sob_boolean_false
  6706 00004186 0F853A010000            	jne .L_or_end_002e
  6707                                  
  6708                                  	; preparing a non-tail-call
  6709                                  	; preparing a non-tail-call
  6710 0000418C 488B4520                	mov rax, PARAM(0)	; param s
  6711 00004190 50                      	push rax
  6712 00004191 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  6713 00004199 803805                  	cmp byte [rax], T_undefined
  6714 0000419C 0F84832E0100            	je L_error_fvar_undefined
  6715 000041A2 50                      	push rax
  6716 000041A3 6A02                    	push 2	; arg count
  6717 000041A5 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  6718 000041AD 803805                  	cmp byte [rax], T_undefined
  6719 000041B0 0F846F2E0100            	je L_error_fvar_undefined
  6720 000041B6 803804                  	cmp byte [rax], T_closure
  6721 000041B9 0F85EA2E0100            	jne L_error_non_closure
  6722 000041BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  6723 000041C2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6724 000041C5 50                      	push rax
  6725 000041C6 488B4510                	mov rax, ENV
  6726 000041CA 488B4008                	mov rax, qword [rax + 8 * 1]
  6727 000041CE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6728 000041D1 50                      	push rax
  6729 000041D2 6A02                    	push 2	; arg count
  6730 000041D4 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
  6731 000041DC 803805                  	cmp byte [rax], T_undefined
  6732 000041DF 0F84402E0100            	je L_error_fvar_undefined
  6733 000041E5 803804                  	cmp byte [rax], T_closure
  6734 000041E8 0F85BB2E0100            	jne L_error_non_closure
  6735 000041EE FF7001                  	push SOB_CLOSURE_ENV(rax)
  6736 000041F1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6737 000041F4 483D[02000000]          	cmp rax, sob_boolean_false
  6738 000041FA 0F84B4000000            	je .L_if_else_019f
  6739                                  	; preparing a tail-call
  6740                                  	; preparing a non-tail-call
  6741 00004200 488B4520                	mov rax, PARAM(0)	; param s
  6742 00004204 50                      	push rax
  6743 00004205 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  6744 0000420D 803805                  	cmp byte [rax], T_undefined
  6745 00004210 0F840F2E0100            	je L_error_fvar_undefined
  6746 00004216 50                      	push rax
  6747 00004217 6A02                    	push 2	; arg count
  6748 00004219 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  6749 00004221 803805                  	cmp byte [rax], T_undefined
  6750 00004224 0F84FB2D0100            	je L_error_fvar_undefined
  6751 0000422A 803804                  	cmp byte [rax], T_closure
  6752 0000422D 0F85762E0100            	jne L_error_non_closure
  6753 00004233 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6754 00004236 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6755 00004239 50                      	push rax
  6756 0000423A 6A01                    	push 1	; arg count
  6757 0000423C 488B4510                	mov rax, ENV
  6758 00004240 488B00                  	mov rax, qword [rax + 8 * 0]
  6759 00004243 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6760 00004246 488B00                  	mov rax, qword [rax]
  6761 00004249 803804                  	cmp byte [rax], T_closure
  6762 0000424C 0F85572E0100            	jne L_error_non_closure
  6763 00004252 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6764 00004255 4C8B4009                	mov r8, qword [rax + 1 + 8]
  6765 00004259 FF7508                  	push qword [rbp + 8]				; push old return address
  6766 0000425C FF7500                  	push qword [rbp]					; push old rbp
  6767                                  	;; move stack up ;;
  6768 0000425F 488B5D18                	mov rbx, [rbp + 3*8]
  6769 00004263 4889DE                  	mov rsi, rbx						; save old size in rsi
  6770 00004266 4883C303                	add rbx, 3
  6771 0000426A 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  6772 00004272 B901000000              	mov rcx, 1
  6773 00004277 4883C104                	add rcx, 4				; num of iterations in rcx
  6774                                  .L_tc_recycle_frame_loop_02fd:
  6775 0000427B 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  6776 00004283 488B143C                	mov rdx, [rsp + rdi]
  6777 00004287 4889541D00              	mov [rbp + rbx], rdx
  6778 0000428C 4883EB08                	sub rbx, 8
  6779 00004290 48FFC9                  	dec rcx
  6780 00004293 4883F900                	cmp rcx, 0
  6781 00004297 75E2                    	jne .L_tc_recycle_frame_loop_02fd
  6782 00004299 4889F3                  	mov rbx, rsi
  6783 0000429C 4883EB01                	sub rbx, 1
  6784 000042A0 488D1CDD00000000        	lea rbx, [rbx*8]
  6785 000042A8 4801DD                  	add rbp, rbx
  6786 000042AB 4889EC                  	mov rsp, rbp         ; fix stack pointers
  6787 000042AE 5D                      	pop rbp
  6788 000042AF 41FFE0                  	jmp r8
  6789 000042B2 EB0A                    	jmp .L_if_end_019f
  6790                                  .L_if_else_019f:
  6791 000042B4 48B8-                   	mov rax, L_constants + 2
  6791 000042B6 [0200000000000000] 
  6792                                  .L_if_end_019f:
  6793 000042BE 483D[02000000]          	cmp rax, sob_boolean_false
  6794 000042C4 7500                    	jne .L_or_end_002e
  6795                                  .L_or_end_002e:
  6796 000042C6 C9                      	leave
  6797 000042C7 C21800                  	ret AND_KILL_FRAME(1)
  6798                                  .L_lambda_simple_end_0255:	; new closure is in rax
  6799 000042CA 50                      	push rax
  6800 000042CB 488B4520                	mov rax, PARAM(0)	; param loop
  6801 000042CF 8F00                    	pop qword [rax]
  6802 000042D1 48B8-                   	mov rax, sob_void
  6802 000042D3 [0000000000000000] 
  6803                                  
  6804                                  	; preparing a non-tail-call
  6805 000042DB 488B4510                	mov rax, ENV
  6806 000042DF 488B00                  	mov rax, qword [rax + 8 * 0]
  6807 000042E2 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6808 000042E6 50                      	push rax
  6809 000042E7 6A01                    	push 1	; arg count
  6810 000042E9 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  6811 000042F1 803805                  	cmp byte [rax], T_undefined
  6812 000042F4 0F842B2D0100            	je L_error_fvar_undefined
  6813 000042FA 803804                  	cmp byte [rax], T_closure
  6814 000042FD 0F85A62D0100            	jne L_error_non_closure
  6815 00004303 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6816 00004306 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6817 00004309 483D[02000000]          	cmp rax, sob_boolean_false
  6818 0000430F 0F85CC000000            	jne .L_or_end_002f
  6819                                  
  6820                                  	; preparing a non-tail-call
  6821 00004315 488B4510                	mov rax, ENV
  6822 00004319 488B00                  	mov rax, qword [rax + 8 * 0]
  6823 0000431C 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6824 00004320 50                      	push rax
  6825 00004321 6A01                    	push 1	; arg count
  6826 00004323 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
  6827 0000432B 803805                  	cmp byte [rax], T_undefined
  6828 0000432E 0F84F12C0100            	je L_error_fvar_undefined
  6829 00004334 803804                  	cmp byte [rax], T_closure
  6830 00004337 0F856C2D0100            	jne L_error_non_closure
  6831 0000433D FF7001                  	push SOB_CLOSURE_ENV(rax)
  6832 00004340 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6833 00004343 483D[02000000]          	cmp rax, sob_boolean_false
  6834 00004349 0F8480000000            	je .L_if_else_01a0
  6835                                  	; preparing a tail-call
  6836 0000434F 488B4510                	mov rax, ENV
  6837 00004353 488B00                  	mov rax, qword [rax + 8 * 0]
  6838 00004356 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6839 0000435A 50                      	push rax
  6840 0000435B 6A01                    	push 1	; arg count
  6841 0000435D 488B4520                	mov rax, PARAM(0)	; param loop
  6842 00004361 488B00                  	mov rax, qword [rax]
  6843 00004364 803804                  	cmp byte [rax], T_closure
  6844 00004367 0F853C2D0100            	jne L_error_non_closure
  6845 0000436D FF7001                  	push SOB_CLOSURE_ENV(rax)
  6846 00004370 4C8B4009                	mov r8, qword [rax + 1 + 8]
  6847 00004374 FF7508                  	push qword [rbp + 8]				; push old return address
  6848 00004377 FF7500                  	push qword [rbp]					; push old rbp
  6849                                  	;; move stack up ;;
  6850 0000437A 488B5D18                	mov rbx, [rbp + 3*8]
  6851 0000437E 4889DE                  	mov rsi, rbx						; save old size in rsi
  6852 00004381 4883C303                	add rbx, 3
  6853 00004385 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  6854 0000438D B901000000              	mov rcx, 1
  6855 00004392 4883C104                	add rcx, 4				; num of iterations in rcx
  6856                                  .L_tc_recycle_frame_loop_02fe:
  6857 00004396 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  6858 0000439E 488B143C                	mov rdx, [rsp + rdi]
  6859 000043A2 4889541D00              	mov [rbp + rbx], rdx
  6860 000043A7 4883EB08                	sub rbx, 8
  6861 000043AB 48FFC9                  	dec rcx
  6862 000043AE 4883F900                	cmp rcx, 0
  6863 000043B2 75E2                    	jne .L_tc_recycle_frame_loop_02fe
  6864 000043B4 4889F3                  	mov rbx, rsi
  6865 000043B7 4883EB01                	sub rbx, 1
  6866 000043BB 488D1CDD00000000        	lea rbx, [rbx*8]
  6867 000043C3 4801DD                  	add rbp, rbx
  6868 000043C6 4889EC                  	mov rsp, rbp         ; fix stack pointers
  6869 000043C9 5D                      	pop rbp
  6870 000043CA 41FFE0                  	jmp r8
  6871 000043CD EB0A                    	jmp .L_if_end_01a0
  6872                                  .L_if_else_01a0:
  6873 000043CF 48B8-                   	mov rax, L_constants + 2
  6873 000043D1 [0200000000000000] 
  6874                                  .L_if_end_01a0:
  6875 000043D9 483D[02000000]          	cmp rax, sob_boolean_false
  6876 000043DF 7500                    	jne .L_or_end_002f
  6877                                  .L_or_end_002f:
  6878 000043E1 C9                      	leave
  6879 000043E2 C21800                  	ret AND_KILL_FRAME(1)
  6880                                  .L_lambda_simple_end_0254:	; new closure is in rax
  6881 000043E5 803804                  	cmp byte [rax], T_closure
  6882 000043E8 0F85BB2C0100            	jne L_error_non_closure
  6883 000043EE FF7001                  	push SOB_CLOSURE_ENV(rax)
  6884 000043F1 4C8B4009                	mov r8, qword [rax + 1 + 8]
  6885 000043F5 FF7508                  	push qword [rbp + 8]				; push old return address
  6886 000043F8 FF7500                  	push qword [rbp]					; push old rbp
  6887                                  	;; move stack up ;;
  6888 000043FB 488B5D18                	mov rbx, [rbp + 3*8]
  6889 000043FF 4889DE                  	mov rsi, rbx						; save old size in rsi
  6890 00004402 4883C303                	add rbx, 3
  6891 00004406 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  6892 0000440E B901000000              	mov rcx, 1
  6893 00004413 4883C104                	add rcx, 4				; num of iterations in rcx
  6894                                  .L_tc_recycle_frame_loop_02fc:
  6895 00004417 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  6896 0000441F 488B143C                	mov rdx, [rsp + rdi]
  6897 00004423 4889541D00              	mov [rbp + rbx], rdx
  6898 00004428 4883EB08                	sub rbx, 8
  6899 0000442C 48FFC9                  	dec rcx
  6900 0000442F 4883F900                	cmp rcx, 0
  6901 00004433 75E2                    	jne .L_tc_recycle_frame_loop_02fc
  6902 00004435 4889F3                  	mov rbx, rsi
  6903 00004438 4883EB01                	sub rbx, 1
  6904 0000443C 488D1CDD00000000        	lea rbx, [rbx*8]
  6905 00004444 4801DD                  	add rbp, rbx
  6906 00004447 4889EC                  	mov rsp, rbp         ; fix stack pointers
  6907 0000444A 5D                      	pop rbp
  6908 0000444B 41FFE0                  	jmp r8
  6909 0000444E C9                      	leave	; Restore the previous stack frame
  6910 0000444F C22000                  	ret AND_KILL_FRAME(2)
  6911                                  .L_lambda_opt_end_004d:	; new closure is in rax
  6912 00004452 48890425[E60F0000]      	mov qword [free_var_31], rax
  6913 0000445A 48B8-                   	mov rax, sob_void
  6913 0000445C [0000000000000000] 
  6914                                  
  6915 00004464 4889C7                  	mov rdi, rax
  6916 00004467 E83B2F0100              	call print_sexpr_if_not_void
  6917                                  	; preparing a non-tail-call
  6918 0000446C 48B8-                   	mov rax, L_constants + 1993
  6918 0000446E [C907000000000000] 
  6919 00004476 50                      	push rax
  6920 00004477 48B8-                   	mov rax, L_constants + 1993
  6920 00004479 [C907000000000000] 
  6921 00004481 50                      	push rax
  6922 00004482 6A02                    	push 2	; arg count
  6923 00004484 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6924 00004489 E8C42C0100              	call malloc
  6925 0000448E 50                      	push rax
  6926 0000448F BF00000000              	mov rdi, 8 * 0	; new rib
  6927 00004494 E8B92C0100              	call malloc
  6928 00004499 50                      	push rax
  6929 0000449A BF08000000              	mov rdi, 8 * 1	; extended env
  6930 0000449F E8AE2C0100              	call malloc
  6931 000044A4 488B7D10                	mov rdi, ENV
  6932 000044A8 BE00000000              	mov rsi, 0
  6933 000044AD BA01000000              	mov rdx, 1
  6934                                  .L_lambda_simple_env_loop_0256:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  6935 000044B2 4883FE00                	cmp rsi, 0
  6936 000044B6 7410                    	je .L_lambda_simple_env_end_0256
  6937 000044B8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6938 000044BC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6939 000044C0 48FFC6                  	inc rsi
  6940 000044C3 48FFC2                  	inc rdx
  6941 000044C6 EBEA                    	jmp .L_lambda_simple_env_loop_0256
  6942                                  .L_lambda_simple_env_end_0256:
  6943 000044C8 5B                      	pop rbx
  6944 000044C9 BE00000000              	mov rsi, 0
  6945                                  .L_lambda_simple_params_loop_0256:	; copy params
  6946 000044CE 4883FE00                	cmp rsi, 0
  6947 000044D2 740E                    	je .L_lambda_simple_params_end_0256
  6948 000044D4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6949 000044D9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6950 000044DD 48FFC6                  	inc rsi
  6951 000044E0 EBEC                    	jmp .L_lambda_simple_params_loop_0256
  6952                                  .L_lambda_simple_params_end_0256:
  6953 000044E2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  6954 000044E5 4889C3                  	mov rbx, rax
  6955 000044E8 58                      	pop rax
  6956 000044E9 C60004                  	mov byte [rax], T_closure
  6957 000044EC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6958 000044F0 48C74009[FD440000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0256
  6959 000044F8 E999060000              	jmp .L_lambda_simple_end_0256
  6960                                  .L_lambda_simple_code_0256:	; lambda-simple body
  6961 000044FD 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6962 00004503 740B                    	je .L_lambda_simple_arity_check_ok_0256
  6963 00004505 FF742410                	push qword [rsp + 8 * 2]
  6964 00004509 6A02                    	push 2
  6965 0000450B E9FB2B0100              	jmp L_error_incorrect_arity_simple
  6966                                  .L_lambda_simple_arity_check_ok_0256:
  6967 00004510 C8000000                	enter 0, 0
  6968 00004514 BF08000000              	mov rdi, 8
  6969 00004519 E8342C0100              	call malloc
  6970 0000451E 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
  6971 00004522 488918                  	mov qword[rax], rbx
  6972 00004525 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  6973 00004529 48B8-                   	mov rax, sob_void
  6973 0000452B [0000000000000000] 
  6974                                  
  6975 00004533 BF08000000              	mov rdi, 8
  6976 00004538 E8152C0100              	call malloc
  6977 0000453D 488B5D28                	mov rbx, qword [rbp + 8 * (4 + 1)]
  6978 00004541 488918                  	mov qword[rax], rbx
  6979 00004544 48894528                	mov qword [rbp + 8 * (4 + 1)], rax
  6980 00004548 48B8-                   	mov rax, sob_void
  6980 0000454A [0000000000000000] 
  6981                                  
  6982 00004552 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6983 00004557 E8F62B0100              	call malloc
  6984 0000455C 50                      	push rax
  6985 0000455D BF10000000              	mov rdi, 8 * 2	; new rib
  6986 00004562 E8EB2B0100              	call malloc
  6987 00004567 50                      	push rax
  6988 00004568 BF10000000              	mov rdi, 8 * 2	; extended env
  6989 0000456D E8E02B0100              	call malloc
  6990 00004572 488B7D10                	mov rdi, ENV
  6991 00004576 BE00000000              	mov rsi, 0
  6992 0000457B BA01000000              	mov rdx, 1
  6993                                  .L_lambda_simple_env_loop_0257:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  6994 00004580 4883FE01                	cmp rsi, 1
  6995 00004584 7410                    	je .L_lambda_simple_env_end_0257
  6996 00004586 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6997 0000458A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6998 0000458E 48FFC6                  	inc rsi
  6999 00004591 48FFC2                  	inc rdx
  7000 00004594 EBEA                    	jmp .L_lambda_simple_env_loop_0257
  7001                                  .L_lambda_simple_env_end_0257:
  7002 00004596 5B                      	pop rbx
  7003 00004597 BE00000000              	mov rsi, 0
  7004                                  .L_lambda_simple_params_loop_0257:	; copy params
  7005 0000459C 4883FE02                	cmp rsi, 2
  7006 000045A0 740E                    	je .L_lambda_simple_params_end_0257
  7007 000045A2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7008 000045A7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7009 000045AB 48FFC6                  	inc rsi
  7010 000045AE EBEC                    	jmp .L_lambda_simple_params_loop_0257
  7011                                  .L_lambda_simple_params_end_0257:
  7012 000045B0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  7013 000045B3 4889C3                  	mov rbx, rax
  7014 000045B6 58                      	pop rax
  7015 000045B7 C60004                  	mov byte [rax], T_closure
  7016 000045BA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7017 000045BE 48C74009[CB450000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0257
  7018 000045C6 E95F010000              	jmp .L_lambda_simple_end_0257
  7019                                  .L_lambda_simple_code_0257:	; lambda-simple body
  7020 000045CB 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7021 000045D1 740B                    	je .L_lambda_simple_arity_check_ok_0257
  7022 000045D3 FF742410                	push qword [rsp + 8 * 2]
  7023 000045D7 6A02                    	push 2
  7024 000045D9 E92D2B0100              	jmp L_error_incorrect_arity_simple
  7025                                  .L_lambda_simple_arity_check_ok_0257:
  7026 000045DE C8000000                	enter 0, 0
  7027                                  	; preparing a non-tail-call
  7028 000045E2 488B4528                	mov rax, PARAM(1)	; param s
  7029 000045E6 50                      	push rax
  7030 000045E7 6A01                    	push 1	; arg count
  7031 000045E9 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  7032 000045F1 803805                  	cmp byte [rax], T_undefined
  7033 000045F4 0F842B2A0100            	je L_error_fvar_undefined
  7034 000045FA 803804                  	cmp byte [rax], T_closure
  7035 000045FD 0F85A62A0100            	jne L_error_non_closure
  7036 00004603 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7037 00004606 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7038 00004609 483D[02000000]          	cmp rax, sob_boolean_false
  7039 0000460F 740F                    	je .L_if_else_01a1
  7040 00004611 48B8-                   	mov rax, L_constants + 1
  7040 00004613 [0100000000000000] 
  7041 0000461B E906010000              	jmp .L_if_end_01a1
  7042                                  .L_if_else_01a1:
  7043                                  	; preparing a tail-call
  7044                                  	; preparing a non-tail-call
  7045                                  	; preparing a non-tail-call
  7046 00004620 488B4528                	mov rax, PARAM(1)	; param s
  7047 00004624 50                      	push rax
  7048 00004625 6A01                    	push 1	; arg count
  7049 00004627 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  7050 0000462F 803805                  	cmp byte [rax], T_undefined
  7051 00004632 0F84ED290100            	je L_error_fvar_undefined
  7052 00004638 803804                  	cmp byte [rax], T_closure
  7053 0000463B 0F85682A0100            	jne L_error_non_closure
  7054 00004641 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7055 00004644 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7056 00004647 50                      	push rax
  7057 00004648 488B4520                	mov rax, PARAM(0)	; param f
  7058 0000464C 50                      	push rax
  7059 0000464D 6A02                    	push 2	; arg count
  7060 0000464F 488B4510                	mov rax, ENV
  7061 00004653 488B00                  	mov rax, qword [rax + 8 * 0]
  7062 00004656 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7063 00004659 488B00                  	mov rax, qword [rax]
  7064 0000465C 803804                  	cmp byte [rax], T_closure
  7065 0000465F 0F85442A0100            	jne L_error_non_closure
  7066 00004665 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7067 00004668 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7068 0000466B 50                      	push rax
  7069                                  	; preparing a non-tail-call
  7070                                  	; preparing a non-tail-call
  7071 0000466C 488B4528                	mov rax, PARAM(1)	; param s
  7072 00004670 50                      	push rax
  7073 00004671 6A01                    	push 1	; arg count
  7074 00004673 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  7075 0000467B 803805                  	cmp byte [rax], T_undefined
  7076 0000467E 0F84A1290100            	je L_error_fvar_undefined
  7077 00004684 803804                  	cmp byte [rax], T_closure
  7078 00004687 0F851C2A0100            	jne L_error_non_closure
  7079 0000468D FF7001                  	push SOB_CLOSURE_ENV(rax)
  7080 00004690 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7081 00004693 50                      	push rax
  7082 00004694 6A01                    	push 1	; arg count
  7083 00004696 488B4520                	mov rax, PARAM(0)	; param f
  7084 0000469A 803804                  	cmp byte [rax], T_closure
  7085 0000469D 0F85062A0100            	jne L_error_non_closure
  7086 000046A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7087 000046A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7088 000046A9 50                      	push rax
  7089 000046AA 6A02                    	push 2	; arg count
  7090 000046AC 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
  7091 000046B4 803805                  	cmp byte [rax], T_undefined
  7092 000046B7 0F8468290100            	je L_error_fvar_undefined
  7093 000046BD 803804                  	cmp byte [rax], T_closure
  7094 000046C0 0F85E3290100            	jne L_error_non_closure
  7095 000046C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7096 000046C9 4C8B4009                	mov r8, qword [rax + 1 + 8]
  7097 000046CD FF7508                  	push qword [rbp + 8]				; push old return address
  7098 000046D0 FF7500                  	push qword [rbp]					; push old rbp
  7099                                  	;; move stack up ;;
  7100 000046D3 488B5D18                	mov rbx, [rbp + 3*8]
  7101 000046D7 4889DE                  	mov rsi, rbx						; save old size in rsi
  7102 000046DA 4883C303                	add rbx, 3
  7103 000046DE 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  7104 000046E6 B902000000              	mov rcx, 2
  7105 000046EB 4883C104                	add rcx, 4				; num of iterations in rcx
  7106                                  .L_tc_recycle_frame_loop_02ff:
  7107 000046EF 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  7108 000046F7 488B143C                	mov rdx, [rsp + rdi]
  7109 000046FB 4889541D00              	mov [rbp + rbx], rdx
  7110 00004700 4883EB08                	sub rbx, 8
  7111 00004704 48FFC9                  	dec rcx
  7112 00004707 4883F900                	cmp rcx, 0
  7113 0000470B 75E2                    	jne .L_tc_recycle_frame_loop_02ff
  7114 0000470D 4889F3                  	mov rbx, rsi
  7115 00004710 4883EB02                	sub rbx, 2
  7116 00004714 488D1CDD00000000        	lea rbx, [rbx*8]
  7117 0000471C 4801DD                  	add rbp, rbx
  7118 0000471F 4889EC                  	mov rsp, rbp         ; fix stack pointers
  7119 00004722 5D                      	pop rbp
  7120 00004723 41FFE0                  	jmp r8
  7121                                  .L_if_end_01a1:
  7122 00004726 C9                      	leave
  7123 00004727 C22000                  	ret AND_KILL_FRAME(2)
  7124                                  .L_lambda_simple_end_0257:	; new closure is in rax
  7125 0000472A 50                      	push rax
  7126 0000472B 488B4520                	mov rax, PARAM(0)	; param map1
  7127 0000472F 8F00                    	pop qword [rax]
  7128 00004731 48B8-                   	mov rax, sob_void
  7128 00004733 [0000000000000000] 
  7129                                  
  7130 0000473B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7131 00004740 E80D2A0100              	call malloc
  7132 00004745 50                      	push rax
  7133 00004746 BF10000000              	mov rdi, 8 * 2	; new rib
  7134 0000474B E8022A0100              	call malloc
  7135 00004750 50                      	push rax
  7136 00004751 BF10000000              	mov rdi, 8 * 2	; extended env
  7137 00004756 E8F7290100              	call malloc
  7138 0000475B 488B7D10                	mov rdi, ENV
  7139 0000475F BE00000000              	mov rsi, 0
  7140 00004764 BA01000000              	mov rdx, 1
  7141                                  .L_lambda_simple_env_loop_0258:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  7142 00004769 4883FE01                	cmp rsi, 1
  7143 0000476D 7410                    	je .L_lambda_simple_env_end_0258
  7144 0000476F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7145 00004773 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7146 00004777 48FFC6                  	inc rsi
  7147 0000477A 48FFC2                  	inc rdx
  7148 0000477D EBEA                    	jmp .L_lambda_simple_env_loop_0258
  7149                                  .L_lambda_simple_env_end_0258:
  7150 0000477F 5B                      	pop rbx
  7151 00004780 BE00000000              	mov rsi, 0
  7152                                  .L_lambda_simple_params_loop_0258:	; copy params
  7153 00004785 4883FE02                	cmp rsi, 2
  7154 00004789 740E                    	je .L_lambda_simple_params_end_0258
  7155 0000478B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7156 00004790 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7157 00004794 48FFC6                  	inc rsi
  7158 00004797 EBEC                    	jmp .L_lambda_simple_params_loop_0258
  7159                                  .L_lambda_simple_params_end_0258:
  7160 00004799 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  7161 0000479C 4889C3                  	mov rbx, rax
  7162 0000479F 58                      	pop rax
  7163 000047A0 C60004                  	mov byte [rax], T_closure
  7164 000047A3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7165 000047A7 48C74009[B4470000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0258
  7166 000047AF E9B1010000              	jmp .L_lambda_simple_end_0258
  7167                                  .L_lambda_simple_code_0258:	; lambda-simple body
  7168 000047B4 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7169 000047BA 740B                    	je .L_lambda_simple_arity_check_ok_0258
  7170 000047BC FF742410                	push qword [rsp + 8 * 2]
  7171 000047C0 6A02                    	push 2
  7172 000047C2 E944290100              	jmp L_error_incorrect_arity_simple
  7173                                  .L_lambda_simple_arity_check_ok_0258:
  7174 000047C7 C8000000                	enter 0, 0
  7175                                  	; preparing a non-tail-call
  7176                                  	; preparing a non-tail-call
  7177 000047CB 488B4528                	mov rax, PARAM(1)	; param s
  7178 000047CF 50                      	push rax
  7179 000047D0 6A01                    	push 1	; arg count
  7180 000047D2 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  7181 000047DA 803805                  	cmp byte [rax], T_undefined
  7182 000047DD 0F8442280100            	je L_error_fvar_undefined
  7183 000047E3 803804                  	cmp byte [rax], T_closure
  7184 000047E6 0F85BD280100            	jne L_error_non_closure
  7185 000047EC FF7001                  	push SOB_CLOSURE_ENV(rax)
  7186 000047EF FF5009                  	call SOB_CLOSURE_CODE(rax)
  7187 000047F2 50                      	push rax
  7188 000047F3 6A01                    	push 1	; arg count
  7189 000047F5 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  7190 000047FD 803805                  	cmp byte [rax], T_undefined
  7191 00004800 0F841F280100            	je L_error_fvar_undefined
  7192 00004806 803804                  	cmp byte [rax], T_closure
  7193 00004809 0F859A280100            	jne L_error_non_closure
  7194 0000480F FF7001                  	push SOB_CLOSURE_ENV(rax)
  7195 00004812 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7196 00004815 483D[02000000]          	cmp rax, sob_boolean_false
  7197 0000481B 740F                    	je .L_if_else_01a2
  7198 0000481D 48B8-                   	mov rax, L_constants + 1
  7198 0000481F [0100000000000000] 
  7199 00004827 E935010000              	jmp .L_if_end_01a2
  7200                                  .L_if_else_01a2:
  7201                                  	; preparing a tail-call
  7202                                  	; preparing a non-tail-call
  7203                                  	; preparing a non-tail-call
  7204 0000482C 488B4528                	mov rax, PARAM(1)	; param s
  7205 00004830 50                      	push rax
  7206 00004831 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  7207 00004839 803805                  	cmp byte [rax], T_undefined
  7208 0000483C 0F84E3270100            	je L_error_fvar_undefined
  7209 00004842 50                      	push rax
  7210 00004843 6A02                    	push 2	; arg count
  7211 00004845 488B4510                	mov rax, ENV
  7212 00004849 488B00                  	mov rax, qword [rax + 8 * 0]
  7213 0000484C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7214 0000484F 488B00                  	mov rax, qword [rax]
  7215 00004852 803804                  	cmp byte [rax], T_closure
  7216 00004855 0F854E280100            	jne L_error_non_closure
  7217 0000485B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7218 0000485E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7219 00004861 50                      	push rax
  7220 00004862 488B4520                	mov rax, PARAM(0)	; param f
  7221 00004866 50                      	push rax
  7222 00004867 6A02                    	push 2	; arg count
  7223 00004869 488B4510                	mov rax, ENV
  7224 0000486D 488B00                  	mov rax, qword [rax + 8 * 0]
  7225 00004870 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  7226 00004874 488B00                  	mov rax, qword [rax]
  7227 00004877 803804                  	cmp byte [rax], T_closure
  7228 0000487A 0F8529280100            	jne L_error_non_closure
  7229 00004880 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7230 00004883 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7231 00004886 50                      	push rax
  7232                                  	; preparing a non-tail-call
  7233                                  	; preparing a non-tail-call
  7234 00004887 488B4528                	mov rax, PARAM(1)	; param s
  7235 0000488B 50                      	push rax
  7236 0000488C 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  7237 00004894 803805                  	cmp byte [rax], T_undefined
  7238 00004897 0F8488270100            	je L_error_fvar_undefined
  7239 0000489D 50                      	push rax
  7240 0000489E 6A02                    	push 2	; arg count
  7241 000048A0 488B4510                	mov rax, ENV
  7242 000048A4 488B00                  	mov rax, qword [rax + 8 * 0]
  7243 000048A7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7244 000048AA 488B00                  	mov rax, qword [rax]
  7245 000048AD 803804                  	cmp byte [rax], T_closure
  7246 000048B0 0F85F3270100            	jne L_error_non_closure
  7247 000048B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7248 000048B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7249 000048BC 50                      	push rax
  7250 000048BD 488B4520                	mov rax, PARAM(0)	; param f
  7251 000048C1 50                      	push rax
  7252 000048C2 6A02                    	push 2	; arg count
  7253 000048C4 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
  7254 000048CC 803805                  	cmp byte [rax], T_undefined
  7255 000048CF 0F8450270100            	je L_error_fvar_undefined
  7256 000048D5 803804                  	cmp byte [rax], T_closure
  7257 000048D8 0F85CB270100            	jne L_error_non_closure
  7258 000048DE FF7001                  	push SOB_CLOSURE_ENV(rax)
  7259 000048E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7260 000048E4 50                      	push rax
  7261 000048E5 6A02                    	push 2	; arg count
  7262 000048E7 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
  7263 000048EF 803805                  	cmp byte [rax], T_undefined
  7264 000048F2 0F842D270100            	je L_error_fvar_undefined
  7265 000048F8 803804                  	cmp byte [rax], T_closure
  7266 000048FB 0F85A8270100            	jne L_error_non_closure
  7267 00004901 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7268 00004904 4C8B4009                	mov r8, qword [rax + 1 + 8]
  7269 00004908 FF7508                  	push qword [rbp + 8]				; push old return address
  7270 0000490B FF7500                  	push qword [rbp]					; push old rbp
  7271                                  	;; move stack up ;;
  7272 0000490E 488B5D18                	mov rbx, [rbp + 3*8]
  7273 00004912 4889DE                  	mov rsi, rbx						; save old size in rsi
  7274 00004915 4883C303                	add rbx, 3
  7275 00004919 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  7276 00004921 B902000000              	mov rcx, 2
  7277 00004926 4883C104                	add rcx, 4				; num of iterations in rcx
  7278                                  .L_tc_recycle_frame_loop_0300:
  7279 0000492A 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  7280 00004932 488B143C                	mov rdx, [rsp + rdi]
  7281 00004936 4889541D00              	mov [rbp + rbx], rdx
  7282 0000493B 4883EB08                	sub rbx, 8
  7283 0000493F 48FFC9                  	dec rcx
  7284 00004942 4883F900                	cmp rcx, 0
  7285 00004946 75E2                    	jne .L_tc_recycle_frame_loop_0300
  7286 00004948 4889F3                  	mov rbx, rsi
  7287 0000494B 4883EB02                	sub rbx, 2
  7288 0000494F 488D1CDD00000000        	lea rbx, [rbx*8]
  7289 00004957 4801DD                  	add rbp, rbx
  7290 0000495A 4889EC                  	mov rsp, rbp         ; fix stack pointers
  7291 0000495D 5D                      	pop rbp
  7292 0000495E 41FFE0                  	jmp r8
  7293                                  .L_if_end_01a2:
  7294 00004961 C9                      	leave
  7295 00004962 C22000                  	ret AND_KILL_FRAME(2)
  7296                                  .L_lambda_simple_end_0258:	; new closure is in rax
  7297 00004965 50                      	push rax
  7298 00004966 488B4528                	mov rax, PARAM(1)	; param map-list
  7299 0000496A 8F00                    	pop qword [rax]
  7300 0000496C 48B8-                   	mov rax, sob_void
  7300 0000496E [0000000000000000] 
  7301                                  
  7302 00004976 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7303 0000497B E8D2270100              	call malloc
  7304 00004980 50                      	push rax
  7305 00004981 BF10000000              	mov rdi, 8 * 2	; new rib
  7306 00004986 E8C7270100              	call malloc
  7307 0000498B 50                      	push rax
  7308 0000498C BF10000000              	mov rdi, 8 * 2	; extended env
  7309 00004991 E8BC270100              	call malloc
  7310 00004996 488B7D10                	mov rdi, ENV
  7311 0000499A BE00000000              	mov rsi, 0
  7312 0000499F BA01000000              	mov rdx, 1
  7313                                  .L_lambda_opt_env_loop_004e:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  7314 000049A4 4883FE01                	cmp rsi, 1
  7315 000049A8 7410                    	je .L_lambda_opt_env_end_004e
  7316 000049AA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7317 000049AE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7318 000049B2 48FFC6                  	inc rsi
  7319 000049B5 48FFC2                  	inc rdx
  7320 000049B8 EBEA                    	jmp .L_lambda_opt_env_loop_004e
  7321                                  .L_lambda_opt_env_end_004e:
  7322 000049BA 5B                      	pop rbx
  7323 000049BB BE00000000              	mov rsi, 0
  7324                                  .L_lambda_opt_params_loop_004e:	; copy params
  7325 000049C0 4883FE02                	cmp rsi, 2
  7326 000049C4 740E                    	je .L_lambda_opt_params_end_004e
  7327 000049C6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7328 000049CB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7329 000049CF 48FFC6                  	inc rsi
  7330 000049D2 EBEC                    	jmp .L_lambda_opt_params_loop_004e
  7331                                  .L_lambda_opt_params_end_004e:
  7332 000049D4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  7333 000049D7 4889C3                  	mov rbx, rax
  7334 000049DA 58                      	pop rax
  7335 000049DB C60004                  	mov byte [rax], T_closure
  7336 000049DE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7337 000049E2 48C74009[EF490000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_004e
  7338 000049EA E9A3010000              	jmp .L_lambda_opt_end_004e
  7339                                  .L_lambda_opt_code_004e:	; lambda-opt body
  7340 000049EF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7341 000049F5 740D                    	je .L_lambda_opt_arity_check_exact_004e
  7342 000049F7 7F48                    	jg .L_lambda_opt_arity_check_more_004e
  7343 000049F9 FF742410                	push qword [rsp + 8 * 2]
  7344 000049FD 6A01                    	push 1
  7345 000049FF E91B270100              	jmp L_error_incorrect_arity_opt
  7346                                  .L_lambda_opt_arity_check_exact_004e:
  7347 00004A04 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update argument count (fixed params + 1 for nil)
  7348 00004A0D 41BA04000000            	mov r10, 4	; r10 = total addresses to adjust (fixed params + 3)
  7349 00004A13 FF3424                  	push qword [rsp]	; Save the top stack element
  7350 00004A16 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
  7351                                  .L_lambda_opt_stack_shrink_loop_00e8:
  7352 00004A1C 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
  7353 00004A1F 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_00e8	; Exit loop if all elements processed
  7354 00004A21 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
  7355 00004A26 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
  7356 00004A2A 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
  7357 00004A2F 49FFC3                  	inc r11	; Increment loop index
  7358 00004A32 EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_00e8	; Jump back to loop start
  7359                                  .L_lambda_opt_stack_shrink_loop_exit_00e8:
  7360 00004A34 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
  7361 00004A3C E988000000              	jmp .L_lambda_opt_stack_adjusted_004e
  7362                                  .L_lambda_opt_arity_check_more_004e:
  7363 00004A41 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
  7364 00004A46 4983E801                	sub r8, 1	; r8 = count of optional params
  7365 00004A4A 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update the number of params (fixed params + 1 for list opt)
  7366 00004A53 41B900000000            	mov r9, 0	; r9 = index of optional argument list
  7367 00004A59 4E8D54C418              	lea r10, [rsp + 2 * 8 + 1 * 8 + r8 * 8]	; r10 = address of first optional param
  7368 00004A5E 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
  7368 00004A60 [0100000000000000] 
  7369                                  .L_lambda_opt_stack_shrink_loop_00e9:
  7370 00004A68 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
  7371 00004A6B 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_00e9	; Exit loop if all optional params are processed
  7372 00004A6D BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
  7373 00004A72 E8DB260100              	call malloc	; Allocate memory for a new pair
  7374 00004A77 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
  7375 00004A7B 49F7D9                  	neg r9	; Negate index to access in reverse
  7376 00004A7E 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
  7377 00004A82 49F7D9                  	neg r9	; Negate index back
  7378 00004A85 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
  7379 00004A89 C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
  7380 00004A8C 4989C3                  	mov r11, rax	; Update current pair to the newly created one
  7381 00004A8F 49FFC1                  	inc r9	; Increment the index
  7382 00004A92 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_00e9	; Repeat the loop for the next param
  7383                                  .L_lambda_opt_stack_shrink_loop_exit_00e9:
  7384 00004A94 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
  7385 00004A97 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
  7386 00004A9B 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
  7387 00004A9E 4983C418                	add r12, 24	; Skip fixed params and return address
  7388 00004AA2 41BD04000000            	mov r13, 4	; r13 = loop counter (number of params, old fp, ret addr, lex env)
  7389                                  .L_lambda_opt_stack_shrink_loop_00ea:
  7390 00004AA8 4983FD00                	cmp r13, 0	; Check if there are more values to copy
  7391 00004AAC 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_00ea	; Exit loop if all values are copied
  7392 00004AAE 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
  7393 00004AB2 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
  7394 00004AB5 49FFCD                  	dec r13	; Decrement the loop counter
  7395 00004AB8 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
  7396 00004ABC 4983EC08                	sub r12, 8	; Move the source pointer to the next location
  7397 00004AC0 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_00ea	; Repeat the loop for the next value
  7398                                  .L_lambda_opt_stack_shrink_loop_exit_00ea:
  7399 00004AC2 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
  7400 00004AC6 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
  7401                                  .L_lambda_opt_stack_adjusted_004e:
  7402 00004AC9 C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
  7403                                  	; preparing a non-tail-call
  7404 00004ACD 488B4528                	mov rax, PARAM(1)	; param s
  7405 00004AD1 50                      	push rax
  7406 00004AD2 6A01                    	push 1	; arg count
  7407 00004AD4 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  7408 00004ADC 803805                  	cmp byte [rax], T_undefined
  7409 00004ADF 0F8440250100            	je L_error_fvar_undefined
  7410 00004AE5 803804                  	cmp byte [rax], T_closure
  7411 00004AE8 0F85BB250100            	jne L_error_non_closure
  7412 00004AEE FF7001                  	push SOB_CLOSURE_ENV(rax)
  7413 00004AF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7414 00004AF4 483D[02000000]          	cmp rax, sob_boolean_false
  7415 00004AFA 740F                    	je .L_if_else_01a3
  7416 00004AFC 48B8-                   	mov rax, L_constants + 1
  7416 00004AFE [0100000000000000] 
  7417 00004B06 E983000000              	jmp .L_if_end_01a3
  7418                                  .L_if_else_01a3:
  7419                                  	; preparing a tail-call
  7420 00004B0B 488B4528                	mov rax, PARAM(1)	; param s
  7421 00004B0F 50                      	push rax
  7422 00004B10 488B4520                	mov rax, PARAM(0)	; param f
  7423 00004B14 50                      	push rax
  7424 00004B15 6A02                    	push 2	; arg count
  7425 00004B17 488B4510                	mov rax, ENV
  7426 00004B1B 488B00                  	mov rax, qword [rax + 8 * 0]
  7427 00004B1E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  7428 00004B22 488B00                  	mov rax, qword [rax]
  7429 00004B25 803804                  	cmp byte [rax], T_closure
  7430 00004B28 0F857B250100            	jne L_error_non_closure
  7431 00004B2E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7432 00004B31 4C8B4009                	mov r8, qword [rax + 1 + 8]
  7433 00004B35 FF7508                  	push qword [rbp + 8]				; push old return address
  7434 00004B38 FF7500                  	push qword [rbp]					; push old rbp
  7435                                  	;; move stack up ;;
  7436 00004B3B 488B5D18                	mov rbx, [rbp + 3*8]
  7437 00004B3F 4889DE                  	mov rsi, rbx						; save old size in rsi
  7438 00004B42 4883C303                	add rbx, 3
  7439 00004B46 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  7440 00004B4E B902000000              	mov rcx, 2
  7441 00004B53 4883C104                	add rcx, 4				; num of iterations in rcx
  7442                                  .L_tc_recycle_frame_loop_0301:
  7443 00004B57 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  7444 00004B5F 488B143C                	mov rdx, [rsp + rdi]
  7445 00004B63 4889541D00              	mov [rbp + rbx], rdx
  7446 00004B68 4883EB08                	sub rbx, 8
  7447 00004B6C 48FFC9                  	dec rcx
  7448 00004B6F 4883F900                	cmp rcx, 0
  7449 00004B73 75E2                    	jne .L_tc_recycle_frame_loop_0301
  7450 00004B75 4889F3                  	mov rbx, rsi
  7451 00004B78 4883EB02                	sub rbx, 2
  7452 00004B7C 488D1CDD00000000        	lea rbx, [rbx*8]
  7453 00004B84 4801DD                  	add rbp, rbx
  7454 00004B87 4889EC                  	mov rsp, rbp         ; fix stack pointers
  7455 00004B8A 5D                      	pop rbp
  7456 00004B8B 41FFE0                  	jmp r8
  7457                                  .L_if_end_01a3:
  7458 00004B8E C9                      	leave	; Restore the previous stack frame
  7459 00004B8F C22000                  	ret AND_KILL_FRAME(2)
  7460                                  .L_lambda_opt_end_004e:	; new closure is in rax
  7461 00004B92 C9                      	leave
  7462 00004B93 C22000                  	ret AND_KILL_FRAME(2)
  7463                                  .L_lambda_simple_end_0256:	; new closure is in rax
  7464 00004B96 803804                  	cmp byte [rax], T_closure
  7465 00004B99 0F850A250100            	jne L_error_non_closure
  7466 00004B9F FF7001                  	push SOB_CLOSURE_ENV(rax)
  7467 00004BA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7468 00004BA5 48890425[AE140000]      	mov qword [free_var_103], rax
  7469 00004BAD 48B8-                   	mov rax, sob_void
  7469 00004BAF [0000000000000000] 
  7470                                  
  7471 00004BB7 4889C7                  	mov rdi, rax
  7472 00004BBA E8E8270100              	call print_sexpr_if_not_void
  7473 00004BBF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7474 00004BC4 E889250100              	call malloc
  7475 00004BC9 50                      	push rax
  7476 00004BCA BF00000000              	mov rdi, 8 * 0	; new rib
  7477 00004BCF E87E250100              	call malloc
  7478 00004BD4 50                      	push rax
  7479 00004BD5 BF08000000              	mov rdi, 8 * 1	; extended env
  7480 00004BDA E873250100              	call malloc
  7481 00004BDF 488B7D10                	mov rdi, ENV
  7482 00004BE3 BE00000000              	mov rsi, 0
  7483 00004BE8 BA01000000              	mov rdx, 1
  7484                                  .L_lambda_simple_env_loop_0259:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  7485 00004BED 4883FE00                	cmp rsi, 0
  7486 00004BF1 7410                    	je .L_lambda_simple_env_end_0259
  7487 00004BF3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7488 00004BF7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7489 00004BFB 48FFC6                  	inc rsi
  7490 00004BFE 48FFC2                  	inc rdx
  7491 00004C01 EBEA                    	jmp .L_lambda_simple_env_loop_0259
  7492                                  .L_lambda_simple_env_end_0259:
  7493 00004C03 5B                      	pop rbx
  7494 00004C04 BE00000000              	mov rsi, 0
  7495                                  .L_lambda_simple_params_loop_0259:	; copy params
  7496 00004C09 4883FE00                	cmp rsi, 0
  7497 00004C0D 740E                    	je .L_lambda_simple_params_end_0259
  7498 00004C0F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7499 00004C14 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7500 00004C18 48FFC6                  	inc rsi
  7501 00004C1B EBEC                    	jmp .L_lambda_simple_params_loop_0259
  7502                                  .L_lambda_simple_params_end_0259:
  7503 00004C1D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  7504 00004C20 4889C3                  	mov rbx, rax
  7505 00004C23 58                      	pop rax
  7506 00004C24 C60004                  	mov byte [rax], T_closure
  7507 00004C27 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7508 00004C2B 48C74009[384C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0259
  7509 00004C33 E9C2010000              	jmp .L_lambda_simple_end_0259
  7510                                  .L_lambda_simple_code_0259:	; lambda-simple body
  7511 00004C38 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7512 00004C3E 740B                    	je .L_lambda_simple_arity_check_ok_0259
  7513 00004C40 FF742410                	push qword [rsp + 8 * 2]
  7514 00004C44 6A01                    	push 1
  7515 00004C46 E9C0240100              	jmp L_error_incorrect_arity_simple
  7516                                  .L_lambda_simple_arity_check_ok_0259:
  7517 00004C4B C8000000                	enter 0, 0
  7518                                  	; preparing a tail-call
  7519 00004C4F 488B4520                	mov rax, PARAM(0)	; param s
  7520 00004C53 50                      	push rax
  7521 00004C54 48B8-                   	mov rax, L_constants + 1
  7521 00004C56 [0100000000000000] 
  7522 00004C5E 50                      	push rax
  7523 00004C5F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7524 00004C64 E8E9240100              	call malloc
  7525 00004C69 50                      	push rax
  7526 00004C6A BF08000000              	mov rdi, 8 * 1	; new rib
  7527 00004C6F E8DE240100              	call malloc
  7528 00004C74 50                      	push rax
  7529 00004C75 BF10000000              	mov rdi, 8 * 2	; extended env
  7530 00004C7A E8D3240100              	call malloc
  7531 00004C7F 488B7D10                	mov rdi, ENV
  7532 00004C83 BE00000000              	mov rsi, 0
  7533 00004C88 BA01000000              	mov rdx, 1
  7534                                  .L_lambda_simple_env_loop_025a:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  7535 00004C8D 4883FE01                	cmp rsi, 1
  7536 00004C91 7410                    	je .L_lambda_simple_env_end_025a
  7537 00004C93 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7538 00004C97 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7539 00004C9B 48FFC6                  	inc rsi
  7540 00004C9E 48FFC2                  	inc rdx
  7541 00004CA1 EBEA                    	jmp .L_lambda_simple_env_loop_025a
  7542                                  .L_lambda_simple_env_end_025a:
  7543 00004CA3 5B                      	pop rbx
  7544 00004CA4 BE00000000              	mov rsi, 0
  7545                                  .L_lambda_simple_params_loop_025a:	; copy params
  7546 00004CA9 4883FE01                	cmp rsi, 1
  7547 00004CAD 740E                    	je .L_lambda_simple_params_end_025a
  7548 00004CAF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7549 00004CB4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7550 00004CB8 48FFC6                  	inc rsi
  7551 00004CBB EBEC                    	jmp .L_lambda_simple_params_loop_025a
  7552                                  .L_lambda_simple_params_end_025a:
  7553 00004CBD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  7554 00004CC0 4889C3                  	mov rbx, rax
  7555 00004CC3 58                      	pop rax
  7556 00004CC4 C60004                  	mov byte [rax], T_closure
  7557 00004CC7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7558 00004CCB 48C74009[D84C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_025a
  7559 00004CD3 E9A1000000              	jmp .L_lambda_simple_end_025a
  7560                                  .L_lambda_simple_code_025a:	; lambda-simple body
  7561 00004CD8 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7562 00004CDE 740B                    	je .L_lambda_simple_arity_check_ok_025a
  7563 00004CE0 FF742410                	push qword [rsp + 8 * 2]
  7564 00004CE4 6A02                    	push 2
  7565 00004CE6 E920240100              	jmp L_error_incorrect_arity_simple
  7566                                  .L_lambda_simple_arity_check_ok_025a:
  7567 00004CEB C8000000                	enter 0, 0
  7568                                  	; preparing a tail-call
  7569 00004CEF 488B4520                	mov rax, PARAM(0)	; param r
  7570 00004CF3 50                      	push rax
  7571 00004CF4 488B4528                	mov rax, PARAM(1)	; param a
  7572 00004CF8 50                      	push rax
  7573 00004CF9 6A02                    	push 2	; arg count
  7574 00004CFB 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
  7575 00004D03 803805                  	cmp byte [rax], T_undefined
  7576 00004D06 0F8419230100            	je L_error_fvar_undefined
  7577 00004D0C 803804                  	cmp byte [rax], T_closure
  7578 00004D0F 0F8594230100            	jne L_error_non_closure
  7579 00004D15 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7580 00004D18 4C8B4009                	mov r8, qword [rax + 1 + 8]
  7581 00004D1C FF7508                  	push qword [rbp + 8]				; push old return address
  7582 00004D1F FF7500                  	push qword [rbp]					; push old rbp
  7583                                  	;; move stack up ;;
  7584 00004D22 488B5D18                	mov rbx, [rbp + 3*8]
  7585 00004D26 4889DE                  	mov rsi, rbx						; save old size in rsi
  7586 00004D29 4883C303                	add rbx, 3
  7587 00004D2D 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  7588 00004D35 B902000000              	mov rcx, 2
  7589 00004D3A 4883C104                	add rcx, 4				; num of iterations in rcx
  7590                                  .L_tc_recycle_frame_loop_0303:
  7591 00004D3E 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  7592 00004D46 488B143C                	mov rdx, [rsp + rdi]
  7593 00004D4A 4889541D00              	mov [rbp + rbx], rdx
  7594 00004D4F 4883EB08                	sub rbx, 8
  7595 00004D53 48FFC9                  	dec rcx
  7596 00004D56 4883F900                	cmp rcx, 0
  7597 00004D5A 75E2                    	jne .L_tc_recycle_frame_loop_0303
  7598 00004D5C 4889F3                  	mov rbx, rsi
  7599 00004D5F 4883EB02                	sub rbx, 2
  7600 00004D63 488D1CDD00000000        	lea rbx, [rbx*8]
  7601 00004D6B 4801DD                  	add rbp, rbx
  7602 00004D6E 4889EC                  	mov rsp, rbp         ; fix stack pointers
  7603 00004D71 5D                      	pop rbp
  7604 00004D72 41FFE0                  	jmp r8
  7605 00004D75 C9                      	leave
  7606 00004D76 C22000                  	ret AND_KILL_FRAME(2)
  7607                                  .L_lambda_simple_end_025a:	; new closure is in rax
  7608 00004D79 50                      	push rax
  7609 00004D7A 6A03                    	push 3	; arg count
  7610 00004D7C 488B0425[7C130000]      	mov rax, qword [free_var_85]	; free var fold-left
  7611 00004D84 803805                  	cmp byte [rax], T_undefined
  7612 00004D87 0F8498220100            	je L_error_fvar_undefined
  7613 00004D8D 803804                  	cmp byte [rax], T_closure
  7614 00004D90 0F8513230100            	jne L_error_non_closure
  7615 00004D96 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7616 00004D99 4C8B4009                	mov r8, qword [rax + 1 + 8]
  7617 00004D9D FF7508                  	push qword [rbp + 8]				; push old return address
  7618 00004DA0 FF7500                  	push qword [rbp]					; push old rbp
  7619                                  	;; move stack up ;;
  7620 00004DA3 488B5D18                	mov rbx, [rbp + 3*8]
  7621 00004DA7 4889DE                  	mov rsi, rbx						; save old size in rsi
  7622 00004DAA 4883C303                	add rbx, 3
  7623 00004DAE 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  7624 00004DB6 B903000000              	mov rcx, 3
  7625 00004DBB 4883C104                	add rcx, 4				; num of iterations in rcx
  7626                                  .L_tc_recycle_frame_loop_0302:
  7627 00004DBF 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  7628 00004DC7 488B143C                	mov rdx, [rsp + rdi]
  7629 00004DCB 4889541D00              	mov [rbp + rbx], rdx
  7630 00004DD0 4883EB08                	sub rbx, 8
  7631 00004DD4 48FFC9                  	dec rcx
  7632 00004DD7 4883F900                	cmp rcx, 0
  7633 00004DDB 75E2                    	jne .L_tc_recycle_frame_loop_0302
  7634 00004DDD 4889F3                  	mov rbx, rsi
  7635 00004DE0 4883EB03                	sub rbx, 3
  7636 00004DE4 488D1CDD00000000        	lea rbx, [rbx*8]
  7637 00004DEC 4801DD                  	add rbp, rbx
  7638 00004DEF 4889EC                  	mov rsp, rbp         ; fix stack pointers
  7639 00004DF2 5D                      	pop rbp
  7640 00004DF3 41FFE0                  	jmp r8
  7641 00004DF6 C9                      	leave
  7642 00004DF7 C21800                  	ret AND_KILL_FRAME(1)
  7643                                  .L_lambda_simple_end_0259:	; new closure is in rax
  7644 00004DFA 48890425[AD150000]      	mov qword [free_var_118], rax
  7645 00004E02 48B8-                   	mov rax, sob_void
  7645 00004E04 [0000000000000000] 
  7646                                  
  7647 00004E0C 4889C7                  	mov rdi, rax
  7648 00004E0F E893250100              	call print_sexpr_if_not_void
  7649                                  	; preparing a non-tail-call
  7650 00004E14 48B8-                   	mov rax, L_constants + 1993
  7650 00004E16 [C907000000000000] 
  7651 00004E1E 50                      	push rax
  7652 00004E1F 48B8-                   	mov rax, L_constants + 1993
  7652 00004E21 [C907000000000000] 
  7653 00004E29 50                      	push rax
  7654 00004E2A 6A02                    	push 2	; arg count
  7655 00004E2C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7656 00004E31 E81C230100              	call malloc
  7657 00004E36 50                      	push rax
  7658 00004E37 BF00000000              	mov rdi, 8 * 0	; new rib
  7659 00004E3C E811230100              	call malloc
  7660 00004E41 50                      	push rax
  7661 00004E42 BF08000000              	mov rdi, 8 * 1	; extended env
  7662 00004E47 E806230100              	call malloc
  7663 00004E4C 488B7D10                	mov rdi, ENV
  7664 00004E50 BE00000000              	mov rsi, 0
  7665 00004E55 BA01000000              	mov rdx, 1
  7666                                  .L_lambda_simple_env_loop_025b:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  7667 00004E5A 4883FE00                	cmp rsi, 0
  7668 00004E5E 7410                    	je .L_lambda_simple_env_end_025b
  7669 00004E60 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7670 00004E64 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7671 00004E68 48FFC6                  	inc rsi
  7672 00004E6B 48FFC2                  	inc rdx
  7673 00004E6E EBEA                    	jmp .L_lambda_simple_env_loop_025b
  7674                                  .L_lambda_simple_env_end_025b:
  7675 00004E70 5B                      	pop rbx
  7676 00004E71 BE00000000              	mov rsi, 0
  7677                                  .L_lambda_simple_params_loop_025b:	; copy params
  7678 00004E76 4883FE00                	cmp rsi, 0
  7679 00004E7A 740E                    	je .L_lambda_simple_params_end_025b
  7680 00004E7C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7681 00004E81 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7682 00004E85 48FFC6                  	inc rsi
  7683 00004E88 EBEC                    	jmp .L_lambda_simple_params_loop_025b
  7684                                  .L_lambda_simple_params_end_025b:
  7685 00004E8A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  7686 00004E8D 4889C3                  	mov rbx, rax
  7687 00004E90 58                      	pop rax
  7688 00004E91 C60004                  	mov byte [rax], T_closure
  7689 00004E94 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7690 00004E98 48C74009[A54E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_025b
  7691 00004EA0 E952060000              	jmp .L_lambda_simple_end_025b
  7692                                  .L_lambda_simple_code_025b:	; lambda-simple body
  7693 00004EA5 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7694 00004EAB 740B                    	je .L_lambda_simple_arity_check_ok_025b
  7695 00004EAD FF742410                	push qword [rsp + 8 * 2]
  7696 00004EB1 6A02                    	push 2
  7697 00004EB3 E953220100              	jmp L_error_incorrect_arity_simple
  7698                                  .L_lambda_simple_arity_check_ok_025b:
  7699 00004EB8 C8000000                	enter 0, 0
  7700 00004EBC BF08000000              	mov rdi, 8
  7701 00004EC1 E88C220100              	call malloc
  7702 00004EC6 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
  7703 00004ECA 488918                  	mov qword[rax], rbx
  7704 00004ECD 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  7705 00004ED1 48B8-                   	mov rax, sob_void
  7705 00004ED3 [0000000000000000] 
  7706                                  
  7707 00004EDB BF08000000              	mov rdi, 8
  7708 00004EE0 E86D220100              	call malloc
  7709 00004EE5 488B5D28                	mov rbx, qword [rbp + 8 * (4 + 1)]
  7710 00004EE9 488918                  	mov qword[rax], rbx
  7711 00004EEC 48894528                	mov qword [rbp + 8 * (4 + 1)], rax
  7712 00004EF0 48B8-                   	mov rax, sob_void
  7712 00004EF2 [0000000000000000] 
  7713                                  
  7714 00004EFA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7715 00004EFF E84E220100              	call malloc
  7716 00004F04 50                      	push rax
  7717 00004F05 BF10000000              	mov rdi, 8 * 2	; new rib
  7718 00004F0A E843220100              	call malloc
  7719 00004F0F 50                      	push rax
  7720 00004F10 BF10000000              	mov rdi, 8 * 2	; extended env
  7721 00004F15 E838220100              	call malloc
  7722 00004F1A 488B7D10                	mov rdi, ENV
  7723 00004F1E BE00000000              	mov rsi, 0
  7724 00004F23 BA01000000              	mov rdx, 1
  7725                                  .L_lambda_simple_env_loop_025c:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  7726 00004F28 4883FE01                	cmp rsi, 1
  7727 00004F2C 7410                    	je .L_lambda_simple_env_end_025c
  7728 00004F2E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7729 00004F32 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7730 00004F36 48FFC6                  	inc rsi
  7731 00004F39 48FFC2                  	inc rdx
  7732 00004F3C EBEA                    	jmp .L_lambda_simple_env_loop_025c
  7733                                  .L_lambda_simple_env_end_025c:
  7734 00004F3E 5B                      	pop rbx
  7735 00004F3F BE00000000              	mov rsi, 0
  7736                                  .L_lambda_simple_params_loop_025c:	; copy params
  7737 00004F44 4883FE02                	cmp rsi, 2
  7738 00004F48 740E                    	je .L_lambda_simple_params_end_025c
  7739 00004F4A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7740 00004F4F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7741 00004F53 48FFC6                  	inc rsi
  7742 00004F56 EBEC                    	jmp .L_lambda_simple_params_loop_025c
  7743                                  .L_lambda_simple_params_end_025c:
  7744 00004F58 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  7745 00004F5B 4889C3                  	mov rbx, rax
  7746 00004F5E 58                      	pop rax
  7747 00004F5F C60004                  	mov byte [rax], T_closure
  7748 00004F62 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7749 00004F66 48C74009[734F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_025c
  7750 00004F6E E940010000              	jmp .L_lambda_simple_end_025c
  7751                                  .L_lambda_simple_code_025c:	; lambda-simple body
  7752 00004F73 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7753 00004F79 740B                    	je .L_lambda_simple_arity_check_ok_025c
  7754 00004F7B FF742410                	push qword [rsp + 8 * 2]
  7755 00004F7F 6A02                    	push 2
  7756 00004F81 E985210100              	jmp L_error_incorrect_arity_simple
  7757                                  .L_lambda_simple_arity_check_ok_025c:
  7758 00004F86 C8000000                	enter 0, 0
  7759                                  	; preparing a non-tail-call
  7760 00004F8A 488B4528                	mov rax, PARAM(1)	; param sr
  7761 00004F8E 50                      	push rax
  7762 00004F8F 6A01                    	push 1	; arg count
  7763 00004F91 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  7764 00004F99 803805                  	cmp byte [rax], T_undefined
  7765 00004F9C 0F8483200100            	je L_error_fvar_undefined
  7766 00004FA2 803804                  	cmp byte [rax], T_closure
  7767 00004FA5 0F85FE200100            	jne L_error_non_closure
  7768 00004FAB FF7001                  	push SOB_CLOSURE_ENV(rax)
  7769 00004FAE FF5009                  	call SOB_CLOSURE_CODE(rax)
  7770 00004FB1 483D[02000000]          	cmp rax, sob_boolean_false
  7771 00004FB7 7409                    	je .L_if_else_01a4
  7772 00004FB9 488B4520                	mov rax, PARAM(0)	; param s1
  7773 00004FBD E9ED000000              	jmp .L_if_end_01a4
  7774                                  .L_if_else_01a4:
  7775                                  	; preparing a tail-call
  7776                                  	; preparing a non-tail-call
  7777                                  	; preparing a non-tail-call
  7778 00004FC2 488B4528                	mov rax, PARAM(1)	; param sr
  7779 00004FC6 50                      	push rax
  7780 00004FC7 6A01                    	push 1	; arg count
  7781 00004FC9 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  7782 00004FD1 803805                  	cmp byte [rax], T_undefined
  7783 00004FD4 0F844B200100            	je L_error_fvar_undefined
  7784 00004FDA 803804                  	cmp byte [rax], T_closure
  7785 00004FDD 0F85C6200100            	jne L_error_non_closure
  7786 00004FE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7787 00004FE6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7788 00004FE9 50                      	push rax
  7789                                  	; preparing a non-tail-call
  7790 00004FEA 488B4528                	mov rax, PARAM(1)	; param sr
  7791 00004FEE 50                      	push rax
  7792 00004FEF 6A01                    	push 1	; arg count
  7793 00004FF1 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  7794 00004FF9 803805                  	cmp byte [rax], T_undefined
  7795 00004FFC 0F8423200100            	je L_error_fvar_undefined
  7796 00005002 803804                  	cmp byte [rax], T_closure
  7797 00005005 0F859E200100            	jne L_error_non_closure
  7798 0000500B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7799 0000500E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7800 00005011 50                      	push rax
  7801 00005012 6A02                    	push 2	; arg count
  7802 00005014 488B4510                	mov rax, ENV
  7803 00005018 488B00                  	mov rax, qword [rax + 8 * 0]
  7804 0000501B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  7805 0000501E 488B00                  	mov rax, qword [rax]
  7806 00005021 803804                  	cmp byte [rax], T_closure
  7807 00005024 0F857F200100            	jne L_error_non_closure
  7808 0000502A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7809 0000502D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7810 00005030 50                      	push rax
  7811 00005031 488B4520                	mov rax, PARAM(0)	; param s1
  7812 00005035 50                      	push rax
  7813 00005036 6A02                    	push 2	; arg count
  7814 00005038 488B4510                	mov rax, ENV
  7815 0000503C 488B00                  	mov rax, qword [rax + 8 * 0]
  7816 0000503F 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  7817 00005043 488B00                  	mov rax, qword [rax]
  7818 00005046 803804                  	cmp byte [rax], T_closure
  7819 00005049 0F855A200100            	jne L_error_non_closure
  7820 0000504F FF7001                  	push SOB_CLOSURE_ENV(rax)
  7821 00005052 4C8B4009                	mov r8, qword [rax + 1 + 8]
  7822 00005056 FF7508                  	push qword [rbp + 8]				; push old return address
  7823 00005059 FF7500                  	push qword [rbp]					; push old rbp
  7824                                  	;; move stack up ;;
  7825 0000505C 488B5D18                	mov rbx, [rbp + 3*8]
  7826 00005060 4889DE                  	mov rsi, rbx						; save old size in rsi
  7827 00005063 4883C303                	add rbx, 3
  7828 00005067 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  7829 0000506F B902000000              	mov rcx, 2
  7830 00005074 4883C104                	add rcx, 4				; num of iterations in rcx
  7831                                  .L_tc_recycle_frame_loop_0304:
  7832 00005078 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  7833 00005080 488B143C                	mov rdx, [rsp + rdi]
  7834 00005084 4889541D00              	mov [rbp + rbx], rdx
  7835 00005089 4883EB08                	sub rbx, 8
  7836 0000508D 48FFC9                  	dec rcx
  7837 00005090 4883F900                	cmp rcx, 0
  7838 00005094 75E2                    	jne .L_tc_recycle_frame_loop_0304
  7839 00005096 4889F3                  	mov rbx, rsi
  7840 00005099 4883EB02                	sub rbx, 2
  7841 0000509D 488D1CDD00000000        	lea rbx, [rbx*8]
  7842 000050A5 4801DD                  	add rbp, rbx
  7843 000050A8 4889EC                  	mov rsp, rbp         ; fix stack pointers
  7844 000050AB 5D                      	pop rbp
  7845 000050AC 41FFE0                  	jmp r8
  7846                                  .L_if_end_01a4:
  7847 000050AF C9                      	leave
  7848 000050B0 C22000                  	ret AND_KILL_FRAME(2)
  7849                                  .L_lambda_simple_end_025c:	; new closure is in rax
  7850 000050B3 50                      	push rax
  7851 000050B4 488B4520                	mov rax, PARAM(0)	; param run-1
  7852 000050B8 8F00                    	pop qword [rax]
  7853 000050BA 48B8-                   	mov rax, sob_void
  7853 000050BC [0000000000000000] 
  7854                                  
  7855 000050C4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7856 000050C9 E884200100              	call malloc
  7857 000050CE 50                      	push rax
  7858 000050CF BF10000000              	mov rdi, 8 * 2	; new rib
  7859 000050D4 E879200100              	call malloc
  7860 000050D9 50                      	push rax
  7861 000050DA BF10000000              	mov rdi, 8 * 2	; extended env
  7862 000050DF E86E200100              	call malloc
  7863 000050E4 488B7D10                	mov rdi, ENV
  7864 000050E8 BE00000000              	mov rsi, 0
  7865 000050ED BA01000000              	mov rdx, 1
  7866                                  .L_lambda_simple_env_loop_025d:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  7867 000050F2 4883FE01                	cmp rsi, 1
  7868 000050F6 7410                    	je .L_lambda_simple_env_end_025d
  7869 000050F8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7870 000050FC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7871 00005100 48FFC6                  	inc rsi
  7872 00005103 48FFC2                  	inc rdx
  7873 00005106 EBEA                    	jmp .L_lambda_simple_env_loop_025d
  7874                                  .L_lambda_simple_env_end_025d:
  7875 00005108 5B                      	pop rbx
  7876 00005109 BE00000000              	mov rsi, 0
  7877                                  .L_lambda_simple_params_loop_025d:	; copy params
  7878 0000510E 4883FE02                	cmp rsi, 2
  7879 00005112 740E                    	je .L_lambda_simple_params_end_025d
  7880 00005114 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7881 00005119 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7882 0000511D 48FFC6                  	inc rsi
  7883 00005120 EBEC                    	jmp .L_lambda_simple_params_loop_025d
  7884                                  .L_lambda_simple_params_end_025d:
  7885 00005122 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  7886 00005125 4889C3                  	mov rbx, rax
  7887 00005128 58                      	pop rax
  7888 00005129 C60004                  	mov byte [rax], T_closure
  7889 0000512C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7890 00005130 48C74009[3D510000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_025d
  7891 00005138 E944010000              	jmp .L_lambda_simple_end_025d
  7892                                  .L_lambda_simple_code_025d:	; lambda-simple body
  7893 0000513D 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7894 00005143 740B                    	je .L_lambda_simple_arity_check_ok_025d
  7895 00005145 FF742410                	push qword [rsp + 8 * 2]
  7896 00005149 6A02                    	push 2
  7897 0000514B E9BB1F0100              	jmp L_error_incorrect_arity_simple
  7898                                  .L_lambda_simple_arity_check_ok_025d:
  7899 00005150 C8000000                	enter 0, 0
  7900                                  	; preparing a non-tail-call
  7901 00005154 488B4520                	mov rax, PARAM(0)	; param s1
  7902 00005158 50                      	push rax
  7903 00005159 6A01                    	push 1	; arg count
  7904 0000515B 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  7905 00005163 803805                  	cmp byte [rax], T_undefined
  7906 00005166 0F84B91E0100            	je L_error_fvar_undefined
  7907 0000516C 803804                  	cmp byte [rax], T_closure
  7908 0000516F 0F85341F0100            	jne L_error_non_closure
  7909 00005175 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7910 00005178 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7911 0000517B 483D[02000000]          	cmp rax, sob_boolean_false
  7912 00005181 7409                    	je .L_if_else_01a5
  7913 00005183 488B4528                	mov rax, PARAM(1)	; param s2
  7914 00005187 E9F1000000              	jmp .L_if_end_01a5
  7915                                  .L_if_else_01a5:
  7916                                  	; preparing a tail-call
  7917                                  	; preparing a non-tail-call
  7918 0000518C 488B4528                	mov rax, PARAM(1)	; param s2
  7919 00005190 50                      	push rax
  7920                                  	; preparing a non-tail-call
  7921 00005191 488B4520                	mov rax, PARAM(0)	; param s1
  7922 00005195 50                      	push rax
  7923 00005196 6A01                    	push 1	; arg count
  7924 00005198 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  7925 000051A0 803805                  	cmp byte [rax], T_undefined
  7926 000051A3 0F847C1E0100            	je L_error_fvar_undefined
  7927 000051A9 803804                  	cmp byte [rax], T_closure
  7928 000051AC 0F85F71E0100            	jne L_error_non_closure
  7929 000051B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7930 000051B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7931 000051B8 50                      	push rax
  7932 000051B9 6A02                    	push 2	; arg count
  7933 000051BB 488B4510                	mov rax, ENV
  7934 000051BF 488B00                  	mov rax, qword [rax + 8 * 0]
  7935 000051C2 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  7936 000051C6 488B00                  	mov rax, qword [rax]
  7937 000051C9 803804                  	cmp byte [rax], T_closure
  7938 000051CC 0F85D71E0100            	jne L_error_non_closure
  7939 000051D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7940 000051D5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7941 000051D8 50                      	push rax
  7942                                  	; preparing a non-tail-call
  7943 000051D9 488B4520                	mov rax, PARAM(0)	; param s1
  7944 000051DD 50                      	push rax
  7945 000051DE 6A01                    	push 1	; arg count
  7946 000051E0 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  7947 000051E8 803805                  	cmp byte [rax], T_undefined
  7948 000051EB 0F84341E0100            	je L_error_fvar_undefined
  7949 000051F1 803804                  	cmp byte [rax], T_closure
  7950 000051F4 0F85AF1E0100            	jne L_error_non_closure
  7951 000051FA FF7001                  	push SOB_CLOSURE_ENV(rax)
  7952 000051FD FF5009                  	call SOB_CLOSURE_CODE(rax)
  7953 00005200 50                      	push rax
  7954 00005201 6A02                    	push 2	; arg count
  7955 00005203 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
  7956 0000520B 803805                  	cmp byte [rax], T_undefined
  7957 0000520E 0F84111E0100            	je L_error_fvar_undefined
  7958 00005214 803804                  	cmp byte [rax], T_closure
  7959 00005217 0F858C1E0100            	jne L_error_non_closure
  7960 0000521D FF7001                  	push SOB_CLOSURE_ENV(rax)
  7961 00005220 4C8B4009                	mov r8, qword [rax + 1 + 8]
  7962 00005224 FF7508                  	push qword [rbp + 8]				; push old return address
  7963 00005227 FF7500                  	push qword [rbp]					; push old rbp
  7964                                  	;; move stack up ;;
  7965 0000522A 488B5D18                	mov rbx, [rbp + 3*8]
  7966 0000522E 4889DE                  	mov rsi, rbx						; save old size in rsi
  7967 00005231 4883C303                	add rbx, 3
  7968 00005235 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  7969 0000523D B902000000              	mov rcx, 2
  7970 00005242 4883C104                	add rcx, 4				; num of iterations in rcx
  7971                                  .L_tc_recycle_frame_loop_0305:
  7972 00005246 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  7973 0000524E 488B143C                	mov rdx, [rsp + rdi]
  7974 00005252 4889541D00              	mov [rbp + rbx], rdx
  7975 00005257 4883EB08                	sub rbx, 8
  7976 0000525B 48FFC9                  	dec rcx
  7977 0000525E 4883F900                	cmp rcx, 0
  7978 00005262 75E2                    	jne .L_tc_recycle_frame_loop_0305
  7979 00005264 4889F3                  	mov rbx, rsi
  7980 00005267 4883EB02                	sub rbx, 2
  7981 0000526B 488D1CDD00000000        	lea rbx, [rbx*8]
  7982 00005273 4801DD                  	add rbp, rbx
  7983 00005276 4889EC                  	mov rsp, rbp         ; fix stack pointers
  7984 00005279 5D                      	pop rbp
  7985 0000527A 41FFE0                  	jmp r8
  7986                                  .L_if_end_01a5:
  7987 0000527D C9                      	leave
  7988 0000527E C22000                  	ret AND_KILL_FRAME(2)
  7989                                  .L_lambda_simple_end_025d:	; new closure is in rax
  7990 00005281 50                      	push rax
  7991 00005282 488B4528                	mov rax, PARAM(1)	; param run-2
  7992 00005286 8F00                    	pop qword [rax]
  7993 00005288 48B8-                   	mov rax, sob_void
  7993 0000528A [0000000000000000] 
  7994                                  
  7995 00005292 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7996 00005297 E8B61E0100              	call malloc
  7997 0000529C 50                      	push rax
  7998 0000529D BF10000000              	mov rdi, 8 * 2	; new rib
  7999 000052A2 E8AB1E0100              	call malloc
  8000 000052A7 50                      	push rax
  8001 000052A8 BF10000000              	mov rdi, 8 * 2	; extended env
  8002 000052AD E8A01E0100              	call malloc
  8003 000052B2 488B7D10                	mov rdi, ENV
  8004 000052B6 BE00000000              	mov rsi, 0
  8005 000052BB BA01000000              	mov rdx, 1
  8006                                  .L_lambda_opt_env_loop_004f:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  8007 000052C0 4883FE01                	cmp rsi, 1
  8008 000052C4 7410                    	je .L_lambda_opt_env_end_004f
  8009 000052C6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8010 000052CA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8011 000052CE 48FFC6                  	inc rsi
  8012 000052D1 48FFC2                  	inc rdx
  8013 000052D4 EBEA                    	jmp .L_lambda_opt_env_loop_004f
  8014                                  .L_lambda_opt_env_end_004f:
  8015 000052D6 5B                      	pop rbx
  8016 000052D7 BE00000000              	mov rsi, 0
  8017                                  .L_lambda_opt_params_loop_004f:	; copy params
  8018 000052DC 4883FE02                	cmp rsi, 2
  8019 000052E0 740E                    	je .L_lambda_opt_params_end_004f
  8020 000052E2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8021 000052E7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8022 000052EB 48FFC6                  	inc rsi
  8023 000052EE EBEC                    	jmp .L_lambda_opt_params_loop_004f
  8024                                  .L_lambda_opt_params_end_004f:
  8025 000052F0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  8026 000052F3 4889C3                  	mov rbx, rax
  8027 000052F6 58                      	pop rax
  8028 000052F7 C60004                  	mov byte [rax], T_closure
  8029 000052FA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8030 000052FE 48C74009[0B530000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_004f
  8031 00005306 E9E8010000              	jmp .L_lambda_opt_end_004f
  8032                                  .L_lambda_opt_code_004f:	; lambda-opt body
  8033 0000530B 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8034 00005311 740D                    	je .L_lambda_opt_arity_check_exact_004f
  8035 00005313 7F48                    	jg .L_lambda_opt_arity_check_more_004f
  8036 00005315 FF742410                	push qword [rsp + 8 * 2]
  8037 00005319 6A00                    	push 0
  8038 0000531B E9FF1D0100              	jmp L_error_incorrect_arity_opt
  8039                                  .L_lambda_opt_arity_check_exact_004f:
  8040 00005320 48C744241001000000      	mov qword [rsp + 8 * 2], 1	; Update argument count (fixed params + 1 for nil)
  8041 00005329 41BA03000000            	mov r10, 3	; r10 = total addresses to adjust (fixed params + 3)
  8042 0000532F FF3424                  	push qword [rsp]	; Save the top stack element
  8043 00005332 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
  8044                                  .L_lambda_opt_stack_shrink_loop_00eb:
  8045 00005338 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
  8046 0000533B 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_00eb	; Exit loop if all elements processed
  8047 0000533D 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
  8048 00005342 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
  8049 00005346 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
  8050 0000534B 49FFC3                  	inc r11	; Increment loop index
  8051 0000534E EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_00eb	; Jump back to loop start
  8052                                  .L_lambda_opt_stack_shrink_loop_exit_00eb:
  8053 00005350 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
  8054 00005358 E988000000              	jmp .L_lambda_opt_stack_adjusted_004f
  8055                                  .L_lambda_opt_arity_check_more_004f:
  8056 0000535D 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
  8057 00005362 4983E800                	sub r8, 0	; r8 = count of optional params
  8058 00005366 48C744241001000000      	mov qword [rsp + 8 * 2], 1	; Update the number of params (fixed params + 1 for list opt)
  8059 0000536F 41B900000000            	mov r9, 0	; r9 = index of optional argument list
  8060 00005375 4E8D54C410              	lea r10, [rsp + 2 * 8 + 0 * 8 + r8 * 8]	; r10 = address of first optional param
  8061 0000537A 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
  8061 0000537C [0100000000000000] 
  8062                                  .L_lambda_opt_stack_shrink_loop_00ec:
  8063 00005384 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
  8064 00005387 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_00ec	; Exit loop if all optional params are processed
  8065 00005389 BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
  8066 0000538E E8BF1D0100              	call malloc	; Allocate memory for a new pair
  8067 00005393 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
  8068 00005397 49F7D9                  	neg r9	; Negate index to access in reverse
  8069 0000539A 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
  8070 0000539E 49F7D9                  	neg r9	; Negate index back
  8071 000053A1 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
  8072 000053A5 C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
  8073 000053A8 4989C3                  	mov r11, rax	; Update current pair to the newly created one
  8074 000053AB 49FFC1                  	inc r9	; Increment the index
  8075 000053AE EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_00ec	; Repeat the loop for the next param
  8076                                  .L_lambda_opt_stack_shrink_loop_exit_00ec:
  8077 000053B0 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
  8078 000053B3 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
  8079 000053B7 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
  8080 000053BA 4983C410                	add r12, 16	; Skip fixed params and return address
  8081 000053BE 41BD03000000            	mov r13, 3	; r13 = loop counter (number of params, old fp, ret addr, lex env)
  8082                                  .L_lambda_opt_stack_shrink_loop_00ed:
  8083 000053C4 4983FD00                	cmp r13, 0	; Check if there are more values to copy
  8084 000053C8 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_00ed	; Exit loop if all values are copied
  8085 000053CA 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
  8086 000053CE 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
  8087 000053D1 49FFCD                  	dec r13	; Decrement the loop counter
  8088 000053D4 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
  8089 000053D8 4983EC08                	sub r12, 8	; Move the source pointer to the next location
  8090 000053DC EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_00ed	; Repeat the loop for the next value
  8091                                  .L_lambda_opt_stack_shrink_loop_exit_00ed:
  8092 000053DE 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
  8093 000053E2 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
  8094                                  .L_lambda_opt_stack_adjusted_004f:
  8095 000053E5 C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
  8096                                  	; preparing a non-tail-call
  8097 000053E9 488B4520                	mov rax, PARAM(0)	; param s
  8098 000053ED 50                      	push rax
  8099 000053EE 6A01                    	push 1	; arg count
  8100 000053F0 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  8101 000053F8 803805                  	cmp byte [rax], T_undefined
  8102 000053FB 0F84241C0100            	je L_error_fvar_undefined
  8103 00005401 803804                  	cmp byte [rax], T_closure
  8104 00005404 0F859F1C0100            	jne L_error_non_closure
  8105 0000540A FF7001                  	push SOB_CLOSURE_ENV(rax)
  8106 0000540D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8107 00005410 483D[02000000]          	cmp rax, sob_boolean_false
  8108 00005416 740F                    	je .L_if_else_01a6
  8109 00005418 48B8-                   	mov rax, L_constants + 1
  8109 0000541A [0100000000000000] 
  8110 00005422 E9C8000000              	jmp .L_if_end_01a6
  8111                                  .L_if_else_01a6:
  8112                                  	; preparing a tail-call
  8113                                  	; preparing a non-tail-call
  8114 00005427 488B4520                	mov rax, PARAM(0)	; param s
  8115 0000542B 50                      	push rax
  8116 0000542C 6A01                    	push 1	; arg count
  8117 0000542E 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  8118 00005436 803805                  	cmp byte [rax], T_undefined
  8119 00005439 0F84E61B0100            	je L_error_fvar_undefined
  8120 0000543F 803804                  	cmp byte [rax], T_closure
  8121 00005442 0F85611C0100            	jne L_error_non_closure
  8122 00005448 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8123 0000544B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8124 0000544E 50                      	push rax
  8125                                  	; preparing a non-tail-call
  8126 0000544F 488B4520                	mov rax, PARAM(0)	; param s
  8127 00005453 50                      	push rax
  8128 00005454 6A01                    	push 1	; arg count
  8129 00005456 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  8130 0000545E 803805                  	cmp byte [rax], T_undefined
  8131 00005461 0F84BE1B0100            	je L_error_fvar_undefined
  8132 00005467 803804                  	cmp byte [rax], T_closure
  8133 0000546A 0F85391C0100            	jne L_error_non_closure
  8134 00005470 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8135 00005473 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8136 00005476 50                      	push rax
  8137 00005477 6A02                    	push 2	; arg count
  8138 00005479 488B4510                	mov rax, ENV
  8139 0000547D 488B00                  	mov rax, qword [rax + 8 * 0]
  8140 00005480 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  8141 00005483 488B00                  	mov rax, qword [rax]
  8142 00005486 803804                  	cmp byte [rax], T_closure
  8143 00005489 0F851A1C0100            	jne L_error_non_closure
  8144 0000548F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8145 00005492 4C8B4009                	mov r8, qword [rax + 1 + 8]
  8146 00005496 FF7508                  	push qword [rbp + 8]				; push old return address
  8147 00005499 FF7500                  	push qword [rbp]					; push old rbp
  8148                                  	;; move stack up ;;
  8149 0000549C 488B5D18                	mov rbx, [rbp + 3*8]
  8150 000054A0 4889DE                  	mov rsi, rbx						; save old size in rsi
  8151 000054A3 4883C303                	add rbx, 3
  8152 000054A7 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  8153 000054AF B902000000              	mov rcx, 2
  8154 000054B4 4883C104                	add rcx, 4				; num of iterations in rcx
  8155                                  .L_tc_recycle_frame_loop_0306:
  8156 000054B8 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  8157 000054C0 488B143C                	mov rdx, [rsp + rdi]
  8158 000054C4 4889541D00              	mov [rbp + rbx], rdx
  8159 000054C9 4883EB08                	sub rbx, 8
  8160 000054CD 48FFC9                  	dec rcx
  8161 000054D0 4883F900                	cmp rcx, 0
  8162 000054D4 75E2                    	jne .L_tc_recycle_frame_loop_0306
  8163 000054D6 4889F3                  	mov rbx, rsi
  8164 000054D9 4883EB02                	sub rbx, 2
  8165 000054DD 488D1CDD00000000        	lea rbx, [rbx*8]
  8166 000054E5 4801DD                  	add rbp, rbx
  8167 000054E8 4889EC                  	mov rsp, rbp         ; fix stack pointers
  8168 000054EB 5D                      	pop rbp
  8169 000054EC 41FFE0                  	jmp r8
  8170                                  .L_if_end_01a6:
  8171 000054EF C9                      	leave	; Restore the previous stack frame
  8172 000054F0 C21800                  	ret AND_KILL_FRAME(1)
  8173                                  .L_lambda_opt_end_004f:	; new closure is in rax
  8174 000054F3 C9                      	leave
  8175 000054F4 C22000                  	ret AND_KILL_FRAME(2)
  8176                                  .L_lambda_simple_end_025b:	; new closure is in rax
  8177 000054F7 803804                  	cmp byte [rax], T_closure
  8178 000054FA 0F85A91B0100            	jne L_error_non_closure
  8179 00005500 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8180 00005503 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8181 00005506 48890425[F70F0000]      	mov qword [free_var_32], rax
  8182 0000550E 48B8-                   	mov rax, sob_void
  8182 00005510 [0000000000000000] 
  8183                                  
  8184 00005518 4889C7                  	mov rdi, rax
  8185 0000551B E8871E0100              	call print_sexpr_if_not_void
  8186                                  	; preparing a non-tail-call
  8187 00005520 48B8-                   	mov rax, L_constants + 1993
  8187 00005522 [C907000000000000] 
  8188 0000552A 50                      	push rax
  8189 0000552B 6A01                    	push 1	; arg count
  8190 0000552D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8191 00005532 E81B1C0100              	call malloc
  8192 00005537 50                      	push rax
  8193 00005538 BF00000000              	mov rdi, 8 * 0	; new rib
  8194 0000553D E8101C0100              	call malloc
  8195 00005542 50                      	push rax
  8196 00005543 BF08000000              	mov rdi, 8 * 1	; extended env
  8197 00005548 E8051C0100              	call malloc
  8198 0000554D 488B7D10                	mov rdi, ENV
  8199 00005551 BE00000000              	mov rsi, 0
  8200 00005556 BA01000000              	mov rdx, 1
  8201                                  .L_lambda_simple_env_loop_025e:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  8202 0000555B 4883FE00                	cmp rsi, 0
  8203 0000555F 7410                    	je .L_lambda_simple_env_end_025e
  8204 00005561 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8205 00005565 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8206 00005569 48FFC6                  	inc rsi
  8207 0000556C 48FFC2                  	inc rdx
  8208 0000556F EBEA                    	jmp .L_lambda_simple_env_loop_025e
  8209                                  .L_lambda_simple_env_end_025e:
  8210 00005571 5B                      	pop rbx
  8211 00005572 BE00000000              	mov rsi, 0
  8212                                  .L_lambda_simple_params_loop_025e:	; copy params
  8213 00005577 4883FE00                	cmp rsi, 0
  8214 0000557B 740E                    	je .L_lambda_simple_params_end_025e
  8215 0000557D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8216 00005582 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8217 00005586 48FFC6                  	inc rsi
  8218 00005589 EBEC                    	jmp .L_lambda_simple_params_loop_025e
  8219                                  .L_lambda_simple_params_end_025e:
  8220 0000558B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  8221 0000558E 4889C3                  	mov rbx, rax
  8222 00005591 58                      	pop rax
  8223 00005592 C60004                  	mov byte [rax], T_closure
  8224 00005595 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8225 00005599 48C74009[A6550000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_025e
  8226 000055A1 E929040000              	jmp .L_lambda_simple_end_025e
  8227                                  .L_lambda_simple_code_025e:	; lambda-simple body
  8228 000055A6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8229 000055AC 740B                    	je .L_lambda_simple_arity_check_ok_025e
  8230 000055AE FF742410                	push qword [rsp + 8 * 2]
  8231 000055B2 6A01                    	push 1
  8232 000055B4 E9521B0100              	jmp L_error_incorrect_arity_simple
  8233                                  .L_lambda_simple_arity_check_ok_025e:
  8234 000055B9 C8000000                	enter 0, 0
  8235 000055BD BF08000000              	mov rdi, 8
  8236 000055C2 E88B1B0100              	call malloc
  8237 000055C7 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
  8238 000055CB 488918                  	mov qword[rax], rbx
  8239 000055CE 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  8240 000055D2 48B8-                   	mov rax, sob_void
  8240 000055D4 [0000000000000000] 
  8241                                  
  8242 000055DC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8243 000055E1 E86C1B0100              	call malloc
  8244 000055E6 50                      	push rax
  8245 000055E7 BF08000000              	mov rdi, 8 * 1	; new rib
  8246 000055EC E8611B0100              	call malloc
  8247 000055F1 50                      	push rax
  8248 000055F2 BF10000000              	mov rdi, 8 * 2	; extended env
  8249 000055F7 E8561B0100              	call malloc
  8250 000055FC 488B7D10                	mov rdi, ENV
  8251 00005600 BE00000000              	mov rsi, 0
  8252 00005605 BA01000000              	mov rdx, 1
  8253                                  .L_lambda_simple_env_loop_025f:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  8254 0000560A 4883FE01                	cmp rsi, 1
  8255 0000560E 7410                    	je .L_lambda_simple_env_end_025f
  8256 00005610 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8257 00005614 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8258 00005618 48FFC6                  	inc rsi
  8259 0000561B 48FFC2                  	inc rdx
  8260 0000561E EBEA                    	jmp .L_lambda_simple_env_loop_025f
  8261                                  .L_lambda_simple_env_end_025f:
  8262 00005620 5B                      	pop rbx
  8263 00005621 BE00000000              	mov rsi, 0
  8264                                  .L_lambda_simple_params_loop_025f:	; copy params
  8265 00005626 4883FE01                	cmp rsi, 1
  8266 0000562A 740E                    	je .L_lambda_simple_params_end_025f
  8267 0000562C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8268 00005631 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8269 00005635 48FFC6                  	inc rsi
  8270 00005638 EBEC                    	jmp .L_lambda_simple_params_loop_025f
  8271                                  .L_lambda_simple_params_end_025f:
  8272 0000563A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  8273 0000563D 4889C3                  	mov rbx, rax
  8274 00005640 58                      	pop rax
  8275 00005641 C60004                  	mov byte [rax], T_closure
  8276 00005644 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8277 00005648 48C74009[55560000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_025f
  8278 00005650 E983010000              	jmp .L_lambda_simple_end_025f
  8279                                  .L_lambda_simple_code_025f:	; lambda-simple body
  8280 00005655 48837C241003            	cmp qword [rsp + 8 * 2], 3
  8281 0000565B 740B                    	je .L_lambda_simple_arity_check_ok_025f
  8282 0000565D FF742410                	push qword [rsp + 8 * 2]
  8283 00005661 6A03                    	push 3
  8284 00005663 E9A31A0100              	jmp L_error_incorrect_arity_simple
  8285                                  .L_lambda_simple_arity_check_ok_025f:
  8286 00005668 C8000000                	enter 0, 0
  8287                                  	; preparing a non-tail-call
  8288 0000566C 488B4530                	mov rax, PARAM(2)	; param ss
  8289 00005670 50                      	push rax
  8290 00005671 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  8291 00005679 803805                  	cmp byte [rax], T_undefined
  8292 0000567C 0F84A3190100            	je L_error_fvar_undefined
  8293 00005682 50                      	push rax
  8294 00005683 6A02                    	push 2	; arg count
  8295 00005685 488B0425[25150000]      	mov rax, qword [free_var_110]	; free var ormap
  8296 0000568D 803805                  	cmp byte [rax], T_undefined
  8297 00005690 0F848F190100            	je L_error_fvar_undefined
  8298 00005696 803804                  	cmp byte [rax], T_closure
  8299 00005699 0F850A1A0100            	jne L_error_non_closure
  8300 0000569F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8301 000056A2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8302 000056A5 483D[02000000]          	cmp rax, sob_boolean_false
  8303 000056AB 7409                    	je .L_if_else_01a7
  8304 000056AD 488B4528                	mov rax, PARAM(1)	; param unit
  8305 000056B1 E91E010000              	jmp .L_if_end_01a7
  8306                                  .L_if_else_01a7:
  8307                                  	; preparing a tail-call
  8308                                  	; preparing a non-tail-call
  8309 000056B6 488B4530                	mov rax, PARAM(2)	; param ss
  8310 000056BA 50                      	push rax
  8311 000056BB 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  8312 000056C3 803805                  	cmp byte [rax], T_undefined
  8313 000056C6 0F8459190100            	je L_error_fvar_undefined
  8314 000056CC 50                      	push rax
  8315 000056CD 6A02                    	push 2	; arg count
  8316 000056CF 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  8317 000056D7 803805                  	cmp byte [rax], T_undefined
  8318 000056DA 0F8445190100            	je L_error_fvar_undefined
  8319 000056E0 803804                  	cmp byte [rax], T_closure
  8320 000056E3 0F85C0190100            	jne L_error_non_closure
  8321 000056E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8322 000056EC FF5009                  	call SOB_CLOSURE_CODE(rax)
  8323 000056EF 50                      	push rax
  8324                                  	; preparing a non-tail-call
  8325                                  	; preparing a non-tail-call
  8326 000056F0 488B4530                	mov rax, PARAM(2)	; param ss
  8327 000056F4 50                      	push rax
  8328 000056F5 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  8329 000056FD 803805                  	cmp byte [rax], T_undefined
  8330 00005700 0F841F190100            	je L_error_fvar_undefined
  8331 00005706 50                      	push rax
  8332 00005707 6A02                    	push 2	; arg count
  8333 00005709 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  8334 00005711 803805                  	cmp byte [rax], T_undefined
  8335 00005714 0F840B190100            	je L_error_fvar_undefined
  8336 0000571A 803804                  	cmp byte [rax], T_closure
  8337 0000571D 0F8586190100            	jne L_error_non_closure
  8338 00005723 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8339 00005726 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8340 00005729 50                      	push rax
  8341 0000572A 488B4528                	mov rax, PARAM(1)	; param unit
  8342 0000572E 50                      	push rax
  8343 0000572F 488B4520                	mov rax, PARAM(0)	; param f
  8344 00005733 50                      	push rax
  8345 00005734 6A03                    	push 3	; arg count
  8346 00005736 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
  8347 0000573E 803805                  	cmp byte [rax], T_undefined
  8348 00005741 0F84DE180100            	je L_error_fvar_undefined
  8349 00005747 803804                  	cmp byte [rax], T_closure
  8350 0000574A 0F8559190100            	jne L_error_non_closure
  8351 00005750 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8352 00005753 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8353 00005756 50                      	push rax
  8354 00005757 488B4520                	mov rax, PARAM(0)	; param f
  8355 0000575B 50                      	push rax
  8356 0000575C 6A03                    	push 3	; arg count
  8357 0000575E 488B4510                	mov rax, ENV
  8358 00005762 488B00                  	mov rax, qword [rax + 8 * 0]
  8359 00005765 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8360 00005768 488B00                  	mov rax, qword [rax]
  8361 0000576B 803804                  	cmp byte [rax], T_closure
  8362 0000576E 0F8535190100            	jne L_error_non_closure
  8363 00005774 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8364 00005777 4C8B4009                	mov r8, qword [rax + 1 + 8]
  8365 0000577B FF7508                  	push qword [rbp + 8]				; push old return address
  8366 0000577E FF7500                  	push qword [rbp]					; push old rbp
  8367                                  	;; move stack up ;;
  8368 00005781 488B5D18                	mov rbx, [rbp + 3*8]
  8369 00005785 4889DE                  	mov rsi, rbx						; save old size in rsi
  8370 00005788 4883C303                	add rbx, 3
  8371 0000578C 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  8372 00005794 B903000000              	mov rcx, 3
  8373 00005799 4883C104                	add rcx, 4				; num of iterations in rcx
  8374                                  .L_tc_recycle_frame_loop_0307:
  8375 0000579D 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  8376 000057A5 488B143C                	mov rdx, [rsp + rdi]
  8377 000057A9 4889541D00              	mov [rbp + rbx], rdx
  8378 000057AE 4883EB08                	sub rbx, 8
  8379 000057B2 48FFC9                  	dec rcx
  8380 000057B5 4883F900                	cmp rcx, 0
  8381 000057B9 75E2                    	jne .L_tc_recycle_frame_loop_0307
  8382 000057BB 4889F3                  	mov rbx, rsi
  8383 000057BE 4883EB03                	sub rbx, 3
  8384 000057C2 488D1CDD00000000        	lea rbx, [rbx*8]
  8385 000057CA 4801DD                  	add rbp, rbx
  8386 000057CD 4889EC                  	mov rsp, rbp         ; fix stack pointers
  8387 000057D0 5D                      	pop rbp
  8388 000057D1 41FFE0                  	jmp r8
  8389                                  .L_if_end_01a7:
  8390 000057D4 C9                      	leave
  8391 000057D5 C22800                  	ret AND_KILL_FRAME(3)
  8392                                  .L_lambda_simple_end_025f:	; new closure is in rax
  8393 000057D8 50                      	push rax
  8394 000057D9 488B4520                	mov rax, PARAM(0)	; param run
  8395 000057DD 8F00                    	pop qword [rax]
  8396 000057DF 48B8-                   	mov rax, sob_void
  8396 000057E1 [0000000000000000] 
  8397                                  
  8398 000057E9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8399 000057EE E85F190100              	call malloc
  8400 000057F3 50                      	push rax
  8401 000057F4 BF08000000              	mov rdi, 8 * 1	; new rib
  8402 000057F9 E854190100              	call malloc
  8403 000057FE 50                      	push rax
  8404 000057FF BF10000000              	mov rdi, 8 * 2	; extended env
  8405 00005804 E849190100              	call malloc
  8406 00005809 488B7D10                	mov rdi, ENV
  8407 0000580D BE00000000              	mov rsi, 0
  8408 00005812 BA01000000              	mov rdx, 1
  8409                                  .L_lambda_opt_env_loop_0050:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  8410 00005817 4883FE01                	cmp rsi, 1
  8411 0000581B 7410                    	je .L_lambda_opt_env_end_0050
  8412 0000581D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8413 00005821 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8414 00005825 48FFC6                  	inc rsi
  8415 00005828 48FFC2                  	inc rdx
  8416 0000582B EBEA                    	jmp .L_lambda_opt_env_loop_0050
  8417                                  .L_lambda_opt_env_end_0050:
  8418 0000582D 5B                      	pop rbx
  8419 0000582E BE00000000              	mov rsi, 0
  8420                                  .L_lambda_opt_params_loop_0050:	; copy params
  8421 00005833 4883FE01                	cmp rsi, 1
  8422 00005837 740E                    	je .L_lambda_opt_params_end_0050
  8423 00005839 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8424 0000583E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8425 00005842 48FFC6                  	inc rsi
  8426 00005845 EBEC                    	jmp .L_lambda_opt_params_loop_0050
  8427                                  .L_lambda_opt_params_end_0050:
  8428 00005847 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  8429 0000584A 4889C3                  	mov rbx, rax
  8430 0000584D 58                      	pop rax
  8431 0000584E C60004                  	mov byte [rax], T_closure
  8432 00005851 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8433 00005855 48C74009[62580000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0050
  8434 0000585D E969010000              	jmp .L_lambda_opt_end_0050
  8435                                  .L_lambda_opt_code_0050:	; lambda-opt body
  8436 00005862 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8437 00005868 740D                    	je .L_lambda_opt_arity_check_exact_0050
  8438 0000586A 7F48                    	jg .L_lambda_opt_arity_check_more_0050
  8439 0000586C FF742410                	push qword [rsp + 8 * 2]
  8440 00005870 6A02                    	push 2
  8441 00005872 E9A8180100              	jmp L_error_incorrect_arity_opt
  8442                                  .L_lambda_opt_arity_check_exact_0050:
  8443 00005877 48C744241003000000      	mov qword [rsp + 8 * 2], 3	; Update argument count (fixed params + 1 for nil)
  8444 00005880 41BA05000000            	mov r10, 5	; r10 = total addresses to adjust (fixed params + 3)
  8445 00005886 FF3424                  	push qword [rsp]	; Save the top stack element
  8446 00005889 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
  8447                                  .L_lambda_opt_stack_shrink_loop_00ee:
  8448 0000588F 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
  8449 00005892 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_00ee	; Exit loop if all elements processed
  8450 00005894 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
  8451 00005899 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
  8452 0000589D 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
  8453 000058A2 49FFC3                  	inc r11	; Increment loop index
  8454 000058A5 EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_00ee	; Jump back to loop start
  8455                                  .L_lambda_opt_stack_shrink_loop_exit_00ee:
  8456 000058A7 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
  8457 000058AF E988000000              	jmp .L_lambda_opt_stack_adjusted_0050
  8458                                  .L_lambda_opt_arity_check_more_0050:
  8459 000058B4 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
  8460 000058B9 4983E802                	sub r8, 2	; r8 = count of optional params
  8461 000058BD 48C744241003000000      	mov qword [rsp + 8 * 2], 3	; Update the number of params (fixed params + 1 for list opt)
  8462 000058C6 41B900000000            	mov r9, 0	; r9 = index of optional argument list
  8463 000058CC 4E8D54C420              	lea r10, [rsp + 2 * 8 + 2 * 8 + r8 * 8]	; r10 = address of first optional param
  8464 000058D1 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
  8464 000058D3 [0100000000000000] 
  8465                                  .L_lambda_opt_stack_shrink_loop_00ef:
  8466 000058DB 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
  8467 000058DE 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_00ef	; Exit loop if all optional params are processed
  8468 000058E0 BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
  8469 000058E5 E868180100              	call malloc	; Allocate memory for a new pair
  8470 000058EA 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
  8471 000058EE 49F7D9                  	neg r9	; Negate index to access in reverse
  8472 000058F1 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
  8473 000058F5 49F7D9                  	neg r9	; Negate index back
  8474 000058F8 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
  8475 000058FC C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
  8476 000058FF 4989C3                  	mov r11, rax	; Update current pair to the newly created one
  8477 00005902 49FFC1                  	inc r9	; Increment the index
  8478 00005905 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_00ef	; Repeat the loop for the next param
  8479                                  .L_lambda_opt_stack_shrink_loop_exit_00ef:
  8480 00005907 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
  8481 0000590A 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
  8482 0000590E 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
  8483 00005911 4983C420                	add r12, 32	; Skip fixed params and return address
  8484 00005915 41BD05000000            	mov r13, 5	; r13 = loop counter (number of params, old fp, ret addr, lex env)
  8485                                  .L_lambda_opt_stack_shrink_loop_00f0:
  8486 0000591B 4983FD00                	cmp r13, 0	; Check if there are more values to copy
  8487 0000591F 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_00f0	; Exit loop if all values are copied
  8488 00005921 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
  8489 00005925 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
  8490 00005928 49FFCD                  	dec r13	; Decrement the loop counter
  8491 0000592B 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
  8492 0000592F 4983EC08                	sub r12, 8	; Move the source pointer to the next location
  8493 00005933 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_00f0	; Repeat the loop for the next value
  8494                                  .L_lambda_opt_stack_shrink_loop_exit_00f0:
  8495 00005935 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
  8496 00005939 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
  8497                                  .L_lambda_opt_stack_adjusted_0050:
  8498 0000593C C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
  8499                                  	; preparing a tail-call
  8500 00005940 488B4530                	mov rax, PARAM(2)	; param ss
  8501 00005944 50                      	push rax
  8502 00005945 488B4528                	mov rax, PARAM(1)	; param unit
  8503 00005949 50                      	push rax
  8504 0000594A 488B4520                	mov rax, PARAM(0)	; param f
  8505 0000594E 50                      	push rax
  8506 0000594F 6A03                    	push 3	; arg count
  8507 00005951 488B4510                	mov rax, ENV
  8508 00005955 488B00                  	mov rax, qword [rax + 8 * 0]
  8509 00005958 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8510 0000595B 488B00                  	mov rax, qword [rax]
  8511 0000595E 803804                  	cmp byte [rax], T_closure
  8512 00005961 0F8542170100            	jne L_error_non_closure
  8513 00005967 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8514 0000596A 4C8B4009                	mov r8, qword [rax + 1 + 8]
  8515 0000596E FF7508                  	push qword [rbp + 8]				; push old return address
  8516 00005971 FF7500                  	push qword [rbp]					; push old rbp
  8517                                  	;; move stack up ;;
  8518 00005974 488B5D18                	mov rbx, [rbp + 3*8]
  8519 00005978 4889DE                  	mov rsi, rbx						; save old size in rsi
  8520 0000597B 4883C303                	add rbx, 3
  8521 0000597F 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  8522 00005987 B903000000              	mov rcx, 3
  8523 0000598C 4883C104                	add rcx, 4				; num of iterations in rcx
  8524                                  .L_tc_recycle_frame_loop_0308:
  8525 00005990 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  8526 00005998 488B143C                	mov rdx, [rsp + rdi]
  8527 0000599C 4889541D00              	mov [rbp + rbx], rdx
  8528 000059A1 4883EB08                	sub rbx, 8
  8529 000059A5 48FFC9                  	dec rcx
  8530 000059A8 4883F900                	cmp rcx, 0
  8531 000059AC 75E2                    	jne .L_tc_recycle_frame_loop_0308
  8532 000059AE 4889F3                  	mov rbx, rsi
  8533 000059B1 4883EB03                	sub rbx, 3
  8534 000059B5 488D1CDD00000000        	lea rbx, [rbx*8]
  8535 000059BD 4801DD                  	add rbp, rbx
  8536 000059C0 4889EC                  	mov rsp, rbp         ; fix stack pointers
  8537 000059C3 5D                      	pop rbp
  8538 000059C4 41FFE0                  	jmp r8
  8539 000059C7 C9                      	leave	; Restore the previous stack frame
  8540 000059C8 C22800                  	ret AND_KILL_FRAME(3)
  8541                                  .L_lambda_opt_end_0050:	; new closure is in rax
  8542 000059CB C9                      	leave
  8543 000059CC C21800                  	ret AND_KILL_FRAME(1)
  8544                                  .L_lambda_simple_end_025e:	; new closure is in rax
  8545 000059CF 803804                  	cmp byte [rax], T_closure
  8546 000059D2 0F85D1160100            	jne L_error_non_closure
  8547 000059D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8548 000059DB FF5009                  	call SOB_CLOSURE_CODE(rax)
  8549 000059DE 48890425[7C130000]      	mov qword [free_var_85], rax
  8550 000059E6 48B8-                   	mov rax, sob_void
  8550 000059E8 [0000000000000000] 
  8551                                  
  8552 000059F0 4889C7                  	mov rdi, rax
  8553 000059F3 E8AF190100              	call print_sexpr_if_not_void
  8554                                  	; preparing a non-tail-call
  8555 000059F8 48B8-                   	mov rax, L_constants + 1993
  8555 000059FA [C907000000000000] 
  8556 00005A02 50                      	push rax
  8557 00005A03 6A01                    	push 1	; arg count
  8558 00005A05 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8559 00005A0A E843170100              	call malloc
  8560 00005A0F 50                      	push rax
  8561 00005A10 BF00000000              	mov rdi, 8 * 0	; new rib
  8562 00005A15 E838170100              	call malloc
  8563 00005A1A 50                      	push rax
  8564 00005A1B BF08000000              	mov rdi, 8 * 1	; extended env
  8565 00005A20 E82D170100              	call malloc
  8566 00005A25 488B7D10                	mov rdi, ENV
  8567 00005A29 BE00000000              	mov rsi, 0
  8568 00005A2E BA01000000              	mov rdx, 1
  8569                                  .L_lambda_simple_env_loop_0260:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  8570 00005A33 4883FE00                	cmp rsi, 0
  8571 00005A37 7410                    	je .L_lambda_simple_env_end_0260
  8572 00005A39 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8573 00005A3D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8574 00005A41 48FFC6                  	inc rsi
  8575 00005A44 48FFC2                  	inc rdx
  8576 00005A47 EBEA                    	jmp .L_lambda_simple_env_loop_0260
  8577                                  .L_lambda_simple_env_end_0260:
  8578 00005A49 5B                      	pop rbx
  8579 00005A4A BE00000000              	mov rsi, 0
  8580                                  .L_lambda_simple_params_loop_0260:	; copy params
  8581 00005A4F 4883FE00                	cmp rsi, 0
  8582 00005A53 740E                    	je .L_lambda_simple_params_end_0260
  8583 00005A55 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8584 00005A5A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8585 00005A5E 48FFC6                  	inc rsi
  8586 00005A61 EBEC                    	jmp .L_lambda_simple_params_loop_0260
  8587                                  .L_lambda_simple_params_end_0260:
  8588 00005A63 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  8589 00005A66 4889C3                  	mov rbx, rax
  8590 00005A69 58                      	pop rax
  8591 00005A6A C60004                  	mov byte [rax], T_closure
  8592 00005A6D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8593 00005A71 48C74009[7E5A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0260
  8594 00005A79 E97A040000              	jmp .L_lambda_simple_end_0260
  8595                                  .L_lambda_simple_code_0260:	; lambda-simple body
  8596 00005A7E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8597 00005A84 740B                    	je .L_lambda_simple_arity_check_ok_0260
  8598 00005A86 FF742410                	push qword [rsp + 8 * 2]
  8599 00005A8A 6A01                    	push 1
  8600 00005A8C E97A160100              	jmp L_error_incorrect_arity_simple
  8601                                  .L_lambda_simple_arity_check_ok_0260:
  8602 00005A91 C8000000                	enter 0, 0
  8603 00005A95 BF08000000              	mov rdi, 8
  8604 00005A9A E8B3160100              	call malloc
  8605 00005A9F 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
  8606 00005AA3 488918                  	mov qword[rax], rbx
  8607 00005AA6 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  8608 00005AAA 48B8-                   	mov rax, sob_void
  8608 00005AAC [0000000000000000] 
  8609                                  
  8610 00005AB4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8611 00005AB9 E894160100              	call malloc
  8612 00005ABE 50                      	push rax
  8613 00005ABF BF08000000              	mov rdi, 8 * 1	; new rib
  8614 00005AC4 E889160100              	call malloc
  8615 00005AC9 50                      	push rax
  8616 00005ACA BF10000000              	mov rdi, 8 * 2	; extended env
  8617 00005ACF E87E160100              	call malloc
  8618 00005AD4 488B7D10                	mov rdi, ENV
  8619 00005AD8 BE00000000              	mov rsi, 0
  8620 00005ADD BA01000000              	mov rdx, 1
  8621                                  .L_lambda_simple_env_loop_0261:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  8622 00005AE2 4883FE01                	cmp rsi, 1
  8623 00005AE6 7410                    	je .L_lambda_simple_env_end_0261
  8624 00005AE8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8625 00005AEC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8626 00005AF0 48FFC6                  	inc rsi
  8627 00005AF3 48FFC2                  	inc rdx
  8628 00005AF6 EBEA                    	jmp .L_lambda_simple_env_loop_0261
  8629                                  .L_lambda_simple_env_end_0261:
  8630 00005AF8 5B                      	pop rbx
  8631 00005AF9 BE00000000              	mov rsi, 0
  8632                                  .L_lambda_simple_params_loop_0261:	; copy params
  8633 00005AFE 4883FE01                	cmp rsi, 1
  8634 00005B02 740E                    	je .L_lambda_simple_params_end_0261
  8635 00005B04 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8636 00005B09 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8637 00005B0D 48FFC6                  	inc rsi
  8638 00005B10 EBEC                    	jmp .L_lambda_simple_params_loop_0261
  8639                                  .L_lambda_simple_params_end_0261:
  8640 00005B12 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  8641 00005B15 4889C3                  	mov rbx, rax
  8642 00005B18 58                      	pop rax
  8643 00005B19 C60004                  	mov byte [rax], T_closure
  8644 00005B1C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8645 00005B20 48C74009[2D5B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0261
  8646 00005B28 E9D4010000              	jmp .L_lambda_simple_end_0261
  8647                                  .L_lambda_simple_code_0261:	; lambda-simple body
  8648 00005B2D 48837C241003            	cmp qword [rsp + 8 * 2], 3
  8649 00005B33 740B                    	je .L_lambda_simple_arity_check_ok_0261
  8650 00005B35 FF742410                	push qword [rsp + 8 * 2]
  8651 00005B39 6A03                    	push 3
  8652 00005B3B E9CB150100              	jmp L_error_incorrect_arity_simple
  8653                                  .L_lambda_simple_arity_check_ok_0261:
  8654 00005B40 C8000000                	enter 0, 0
  8655                                  	; preparing a non-tail-call
  8656 00005B44 488B4530                	mov rax, PARAM(2)	; param ss
  8657 00005B48 50                      	push rax
  8658 00005B49 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  8659 00005B51 803805                  	cmp byte [rax], T_undefined
  8660 00005B54 0F84CB140100            	je L_error_fvar_undefined
  8661 00005B5A 50                      	push rax
  8662 00005B5B 6A02                    	push 2	; arg count
  8663 00005B5D 488B0425[25150000]      	mov rax, qword [free_var_110]	; free var ormap
  8664 00005B65 803805                  	cmp byte [rax], T_undefined
  8665 00005B68 0F84B7140100            	je L_error_fvar_undefined
  8666 00005B6E 803804                  	cmp byte [rax], T_closure
  8667 00005B71 0F8532150100            	jne L_error_non_closure
  8668 00005B77 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8669 00005B7A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8670 00005B7D 483D[02000000]          	cmp rax, sob_boolean_false
  8671 00005B83 7409                    	je .L_if_else_01a8
  8672 00005B85 488B4528                	mov rax, PARAM(1)	; param unit
  8673 00005B89 E96F010000              	jmp .L_if_end_01a8
  8674                                  .L_if_else_01a8:
  8675                                  	; preparing a tail-call
  8676                                  	; preparing a non-tail-call
  8677                                  	; preparing a non-tail-call
  8678 00005B8E 48B8-                   	mov rax, L_constants + 1
  8678 00005B90 [0100000000000000] 
  8679 00005B98 50                      	push rax
  8680                                  	; preparing a non-tail-call
  8681                                  	; preparing a non-tail-call
  8682 00005B99 488B4530                	mov rax, PARAM(2)	; param ss
  8683 00005B9D 50                      	push rax
  8684 00005B9E 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  8685 00005BA6 803805                  	cmp byte [rax], T_undefined
  8686 00005BA9 0F8476140100            	je L_error_fvar_undefined
  8687 00005BAF 50                      	push rax
  8688 00005BB0 6A02                    	push 2	; arg count
  8689 00005BB2 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  8690 00005BBA 803805                  	cmp byte [rax], T_undefined
  8691 00005BBD 0F8462140100            	je L_error_fvar_undefined
  8692 00005BC3 803804                  	cmp byte [rax], T_closure
  8693 00005BC6 0F85DD140100            	jne L_error_non_closure
  8694 00005BCC FF7001                  	push SOB_CLOSURE_ENV(rax)
  8695 00005BCF FF5009                  	call SOB_CLOSURE_CODE(rax)
  8696 00005BD2 50                      	push rax
  8697 00005BD3 488B4528                	mov rax, PARAM(1)	; param unit
  8698 00005BD7 50                      	push rax
  8699 00005BD8 488B4520                	mov rax, PARAM(0)	; param f
  8700 00005BDC 50                      	push rax
  8701 00005BDD 6A03                    	push 3	; arg count
  8702 00005BDF 488B4510                	mov rax, ENV
  8703 00005BE3 488B00                  	mov rax, qword [rax + 8 * 0]
  8704 00005BE6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8705 00005BE9 488B00                  	mov rax, qword [rax]
  8706 00005BEC 803804                  	cmp byte [rax], T_closure
  8707 00005BEF 0F85B4140100            	jne L_error_non_closure
  8708 00005BF5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8709 00005BF8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8710 00005BFB 50                      	push rax
  8711 00005BFC 6A02                    	push 2	; arg count
  8712 00005BFE 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
  8713 00005C06 803805                  	cmp byte [rax], T_undefined
  8714 00005C09 0F8416140100            	je L_error_fvar_undefined
  8715 00005C0F 803804                  	cmp byte [rax], T_closure
  8716 00005C12 0F8591140100            	jne L_error_non_closure
  8717 00005C18 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8718 00005C1B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8719 00005C1E 50                      	push rax
  8720                                  	; preparing a non-tail-call
  8721 00005C1F 488B4530                	mov rax, PARAM(2)	; param ss
  8722 00005C23 50                      	push rax
  8723 00005C24 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  8724 00005C2C 803805                  	cmp byte [rax], T_undefined
  8725 00005C2F 0F84F0130100            	je L_error_fvar_undefined
  8726 00005C35 50                      	push rax
  8727 00005C36 6A02                    	push 2	; arg count
  8728 00005C38 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  8729 00005C40 803805                  	cmp byte [rax], T_undefined
  8730 00005C43 0F84DC130100            	je L_error_fvar_undefined
  8731 00005C49 803804                  	cmp byte [rax], T_closure
  8732 00005C4C 0F8557140100            	jne L_error_non_closure
  8733 00005C52 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8734 00005C55 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8735 00005C58 50                      	push rax
  8736 00005C59 6A02                    	push 2	; arg count
  8737 00005C5B 488B0425[F70F0000]      	mov rax, qword [free_var_32]	; free var append
  8738 00005C63 803805                  	cmp byte [rax], T_undefined
  8739 00005C66 0F84B9130100            	je L_error_fvar_undefined
  8740 00005C6C 803804                  	cmp byte [rax], T_closure
  8741 00005C6F 0F8534140100            	jne L_error_non_closure
  8742 00005C75 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8743 00005C78 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8744 00005C7B 50                      	push rax
  8745 00005C7C 488B4520                	mov rax, PARAM(0)	; param f
  8746 00005C80 50                      	push rax
  8747 00005C81 6A02                    	push 2	; arg count
  8748 00005C83 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
  8749 00005C8B 803805                  	cmp byte [rax], T_undefined
  8750 00005C8E 0F8491130100            	je L_error_fvar_undefined
  8751 00005C94 803804                  	cmp byte [rax], T_closure
  8752 00005C97 0F850C140100            	jne L_error_non_closure
  8753 00005C9D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8754 00005CA0 4C8B4009                	mov r8, qword [rax + 1 + 8]
  8755 00005CA4 FF7508                  	push qword [rbp + 8]				; push old return address
  8756 00005CA7 FF7500                  	push qword [rbp]					; push old rbp
  8757                                  	;; move stack up ;;
  8758 00005CAA 488B5D18                	mov rbx, [rbp + 3*8]
  8759 00005CAE 4889DE                  	mov rsi, rbx						; save old size in rsi
  8760 00005CB1 4883C303                	add rbx, 3
  8761 00005CB5 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  8762 00005CBD B902000000              	mov rcx, 2
  8763 00005CC2 4883C104                	add rcx, 4				; num of iterations in rcx
  8764                                  .L_tc_recycle_frame_loop_0309:
  8765 00005CC6 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  8766 00005CCE 488B143C                	mov rdx, [rsp + rdi]
  8767 00005CD2 4889541D00              	mov [rbp + rbx], rdx
  8768 00005CD7 4883EB08                	sub rbx, 8
  8769 00005CDB 48FFC9                  	dec rcx
  8770 00005CDE 4883F900                	cmp rcx, 0
  8771 00005CE2 75E2                    	jne .L_tc_recycle_frame_loop_0309
  8772 00005CE4 4889F3                  	mov rbx, rsi
  8773 00005CE7 4883EB02                	sub rbx, 2
  8774 00005CEB 488D1CDD00000000        	lea rbx, [rbx*8]
  8775 00005CF3 4801DD                  	add rbp, rbx
  8776 00005CF6 4889EC                  	mov rsp, rbp         ; fix stack pointers
  8777 00005CF9 5D                      	pop rbp
  8778 00005CFA 41FFE0                  	jmp r8
  8779                                  .L_if_end_01a8:
  8780 00005CFD C9                      	leave
  8781 00005CFE C22800                  	ret AND_KILL_FRAME(3)
  8782                                  .L_lambda_simple_end_0261:	; new closure is in rax
  8783 00005D01 50                      	push rax
  8784 00005D02 488B4520                	mov rax, PARAM(0)	; param run
  8785 00005D06 8F00                    	pop qword [rax]
  8786 00005D08 48B8-                   	mov rax, sob_void
  8786 00005D0A [0000000000000000] 
  8787                                  
  8788 00005D12 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8789 00005D17 E836140100              	call malloc
  8790 00005D1C 50                      	push rax
  8791 00005D1D BF08000000              	mov rdi, 8 * 1	; new rib
  8792 00005D22 E82B140100              	call malloc
  8793 00005D27 50                      	push rax
  8794 00005D28 BF10000000              	mov rdi, 8 * 2	; extended env
  8795 00005D2D E820140100              	call malloc
  8796 00005D32 488B7D10                	mov rdi, ENV
  8797 00005D36 BE00000000              	mov rsi, 0
  8798 00005D3B BA01000000              	mov rdx, 1
  8799                                  .L_lambda_opt_env_loop_0051:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  8800 00005D40 4883FE01                	cmp rsi, 1
  8801 00005D44 7410                    	je .L_lambda_opt_env_end_0051
  8802 00005D46 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8803 00005D4A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8804 00005D4E 48FFC6                  	inc rsi
  8805 00005D51 48FFC2                  	inc rdx
  8806 00005D54 EBEA                    	jmp .L_lambda_opt_env_loop_0051
  8807                                  .L_lambda_opt_env_end_0051:
  8808 00005D56 5B                      	pop rbx
  8809 00005D57 BE00000000              	mov rsi, 0
  8810                                  .L_lambda_opt_params_loop_0051:	; copy params
  8811 00005D5C 4883FE01                	cmp rsi, 1
  8812 00005D60 740E                    	je .L_lambda_opt_params_end_0051
  8813 00005D62 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8814 00005D67 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8815 00005D6B 48FFC6                  	inc rsi
  8816 00005D6E EBEC                    	jmp .L_lambda_opt_params_loop_0051
  8817                                  .L_lambda_opt_params_end_0051:
  8818 00005D70 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  8819 00005D73 4889C3                  	mov rbx, rax
  8820 00005D76 58                      	pop rax
  8821 00005D77 C60004                  	mov byte [rax], T_closure
  8822 00005D7A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8823 00005D7E 48C74009[8B5D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0051
  8824 00005D86 E969010000              	jmp .L_lambda_opt_end_0051
  8825                                  .L_lambda_opt_code_0051:	; lambda-opt body
  8826 00005D8B 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8827 00005D91 740D                    	je .L_lambda_opt_arity_check_exact_0051
  8828 00005D93 7F48                    	jg .L_lambda_opt_arity_check_more_0051
  8829 00005D95 FF742410                	push qword [rsp + 8 * 2]
  8830 00005D99 6A02                    	push 2
  8831 00005D9B E97F130100              	jmp L_error_incorrect_arity_opt
  8832                                  .L_lambda_opt_arity_check_exact_0051:
  8833 00005DA0 48C744241003000000      	mov qword [rsp + 8 * 2], 3	; Update argument count (fixed params + 1 for nil)
  8834 00005DA9 41BA05000000            	mov r10, 5	; r10 = total addresses to adjust (fixed params + 3)
  8835 00005DAF FF3424                  	push qword [rsp]	; Save the top stack element
  8836 00005DB2 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
  8837                                  .L_lambda_opt_stack_shrink_loop_00f1:
  8838 00005DB8 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
  8839 00005DBB 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_00f1	; Exit loop if all elements processed
  8840 00005DBD 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
  8841 00005DC2 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
  8842 00005DC6 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
  8843 00005DCB 49FFC3                  	inc r11	; Increment loop index
  8844 00005DCE EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_00f1	; Jump back to loop start
  8845                                  .L_lambda_opt_stack_shrink_loop_exit_00f1:
  8846 00005DD0 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
  8847 00005DD8 E988000000              	jmp .L_lambda_opt_stack_adjusted_0051
  8848                                  .L_lambda_opt_arity_check_more_0051:
  8849 00005DDD 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
  8850 00005DE2 4983E802                	sub r8, 2	; r8 = count of optional params
  8851 00005DE6 48C744241003000000      	mov qword [rsp + 8 * 2], 3	; Update the number of params (fixed params + 1 for list opt)
  8852 00005DEF 41B900000000            	mov r9, 0	; r9 = index of optional argument list
  8853 00005DF5 4E8D54C420              	lea r10, [rsp + 2 * 8 + 2 * 8 + r8 * 8]	; r10 = address of first optional param
  8854 00005DFA 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
  8854 00005DFC [0100000000000000] 
  8855                                  .L_lambda_opt_stack_shrink_loop_00f2:
  8856 00005E04 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
  8857 00005E07 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_00f2	; Exit loop if all optional params are processed
  8858 00005E09 BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
  8859 00005E0E E83F130100              	call malloc	; Allocate memory for a new pair
  8860 00005E13 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
  8861 00005E17 49F7D9                  	neg r9	; Negate index to access in reverse
  8862 00005E1A 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
  8863 00005E1E 49F7D9                  	neg r9	; Negate index back
  8864 00005E21 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
  8865 00005E25 C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
  8866 00005E28 4989C3                  	mov r11, rax	; Update current pair to the newly created one
  8867 00005E2B 49FFC1                  	inc r9	; Increment the index
  8868 00005E2E EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_00f2	; Repeat the loop for the next param
  8869                                  .L_lambda_opt_stack_shrink_loop_exit_00f2:
  8870 00005E30 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
  8871 00005E33 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
  8872 00005E37 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
  8873 00005E3A 4983C420                	add r12, 32	; Skip fixed params and return address
  8874 00005E3E 41BD05000000            	mov r13, 5	; r13 = loop counter (number of params, old fp, ret addr, lex env)
  8875                                  .L_lambda_opt_stack_shrink_loop_00f3:
  8876 00005E44 4983FD00                	cmp r13, 0	; Check if there are more values to copy
  8877 00005E48 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_00f3	; Exit loop if all values are copied
  8878 00005E4A 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
  8879 00005E4E 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
  8880 00005E51 49FFCD                  	dec r13	; Decrement the loop counter
  8881 00005E54 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
  8882 00005E58 4983EC08                	sub r12, 8	; Move the source pointer to the next location
  8883 00005E5C EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_00f3	; Repeat the loop for the next value
  8884                                  .L_lambda_opt_stack_shrink_loop_exit_00f3:
  8885 00005E5E 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
  8886 00005E62 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
  8887                                  .L_lambda_opt_stack_adjusted_0051:
  8888 00005E65 C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
  8889                                  	; preparing a tail-call
  8890 00005E69 488B4530                	mov rax, PARAM(2)	; param ss
  8891 00005E6D 50                      	push rax
  8892 00005E6E 488B4528                	mov rax, PARAM(1)	; param unit
  8893 00005E72 50                      	push rax
  8894 00005E73 488B4520                	mov rax, PARAM(0)	; param f
  8895 00005E77 50                      	push rax
  8896 00005E78 6A03                    	push 3	; arg count
  8897 00005E7A 488B4510                	mov rax, ENV
  8898 00005E7E 488B00                  	mov rax, qword [rax + 8 * 0]
  8899 00005E81 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8900 00005E84 488B00                  	mov rax, qword [rax]
  8901 00005E87 803804                  	cmp byte [rax], T_closure
  8902 00005E8A 0F8519120100            	jne L_error_non_closure
  8903 00005E90 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8904 00005E93 4C8B4009                	mov r8, qword [rax + 1 + 8]
  8905 00005E97 FF7508                  	push qword [rbp + 8]				; push old return address
  8906 00005E9A FF7500                  	push qword [rbp]					; push old rbp
  8907                                  	;; move stack up ;;
  8908 00005E9D 488B5D18                	mov rbx, [rbp + 3*8]
  8909 00005EA1 4889DE                  	mov rsi, rbx						; save old size in rsi
  8910 00005EA4 4883C303                	add rbx, 3
  8911 00005EA8 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  8912 00005EB0 B903000000              	mov rcx, 3
  8913 00005EB5 4883C104                	add rcx, 4				; num of iterations in rcx
  8914                                  .L_tc_recycle_frame_loop_030a:
  8915 00005EB9 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  8916 00005EC1 488B143C                	mov rdx, [rsp + rdi]
  8917 00005EC5 4889541D00              	mov [rbp + rbx], rdx
  8918 00005ECA 4883EB08                	sub rbx, 8
  8919 00005ECE 48FFC9                  	dec rcx
  8920 00005ED1 4883F900                	cmp rcx, 0
  8921 00005ED5 75E2                    	jne .L_tc_recycle_frame_loop_030a
  8922 00005ED7 4889F3                  	mov rbx, rsi
  8923 00005EDA 4883EB03                	sub rbx, 3
  8924 00005EDE 488D1CDD00000000        	lea rbx, [rbx*8]
  8925 00005EE6 4801DD                  	add rbp, rbx
  8926 00005EE9 4889EC                  	mov rsp, rbp         ; fix stack pointers
  8927 00005EEC 5D                      	pop rbp
  8928 00005EED 41FFE0                  	jmp r8
  8929 00005EF0 C9                      	leave	; Restore the previous stack frame
  8930 00005EF1 C22800                  	ret AND_KILL_FRAME(3)
  8931                                  .L_lambda_opt_end_0051:	; new closure is in rax
  8932 00005EF4 C9                      	leave
  8933 00005EF5 C21800                  	ret AND_KILL_FRAME(1)
  8934                                  .L_lambda_simple_end_0260:	; new closure is in rax
  8935 00005EF8 803804                  	cmp byte [rax], T_closure
  8936 00005EFB 0F85A8110100            	jne L_error_non_closure
  8937 00005F01 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8938 00005F04 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8939 00005F07 48890425[8D130000]      	mov qword [free_var_86], rax
  8940 00005F0F 48B8-                   	mov rax, sob_void
  8940 00005F11 [0000000000000000] 
  8941                                  
  8942 00005F19 4889C7                  	mov rdi, rax
  8943 00005F1C E886140100              	call print_sexpr_if_not_void
  8944                                  	; preparing a non-tail-call
  8945 00005F21 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8946 00005F26 E827120100              	call malloc
  8947 00005F2B 50                      	push rax
  8948 00005F2C BF00000000              	mov rdi, 8 * 0	; new rib
  8949 00005F31 E81C120100              	call malloc
  8950 00005F36 50                      	push rax
  8951 00005F37 BF08000000              	mov rdi, 8 * 1	; extended env
  8952 00005F3C E811120100              	call malloc
  8953 00005F41 488B7D10                	mov rdi, ENV
  8954 00005F45 BE00000000              	mov rsi, 0
  8955 00005F4A BA01000000              	mov rdx, 1
  8956                                  .L_lambda_simple_env_loop_0262:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  8957 00005F4F 4883FE00                	cmp rsi, 0
  8958 00005F53 7410                    	je .L_lambda_simple_env_end_0262
  8959 00005F55 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8960 00005F59 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8961 00005F5D 48FFC6                  	inc rsi
  8962 00005F60 48FFC2                  	inc rdx
  8963 00005F63 EBEA                    	jmp .L_lambda_simple_env_loop_0262
  8964                                  .L_lambda_simple_env_end_0262:
  8965 00005F65 5B                      	pop rbx
  8966 00005F66 BE00000000              	mov rsi, 0
  8967                                  .L_lambda_simple_params_loop_0262:	; copy params
  8968 00005F6B 4883FE00                	cmp rsi, 0
  8969 00005F6F 740E                    	je .L_lambda_simple_params_end_0262
  8970 00005F71 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8971 00005F76 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8972 00005F7A 48FFC6                  	inc rsi
  8973 00005F7D EBEC                    	jmp .L_lambda_simple_params_loop_0262
  8974                                  .L_lambda_simple_params_end_0262:
  8975 00005F7F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  8976 00005F82 4889C3                  	mov rbx, rax
  8977 00005F85 58                      	pop rax
  8978 00005F86 C60004                  	mov byte [rax], T_closure
  8979 00005F89 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8980 00005F8D 48C74009[9A5F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0262
  8981 00005F95 E9AD000000              	jmp .L_lambda_simple_end_0262
  8982                                  .L_lambda_simple_code_0262:	; lambda-simple body
  8983 00005F9A 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8984 00005FA0 740B                    	je .L_lambda_simple_arity_check_ok_0262
  8985 00005FA2 FF742410                	push qword [rsp + 8 * 2]
  8986 00005FA6 6A00                    	push 0
  8987 00005FA8 E95E110100              	jmp L_error_incorrect_arity_simple
  8988                                  .L_lambda_simple_arity_check_ok_0262:
  8989 00005FAD C8000000                	enter 0, 0
  8990                                  	; preparing a tail-call
  8991 00005FB1 48B8-                   	mov rax, L_constants + 2187
  8991 00005FB3 [8B08000000000000] 
  8992 00005FBB 50                      	push rax
  8993 00005FBC 48B8-                   	mov rax, L_constants + 2178
  8993 00005FBE [8208000000000000] 
  8994 00005FC6 50                      	push rax
  8995 00005FC7 6A02                    	push 2	; arg count
  8996 00005FC9 488B0425[49130000]      	mov rax, qword [free_var_82]	; free var error
  8997 00005FD1 803805                  	cmp byte [rax], T_undefined
  8998 00005FD4 0F844B100100            	je L_error_fvar_undefined
  8999 00005FDA 803804                  	cmp byte [rax], T_closure
  9000 00005FDD 0F85C6100100            	jne L_error_non_closure
  9001 00005FE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9002 00005FE6 4C8B4009                	mov r8, qword [rax + 1 + 8]
  9003 00005FEA FF7508                  	push qword [rbp + 8]				; push old return address
  9004 00005FED FF7500                  	push qword [rbp]					; push old rbp
  9005                                  	;; move stack up ;;
  9006 00005FF0 488B5D18                	mov rbx, [rbp + 3*8]
  9007 00005FF4 4889DE                  	mov rsi, rbx						; save old size in rsi
  9008 00005FF7 4883C303                	add rbx, 3
  9009 00005FFB 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  9010 00006003 B902000000              	mov rcx, 2
  9011 00006008 4883C104                	add rcx, 4				; num of iterations in rcx
  9012                                  .L_tc_recycle_frame_loop_030b:
  9013 0000600C 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  9014 00006014 488B143C                	mov rdx, [rsp + rdi]
  9015 00006018 4889541D00              	mov [rbp + rbx], rdx
  9016 0000601D 4883EB08                	sub rbx, 8
  9017 00006021 48FFC9                  	dec rcx
  9018 00006024 4883F900                	cmp rcx, 0
  9019 00006028 75E2                    	jne .L_tc_recycle_frame_loop_030b
  9020 0000602A 4889F3                  	mov rbx, rsi
  9021 0000602D 4883EB02                	sub rbx, 2
  9022 00006031 488D1CDD00000000        	lea rbx, [rbx*8]
  9023 00006039 4801DD                  	add rbp, rbx
  9024 0000603C 4889EC                  	mov rsp, rbp         ; fix stack pointers
  9025 0000603F 5D                      	pop rbp
  9026 00006040 41FFE0                  	jmp r8
  9027 00006043 C9                      	leave
  9028 00006044 C21000                  	ret AND_KILL_FRAME(0)
  9029                                  .L_lambda_simple_end_0262:	; new closure is in rax
  9030 00006047 50                      	push rax
  9031 00006048 6A01                    	push 1	; arg count
  9032 0000604A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9033 0000604F E8FE100100              	call malloc
  9034 00006054 50                      	push rax
  9035 00006055 BF00000000              	mov rdi, 8 * 0	; new rib
  9036 0000605A E8F3100100              	call malloc
  9037 0000605F 50                      	push rax
  9038 00006060 BF08000000              	mov rdi, 8 * 1	; extended env
  9039 00006065 E8E8100100              	call malloc
  9040 0000606A 488B7D10                	mov rdi, ENV
  9041 0000606E BE00000000              	mov rsi, 0
  9042 00006073 BA01000000              	mov rdx, 1
  9043                                  .L_lambda_simple_env_loop_0263:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  9044 00006078 4883FE00                	cmp rsi, 0
  9045 0000607C 7410                    	je .L_lambda_simple_env_end_0263
  9046 0000607E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9047 00006082 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9048 00006086 48FFC6                  	inc rsi
  9049 00006089 48FFC2                  	inc rdx
  9050 0000608C EBEA                    	jmp .L_lambda_simple_env_loop_0263
  9051                                  .L_lambda_simple_env_end_0263:
  9052 0000608E 5B                      	pop rbx
  9053 0000608F BE00000000              	mov rsi, 0
  9054                                  .L_lambda_simple_params_loop_0263:	; copy params
  9055 00006094 4883FE00                	cmp rsi, 0
  9056 00006098 740E                    	je .L_lambda_simple_params_end_0263
  9057 0000609A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9058 0000609F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9059 000060A3 48FFC6                  	inc rsi
  9060 000060A6 EBEC                    	jmp .L_lambda_simple_params_loop_0263
  9061                                  .L_lambda_simple_params_end_0263:
  9062 000060A8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  9063 000060AB 4889C3                  	mov rbx, rax
  9064 000060AE 58                      	pop rax
  9065 000060AF C60004                  	mov byte [rax], T_closure
  9066 000060B2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9067 000060B6 48C74009[C3600000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0263
  9068 000060BE E9910D0000              	jmp .L_lambda_simple_end_0263
  9069                                  .L_lambda_simple_code_0263:	; lambda-simple body
  9070 000060C3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9071 000060C9 740B                    	je .L_lambda_simple_arity_check_ok_0263
  9072 000060CB FF742410                	push qword [rsp + 8 * 2]
  9073 000060CF 6A01                    	push 1
  9074 000060D1 E935100100              	jmp L_error_incorrect_arity_simple
  9075                                  .L_lambda_simple_arity_check_ok_0263:
  9076 000060D6 C8000000                	enter 0, 0
  9077                                  	; preparing a tail-call
  9078 000060DA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9079 000060DF E86E100100              	call malloc
  9080 000060E4 50                      	push rax
  9081 000060E5 BF08000000              	mov rdi, 8 * 1	; new rib
  9082 000060EA E863100100              	call malloc
  9083 000060EF 50                      	push rax
  9084 000060F0 BF10000000              	mov rdi, 8 * 2	; extended env
  9085 000060F5 E858100100              	call malloc
  9086 000060FA 488B7D10                	mov rdi, ENV
  9087 000060FE BE00000000              	mov rsi, 0
  9088 00006103 BA01000000              	mov rdx, 1
  9089                                  .L_lambda_simple_env_loop_0264:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  9090 00006108 4883FE01                	cmp rsi, 1
  9091 0000610C 7410                    	je .L_lambda_simple_env_end_0264
  9092 0000610E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9093 00006112 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9094 00006116 48FFC6                  	inc rsi
  9095 00006119 48FFC2                  	inc rdx
  9096 0000611C EBEA                    	jmp .L_lambda_simple_env_loop_0264
  9097                                  .L_lambda_simple_env_end_0264:
  9098 0000611E 5B                      	pop rbx
  9099 0000611F BE00000000              	mov rsi, 0
  9100                                  .L_lambda_simple_params_loop_0264:	; copy params
  9101 00006124 4883FE01                	cmp rsi, 1
  9102 00006128 740E                    	je .L_lambda_simple_params_end_0264
  9103 0000612A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9104 0000612F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9105 00006133 48FFC6                  	inc rsi
  9106 00006136 EBEC                    	jmp .L_lambda_simple_params_loop_0264
  9107                                  .L_lambda_simple_params_end_0264:
  9108 00006138 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  9109 0000613B 4889C3                  	mov rbx, rax
  9110 0000613E 58                      	pop rax
  9111 0000613F C60004                  	mov byte [rax], T_closure
  9112 00006142 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9113 00006146 48C74009[53610000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0264
  9114 0000614E E90B0A0000              	jmp .L_lambda_simple_end_0264
  9115                                  .L_lambda_simple_code_0264:	; lambda-simple body
  9116 00006153 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9117 00006159 740B                    	je .L_lambda_simple_arity_check_ok_0264
  9118 0000615B FF742410                	push qword [rsp + 8 * 2]
  9119 0000615F 6A02                    	push 2
  9120 00006161 E9A50F0100              	jmp L_error_incorrect_arity_simple
  9121                                  .L_lambda_simple_arity_check_ok_0264:
  9122 00006166 C8000000                	enter 0, 0
  9123                                  	; preparing a non-tail-call
  9124 0000616A 488B4520                	mov rax, PARAM(0)	; param a
  9125 0000616E 50                      	push rax
  9126 0000616F 6A01                    	push 1	; arg count
  9127 00006171 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
  9128 00006179 803805                  	cmp byte [rax], T_undefined
  9129 0000617C 0F84A30E0100            	je L_error_fvar_undefined
  9130 00006182 803804                  	cmp byte [rax], T_closure
  9131 00006185 0F851E0F0100            	jne L_error_non_closure
  9132 0000618B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9133 0000618E FF5009                  	call SOB_CLOSURE_CODE(rax)
  9134 00006191 483D[02000000]          	cmp rax, sob_boolean_false
  9135 00006197 0F84F7020000            	je .L_if_else_01b4
  9136                                  	; preparing a non-tail-call
  9137 0000619D 488B4528                	mov rax, PARAM(1)	; param b
  9138 000061A1 50                      	push rax
  9139 000061A2 6A01                    	push 1	; arg count
  9140 000061A4 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
  9141 000061AC 803805                  	cmp byte [rax], T_undefined
  9142 000061AF 0F84700E0100            	je L_error_fvar_undefined
  9143 000061B5 803804                  	cmp byte [rax], T_closure
  9144 000061B8 0F85EB0E0100            	jne L_error_non_closure
  9145 000061BE FF7001                  	push SOB_CLOSURE_ENV(rax)
  9146 000061C1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9147 000061C4 483D[02000000]          	cmp rax, sob_boolean_false
  9148 000061CA 0F848B000000            	je .L_if_else_01ab
  9149                                  	; preparing a tail-call
  9150 000061D0 488B4528                	mov rax, PARAM(1)	; param b
  9151 000061D4 50                      	push rax
  9152 000061D5 488B4520                	mov rax, PARAM(0)	; param a
  9153 000061D9 50                      	push rax
  9154 000061DA 6A02                    	push 2	; arg count
  9155 000061DC 488B0425[920E0000]      	mov rax, qword [free_var_11]	; free var __bin-add-zz
  9156 000061E4 803805                  	cmp byte [rax], T_undefined
  9157 000061E7 0F84380E0100            	je L_error_fvar_undefined
  9158 000061ED 803804                  	cmp byte [rax], T_closure
  9159 000061F0 0F85B30E0100            	jne L_error_non_closure
  9160 000061F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9161 000061F9 4C8B4009                	mov r8, qword [rax + 1 + 8]
  9162 000061FD FF7508                  	push qword [rbp + 8]				; push old return address
  9163 00006200 FF7500                  	push qword [rbp]					; push old rbp
  9164                                  	;; move stack up ;;
  9165 00006203 488B5D18                	mov rbx, [rbp + 3*8]
  9166 00006207 4889DE                  	mov rsi, rbx						; save old size in rsi
  9167 0000620A 4883C303                	add rbx, 3
  9168 0000620E 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  9169 00006216 B902000000              	mov rcx, 2
  9170 0000621B 4883C104                	add rcx, 4				; num of iterations in rcx
  9171                                  .L_tc_recycle_frame_loop_030d:
  9172 0000621F 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  9173 00006227 488B143C                	mov rdx, [rsp + rdi]
  9174 0000622B 4889541D00              	mov [rbp + rbx], rdx
  9175 00006230 4883EB08                	sub rbx, 8
  9176 00006234 48FFC9                  	dec rcx
  9177 00006237 4883F900                	cmp rcx, 0
  9178 0000623B 75E2                    	jne .L_tc_recycle_frame_loop_030d
  9179 0000623D 4889F3                  	mov rbx, rsi
  9180 00006240 4883EB02                	sub rbx, 2
  9181 00006244 488D1CDD00000000        	lea rbx, [rbx*8]
  9182 0000624C 4801DD                  	add rbp, rbx
  9183 0000624F 4889EC                  	mov rsp, rbp         ; fix stack pointers
  9184 00006252 5D                      	pop rbp
  9185 00006253 41FFE0                  	jmp r8
  9186 00006256 E934020000              	jmp .L_if_end_01ab
  9187                                  .L_if_else_01ab:
  9188                                  	; preparing a non-tail-call
  9189 0000625B 488B4528                	mov rax, PARAM(1)	; param b
  9190 0000625F 50                      	push rax
  9191 00006260 6A01                    	push 1	; arg count
  9192 00006262 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
  9193 0000626A 803805                  	cmp byte [rax], T_undefined
  9194 0000626D 0F84B20D0100            	je L_error_fvar_undefined
  9195 00006273 803804                  	cmp byte [rax], T_closure
  9196 00006276 0F852D0E0100            	jne L_error_non_closure
  9197 0000627C FF7001                  	push SOB_CLOSURE_ENV(rax)
  9198 0000627F FF5009                  	call SOB_CLOSURE_CODE(rax)
  9199 00006282 483D[02000000]          	cmp rax, sob_boolean_false
  9200 00006288 0F84AE000000            	je .L_if_else_01aa
  9201                                  	; preparing a tail-call
  9202 0000628E 488B4528                	mov rax, PARAM(1)	; param b
  9203 00006292 50                      	push rax
  9204                                  	; preparing a non-tail-call
  9205 00006293 488B4520                	mov rax, PARAM(0)	; param a
  9206 00006297 50                      	push rax
  9207 00006298 6A01                    	push 1	; arg count
  9208 0000629A 488B0425[C40F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
  9209 000062A2 803805                  	cmp byte [rax], T_undefined
  9210 000062A5 0F847A0D0100            	je L_error_fvar_undefined
  9211 000062AB 803804                  	cmp byte [rax], T_closure
  9212 000062AE 0F85F50D0100            	jne L_error_non_closure
  9213 000062B4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9214 000062B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9215 000062BA 50                      	push rax
  9216 000062BB 6A02                    	push 2	; arg count
  9217 000062BD 488B0425[700E0000]      	mov rax, qword [free_var_9]	; free var __bin-add-qq
  9218 000062C5 803805                  	cmp byte [rax], T_undefined
  9219 000062C8 0F84570D0100            	je L_error_fvar_undefined
  9220 000062CE 803804                  	cmp byte [rax], T_closure
  9221 000062D1 0F85D20D0100            	jne L_error_non_closure
  9222 000062D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9223 000062DA 4C8B4009                	mov r8, qword [rax + 1 + 8]
  9224 000062DE FF7508                  	push qword [rbp + 8]				; push old return address
  9225 000062E1 FF7500                  	push qword [rbp]					; push old rbp
  9226                                  	;; move stack up ;;
  9227 000062E4 488B5D18                	mov rbx, [rbp + 3*8]
  9228 000062E8 4889DE                  	mov rsi, rbx						; save old size in rsi
  9229 000062EB 4883C303                	add rbx, 3
  9230 000062EF 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  9231 000062F7 B902000000              	mov rcx, 2
  9232 000062FC 4883C104                	add rcx, 4				; num of iterations in rcx
  9233                                  .L_tc_recycle_frame_loop_030e:
  9234 00006300 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  9235 00006308 488B143C                	mov rdx, [rsp + rdi]
  9236 0000630C 4889541D00              	mov [rbp + rbx], rdx
  9237 00006311 4883EB08                	sub rbx, 8
  9238 00006315 48FFC9                  	dec rcx
  9239 00006318 4883F900                	cmp rcx, 0
  9240 0000631C 75E2                    	jne .L_tc_recycle_frame_loop_030e
  9241 0000631E 4889F3                  	mov rbx, rsi
  9242 00006321 4883EB02                	sub rbx, 2
  9243 00006325 488D1CDD00000000        	lea rbx, [rbx*8]
  9244 0000632D 4801DD                  	add rbp, rbx
  9245 00006330 4889EC                  	mov rsp, rbp         ; fix stack pointers
  9246 00006333 5D                      	pop rbp
  9247 00006334 41FFE0                  	jmp r8
  9248 00006337 E953010000              	jmp .L_if_end_01aa
  9249                                  .L_if_else_01aa:
  9250                                  	; preparing a non-tail-call
  9251 0000633C 488B4528                	mov rax, PARAM(1)	; param b
  9252 00006340 50                      	push rax
  9253 00006341 6A01                    	push 1	; arg count
  9254 00006343 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
  9255 0000634B 803805                  	cmp byte [rax], T_undefined
  9256 0000634E 0F84D10C0100            	je L_error_fvar_undefined
  9257 00006354 803804                  	cmp byte [rax], T_closure
  9258 00006357 0F854C0D0100            	jne L_error_non_closure
  9259 0000635D FF7001                  	push SOB_CLOSURE_ENV(rax)
  9260 00006360 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9261 00006363 483D[02000000]          	cmp rax, sob_boolean_false
  9262 00006369 0F84AB000000            	je .L_if_else_01a9
  9263                                  	; preparing a tail-call
  9264 0000636F 488B4528                	mov rax, PARAM(1)	; param b
  9265 00006373 50                      	push rax
  9266                                  	; preparing a non-tail-call
  9267 00006374 488B4520                	mov rax, PARAM(0)	; param a
  9268 00006378 50                      	push rax
  9269 00006379 6A01                    	push 1	; arg count
  9270 0000637B 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
  9271 00006383 803805                  	cmp byte [rax], T_undefined
  9272 00006386 0F84990C0100            	je L_error_fvar_undefined
  9273 0000638C 803804                  	cmp byte [rax], T_closure
  9274 0000638F 0F85140D0100            	jne L_error_non_closure
  9275 00006395 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9276 00006398 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9277 0000639B 50                      	push rax
  9278 0000639C 6A02                    	push 2	; arg count
  9279 0000639E 488B0425[810E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
  9280 000063A6 803805                  	cmp byte [rax], T_undefined
  9281 000063A9 0F84760C0100            	je L_error_fvar_undefined
  9282 000063AF 803804                  	cmp byte [rax], T_closure
  9283 000063B2 0F85F10C0100            	jne L_error_non_closure
  9284 000063B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9285 000063BB 4C8B4009                	mov r8, qword [rax + 1 + 8]
  9286 000063BF FF7508                  	push qword [rbp + 8]				; push old return address
  9287 000063C2 FF7500                  	push qword [rbp]					; push old rbp
  9288                                  	;; move stack up ;;
  9289 000063C5 488B5D18                	mov rbx, [rbp + 3*8]
  9290 000063C9 4889DE                  	mov rsi, rbx						; save old size in rsi
  9291 000063CC 4883C303                	add rbx, 3
  9292 000063D0 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  9293 000063D8 B902000000              	mov rcx, 2
  9294 000063DD 4883C104                	add rcx, 4				; num of iterations in rcx
  9295                                  .L_tc_recycle_frame_loop_030f:
  9296 000063E1 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  9297 000063E9 488B143C                	mov rdx, [rsp + rdi]
  9298 000063ED 4889541D00              	mov [rbp + rbx], rdx
  9299 000063F2 4883EB08                	sub rbx, 8
  9300 000063F6 48FFC9                  	dec rcx
  9301 000063F9 4883F900                	cmp rcx, 0
  9302 000063FD 75E2                    	jne .L_tc_recycle_frame_loop_030f
  9303 000063FF 4889F3                  	mov rbx, rsi
  9304 00006402 4883EB02                	sub rbx, 2
  9305 00006406 488D1CDD00000000        	lea rbx, [rbx*8]
  9306 0000640E 4801DD                  	add rbp, rbx
  9307 00006411 4889EC                  	mov rsp, rbp         ; fix stack pointers
  9308 00006414 5D                      	pop rbp
  9309 00006415 41FFE0                  	jmp r8
  9310 00006418 EB75                    	jmp .L_if_end_01a9
  9311                                  .L_if_else_01a9:
  9312                                  	; preparing a tail-call
  9313 0000641A 6A00                    	push 0	; arg count
  9314 0000641C 488B4510                	mov rax, ENV
  9315 00006420 488B00                  	mov rax, qword [rax + 8 * 0]
  9316 00006423 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9317 00006426 803804                  	cmp byte [rax], T_closure
  9318 00006429 0F857A0C0100            	jne L_error_non_closure
  9319 0000642F FF7001                  	push SOB_CLOSURE_ENV(rax)
  9320 00006432 4C8B4009                	mov r8, qword [rax + 1 + 8]
  9321 00006436 FF7508                  	push qword [rbp + 8]				; push old return address
  9322 00006439 FF7500                  	push qword [rbp]					; push old rbp
  9323                                  	;; move stack up ;;
  9324 0000643C 488B5D18                	mov rbx, [rbp + 3*8]
  9325 00006440 4889DE                  	mov rsi, rbx						; save old size in rsi
  9326 00006443 4883C303                	add rbx, 3
  9327 00006447 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  9328 0000644F B900000000              	mov rcx, 0
  9329 00006454 4883C104                	add rcx, 4				; num of iterations in rcx
  9330                                  .L_tc_recycle_frame_loop_0310:
  9331 00006458 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  9332 00006460 488B143C                	mov rdx, [rsp + rdi]
  9333 00006464 4889541D00              	mov [rbp + rbx], rdx
  9334 00006469 4883EB08                	sub rbx, 8
  9335 0000646D 48FFC9                  	dec rcx
  9336 00006470 4883F900                	cmp rcx, 0
  9337 00006474 75E2                    	jne .L_tc_recycle_frame_loop_0310
  9338 00006476 4889F3                  	mov rbx, rsi
  9339 00006479 4883EB00                	sub rbx, 0
  9340 0000647D 488D1CDD00000000        	lea rbx, [rbx*8]
  9341 00006485 4801DD                  	add rbp, rbx
  9342 00006488 4889EC                  	mov rsp, rbp         ; fix stack pointers
  9343 0000648B 5D                      	pop rbp
  9344 0000648C 41FFE0                  	jmp r8
  9345                                  .L_if_end_01a9:
  9346                                  .L_if_end_01aa:
  9347                                  .L_if_end_01ab:
  9348 0000648F E9C6060000              	jmp .L_if_end_01b4
  9349                                  .L_if_else_01b4:
  9350                                  	; preparing a non-tail-call
  9351 00006494 488B4520                	mov rax, PARAM(0)	; param a
  9352 00006498 50                      	push rax
  9353 00006499 6A01                    	push 1	; arg count
  9354 0000649B 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
  9355 000064A3 803805                  	cmp byte [rax], T_undefined
  9356 000064A6 0F84790B0100            	je L_error_fvar_undefined
  9357 000064AC 803804                  	cmp byte [rax], T_closure
  9358 000064AF 0F85F40B0100            	jne L_error_non_closure
  9359 000064B5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9360 000064B8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9361 000064BB 483D[02000000]          	cmp rax, sob_boolean_false
  9362 000064C1 0F84F7020000            	je .L_if_else_01b3
  9363                                  	; preparing a non-tail-call
  9364 000064C7 488B4528                	mov rax, PARAM(1)	; param b
  9365 000064CB 50                      	push rax
  9366 000064CC 6A01                    	push 1	; arg count
  9367 000064CE 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
  9368 000064D6 803805                  	cmp byte [rax], T_undefined
  9369 000064D9 0F84460B0100            	je L_error_fvar_undefined
  9370 000064DF 803804                  	cmp byte [rax], T_closure
  9371 000064E2 0F85C10B0100            	jne L_error_non_closure
  9372 000064E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9373 000064EB FF5009                  	call SOB_CLOSURE_CODE(rax)
  9374 000064EE 483D[02000000]          	cmp rax, sob_boolean_false
  9375 000064F4 0F84AE000000            	je .L_if_else_01ae
  9376                                  	; preparing a tail-call
  9377                                  	; preparing a non-tail-call
  9378 000064FA 488B4528                	mov rax, PARAM(1)	; param b
  9379 000064FE 50                      	push rax
  9380 000064FF 6A01                    	push 1	; arg count
  9381 00006501 488B0425[B30F0000]      	mov rax, qword [free_var_28]	; free var __bin_integer_to_fraction
  9382 00006509 803805                  	cmp byte [rax], T_undefined
  9383 0000650C 0F84130B0100            	je L_error_fvar_undefined
  9384 00006512 803804                  	cmp byte [rax], T_closure
  9385 00006515 0F858E0B0100            	jne L_error_non_closure
  9386 0000651B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9387 0000651E FF5009                  	call SOB_CLOSURE_CODE(rax)
  9388 00006521 50                      	push rax
  9389 00006522 488B4520                	mov rax, PARAM(0)	; param a
  9390 00006526 50                      	push rax
  9391 00006527 6A02                    	push 2	; arg count
  9392 00006529 488B0425[700E0000]      	mov rax, qword [free_var_9]	; free var __bin-add-qq
  9393 00006531 803805                  	cmp byte [rax], T_undefined
  9394 00006534 0F84EB0A0100            	je L_error_fvar_undefined
  9395 0000653A 803804                  	cmp byte [rax], T_closure
  9396 0000653D 0F85660B0100            	jne L_error_non_closure
  9397 00006543 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9398 00006546 4C8B4009                	mov r8, qword [rax + 1 + 8]
  9399 0000654A FF7508                  	push qword [rbp + 8]				; push old return address
  9400 0000654D FF7500                  	push qword [rbp]					; push old rbp
  9401                                  	;; move stack up ;;
  9402 00006550 488B5D18                	mov rbx, [rbp + 3*8]
  9403 00006554 4889DE                  	mov rsi, rbx						; save old size in rsi
  9404 00006557 4883C303                	add rbx, 3
  9405 0000655B 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  9406 00006563 B902000000              	mov rcx, 2
  9407 00006568 4883C104                	add rcx, 4				; num of iterations in rcx
  9408                                  .L_tc_recycle_frame_loop_0311:
  9409 0000656C 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  9410 00006574 488B143C                	mov rdx, [rsp + rdi]
  9411 00006578 4889541D00              	mov [rbp + rbx], rdx
  9412 0000657D 4883EB08                	sub rbx, 8
  9413 00006581 48FFC9                  	dec rcx
  9414 00006584 4883F900                	cmp rcx, 0
  9415 00006588 75E2                    	jne .L_tc_recycle_frame_loop_0311
  9416 0000658A 4889F3                  	mov rbx, rsi
  9417 0000658D 4883EB02                	sub rbx, 2
  9418 00006591 488D1CDD00000000        	lea rbx, [rbx*8]
  9419 00006599 4801DD                  	add rbp, rbx
  9420 0000659C 4889EC                  	mov rsp, rbp         ; fix stack pointers
  9421 0000659F 5D                      	pop rbp
  9422 000065A0 41FFE0                  	jmp r8
  9423 000065A3 E911020000              	jmp .L_if_end_01ae
  9424                                  .L_if_else_01ae:
  9425                                  	; preparing a non-tail-call
  9426 000065A8 488B4528                	mov rax, PARAM(1)	; param b
  9427 000065AC 50                      	push rax
  9428 000065AD 6A01                    	push 1	; arg count
  9429 000065AF 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
  9430 000065B7 803805                  	cmp byte [rax], T_undefined
  9431 000065BA 0F84650A0100            	je L_error_fvar_undefined
  9432 000065C0 803804                  	cmp byte [rax], T_closure
  9433 000065C3 0F85E00A0100            	jne L_error_non_closure
  9434 000065C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9435 000065CC FF5009                  	call SOB_CLOSURE_CODE(rax)
  9436 000065CF 483D[02000000]          	cmp rax, sob_boolean_false
  9437 000065D5 0F848B000000            	je .L_if_else_01ad
  9438                                  	; preparing a tail-call
  9439 000065DB 488B4528                	mov rax, PARAM(1)	; param b
  9440 000065DF 50                      	push rax
  9441 000065E0 488B4520                	mov rax, PARAM(0)	; param a
  9442 000065E4 50                      	push rax
  9443 000065E5 6A02                    	push 2	; arg count
  9444 000065E7 488B0425[700E0000]      	mov rax, qword [free_var_9]	; free var __bin-add-qq
  9445 000065EF 803805                  	cmp byte [rax], T_undefined
  9446 000065F2 0F842D0A0100            	je L_error_fvar_undefined
  9447 000065F8 803804                  	cmp byte [rax], T_closure
  9448 000065FB 0F85A80A0100            	jne L_error_non_closure
  9449 00006601 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9450 00006604 4C8B4009                	mov r8, qword [rax + 1 + 8]
  9451 00006608 FF7508                  	push qword [rbp + 8]				; push old return address
  9452 0000660B FF7500                  	push qword [rbp]					; push old rbp
  9453                                  	;; move stack up ;;
  9454 0000660E 488B5D18                	mov rbx, [rbp + 3*8]
  9455 00006612 4889DE                  	mov rsi, rbx						; save old size in rsi
  9456 00006615 4883C303                	add rbx, 3
  9457 00006619 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  9458 00006621 B902000000              	mov rcx, 2
  9459 00006626 4883C104                	add rcx, 4				; num of iterations in rcx
  9460                                  .L_tc_recycle_frame_loop_0312:
  9461 0000662A 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  9462 00006632 488B143C                	mov rdx, [rsp + rdi]
  9463 00006636 4889541D00              	mov [rbp + rbx], rdx
  9464 0000663B 4883EB08                	sub rbx, 8
  9465 0000663F 48FFC9                  	dec rcx
  9466 00006642 4883F900                	cmp rcx, 0
  9467 00006646 75E2                    	jne .L_tc_recycle_frame_loop_0312
  9468 00006648 4889F3                  	mov rbx, rsi
  9469 0000664B 4883EB02                	sub rbx, 2
  9470 0000664F 488D1CDD00000000        	lea rbx, [rbx*8]
  9471 00006657 4801DD                  	add rbp, rbx
  9472 0000665A 4889EC                  	mov rsp, rbp         ; fix stack pointers
  9473 0000665D 5D                      	pop rbp
  9474 0000665E 41FFE0                  	jmp r8
  9475 00006661 E953010000              	jmp .L_if_end_01ad
  9476                                  .L_if_else_01ad:
  9477                                  	; preparing a non-tail-call
  9478 00006666 488B4528                	mov rax, PARAM(1)	; param b
  9479 0000666A 50                      	push rax
  9480 0000666B 6A01                    	push 1	; arg count
  9481 0000666D 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
  9482 00006675 803805                  	cmp byte [rax], T_undefined
  9483 00006678 0F84A7090100            	je L_error_fvar_undefined
  9484 0000667E 803804                  	cmp byte [rax], T_closure
  9485 00006681 0F85220A0100            	jne L_error_non_closure
  9486 00006687 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9487 0000668A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9488 0000668D 483D[02000000]          	cmp rax, sob_boolean_false
  9489 00006693 0F84AB000000            	je .L_if_else_01ac
  9490                                  	; preparing a tail-call
  9491 00006699 488B4528                	mov rax, PARAM(1)	; param b
  9492 0000669D 50                      	push rax
  9493                                  	; preparing a non-tail-call
  9494 0000669E 488B4520                	mov rax, PARAM(0)	; param a
  9495 000066A2 50                      	push rax
  9496 000066A3 6A01                    	push 1	; arg count
  9497 000066A5 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
  9498 000066AD 803805                  	cmp byte [rax], T_undefined
  9499 000066B0 0F846F090100            	je L_error_fvar_undefined
  9500 000066B6 803804                  	cmp byte [rax], T_closure
  9501 000066B9 0F85EA090100            	jne L_error_non_closure
  9502 000066BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  9503 000066C2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9504 000066C5 50                      	push rax
  9505 000066C6 6A02                    	push 2	; arg count
  9506 000066C8 488B0425[810E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
  9507 000066D0 803805                  	cmp byte [rax], T_undefined
  9508 000066D3 0F844C090100            	je L_error_fvar_undefined
  9509 000066D9 803804                  	cmp byte [rax], T_closure
  9510 000066DC 0F85C7090100            	jne L_error_non_closure
  9511 000066E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9512 000066E5 4C8B4009                	mov r8, qword [rax + 1 + 8]
  9513 000066E9 FF7508                  	push qword [rbp + 8]				; push old return address
  9514 000066EC FF7500                  	push qword [rbp]					; push old rbp
  9515                                  	;; move stack up ;;
  9516 000066EF 488B5D18                	mov rbx, [rbp + 3*8]
  9517 000066F3 4889DE                  	mov rsi, rbx						; save old size in rsi
  9518 000066F6 4883C303                	add rbx, 3
  9519 000066FA 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  9520 00006702 B902000000              	mov rcx, 2
  9521 00006707 4883C104                	add rcx, 4				; num of iterations in rcx
  9522                                  .L_tc_recycle_frame_loop_0313:
  9523 0000670B 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  9524 00006713 488B143C                	mov rdx, [rsp + rdi]
  9525 00006717 4889541D00              	mov [rbp + rbx], rdx
  9526 0000671C 4883EB08                	sub rbx, 8
  9527 00006720 48FFC9                  	dec rcx
  9528 00006723 4883F900                	cmp rcx, 0
  9529 00006727 75E2                    	jne .L_tc_recycle_frame_loop_0313
  9530 00006729 4889F3                  	mov rbx, rsi
  9531 0000672C 4883EB02                	sub rbx, 2
  9532 00006730 488D1CDD00000000        	lea rbx, [rbx*8]
  9533 00006738 4801DD                  	add rbp, rbx
  9534 0000673B 4889EC                  	mov rsp, rbp         ; fix stack pointers
  9535 0000673E 5D                      	pop rbp
  9536 0000673F 41FFE0                  	jmp r8
  9537 00006742 EB75                    	jmp .L_if_end_01ac
  9538                                  .L_if_else_01ac:
  9539                                  	; preparing a tail-call
  9540 00006744 6A00                    	push 0	; arg count
  9541 00006746 488B4510                	mov rax, ENV
  9542 0000674A 488B00                  	mov rax, qword [rax + 8 * 0]
  9543 0000674D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9544 00006750 803804                  	cmp byte [rax], T_closure
  9545 00006753 0F8550090100            	jne L_error_non_closure
  9546 00006759 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9547 0000675C 4C8B4009                	mov r8, qword [rax + 1 + 8]
  9548 00006760 FF7508                  	push qword [rbp + 8]				; push old return address
  9549 00006763 FF7500                  	push qword [rbp]					; push old rbp
  9550                                  	;; move stack up ;;
  9551 00006766 488B5D18                	mov rbx, [rbp + 3*8]
  9552 0000676A 4889DE                  	mov rsi, rbx						; save old size in rsi
  9553 0000676D 4883C303                	add rbx, 3
  9554 00006771 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  9555 00006779 B900000000              	mov rcx, 0
  9556 0000677E 4883C104                	add rcx, 4				; num of iterations in rcx
  9557                                  .L_tc_recycle_frame_loop_0314:
  9558 00006782 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  9559 0000678A 488B143C                	mov rdx, [rsp + rdi]
  9560 0000678E 4889541D00              	mov [rbp + rbx], rdx
  9561 00006793 4883EB08                	sub rbx, 8
  9562 00006797 48FFC9                  	dec rcx
  9563 0000679A 4883F900                	cmp rcx, 0
  9564 0000679E 75E2                    	jne .L_tc_recycle_frame_loop_0314
  9565 000067A0 4889F3                  	mov rbx, rsi
  9566 000067A3 4883EB00                	sub rbx, 0
  9567 000067A7 488D1CDD00000000        	lea rbx, [rbx*8]
  9568 000067AF 4801DD                  	add rbp, rbx
  9569 000067B2 4889EC                  	mov rsp, rbp         ; fix stack pointers
  9570 000067B5 5D                      	pop rbp
  9571 000067B6 41FFE0                  	jmp r8
  9572                                  .L_if_end_01ac:
  9573                                  .L_if_end_01ad:
  9574                                  .L_if_end_01ae:
  9575 000067B9 E99C030000              	jmp .L_if_end_01b3
  9576                                  .L_if_else_01b3:
  9577                                  	; preparing a non-tail-call
  9578 000067BE 488B4520                	mov rax, PARAM(0)	; param a
  9579 000067C2 50                      	push rax
  9580 000067C3 6A01                    	push 1	; arg count
  9581 000067C5 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
  9582 000067CD 803805                  	cmp byte [rax], T_undefined
  9583 000067D0 0F844F080100            	je L_error_fvar_undefined
  9584 000067D6 803804                  	cmp byte [rax], T_closure
  9585 000067D9 0F85CA080100            	jne L_error_non_closure
  9586 000067DF FF7001                  	push SOB_CLOSURE_ENV(rax)
  9587 000067E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9588 000067E5 483D[02000000]          	cmp rax, sob_boolean_false
  9589 000067EB 0F84F4020000            	je .L_if_else_01b2
  9590                                  	; preparing a non-tail-call
  9591 000067F1 488B4528                	mov rax, PARAM(1)	; param b
  9592 000067F5 50                      	push rax
  9593 000067F6 6A01                    	push 1	; arg count
  9594 000067F8 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
  9595 00006800 803805                  	cmp byte [rax], T_undefined
  9596 00006803 0F841C080100            	je L_error_fvar_undefined
  9597 00006809 803804                  	cmp byte [rax], T_closure
  9598 0000680C 0F8597080100            	jne L_error_non_closure
  9599 00006812 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9600 00006815 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9601 00006818 483D[02000000]          	cmp rax, sob_boolean_false
  9602 0000681E 0F84AE000000            	je .L_if_else_01b1
  9603                                  	; preparing a tail-call
  9604                                  	; preparing a non-tail-call
  9605 00006824 488B4528                	mov rax, PARAM(1)	; param b
  9606 00006828 50                      	push rax
  9607 00006829 6A01                    	push 1	; arg count
  9608 0000682B 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
  9609 00006833 803805                  	cmp byte [rax], T_undefined
  9610 00006836 0F84E9070100            	je L_error_fvar_undefined
  9611 0000683C 803804                  	cmp byte [rax], T_closure
  9612 0000683F 0F8564080100            	jne L_error_non_closure
  9613 00006845 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9614 00006848 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9615 0000684B 50                      	push rax
  9616 0000684C 488B4520                	mov rax, PARAM(0)	; param a
  9617 00006850 50                      	push rax
  9618 00006851 6A02                    	push 2	; arg count
  9619 00006853 488B0425[810E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
  9620 0000685B 803805                  	cmp byte [rax], T_undefined
  9621 0000685E 0F84C1070100            	je L_error_fvar_undefined
  9622 00006864 803804                  	cmp byte [rax], T_closure
  9623 00006867 0F853C080100            	jne L_error_non_closure
  9624 0000686D FF7001                  	push SOB_CLOSURE_ENV(rax)
  9625 00006870 4C8B4009                	mov r8, qword [rax + 1 + 8]
  9626 00006874 FF7508                  	push qword [rbp + 8]				; push old return address
  9627 00006877 FF7500                  	push qword [rbp]					; push old rbp
  9628                                  	;; move stack up ;;
  9629 0000687A 488B5D18                	mov rbx, [rbp + 3*8]
  9630 0000687E 4889DE                  	mov rsi, rbx						; save old size in rsi
  9631 00006881 4883C303                	add rbx, 3
  9632 00006885 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  9633 0000688D B902000000              	mov rcx, 2
  9634 00006892 4883C104                	add rcx, 4				; num of iterations in rcx
  9635                                  .L_tc_recycle_frame_loop_0315:
  9636 00006896 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  9637 0000689E 488B143C                	mov rdx, [rsp + rdi]
  9638 000068A2 4889541D00              	mov [rbp + rbx], rdx
  9639 000068A7 4883EB08                	sub rbx, 8
  9640 000068AB 48FFC9                  	dec rcx
  9641 000068AE 4883F900                	cmp rcx, 0
  9642 000068B2 75E2                    	jne .L_tc_recycle_frame_loop_0315
  9643 000068B4 4889F3                  	mov rbx, rsi
  9644 000068B7 4883EB02                	sub rbx, 2
  9645 000068BB 488D1CDD00000000        	lea rbx, [rbx*8]
  9646 000068C3 4801DD                  	add rbp, rbx
  9647 000068C6 4889EC                  	mov rsp, rbp         ; fix stack pointers
  9648 000068C9 5D                      	pop rbp
  9649 000068CA 41FFE0                  	jmp r8
  9650 000068CD E911020000              	jmp .L_if_end_01b1
  9651                                  .L_if_else_01b1:
  9652                                  	; preparing a non-tail-call
  9653 000068D2 488B4528                	mov rax, PARAM(1)	; param b
  9654 000068D6 50                      	push rax
  9655 000068D7 6A01                    	push 1	; arg count
  9656 000068D9 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
  9657 000068E1 803805                  	cmp byte [rax], T_undefined
  9658 000068E4 0F843B070100            	je L_error_fvar_undefined
  9659 000068EA 803804                  	cmp byte [rax], T_closure
  9660 000068ED 0F85B6070100            	jne L_error_non_closure
  9661 000068F3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9662 000068F6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9663 000068F9 483D[02000000]          	cmp rax, sob_boolean_false
  9664 000068FF 0F84AE000000            	je .L_if_else_01b0
  9665                                  	; preparing a tail-call
  9666                                  	; preparing a non-tail-call
  9667 00006905 488B4528                	mov rax, PARAM(1)	; param b
  9668 00006909 50                      	push rax
  9669 0000690A 6A01                    	push 1	; arg count
  9670 0000690C 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
  9671 00006914 803805                  	cmp byte [rax], T_undefined
  9672 00006917 0F8408070100            	je L_error_fvar_undefined
  9673 0000691D 803804                  	cmp byte [rax], T_closure
  9674 00006920 0F8583070100            	jne L_error_non_closure
  9675 00006926 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9676 00006929 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9677 0000692C 50                      	push rax
  9678 0000692D 488B4520                	mov rax, PARAM(0)	; param a
  9679 00006931 50                      	push rax
  9680 00006932 6A02                    	push 2	; arg count
  9681 00006934 488B0425[810E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
  9682 0000693C 803805                  	cmp byte [rax], T_undefined
  9683 0000693F 0F84E0060100            	je L_error_fvar_undefined
  9684 00006945 803804                  	cmp byte [rax], T_closure
  9685 00006948 0F855B070100            	jne L_error_non_closure
  9686 0000694E FF7001                  	push SOB_CLOSURE_ENV(rax)
  9687 00006951 4C8B4009                	mov r8, qword [rax + 1 + 8]
  9688 00006955 FF7508                  	push qword [rbp + 8]				; push old return address
  9689 00006958 FF7500                  	push qword [rbp]					; push old rbp
  9690                                  	;; move stack up ;;
  9691 0000695B 488B5D18                	mov rbx, [rbp + 3*8]
  9692 0000695F 4889DE                  	mov rsi, rbx						; save old size in rsi
  9693 00006962 4883C303                	add rbx, 3
  9694 00006966 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  9695 0000696E B902000000              	mov rcx, 2
  9696 00006973 4883C104                	add rcx, 4				; num of iterations in rcx
  9697                                  .L_tc_recycle_frame_loop_0316:
  9698 00006977 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  9699 0000697F 488B143C                	mov rdx, [rsp + rdi]
  9700 00006983 4889541D00              	mov [rbp + rbx], rdx
  9701 00006988 4883EB08                	sub rbx, 8
  9702 0000698C 48FFC9                  	dec rcx
  9703 0000698F 4883F900                	cmp rcx, 0
  9704 00006993 75E2                    	jne .L_tc_recycle_frame_loop_0316
  9705 00006995 4889F3                  	mov rbx, rsi
  9706 00006998 4883EB02                	sub rbx, 2
  9707 0000699C 488D1CDD00000000        	lea rbx, [rbx*8]
  9708 000069A4 4801DD                  	add rbp, rbx
  9709 000069A7 4889EC                  	mov rsp, rbp         ; fix stack pointers
  9710 000069AA 5D                      	pop rbp
  9711 000069AB 41FFE0                  	jmp r8
  9712 000069AE E930010000              	jmp .L_if_end_01b0
  9713                                  .L_if_else_01b0:
  9714                                  	; preparing a non-tail-call
  9715 000069B3 488B4528                	mov rax, PARAM(1)	; param b
  9716 000069B7 50                      	push rax
  9717 000069B8 6A01                    	push 1	; arg count
  9718 000069BA 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
  9719 000069C2 803805                  	cmp byte [rax], T_undefined
  9720 000069C5 0F845A060100            	je L_error_fvar_undefined
  9721 000069CB 803804                  	cmp byte [rax], T_closure
  9722 000069CE 0F85D5060100            	jne L_error_non_closure
  9723 000069D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9724 000069D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9725 000069DA 483D[02000000]          	cmp rax, sob_boolean_false
  9726 000069E0 0F8488000000            	je .L_if_else_01af
  9727                                  	; preparing a tail-call
  9728 000069E6 488B4528                	mov rax, PARAM(1)	; param b
  9729 000069EA 50                      	push rax
  9730 000069EB 488B4520                	mov rax, PARAM(0)	; param a
  9731 000069EF 50                      	push rax
  9732 000069F0 6A02                    	push 2	; arg count
  9733 000069F2 488B0425[810E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
  9734 000069FA 803805                  	cmp byte [rax], T_undefined
  9735 000069FD 0F8422060100            	je L_error_fvar_undefined
  9736 00006A03 803804                  	cmp byte [rax], T_closure
  9737 00006A06 0F859D060100            	jne L_error_non_closure
  9738 00006A0C FF7001                  	push SOB_CLOSURE_ENV(rax)
  9739 00006A0F 4C8B4009                	mov r8, qword [rax + 1 + 8]
  9740 00006A13 FF7508                  	push qword [rbp + 8]				; push old return address
  9741 00006A16 FF7500                  	push qword [rbp]					; push old rbp
  9742                                  	;; move stack up ;;
  9743 00006A19 488B5D18                	mov rbx, [rbp + 3*8]
  9744 00006A1D 4889DE                  	mov rsi, rbx						; save old size in rsi
  9745 00006A20 4883C303                	add rbx, 3
  9746 00006A24 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  9747 00006A2C B902000000              	mov rcx, 2
  9748 00006A31 4883C104                	add rcx, 4				; num of iterations in rcx
  9749                                  .L_tc_recycle_frame_loop_0317:
  9750 00006A35 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  9751 00006A3D 488B143C                	mov rdx, [rsp + rdi]
  9752 00006A41 4889541D00              	mov [rbp + rbx], rdx
  9753 00006A46 4883EB08                	sub rbx, 8
  9754 00006A4A 48FFC9                  	dec rcx
  9755 00006A4D 4883F900                	cmp rcx, 0
  9756 00006A51 75E2                    	jne .L_tc_recycle_frame_loop_0317
  9757 00006A53 4889F3                  	mov rbx, rsi
  9758 00006A56 4883EB02                	sub rbx, 2
  9759 00006A5A 488D1CDD00000000        	lea rbx, [rbx*8]
  9760 00006A62 4801DD                  	add rbp, rbx
  9761 00006A65 4889EC                  	mov rsp, rbp         ; fix stack pointers
  9762 00006A68 5D                      	pop rbp
  9763 00006A69 41FFE0                  	jmp r8
  9764 00006A6C EB75                    	jmp .L_if_end_01af
  9765                                  .L_if_else_01af:
  9766                                  	; preparing a tail-call
  9767 00006A6E 6A00                    	push 0	; arg count
  9768 00006A70 488B4510                	mov rax, ENV
  9769 00006A74 488B00                  	mov rax, qword [rax + 8 * 0]
  9770 00006A77 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9771 00006A7A 803804                  	cmp byte [rax], T_closure
  9772 00006A7D 0F8526060100            	jne L_error_non_closure
  9773 00006A83 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9774 00006A86 4C8B4009                	mov r8, qword [rax + 1 + 8]
  9775 00006A8A FF7508                  	push qword [rbp + 8]				; push old return address
  9776 00006A8D FF7500                  	push qword [rbp]					; push old rbp
  9777                                  	;; move stack up ;;
  9778 00006A90 488B5D18                	mov rbx, [rbp + 3*8]
  9779 00006A94 4889DE                  	mov rsi, rbx						; save old size in rsi
  9780 00006A97 4883C303                	add rbx, 3
  9781 00006A9B 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  9782 00006AA3 B900000000              	mov rcx, 0
  9783 00006AA8 4883C104                	add rcx, 4				; num of iterations in rcx
  9784                                  .L_tc_recycle_frame_loop_0318:
  9785 00006AAC 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  9786 00006AB4 488B143C                	mov rdx, [rsp + rdi]
  9787 00006AB8 4889541D00              	mov [rbp + rbx], rdx
  9788 00006ABD 4883EB08                	sub rbx, 8
  9789 00006AC1 48FFC9                  	dec rcx
  9790 00006AC4 4883F900                	cmp rcx, 0
  9791 00006AC8 75E2                    	jne .L_tc_recycle_frame_loop_0318
  9792 00006ACA 4889F3                  	mov rbx, rsi
  9793 00006ACD 4883EB00                	sub rbx, 0
  9794 00006AD1 488D1CDD00000000        	lea rbx, [rbx*8]
  9795 00006AD9 4801DD                  	add rbp, rbx
  9796 00006ADC 4889EC                  	mov rsp, rbp         ; fix stack pointers
  9797 00006ADF 5D                      	pop rbp
  9798 00006AE0 41FFE0                  	jmp r8
  9799                                  .L_if_end_01af:
  9800                                  .L_if_end_01b0:
  9801                                  .L_if_end_01b1:
  9802 00006AE3 EB75                    	jmp .L_if_end_01b2
  9803                                  .L_if_else_01b2:
  9804                                  	; preparing a tail-call
  9805 00006AE5 6A00                    	push 0	; arg count
  9806 00006AE7 488B4510                	mov rax, ENV
  9807 00006AEB 488B00                  	mov rax, qword [rax + 8 * 0]
  9808 00006AEE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9809 00006AF1 803804                  	cmp byte [rax], T_closure
  9810 00006AF4 0F85AF050100            	jne L_error_non_closure
  9811 00006AFA FF7001                  	push SOB_CLOSURE_ENV(rax)
  9812 00006AFD 4C8B4009                	mov r8, qword [rax + 1 + 8]
  9813 00006B01 FF7508                  	push qword [rbp + 8]				; push old return address
  9814 00006B04 FF7500                  	push qword [rbp]					; push old rbp
  9815                                  	;; move stack up ;;
  9816 00006B07 488B5D18                	mov rbx, [rbp + 3*8]
  9817 00006B0B 4889DE                  	mov rsi, rbx						; save old size in rsi
  9818 00006B0E 4883C303                	add rbx, 3
  9819 00006B12 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
  9820 00006B1A B900000000              	mov rcx, 0
  9821 00006B1F 4883C104                	add rcx, 4				; num of iterations in rcx
  9822                                  .L_tc_recycle_frame_loop_0319:
  9823 00006B23 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
  9824 00006B2B 488B143C                	mov rdx, [rsp + rdi]
  9825 00006B2F 4889541D00              	mov [rbp + rbx], rdx
  9826 00006B34 4883EB08                	sub rbx, 8
  9827 00006B38 48FFC9                  	dec rcx
  9828 00006B3B 4883F900                	cmp rcx, 0
  9829 00006B3F 75E2                    	jne .L_tc_recycle_frame_loop_0319
  9830 00006B41 4889F3                  	mov rbx, rsi
  9831 00006B44 4883EB00                	sub rbx, 0
  9832 00006B48 488D1CDD00000000        	lea rbx, [rbx*8]
  9833 00006B50 4801DD                  	add rbp, rbx
  9834 00006B53 4889EC                  	mov rsp, rbp         ; fix stack pointers
  9835 00006B56 5D                      	pop rbp
  9836 00006B57 41FFE0                  	jmp r8
  9837                                  .L_if_end_01b2:
  9838                                  .L_if_end_01b3:
  9839                                  .L_if_end_01b4:
  9840 00006B5A C9                      	leave
  9841 00006B5B C22000                  	ret AND_KILL_FRAME(2)
  9842                                  .L_lambda_simple_end_0264:	; new closure is in rax
  9843 00006B5E 50                      	push rax
  9844 00006B5F 6A01                    	push 1	; arg count
  9845 00006B61 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9846 00006B66 E8E7050100              	call malloc
  9847 00006B6B 50                      	push rax
  9848 00006B6C BF08000000              	mov rdi, 8 * 1	; new rib
  9849 00006B71 E8DC050100              	call malloc
  9850 00006B76 50                      	push rax
  9851 00006B77 BF10000000              	mov rdi, 8 * 2	; extended env
  9852 00006B7C E8D1050100              	call malloc
  9853 00006B81 488B7D10                	mov rdi, ENV
  9854 00006B85 BE00000000              	mov rsi, 0
  9855 00006B8A BA01000000              	mov rdx, 1
  9856                                  .L_lambda_simple_env_loop_0265:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  9857 00006B8F 4883FE01                	cmp rsi, 1
  9858 00006B93 7410                    	je .L_lambda_simple_env_end_0265
  9859 00006B95 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9860 00006B99 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9861 00006B9D 48FFC6                  	inc rsi
  9862 00006BA0 48FFC2                  	inc rdx
  9863 00006BA3 EBEA                    	jmp .L_lambda_simple_env_loop_0265
  9864                                  .L_lambda_simple_env_end_0265:
  9865 00006BA5 5B                      	pop rbx
  9866 00006BA6 BE00000000              	mov rsi, 0
  9867                                  .L_lambda_simple_params_loop_0265:	; copy params
  9868 00006BAB 4883FE01                	cmp rsi, 1
  9869 00006BAF 740E                    	je .L_lambda_simple_params_end_0265
  9870 00006BB1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9871 00006BB6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9872 00006BBA 48FFC6                  	inc rsi
  9873 00006BBD EBEC                    	jmp .L_lambda_simple_params_loop_0265
  9874                                  .L_lambda_simple_params_end_0265:
  9875 00006BBF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  9876 00006BC2 4889C3                  	mov rbx, rax
  9877 00006BC5 58                      	pop rax
  9878 00006BC6 C60004                  	mov byte [rax], T_closure
  9879 00006BC9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9880 00006BCD 48C74009[DA6B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0265
  9881 00006BD5 E90D020000              	jmp .L_lambda_simple_end_0265
  9882                                  .L_lambda_simple_code_0265:	; lambda-simple body
  9883 00006BDA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9884 00006BE0 740B                    	je .L_lambda_simple_arity_check_ok_0265
  9885 00006BE2 FF742410                	push qword [rsp + 8 * 2]
  9886 00006BE6 6A01                    	push 1
  9887 00006BE8 E91E050100              	jmp L_error_incorrect_arity_simple
  9888                                  .L_lambda_simple_arity_check_ok_0265:
  9889 00006BED C8000000                	enter 0, 0
  9890 00006BF1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9891 00006BF6 E857050100              	call malloc
  9892 00006BFB 50                      	push rax
  9893 00006BFC BF08000000              	mov rdi, 8 * 1	; new rib
  9894 00006C01 E84C050100              	call malloc
  9895 00006C06 50                      	push rax
  9896 00006C07 BF18000000              	mov rdi, 8 * 3	; extended env
  9897 00006C0C E841050100              	call malloc
  9898 00006C11 488B7D10                	mov rdi, ENV
  9899 00006C15 BE00000000              	mov rsi, 0
  9900 00006C1A BA01000000              	mov rdx, 1
  9901                                  .L_lambda_opt_env_loop_0052:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
  9902 00006C1F 4883FE02                	cmp rsi, 2
  9903 00006C23 7410                    	je .L_lambda_opt_env_end_0052
  9904 00006C25 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9905 00006C29 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9906 00006C2D 48FFC6                  	inc rsi
  9907 00006C30 48FFC2                  	inc rdx
  9908 00006C33 EBEA                    	jmp .L_lambda_opt_env_loop_0052
  9909                                  .L_lambda_opt_env_end_0052:
  9910 00006C35 5B                      	pop rbx
  9911 00006C36 BE00000000              	mov rsi, 0
  9912                                  .L_lambda_opt_params_loop_0052:	; copy params
  9913 00006C3B 4883FE01                	cmp rsi, 1
  9914 00006C3F 740E                    	je .L_lambda_opt_params_end_0052
  9915 00006C41 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9916 00006C46 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9917 00006C4A 48FFC6                  	inc rsi
  9918 00006C4D EBEC                    	jmp .L_lambda_opt_params_loop_0052
  9919                                  .L_lambda_opt_params_end_0052:
  9920 00006C4F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
  9921 00006C52 4889C3                  	mov rbx, rax
  9922 00006C55 58                      	pop rax
  9923 00006C56 C60004                  	mov byte [rax], T_closure
  9924 00006C59 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9925 00006C5D 48C74009[6A6C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0052
  9926 00006C65 E979010000              	jmp .L_lambda_opt_end_0052
  9927                                  .L_lambda_opt_code_0052:	; lambda-opt body
  9928 00006C6A 48837C241000            	cmp qword [rsp + 8 * 2], 0
  9929 00006C70 740D                    	je .L_lambda_opt_arity_check_exact_0052
  9930 00006C72 7F48                    	jg .L_lambda_opt_arity_check_more_0052
  9931 00006C74 FF742410                	push qword [rsp + 8 * 2]
  9932 00006C78 6A00                    	push 0
  9933 00006C7A E9A0040100              	jmp L_error_incorrect_arity_opt
  9934                                  .L_lambda_opt_arity_check_exact_0052:
  9935 00006C7F 48C744241001000000      	mov qword [rsp + 8 * 2], 1	; Update argument count (fixed params + 1 for nil)
  9936 00006C88 41BA03000000            	mov r10, 3	; r10 = total addresses to adjust (fixed params + 3)
  9937 00006C8E FF3424                  	push qword [rsp]	; Save the top stack element
  9938 00006C91 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
  9939                                  .L_lambda_opt_stack_shrink_loop_00f4:
  9940 00006C97 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
  9941 00006C9A 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_00f4	; Exit loop if all elements processed
  9942 00006C9C 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
  9943 00006CA1 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
  9944 00006CA5 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
  9945 00006CAA 49FFC3                  	inc r11	; Increment loop index
  9946 00006CAD EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_00f4	; Jump back to loop start
  9947                                  .L_lambda_opt_stack_shrink_loop_exit_00f4:
  9948 00006CAF 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
  9949 00006CB7 E988000000              	jmp .L_lambda_opt_stack_adjusted_0052
  9950                                  .L_lambda_opt_arity_check_more_0052:
  9951 00006CBC 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
  9952 00006CC1 4983E800                	sub r8, 0	; r8 = count of optional params
  9953 00006CC5 48C744241001000000      	mov qword [rsp + 8 * 2], 1	; Update the number of params (fixed params + 1 for list opt)
  9954 00006CCE 41B900000000            	mov r9, 0	; r9 = index of optional argument list
  9955 00006CD4 4E8D54C410              	lea r10, [rsp + 2 * 8 + 0 * 8 + r8 * 8]	; r10 = address of first optional param
  9956 00006CD9 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
  9956 00006CDB [0100000000000000] 
  9957                                  .L_lambda_opt_stack_shrink_loop_00f5:
  9958 00006CE3 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
  9959 00006CE6 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_00f5	; Exit loop if all optional params are processed
  9960 00006CE8 BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
  9961 00006CED E860040100              	call malloc	; Allocate memory for a new pair
  9962 00006CF2 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
  9963 00006CF6 49F7D9                  	neg r9	; Negate index to access in reverse
  9964 00006CF9 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
  9965 00006CFD 49F7D9                  	neg r9	; Negate index back
  9966 00006D00 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
  9967 00006D04 C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
  9968 00006D07 4989C3                  	mov r11, rax	; Update current pair to the newly created one
  9969 00006D0A 49FFC1                  	inc r9	; Increment the index
  9970 00006D0D EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_00f5	; Repeat the loop for the next param
  9971                                  .L_lambda_opt_stack_shrink_loop_exit_00f5:
  9972 00006D0F 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
  9973 00006D12 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
  9974 00006D16 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
  9975 00006D19 4983C410                	add r12, 16	; Skip fixed params and return address
  9976 00006D1D 41BD03000000            	mov r13, 3	; r13 = loop counter (number of params, old fp, ret addr, lex env)
  9977                                  .L_lambda_opt_stack_shrink_loop_00f6:
  9978 00006D23 4983FD00                	cmp r13, 0	; Check if there are more values to copy
  9979 00006D27 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_00f6	; Exit loop if all values are copied
  9980 00006D29 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
  9981 00006D2D 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
  9982 00006D30 49FFCD                  	dec r13	; Decrement the loop counter
  9983 00006D33 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
  9984 00006D37 4983EC08                	sub r12, 8	; Move the source pointer to the next location
  9985 00006D3B EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_00f6	; Repeat the loop for the next value
  9986                                  .L_lambda_opt_stack_shrink_loop_exit_00f6:
  9987 00006D3D 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
  9988 00006D41 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
  9989                                  .L_lambda_opt_stack_adjusted_0052:
  9990 00006D44 C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
  9991                                  	; preparing a tail-call
  9992 00006D48 488B4520                	mov rax, PARAM(0)	; param s
  9993 00006D4C 50                      	push rax
  9994 00006D4D 48B8-                   	mov rax, L_constants + 2135
  9994 00006D4F [5708000000000000] 
  9995 00006D57 50                      	push rax
  9996 00006D58 488B4510                	mov rax, ENV
  9997 00006D5C 488B00                  	mov rax, qword [rax + 8 * 0]
  9998 00006D5F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin+
  9999 00006D62 50                      	push rax
 10000 00006D63 6A03                    	push 3	; arg count
 10001 00006D65 488B0425[7C130000]      	mov rax, qword [free_var_85]	; free var fold-left
 10002 00006D6D 803805                  	cmp byte [rax], T_undefined
 10003 00006D70 0F84AF020100            	je L_error_fvar_undefined
 10004 00006D76 803804                  	cmp byte [rax], T_closure
 10005 00006D79 0F852A030100            	jne L_error_non_closure
 10006 00006D7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10007 00006D82 4C8B4009                	mov r8, qword [rax + 1 + 8]
 10008 00006D86 FF7508                  	push qword [rbp + 8]				; push old return address
 10009 00006D89 FF7500                  	push qword [rbp]					; push old rbp
 10010                                  	;; move stack up ;;
 10011 00006D8C 488B5D18                	mov rbx, [rbp + 3*8]
 10012 00006D90 4889DE                  	mov rsi, rbx						; save old size in rsi
 10013 00006D93 4883C303                	add rbx, 3
 10014 00006D97 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 10015 00006D9F B903000000              	mov rcx, 3
 10016 00006DA4 4883C104                	add rcx, 4				; num of iterations in rcx
 10017                                  .L_tc_recycle_frame_loop_031a:
 10018 00006DA8 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 10019 00006DB0 488B143C                	mov rdx, [rsp + rdi]
 10020 00006DB4 4889541D00              	mov [rbp + rbx], rdx
 10021 00006DB9 4883EB08                	sub rbx, 8
 10022 00006DBD 48FFC9                  	dec rcx
 10023 00006DC0 4883F900                	cmp rcx, 0
 10024 00006DC4 75E2                    	jne .L_tc_recycle_frame_loop_031a
 10025 00006DC6 4889F3                  	mov rbx, rsi
 10026 00006DC9 4883EB03                	sub rbx, 3
 10027 00006DCD 488D1CDD00000000        	lea rbx, [rbx*8]
 10028 00006DD5 4801DD                  	add rbp, rbx
 10029 00006DD8 4889EC                  	mov rsp, rbp         ; fix stack pointers
 10030 00006DDB 5D                      	pop rbp
 10031 00006DDC 41FFE0                  	jmp r8
 10032 00006DDF C9                      	leave	; Restore the previous stack frame
 10033 00006DE0 C21800                  	ret AND_KILL_FRAME(1)
 10034                                  .L_lambda_opt_end_0052:	; new closure is in rax
 10035 00006DE3 C9                      	leave
 10036 00006DE4 C21800                  	ret AND_KILL_FRAME(1)
 10037                                  .L_lambda_simple_end_0265:	; new closure is in rax
 10038 00006DE7 803804                  	cmp byte [rax], T_closure
 10039 00006DEA 0F85B9020100            	jne L_error_non_closure
 10040 00006DF0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10041 00006DF3 4C8B4009                	mov r8, qword [rax + 1 + 8]
 10042 00006DF7 FF7508                  	push qword [rbp + 8]				; push old return address
 10043 00006DFA FF7500                  	push qword [rbp]					; push old rbp
 10044                                  	;; move stack up ;;
 10045 00006DFD 488B5D18                	mov rbx, [rbp + 3*8]
 10046 00006E01 4889DE                  	mov rsi, rbx						; save old size in rsi
 10047 00006E04 4883C303                	add rbx, 3
 10048 00006E08 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 10049 00006E10 B901000000              	mov rcx, 1
 10050 00006E15 4883C104                	add rcx, 4				; num of iterations in rcx
 10051                                  .L_tc_recycle_frame_loop_030c:
 10052 00006E19 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 10053 00006E21 488B143C                	mov rdx, [rsp + rdi]
 10054 00006E25 4889541D00              	mov [rbp + rbx], rdx
 10055 00006E2A 4883EB08                	sub rbx, 8
 10056 00006E2E 48FFC9                  	dec rcx
 10057 00006E31 4883F900                	cmp rcx, 0
 10058 00006E35 75E2                    	jne .L_tc_recycle_frame_loop_030c
 10059 00006E37 4889F3                  	mov rbx, rsi
 10060 00006E3A 4883EB01                	sub rbx, 1
 10061 00006E3E 488D1CDD00000000        	lea rbx, [rbx*8]
 10062 00006E46 4801DD                  	add rbp, rbx
 10063 00006E49 4889EC                  	mov rsp, rbp         ; fix stack pointers
 10064 00006E4C 5D                      	pop rbp
 10065 00006E4D 41FFE0                  	jmp r8
 10066 00006E50 C9                      	leave
 10067 00006E51 C21800                  	ret AND_KILL_FRAME(1)
 10068                                  .L_lambda_simple_end_0263:	; new closure is in rax
 10069 00006E54 803804                  	cmp byte [rax], T_closure
 10070 00006E57 0F854C020100            	jne L_error_non_closure
 10071 00006E5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10072 00006E60 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10073 00006E63 48890425[E80D0000]      	mov qword [free_var_1], rax
 10074 00006E6B 48B8-                   	mov rax, sob_void
 10074 00006E6D [0000000000000000] 
 10075                                  
 10076 00006E75 4889C7                  	mov rdi, rax
 10077 00006E78 E82A050100              	call print_sexpr_if_not_void
 10078                                  	; preparing a non-tail-call
 10079 00006E7D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10080 00006E82 E8CB020100              	call malloc
 10081 00006E87 50                      	push rax
 10082 00006E88 BF00000000              	mov rdi, 8 * 0	; new rib
 10083 00006E8D E8C0020100              	call malloc
 10084 00006E92 50                      	push rax
 10085 00006E93 BF08000000              	mov rdi, 8 * 1	; extended env
 10086 00006E98 E8B5020100              	call malloc
 10087 00006E9D 488B7D10                	mov rdi, ENV
 10088 00006EA1 BE00000000              	mov rsi, 0
 10089 00006EA6 BA01000000              	mov rdx, 1
 10090                                  .L_lambda_simple_env_loop_0266:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 10091 00006EAB 4883FE00                	cmp rsi, 0
 10092 00006EAF 7410                    	je .L_lambda_simple_env_end_0266
 10093 00006EB1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10094 00006EB5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10095 00006EB9 48FFC6                  	inc rsi
 10096 00006EBC 48FFC2                  	inc rdx
 10097 00006EBF EBEA                    	jmp .L_lambda_simple_env_loop_0266
 10098                                  .L_lambda_simple_env_end_0266:
 10099 00006EC1 5B                      	pop rbx
 10100 00006EC2 BE00000000              	mov rsi, 0
 10101                                  .L_lambda_simple_params_loop_0266:	; copy params
 10102 00006EC7 4883FE00                	cmp rsi, 0
 10103 00006ECB 740E                    	je .L_lambda_simple_params_end_0266
 10104 00006ECD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10105 00006ED2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10106 00006ED6 48FFC6                  	inc rsi
 10107 00006ED9 EBEC                    	jmp .L_lambda_simple_params_loop_0266
 10108                                  .L_lambda_simple_params_end_0266:
 10109 00006EDB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 10110 00006EDE 4889C3                  	mov rbx, rax
 10111 00006EE1 58                      	pop rax
 10112 00006EE2 C60004                  	mov byte [rax], T_closure
 10113 00006EE5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10114 00006EE9 48C74009[F66E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0266
 10115 00006EF1 E9AD000000              	jmp .L_lambda_simple_end_0266
 10116                                  .L_lambda_simple_code_0266:	; lambda-simple body
 10117 00006EF6 48837C241000            	cmp qword [rsp + 8 * 2], 0
 10118 00006EFC 740B                    	je .L_lambda_simple_arity_check_ok_0266
 10119 00006EFE FF742410                	push qword [rsp + 8 * 2]
 10120 00006F02 6A00                    	push 0
 10121 00006F04 E902020100              	jmp L_error_incorrect_arity_simple
 10122                                  .L_lambda_simple_arity_check_ok_0266:
 10123 00006F09 C8000000                	enter 0, 0
 10124                                  	; preparing a tail-call
 10125 00006F0D 48B8-                   	mov rax, L_constants + 2187
 10125 00006F0F [8B08000000000000] 
 10126 00006F17 50                      	push rax
 10127 00006F18 48B8-                   	mov rax, L_constants + 2251
 10127 00006F1A [CB08000000000000] 
 10128 00006F22 50                      	push rax
 10129 00006F23 6A02                    	push 2	; arg count
 10130 00006F25 488B0425[49130000]      	mov rax, qword [free_var_82]	; free var error
 10131 00006F2D 803805                  	cmp byte [rax], T_undefined
 10132 00006F30 0F84EF000100            	je L_error_fvar_undefined
 10133 00006F36 803804                  	cmp byte [rax], T_closure
 10134 00006F39 0F856A010100            	jne L_error_non_closure
 10135 00006F3F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10136 00006F42 4C8B4009                	mov r8, qword [rax + 1 + 8]
 10137 00006F46 FF7508                  	push qword [rbp + 8]				; push old return address
 10138 00006F49 FF7500                  	push qword [rbp]					; push old rbp
 10139                                  	;; move stack up ;;
 10140 00006F4C 488B5D18                	mov rbx, [rbp + 3*8]
 10141 00006F50 4889DE                  	mov rsi, rbx						; save old size in rsi
 10142 00006F53 4883C303                	add rbx, 3
 10143 00006F57 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 10144 00006F5F B902000000              	mov rcx, 2
 10145 00006F64 4883C104                	add rcx, 4				; num of iterations in rcx
 10146                                  .L_tc_recycle_frame_loop_031b:
 10147 00006F68 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 10148 00006F70 488B143C                	mov rdx, [rsp + rdi]
 10149 00006F74 4889541D00              	mov [rbp + rbx], rdx
 10150 00006F79 4883EB08                	sub rbx, 8
 10151 00006F7D 48FFC9                  	dec rcx
 10152 00006F80 4883F900                	cmp rcx, 0
 10153 00006F84 75E2                    	jne .L_tc_recycle_frame_loop_031b
 10154 00006F86 4889F3                  	mov rbx, rsi
 10155 00006F89 4883EB02                	sub rbx, 2
 10156 00006F8D 488D1CDD00000000        	lea rbx, [rbx*8]
 10157 00006F95 4801DD                  	add rbp, rbx
 10158 00006F98 4889EC                  	mov rsp, rbp         ; fix stack pointers
 10159 00006F9B 5D                      	pop rbp
 10160 00006F9C 41FFE0                  	jmp r8
 10161 00006F9F C9                      	leave
 10162 00006FA0 C21000                  	ret AND_KILL_FRAME(0)
 10163                                  .L_lambda_simple_end_0266:	; new closure is in rax
 10164 00006FA3 50                      	push rax
 10165 00006FA4 6A01                    	push 1	; arg count
 10166 00006FA6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10167 00006FAB E8A2010100              	call malloc
 10168 00006FB0 50                      	push rax
 10169 00006FB1 BF00000000              	mov rdi, 8 * 0	; new rib
 10170 00006FB6 E897010100              	call malloc
 10171 00006FBB 50                      	push rax
 10172 00006FBC BF08000000              	mov rdi, 8 * 1	; extended env
 10173 00006FC1 E88C010100              	call malloc
 10174 00006FC6 488B7D10                	mov rdi, ENV
 10175 00006FCA BE00000000              	mov rsi, 0
 10176 00006FCF BA01000000              	mov rdx, 1
 10177                                  .L_lambda_simple_env_loop_0267:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 10178 00006FD4 4883FE00                	cmp rsi, 0
 10179 00006FD8 7410                    	je .L_lambda_simple_env_end_0267
 10180 00006FDA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10181 00006FDE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10182 00006FE2 48FFC6                  	inc rsi
 10183 00006FE5 48FFC2                  	inc rdx
 10184 00006FE8 EBEA                    	jmp .L_lambda_simple_env_loop_0267
 10185                                  .L_lambda_simple_env_end_0267:
 10186 00006FEA 5B                      	pop rbx
 10187 00006FEB BE00000000              	mov rsi, 0
 10188                                  .L_lambda_simple_params_loop_0267:	; copy params
 10189 00006FF0 4883FE00                	cmp rsi, 0
 10190 00006FF4 740E                    	je .L_lambda_simple_params_end_0267
 10191 00006FF6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10192 00006FFB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10193 00006FFF 48FFC6                  	inc rsi
 10194 00007002 EBEC                    	jmp .L_lambda_simple_params_loop_0267
 10195                                  .L_lambda_simple_params_end_0267:
 10196 00007004 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 10197 00007007 4889C3                  	mov rbx, rax
 10198 0000700A 58                      	pop rax
 10199 0000700B C60004                  	mov byte [rax], T_closure
 10200 0000700E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10201 00007012 48C74009[1F700000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0267
 10202 0000701A E9810F0000              	jmp .L_lambda_simple_end_0267
 10203                                  .L_lambda_simple_code_0267:	; lambda-simple body
 10204 0000701F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10205 00007025 740B                    	je .L_lambda_simple_arity_check_ok_0267
 10206 00007027 FF742410                	push qword [rsp + 8 * 2]
 10207 0000702B 6A01                    	push 1
 10208 0000702D E9D9000100              	jmp L_error_incorrect_arity_simple
 10209                                  .L_lambda_simple_arity_check_ok_0267:
 10210 00007032 C8000000                	enter 0, 0
 10211                                  	; preparing a tail-call
 10212 00007036 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10213 0000703B E812010100              	call malloc
 10214 00007040 50                      	push rax
 10215 00007041 BF08000000              	mov rdi, 8 * 1	; new rib
 10216 00007046 E807010100              	call malloc
 10217 0000704B 50                      	push rax
 10218 0000704C BF10000000              	mov rdi, 8 * 2	; extended env
 10219 00007051 E8FC000100              	call malloc
 10220 00007056 488B7D10                	mov rdi, ENV
 10221 0000705A BE00000000              	mov rsi, 0
 10222 0000705F BA01000000              	mov rdx, 1
 10223                                  .L_lambda_simple_env_loop_0268:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 10224 00007064 4883FE01                	cmp rsi, 1
 10225 00007068 7410                    	je .L_lambda_simple_env_end_0268
 10226 0000706A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10227 0000706E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10228 00007072 48FFC6                  	inc rsi
 10229 00007075 48FFC2                  	inc rdx
 10230 00007078 EBEA                    	jmp .L_lambda_simple_env_loop_0268
 10231                                  .L_lambda_simple_env_end_0268:
 10232 0000707A 5B                      	pop rbx
 10233 0000707B BE00000000              	mov rsi, 0
 10234                                  .L_lambda_simple_params_loop_0268:	; copy params
 10235 00007080 4883FE01                	cmp rsi, 1
 10236 00007084 740E                    	je .L_lambda_simple_params_end_0268
 10237 00007086 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10238 0000708B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10239 0000708F 48FFC6                  	inc rsi
 10240 00007092 EBEC                    	jmp .L_lambda_simple_params_loop_0268
 10241                                  .L_lambda_simple_params_end_0268:
 10242 00007094 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 10243 00007097 4889C3                  	mov rbx, rax
 10244 0000709A 58                      	pop rax
 10245 0000709B C60004                  	mov byte [rax], T_closure
 10246 0000709E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10247 000070A2 48C74009[AF700000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0268
 10248 000070AA E90B0A0000              	jmp .L_lambda_simple_end_0268
 10249                                  .L_lambda_simple_code_0268:	; lambda-simple body
 10250 000070AF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10251 000070B5 740B                    	je .L_lambda_simple_arity_check_ok_0268
 10252 000070B7 FF742410                	push qword [rsp + 8 * 2]
 10253 000070BB 6A02                    	push 2
 10254 000070BD E949000100              	jmp L_error_incorrect_arity_simple
 10255                                  .L_lambda_simple_arity_check_ok_0268:
 10256 000070C2 C8000000                	enter 0, 0
 10257                                  	; preparing a non-tail-call
 10258 000070C6 488B4520                	mov rax, PARAM(0)	; param a
 10259 000070CA 50                      	push rax
 10260 000070CB 6A01                    	push 1	; arg count
 10261 000070CD 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 10262 000070D5 803805                  	cmp byte [rax], T_undefined
 10263 000070D8 0F8447FF0000            	je L_error_fvar_undefined
 10264 000070DE 803804                  	cmp byte [rax], T_closure
 10265 000070E1 0F85C2FF0000            	jne L_error_non_closure
 10266 000070E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10267 000070EA FF5009                  	call SOB_CLOSURE_CODE(rax)
 10268 000070ED 483D[02000000]          	cmp rax, sob_boolean_false
 10269 000070F3 0F84F7020000            	je .L_if_else_01c0
 10270                                  	; preparing a non-tail-call
 10271 000070F9 488B4528                	mov rax, PARAM(1)	; param b
 10272 000070FD 50                      	push rax
 10273 000070FE 6A01                    	push 1	; arg count
 10274 00007100 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 10275 00007108 803805                  	cmp byte [rax], T_undefined
 10276 0000710B 0F8414FF0000            	je L_error_fvar_undefined
 10277 00007111 803804                  	cmp byte [rax], T_closure
 10278 00007114 0F858FFF0000            	jne L_error_non_closure
 10279 0000711A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10280 0000711D FF5009                  	call SOB_CLOSURE_CODE(rax)
 10281 00007120 483D[02000000]          	cmp rax, sob_boolean_false
 10282 00007126 0F848B000000            	je .L_if_else_01b7
 10283                                  	; preparing a tail-call
 10284 0000712C 488B4528                	mov rax, PARAM(1)	; param b
 10285 00007130 50                      	push rax
 10286 00007131 488B4520                	mov rax, PARAM(0)	; param a
 10287 00007135 50                      	push rax
 10288 00007136 6A02                    	push 2	; arg count
 10289 00007138 488B0425[A20F0000]      	mov rax, qword [free_var_27]	; free var __bin-sub-zz
 10290 00007140 803805                  	cmp byte [rax], T_undefined
 10291 00007143 0F84DCFE0000            	je L_error_fvar_undefined
 10292 00007149 803804                  	cmp byte [rax], T_closure
 10293 0000714C 0F8557FF0000            	jne L_error_non_closure
 10294 00007152 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10295 00007155 4C8B4009                	mov r8, qword [rax + 1 + 8]
 10296 00007159 FF7508                  	push qword [rbp + 8]				; push old return address
 10297 0000715C FF7500                  	push qword [rbp]					; push old rbp
 10298                                  	;; move stack up ;;
 10299 0000715F 488B5D18                	mov rbx, [rbp + 3*8]
 10300 00007163 4889DE                  	mov rsi, rbx						; save old size in rsi
 10301 00007166 4883C303                	add rbx, 3
 10302 0000716A 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 10303 00007172 B902000000              	mov rcx, 2
 10304 00007177 4883C104                	add rcx, 4				; num of iterations in rcx
 10305                                  .L_tc_recycle_frame_loop_031d:
 10306 0000717B 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 10307 00007183 488B143C                	mov rdx, [rsp + rdi]
 10308 00007187 4889541D00              	mov [rbp + rbx], rdx
 10309 0000718C 4883EB08                	sub rbx, 8
 10310 00007190 48FFC9                  	dec rcx
 10311 00007193 4883F900                	cmp rcx, 0
 10312 00007197 75E2                    	jne .L_tc_recycle_frame_loop_031d
 10313 00007199 4889F3                  	mov rbx, rsi
 10314 0000719C 4883EB02                	sub rbx, 2
 10315 000071A0 488D1CDD00000000        	lea rbx, [rbx*8]
 10316 000071A8 4801DD                  	add rbp, rbx
 10317 000071AB 4889EC                  	mov rsp, rbp         ; fix stack pointers
 10318 000071AE 5D                      	pop rbp
 10319 000071AF 41FFE0                  	jmp r8
 10320 000071B2 E934020000              	jmp .L_if_end_01b7
 10321                                  .L_if_else_01b7:
 10322                                  	; preparing a non-tail-call
 10323 000071B7 488B4528                	mov rax, PARAM(1)	; param b
 10324 000071BB 50                      	push rax
 10325 000071BC 6A01                    	push 1	; arg count
 10326 000071BE 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 10327 000071C6 803805                  	cmp byte [rax], T_undefined
 10328 000071C9 0F8456FE0000            	je L_error_fvar_undefined
 10329 000071CF 803804                  	cmp byte [rax], T_closure
 10330 000071D2 0F85D1FE0000            	jne L_error_non_closure
 10331 000071D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10332 000071DB FF5009                  	call SOB_CLOSURE_CODE(rax)
 10333 000071DE 483D[02000000]          	cmp rax, sob_boolean_false
 10334 000071E4 0F84AE000000            	je .L_if_else_01b6
 10335                                  	; preparing a tail-call
 10336 000071EA 488B4528                	mov rax, PARAM(1)	; param b
 10337 000071EE 50                      	push rax
 10338                                  	; preparing a non-tail-call
 10339 000071EF 488B4520                	mov rax, PARAM(0)	; param a
 10340 000071F3 50                      	push rax
 10341 000071F4 6A01                    	push 1	; arg count
 10342 000071F6 488B0425[C40F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 10343 000071FE 803805                  	cmp byte [rax], T_undefined
 10344 00007201 0F841EFE0000            	je L_error_fvar_undefined
 10345 00007207 803804                  	cmp byte [rax], T_closure
 10346 0000720A 0F8599FE0000            	jne L_error_non_closure
 10347 00007210 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10348 00007213 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10349 00007216 50                      	push rax
 10350 00007217 6A02                    	push 2	; arg count
 10351 00007219 488B0425[800F0000]      	mov rax, qword [free_var_25]	; free var __bin-sub-qq
 10352 00007221 803805                  	cmp byte [rax], T_undefined
 10353 00007224 0F84FBFD0000            	je L_error_fvar_undefined
 10354 0000722A 803804                  	cmp byte [rax], T_closure
 10355 0000722D 0F8576FE0000            	jne L_error_non_closure
 10356 00007233 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10357 00007236 4C8B4009                	mov r8, qword [rax + 1 + 8]
 10358 0000723A FF7508                  	push qword [rbp + 8]				; push old return address
 10359 0000723D FF7500                  	push qword [rbp]					; push old rbp
 10360                                  	;; move stack up ;;
 10361 00007240 488B5D18                	mov rbx, [rbp + 3*8]
 10362 00007244 4889DE                  	mov rsi, rbx						; save old size in rsi
 10363 00007247 4883C303                	add rbx, 3
 10364 0000724B 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 10365 00007253 B902000000              	mov rcx, 2
 10366 00007258 4883C104                	add rcx, 4				; num of iterations in rcx
 10367                                  .L_tc_recycle_frame_loop_031e:
 10368 0000725C 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 10369 00007264 488B143C                	mov rdx, [rsp + rdi]
 10370 00007268 4889541D00              	mov [rbp + rbx], rdx
 10371 0000726D 4883EB08                	sub rbx, 8
 10372 00007271 48FFC9                  	dec rcx
 10373 00007274 4883F900                	cmp rcx, 0
 10374 00007278 75E2                    	jne .L_tc_recycle_frame_loop_031e
 10375 0000727A 4889F3                  	mov rbx, rsi
 10376 0000727D 4883EB02                	sub rbx, 2
 10377 00007281 488D1CDD00000000        	lea rbx, [rbx*8]
 10378 00007289 4801DD                  	add rbp, rbx
 10379 0000728C 4889EC                  	mov rsp, rbp         ; fix stack pointers
 10380 0000728F 5D                      	pop rbp
 10381 00007290 41FFE0                  	jmp r8
 10382 00007293 E953010000              	jmp .L_if_end_01b6
 10383                                  .L_if_else_01b6:
 10384                                  	; preparing a non-tail-call
 10385 00007298 488B4528                	mov rax, PARAM(1)	; param b
 10386 0000729C 50                      	push rax
 10387 0000729D 6A01                    	push 1	; arg count
 10388 0000729F 488B0425[7A150000]      	mov rax, qword [free_var_115]	; free var real
 10389 000072A7 803805                  	cmp byte [rax], T_undefined
 10390 000072AA 0F8475FD0000            	je L_error_fvar_undefined
 10391 000072B0 803804                  	cmp byte [rax], T_closure
 10392 000072B3 0F85F0FD0000            	jne L_error_non_closure
 10393 000072B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10394 000072BC FF5009                  	call SOB_CLOSURE_CODE(rax)
 10395 000072BF 483D[02000000]          	cmp rax, sob_boolean_false
 10396 000072C5 0F84AB000000            	je .L_if_else_01b5
 10397                                  	; preparing a tail-call
 10398 000072CB 488B4528                	mov rax, PARAM(1)	; param b
 10399 000072CF 50                      	push rax
 10400                                  	; preparing a non-tail-call
 10401 000072D0 488B4520                	mov rax, PARAM(0)	; param a
 10402 000072D4 50                      	push rax
 10403 000072D5 6A01                    	push 1	; arg count
 10404 000072D7 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
 10405 000072DF 803805                  	cmp byte [rax], T_undefined
 10406 000072E2 0F843DFD0000            	je L_error_fvar_undefined
 10407 000072E8 803804                  	cmp byte [rax], T_closure
 10408 000072EB 0F85B8FD0000            	jne L_error_non_closure
 10409 000072F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10410 000072F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10411 000072F7 50                      	push rax
 10412 000072F8 6A02                    	push 2	; arg count
 10413 000072FA 488B0425[910F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 10414 00007302 803805                  	cmp byte [rax], T_undefined
 10415 00007305 0F841AFD0000            	je L_error_fvar_undefined
 10416 0000730B 803804                  	cmp byte [rax], T_closure
 10417 0000730E 0F8595FD0000            	jne L_error_non_closure
 10418 00007314 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10419 00007317 4C8B4009                	mov r8, qword [rax + 1 + 8]
 10420 0000731B FF7508                  	push qword [rbp + 8]				; push old return address
 10421 0000731E FF7500                  	push qword [rbp]					; push old rbp
 10422                                  	;; move stack up ;;
 10423 00007321 488B5D18                	mov rbx, [rbp + 3*8]
 10424 00007325 4889DE                  	mov rsi, rbx						; save old size in rsi
 10425 00007328 4883C303                	add rbx, 3
 10426 0000732C 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 10427 00007334 B902000000              	mov rcx, 2
 10428 00007339 4883C104                	add rcx, 4				; num of iterations in rcx
 10429                                  .L_tc_recycle_frame_loop_031f:
 10430 0000733D 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 10431 00007345 488B143C                	mov rdx, [rsp + rdi]
 10432 00007349 4889541D00              	mov [rbp + rbx], rdx
 10433 0000734E 4883EB08                	sub rbx, 8
 10434 00007352 48FFC9                  	dec rcx
 10435 00007355 4883F900                	cmp rcx, 0
 10436 00007359 75E2                    	jne .L_tc_recycle_frame_loop_031f
 10437 0000735B 4889F3                  	mov rbx, rsi
 10438 0000735E 4883EB02                	sub rbx, 2
 10439 00007362 488D1CDD00000000        	lea rbx, [rbx*8]
 10440 0000736A 4801DD                  	add rbp, rbx
 10441 0000736D 4889EC                  	mov rsp, rbp         ; fix stack pointers
 10442 00007370 5D                      	pop rbp
 10443 00007371 41FFE0                  	jmp r8
 10444 00007374 EB75                    	jmp .L_if_end_01b5
 10445                                  .L_if_else_01b5:
 10446                                  	; preparing a tail-call
 10447 00007376 6A00                    	push 0	; arg count
 10448 00007378 488B4510                	mov rax, ENV
 10449 0000737C 488B00                  	mov rax, qword [rax + 8 * 0]
 10450 0000737F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10451 00007382 803804                  	cmp byte [rax], T_closure
 10452 00007385 0F851EFD0000            	jne L_error_non_closure
 10453 0000738B FF7001                  	push SOB_CLOSURE_ENV(rax)
 10454 0000738E 4C8B4009                	mov r8, qword [rax + 1 + 8]
 10455 00007392 FF7508                  	push qword [rbp + 8]				; push old return address
 10456 00007395 FF7500                  	push qword [rbp]					; push old rbp
 10457                                  	;; move stack up ;;
 10458 00007398 488B5D18                	mov rbx, [rbp + 3*8]
 10459 0000739C 4889DE                  	mov rsi, rbx						; save old size in rsi
 10460 0000739F 4883C303                	add rbx, 3
 10461 000073A3 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 10462 000073AB B900000000              	mov rcx, 0
 10463 000073B0 4883C104                	add rcx, 4				; num of iterations in rcx
 10464                                  .L_tc_recycle_frame_loop_0320:
 10465 000073B4 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 10466 000073BC 488B143C                	mov rdx, [rsp + rdi]
 10467 000073C0 4889541D00              	mov [rbp + rbx], rdx
 10468 000073C5 4883EB08                	sub rbx, 8
 10469 000073C9 48FFC9                  	dec rcx
 10470 000073CC 4883F900                	cmp rcx, 0
 10471 000073D0 75E2                    	jne .L_tc_recycle_frame_loop_0320
 10472 000073D2 4889F3                  	mov rbx, rsi
 10473 000073D5 4883EB00                	sub rbx, 0
 10474 000073D9 488D1CDD00000000        	lea rbx, [rbx*8]
 10475 000073E1 4801DD                  	add rbp, rbx
 10476 000073E4 4889EC                  	mov rsp, rbp         ; fix stack pointers
 10477 000073E7 5D                      	pop rbp
 10478 000073E8 41FFE0                  	jmp r8
 10479                                  .L_if_end_01b5:
 10480                                  .L_if_end_01b6:
 10481                                  .L_if_end_01b7:
 10482 000073EB E9C6060000              	jmp .L_if_end_01c0
 10483                                  .L_if_else_01c0:
 10484                                  	; preparing a non-tail-call
 10485 000073F0 488B4520                	mov rax, PARAM(0)	; param a
 10486 000073F4 50                      	push rax
 10487 000073F5 6A01                    	push 1	; arg count
 10488 000073F7 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 10489 000073FF 803805                  	cmp byte [rax], T_undefined
 10490 00007402 0F841DFC0000            	je L_error_fvar_undefined
 10491 00007408 803804                  	cmp byte [rax], T_closure
 10492 0000740B 0F8598FC0000            	jne L_error_non_closure
 10493 00007411 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10494 00007414 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10495 00007417 483D[02000000]          	cmp rax, sob_boolean_false
 10496 0000741D 0F84F7020000            	je .L_if_else_01bf
 10497                                  	; preparing a non-tail-call
 10498 00007423 488B4528                	mov rax, PARAM(1)	; param b
 10499 00007427 50                      	push rax
 10500 00007428 6A01                    	push 1	; arg count
 10501 0000742A 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 10502 00007432 803805                  	cmp byte [rax], T_undefined
 10503 00007435 0F84EAFB0000            	je L_error_fvar_undefined
 10504 0000743B 803804                  	cmp byte [rax], T_closure
 10505 0000743E 0F8565FC0000            	jne L_error_non_closure
 10506 00007444 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10507 00007447 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10508 0000744A 483D[02000000]          	cmp rax, sob_boolean_false
 10509 00007450 0F84AE000000            	je .L_if_else_01ba
 10510                                  	; preparing a tail-call
 10511                                  	; preparing a non-tail-call
 10512 00007456 488B4528                	mov rax, PARAM(1)	; param b
 10513 0000745A 50                      	push rax
 10514 0000745B 6A01                    	push 1	; arg count
 10515 0000745D 488B0425[C40F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 10516 00007465 803805                  	cmp byte [rax], T_undefined
 10517 00007468 0F84B7FB0000            	je L_error_fvar_undefined
 10518 0000746E 803804                  	cmp byte [rax], T_closure
 10519 00007471 0F8532FC0000            	jne L_error_non_closure
 10520 00007477 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10521 0000747A FF5009                  	call SOB_CLOSURE_CODE(rax)
 10522 0000747D 50                      	push rax
 10523 0000747E 488B4520                	mov rax, PARAM(0)	; param a
 10524 00007482 50                      	push rax
 10525 00007483 6A02                    	push 2	; arg count
 10526 00007485 488B0425[800F0000]      	mov rax, qword [free_var_25]	; free var __bin-sub-qq
 10527 0000748D 803805                  	cmp byte [rax], T_undefined
 10528 00007490 0F848FFB0000            	je L_error_fvar_undefined
 10529 00007496 803804                  	cmp byte [rax], T_closure
 10530 00007499 0F850AFC0000            	jne L_error_non_closure
 10531 0000749F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10532 000074A2 4C8B4009                	mov r8, qword [rax + 1 + 8]
 10533 000074A6 FF7508                  	push qword [rbp + 8]				; push old return address
 10534 000074A9 FF7500                  	push qword [rbp]					; push old rbp
 10535                                  	;; move stack up ;;
 10536 000074AC 488B5D18                	mov rbx, [rbp + 3*8]
 10537 000074B0 4889DE                  	mov rsi, rbx						; save old size in rsi
 10538 000074B3 4883C303                	add rbx, 3
 10539 000074B7 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 10540 000074BF B902000000              	mov rcx, 2
 10541 000074C4 4883C104                	add rcx, 4				; num of iterations in rcx
 10542                                  .L_tc_recycle_frame_loop_0321:
 10543 000074C8 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 10544 000074D0 488B143C                	mov rdx, [rsp + rdi]
 10545 000074D4 4889541D00              	mov [rbp + rbx], rdx
 10546 000074D9 4883EB08                	sub rbx, 8
 10547 000074DD 48FFC9                  	dec rcx
 10548 000074E0 4883F900                	cmp rcx, 0
 10549 000074E4 75E2                    	jne .L_tc_recycle_frame_loop_0321
 10550 000074E6 4889F3                  	mov rbx, rsi
 10551 000074E9 4883EB02                	sub rbx, 2
 10552 000074ED 488D1CDD00000000        	lea rbx, [rbx*8]
 10553 000074F5 4801DD                  	add rbp, rbx
 10554 000074F8 4889EC                  	mov rsp, rbp         ; fix stack pointers
 10555 000074FB 5D                      	pop rbp
 10556 000074FC 41FFE0                  	jmp r8
 10557 000074FF E911020000              	jmp .L_if_end_01ba
 10558                                  .L_if_else_01ba:
 10559                                  	; preparing a non-tail-call
 10560 00007504 488B4528                	mov rax, PARAM(1)	; param b
 10561 00007508 50                      	push rax
 10562 00007509 6A01                    	push 1	; arg count
 10563 0000750B 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 10564 00007513 803805                  	cmp byte [rax], T_undefined
 10565 00007516 0F8409FB0000            	je L_error_fvar_undefined
 10566 0000751C 803804                  	cmp byte [rax], T_closure
 10567 0000751F 0F8584FB0000            	jne L_error_non_closure
 10568 00007525 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10569 00007528 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10570 0000752B 483D[02000000]          	cmp rax, sob_boolean_false
 10571 00007531 0F848B000000            	je .L_if_else_01b9
 10572                                  	; preparing a tail-call
 10573 00007537 488B4528                	mov rax, PARAM(1)	; param b
 10574 0000753B 50                      	push rax
 10575 0000753C 488B4520                	mov rax, PARAM(0)	; param a
 10576 00007540 50                      	push rax
 10577 00007541 6A02                    	push 2	; arg count
 10578 00007543 488B0425[800F0000]      	mov rax, qword [free_var_25]	; free var __bin-sub-qq
 10579 0000754B 803805                  	cmp byte [rax], T_undefined
 10580 0000754E 0F84D1FA0000            	je L_error_fvar_undefined
 10581 00007554 803804                  	cmp byte [rax], T_closure
 10582 00007557 0F854CFB0000            	jne L_error_non_closure
 10583 0000755D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10584 00007560 4C8B4009                	mov r8, qword [rax + 1 + 8]
 10585 00007564 FF7508                  	push qword [rbp + 8]				; push old return address
 10586 00007567 FF7500                  	push qword [rbp]					; push old rbp
 10587                                  	;; move stack up ;;
 10588 0000756A 488B5D18                	mov rbx, [rbp + 3*8]
 10589 0000756E 4889DE                  	mov rsi, rbx						; save old size in rsi
 10590 00007571 4883C303                	add rbx, 3
 10591 00007575 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 10592 0000757D B902000000              	mov rcx, 2
 10593 00007582 4883C104                	add rcx, 4				; num of iterations in rcx
 10594                                  .L_tc_recycle_frame_loop_0322:
 10595 00007586 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 10596 0000758E 488B143C                	mov rdx, [rsp + rdi]
 10597 00007592 4889541D00              	mov [rbp + rbx], rdx
 10598 00007597 4883EB08                	sub rbx, 8
 10599 0000759B 48FFC9                  	dec rcx
 10600 0000759E 4883F900                	cmp rcx, 0
 10601 000075A2 75E2                    	jne .L_tc_recycle_frame_loop_0322
 10602 000075A4 4889F3                  	mov rbx, rsi
 10603 000075A7 4883EB02                	sub rbx, 2
 10604 000075AB 488D1CDD00000000        	lea rbx, [rbx*8]
 10605 000075B3 4801DD                  	add rbp, rbx
 10606 000075B6 4889EC                  	mov rsp, rbp         ; fix stack pointers
 10607 000075B9 5D                      	pop rbp
 10608 000075BA 41FFE0                  	jmp r8
 10609 000075BD E953010000              	jmp .L_if_end_01b9
 10610                                  .L_if_else_01b9:
 10611                                  	; preparing a non-tail-call
 10612 000075C2 488B4528                	mov rax, PARAM(1)	; param b
 10613 000075C6 50                      	push rax
 10614 000075C7 6A01                    	push 1	; arg count
 10615 000075C9 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 10616 000075D1 803805                  	cmp byte [rax], T_undefined
 10617 000075D4 0F844BFA0000            	je L_error_fvar_undefined
 10618 000075DA 803804                  	cmp byte [rax], T_closure
 10619 000075DD 0F85C6FA0000            	jne L_error_non_closure
 10620 000075E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10621 000075E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10622 000075E9 483D[02000000]          	cmp rax, sob_boolean_false
 10623 000075EF 0F84AB000000            	je .L_if_else_01b8
 10624                                  	; preparing a tail-call
 10625 000075F5 488B4528                	mov rax, PARAM(1)	; param b
 10626 000075F9 50                      	push rax
 10627                                  	; preparing a non-tail-call
 10628 000075FA 488B4520                	mov rax, PARAM(0)	; param a
 10629 000075FE 50                      	push rax
 10630 000075FF 6A01                    	push 1	; arg count
 10631 00007601 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 10632 00007609 803805                  	cmp byte [rax], T_undefined
 10633 0000760C 0F8413FA0000            	je L_error_fvar_undefined
 10634 00007612 803804                  	cmp byte [rax], T_closure
 10635 00007615 0F858EFA0000            	jne L_error_non_closure
 10636 0000761B FF7001                  	push SOB_CLOSURE_ENV(rax)
 10637 0000761E FF5009                  	call SOB_CLOSURE_CODE(rax)
 10638 00007621 50                      	push rax
 10639 00007622 6A02                    	push 2	; arg count
 10640 00007624 488B0425[910F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 10641 0000762C 803805                  	cmp byte [rax], T_undefined
 10642 0000762F 0F84F0F90000            	je L_error_fvar_undefined
 10643 00007635 803804                  	cmp byte [rax], T_closure
 10644 00007638 0F856BFA0000            	jne L_error_non_closure
 10645 0000763E FF7001                  	push SOB_CLOSURE_ENV(rax)
 10646 00007641 4C8B4009                	mov r8, qword [rax + 1 + 8]
 10647 00007645 FF7508                  	push qword [rbp + 8]				; push old return address
 10648 00007648 FF7500                  	push qword [rbp]					; push old rbp
 10649                                  	;; move stack up ;;
 10650 0000764B 488B5D18                	mov rbx, [rbp + 3*8]
 10651 0000764F 4889DE                  	mov rsi, rbx						; save old size in rsi
 10652 00007652 4883C303                	add rbx, 3
 10653 00007656 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 10654 0000765E B902000000              	mov rcx, 2
 10655 00007663 4883C104                	add rcx, 4				; num of iterations in rcx
 10656                                  .L_tc_recycle_frame_loop_0323:
 10657 00007667 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 10658 0000766F 488B143C                	mov rdx, [rsp + rdi]
 10659 00007673 4889541D00              	mov [rbp + rbx], rdx
 10660 00007678 4883EB08                	sub rbx, 8
 10661 0000767C 48FFC9                  	dec rcx
 10662 0000767F 4883F900                	cmp rcx, 0
 10663 00007683 75E2                    	jne .L_tc_recycle_frame_loop_0323
 10664 00007685 4889F3                  	mov rbx, rsi
 10665 00007688 4883EB02                	sub rbx, 2
 10666 0000768C 488D1CDD00000000        	lea rbx, [rbx*8]
 10667 00007694 4801DD                  	add rbp, rbx
 10668 00007697 4889EC                  	mov rsp, rbp         ; fix stack pointers
 10669 0000769A 5D                      	pop rbp
 10670 0000769B 41FFE0                  	jmp r8
 10671 0000769E EB75                    	jmp .L_if_end_01b8
 10672                                  .L_if_else_01b8:
 10673                                  	; preparing a tail-call
 10674 000076A0 6A00                    	push 0	; arg count
 10675 000076A2 488B4510                	mov rax, ENV
 10676 000076A6 488B00                  	mov rax, qword [rax + 8 * 0]
 10677 000076A9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10678 000076AC 803804                  	cmp byte [rax], T_closure
 10679 000076AF 0F85F4F90000            	jne L_error_non_closure
 10680 000076B5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10681 000076B8 4C8B4009                	mov r8, qword [rax + 1 + 8]
 10682 000076BC FF7508                  	push qword [rbp + 8]				; push old return address
 10683 000076BF FF7500                  	push qword [rbp]					; push old rbp
 10684                                  	;; move stack up ;;
 10685 000076C2 488B5D18                	mov rbx, [rbp + 3*8]
 10686 000076C6 4889DE                  	mov rsi, rbx						; save old size in rsi
 10687 000076C9 4883C303                	add rbx, 3
 10688 000076CD 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 10689 000076D5 B900000000              	mov rcx, 0
 10690 000076DA 4883C104                	add rcx, 4				; num of iterations in rcx
 10691                                  .L_tc_recycle_frame_loop_0324:
 10692 000076DE 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 10693 000076E6 488B143C                	mov rdx, [rsp + rdi]
 10694 000076EA 4889541D00              	mov [rbp + rbx], rdx
 10695 000076EF 4883EB08                	sub rbx, 8
 10696 000076F3 48FFC9                  	dec rcx
 10697 000076F6 4883F900                	cmp rcx, 0
 10698 000076FA 75E2                    	jne .L_tc_recycle_frame_loop_0324
 10699 000076FC 4889F3                  	mov rbx, rsi
 10700 000076FF 4883EB00                	sub rbx, 0
 10701 00007703 488D1CDD00000000        	lea rbx, [rbx*8]
 10702 0000770B 4801DD                  	add rbp, rbx
 10703 0000770E 4889EC                  	mov rsp, rbp         ; fix stack pointers
 10704 00007711 5D                      	pop rbp
 10705 00007712 41FFE0                  	jmp r8
 10706                                  .L_if_end_01b8:
 10707                                  .L_if_end_01b9:
 10708                                  .L_if_end_01ba:
 10709 00007715 E99C030000              	jmp .L_if_end_01bf
 10710                                  .L_if_else_01bf:
 10711                                  	; preparing a non-tail-call
 10712 0000771A 488B4520                	mov rax, PARAM(0)	; param a
 10713 0000771E 50                      	push rax
 10714 0000771F 6A01                    	push 1	; arg count
 10715 00007721 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 10716 00007729 803805                  	cmp byte [rax], T_undefined
 10717 0000772C 0F84F3F80000            	je L_error_fvar_undefined
 10718 00007732 803804                  	cmp byte [rax], T_closure
 10719 00007735 0F856EF90000            	jne L_error_non_closure
 10720 0000773B FF7001                  	push SOB_CLOSURE_ENV(rax)
 10721 0000773E FF5009                  	call SOB_CLOSURE_CODE(rax)
 10722 00007741 483D[02000000]          	cmp rax, sob_boolean_false
 10723 00007747 0F84F4020000            	je .L_if_else_01be
 10724                                  	; preparing a non-tail-call
 10725 0000774D 488B4528                	mov rax, PARAM(1)	; param b
 10726 00007751 50                      	push rax
 10727 00007752 6A01                    	push 1	; arg count
 10728 00007754 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 10729 0000775C 803805                  	cmp byte [rax], T_undefined
 10730 0000775F 0F84C0F80000            	je L_error_fvar_undefined
 10731 00007765 803804                  	cmp byte [rax], T_closure
 10732 00007768 0F853BF90000            	jne L_error_non_closure
 10733 0000776E FF7001                  	push SOB_CLOSURE_ENV(rax)
 10734 00007771 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10735 00007774 483D[02000000]          	cmp rax, sob_boolean_false
 10736 0000777A 0F84AE000000            	je .L_if_else_01bd
 10737                                  	; preparing a tail-call
 10738                                  	; preparing a non-tail-call
 10739 00007780 488B4528                	mov rax, PARAM(1)	; param b
 10740 00007784 50                      	push rax
 10741 00007785 6A01                    	push 1	; arg count
 10742 00007787 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
 10743 0000778F 803805                  	cmp byte [rax], T_undefined
 10744 00007792 0F848DF80000            	je L_error_fvar_undefined
 10745 00007798 803804                  	cmp byte [rax], T_closure
 10746 0000779B 0F8508F90000            	jne L_error_non_closure
 10747 000077A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10748 000077A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10749 000077A7 50                      	push rax
 10750 000077A8 488B4520                	mov rax, PARAM(0)	; param a
 10751 000077AC 50                      	push rax
 10752 000077AD 6A02                    	push 2	; arg count
 10753 000077AF 488B0425[910F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 10754 000077B7 803805                  	cmp byte [rax], T_undefined
 10755 000077BA 0F8465F80000            	je L_error_fvar_undefined
 10756 000077C0 803804                  	cmp byte [rax], T_closure
 10757 000077C3 0F85E0F80000            	jne L_error_non_closure
 10758 000077C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10759 000077CC 4C8B4009                	mov r8, qword [rax + 1 + 8]
 10760 000077D0 FF7508                  	push qword [rbp + 8]				; push old return address
 10761 000077D3 FF7500                  	push qword [rbp]					; push old rbp
 10762                                  	;; move stack up ;;
 10763 000077D6 488B5D18                	mov rbx, [rbp + 3*8]
 10764 000077DA 4889DE                  	mov rsi, rbx						; save old size in rsi
 10765 000077DD 4883C303                	add rbx, 3
 10766 000077E1 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 10767 000077E9 B902000000              	mov rcx, 2
 10768 000077EE 4883C104                	add rcx, 4				; num of iterations in rcx
 10769                                  .L_tc_recycle_frame_loop_0325:
 10770 000077F2 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 10771 000077FA 488B143C                	mov rdx, [rsp + rdi]
 10772 000077FE 4889541D00              	mov [rbp + rbx], rdx
 10773 00007803 4883EB08                	sub rbx, 8
 10774 00007807 48FFC9                  	dec rcx
 10775 0000780A 4883F900                	cmp rcx, 0
 10776 0000780E 75E2                    	jne .L_tc_recycle_frame_loop_0325
 10777 00007810 4889F3                  	mov rbx, rsi
 10778 00007813 4883EB02                	sub rbx, 2
 10779 00007817 488D1CDD00000000        	lea rbx, [rbx*8]
 10780 0000781F 4801DD                  	add rbp, rbx
 10781 00007822 4889EC                  	mov rsp, rbp         ; fix stack pointers
 10782 00007825 5D                      	pop rbp
 10783 00007826 41FFE0                  	jmp r8
 10784 00007829 E911020000              	jmp .L_if_end_01bd
 10785                                  .L_if_else_01bd:
 10786                                  	; preparing a non-tail-call
 10787 0000782E 488B4528                	mov rax, PARAM(1)	; param b
 10788 00007832 50                      	push rax
 10789 00007833 6A01                    	push 1	; arg count
 10790 00007835 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 10791 0000783D 803805                  	cmp byte [rax], T_undefined
 10792 00007840 0F84DFF70000            	je L_error_fvar_undefined
 10793 00007846 803804                  	cmp byte [rax], T_closure
 10794 00007849 0F855AF80000            	jne L_error_non_closure
 10795 0000784F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10796 00007852 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10797 00007855 483D[02000000]          	cmp rax, sob_boolean_false
 10798 0000785B 0F84AE000000            	je .L_if_else_01bc
 10799                                  	; preparing a tail-call
 10800                                  	; preparing a non-tail-call
 10801 00007861 488B4528                	mov rax, PARAM(1)	; param b
 10802 00007865 50                      	push rax
 10803 00007866 6A01                    	push 1	; arg count
 10804 00007868 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 10805 00007870 803805                  	cmp byte [rax], T_undefined
 10806 00007873 0F84ACF70000            	je L_error_fvar_undefined
 10807 00007879 803804                  	cmp byte [rax], T_closure
 10808 0000787C 0F8527F80000            	jne L_error_non_closure
 10809 00007882 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10810 00007885 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10811 00007888 50                      	push rax
 10812 00007889 488B4520                	mov rax, PARAM(0)	; param a
 10813 0000788D 50                      	push rax
 10814 0000788E 6A02                    	push 2	; arg count
 10815 00007890 488B0425[910F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 10816 00007898 803805                  	cmp byte [rax], T_undefined
 10817 0000789B 0F8484F70000            	je L_error_fvar_undefined
 10818 000078A1 803804                  	cmp byte [rax], T_closure
 10819 000078A4 0F85FFF70000            	jne L_error_non_closure
 10820 000078AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 10821 000078AD 4C8B4009                	mov r8, qword [rax + 1 + 8]
 10822 000078B1 FF7508                  	push qword [rbp + 8]				; push old return address
 10823 000078B4 FF7500                  	push qword [rbp]					; push old rbp
 10824                                  	;; move stack up ;;
 10825 000078B7 488B5D18                	mov rbx, [rbp + 3*8]
 10826 000078BB 4889DE                  	mov rsi, rbx						; save old size in rsi
 10827 000078BE 4883C303                	add rbx, 3
 10828 000078C2 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 10829 000078CA B902000000              	mov rcx, 2
 10830 000078CF 4883C104                	add rcx, 4				; num of iterations in rcx
 10831                                  .L_tc_recycle_frame_loop_0326:
 10832 000078D3 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 10833 000078DB 488B143C                	mov rdx, [rsp + rdi]
 10834 000078DF 4889541D00              	mov [rbp + rbx], rdx
 10835 000078E4 4883EB08                	sub rbx, 8
 10836 000078E8 48FFC9                  	dec rcx
 10837 000078EB 4883F900                	cmp rcx, 0
 10838 000078EF 75E2                    	jne .L_tc_recycle_frame_loop_0326
 10839 000078F1 4889F3                  	mov rbx, rsi
 10840 000078F4 4883EB02                	sub rbx, 2
 10841 000078F8 488D1CDD00000000        	lea rbx, [rbx*8]
 10842 00007900 4801DD                  	add rbp, rbx
 10843 00007903 4889EC                  	mov rsp, rbp         ; fix stack pointers
 10844 00007906 5D                      	pop rbp
 10845 00007907 41FFE0                  	jmp r8
 10846 0000790A E930010000              	jmp .L_if_end_01bc
 10847                                  .L_if_else_01bc:
 10848                                  	; preparing a non-tail-call
 10849 0000790F 488B4528                	mov rax, PARAM(1)	; param b
 10850 00007913 50                      	push rax
 10851 00007914 6A01                    	push 1	; arg count
 10852 00007916 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 10853 0000791E 803805                  	cmp byte [rax], T_undefined
 10854 00007921 0F84FEF60000            	je L_error_fvar_undefined
 10855 00007927 803804                  	cmp byte [rax], T_closure
 10856 0000792A 0F8579F70000            	jne L_error_non_closure
 10857 00007930 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10858 00007933 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10859 00007936 483D[02000000]          	cmp rax, sob_boolean_false
 10860 0000793C 0F8488000000            	je .L_if_else_01bb
 10861                                  	; preparing a tail-call
 10862 00007942 488B4528                	mov rax, PARAM(1)	; param b
 10863 00007946 50                      	push rax
 10864 00007947 488B4520                	mov rax, PARAM(0)	; param a
 10865 0000794B 50                      	push rax
 10866 0000794C 6A02                    	push 2	; arg count
 10867 0000794E 488B0425[910F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 10868 00007956 803805                  	cmp byte [rax], T_undefined
 10869 00007959 0F84C6F60000            	je L_error_fvar_undefined
 10870 0000795F 803804                  	cmp byte [rax], T_closure
 10871 00007962 0F8541F70000            	jne L_error_non_closure
 10872 00007968 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10873 0000796B 4C8B4009                	mov r8, qword [rax + 1 + 8]
 10874 0000796F FF7508                  	push qword [rbp + 8]				; push old return address
 10875 00007972 FF7500                  	push qword [rbp]					; push old rbp
 10876                                  	;; move stack up ;;
 10877 00007975 488B5D18                	mov rbx, [rbp + 3*8]
 10878 00007979 4889DE                  	mov rsi, rbx						; save old size in rsi
 10879 0000797C 4883C303                	add rbx, 3
 10880 00007980 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 10881 00007988 B902000000              	mov rcx, 2
 10882 0000798D 4883C104                	add rcx, 4				; num of iterations in rcx
 10883                                  .L_tc_recycle_frame_loop_0327:
 10884 00007991 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 10885 00007999 488B143C                	mov rdx, [rsp + rdi]
 10886 0000799D 4889541D00              	mov [rbp + rbx], rdx
 10887 000079A2 4883EB08                	sub rbx, 8
 10888 000079A6 48FFC9                  	dec rcx
 10889 000079A9 4883F900                	cmp rcx, 0
 10890 000079AD 75E2                    	jne .L_tc_recycle_frame_loop_0327
 10891 000079AF 4889F3                  	mov rbx, rsi
 10892 000079B2 4883EB02                	sub rbx, 2
 10893 000079B6 488D1CDD00000000        	lea rbx, [rbx*8]
 10894 000079BE 4801DD                  	add rbp, rbx
 10895 000079C1 4889EC                  	mov rsp, rbp         ; fix stack pointers
 10896 000079C4 5D                      	pop rbp
 10897 000079C5 41FFE0                  	jmp r8
 10898 000079C8 EB75                    	jmp .L_if_end_01bb
 10899                                  .L_if_else_01bb:
 10900                                  	; preparing a tail-call
 10901 000079CA 6A00                    	push 0	; arg count
 10902 000079CC 488B4510                	mov rax, ENV
 10903 000079D0 488B00                  	mov rax, qword [rax + 8 * 0]
 10904 000079D3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10905 000079D6 803804                  	cmp byte [rax], T_closure
 10906 000079D9 0F85CAF60000            	jne L_error_non_closure
 10907 000079DF FF7001                  	push SOB_CLOSURE_ENV(rax)
 10908 000079E2 4C8B4009                	mov r8, qword [rax + 1 + 8]
 10909 000079E6 FF7508                  	push qword [rbp + 8]				; push old return address
 10910 000079E9 FF7500                  	push qword [rbp]					; push old rbp
 10911                                  	;; move stack up ;;
 10912 000079EC 488B5D18                	mov rbx, [rbp + 3*8]
 10913 000079F0 4889DE                  	mov rsi, rbx						; save old size in rsi
 10914 000079F3 4883C303                	add rbx, 3
 10915 000079F7 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 10916 000079FF B900000000              	mov rcx, 0
 10917 00007A04 4883C104                	add rcx, 4				; num of iterations in rcx
 10918                                  .L_tc_recycle_frame_loop_0328:
 10919 00007A08 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 10920 00007A10 488B143C                	mov rdx, [rsp + rdi]
 10921 00007A14 4889541D00              	mov [rbp + rbx], rdx
 10922 00007A19 4883EB08                	sub rbx, 8
 10923 00007A1D 48FFC9                  	dec rcx
 10924 00007A20 4883F900                	cmp rcx, 0
 10925 00007A24 75E2                    	jne .L_tc_recycle_frame_loop_0328
 10926 00007A26 4889F3                  	mov rbx, rsi
 10927 00007A29 4883EB00                	sub rbx, 0
 10928 00007A2D 488D1CDD00000000        	lea rbx, [rbx*8]
 10929 00007A35 4801DD                  	add rbp, rbx
 10930 00007A38 4889EC                  	mov rsp, rbp         ; fix stack pointers
 10931 00007A3B 5D                      	pop rbp
 10932 00007A3C 41FFE0                  	jmp r8
 10933                                  .L_if_end_01bb:
 10934                                  .L_if_end_01bc:
 10935                                  .L_if_end_01bd:
 10936 00007A3F EB75                    	jmp .L_if_end_01be
 10937                                  .L_if_else_01be:
 10938                                  	; preparing a tail-call
 10939 00007A41 6A00                    	push 0	; arg count
 10940 00007A43 488B4510                	mov rax, ENV
 10941 00007A47 488B00                  	mov rax, qword [rax + 8 * 0]
 10942 00007A4A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10943 00007A4D 803804                  	cmp byte [rax], T_closure
 10944 00007A50 0F8553F60000            	jne L_error_non_closure
 10945 00007A56 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10946 00007A59 4C8B4009                	mov r8, qword [rax + 1 + 8]
 10947 00007A5D FF7508                  	push qword [rbp + 8]				; push old return address
 10948 00007A60 FF7500                  	push qword [rbp]					; push old rbp
 10949                                  	;; move stack up ;;
 10950 00007A63 488B5D18                	mov rbx, [rbp + 3*8]
 10951 00007A67 4889DE                  	mov rsi, rbx						; save old size in rsi
 10952 00007A6A 4883C303                	add rbx, 3
 10953 00007A6E 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 10954 00007A76 B900000000              	mov rcx, 0
 10955 00007A7B 4883C104                	add rcx, 4				; num of iterations in rcx
 10956                                  .L_tc_recycle_frame_loop_0329:
 10957 00007A7F 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 10958 00007A87 488B143C                	mov rdx, [rsp + rdi]
 10959 00007A8B 4889541D00              	mov [rbp + rbx], rdx
 10960 00007A90 4883EB08                	sub rbx, 8
 10961 00007A94 48FFC9                  	dec rcx
 10962 00007A97 4883F900                	cmp rcx, 0
 10963 00007A9B 75E2                    	jne .L_tc_recycle_frame_loop_0329
 10964 00007A9D 4889F3                  	mov rbx, rsi
 10965 00007AA0 4883EB00                	sub rbx, 0
 10966 00007AA4 488D1CDD00000000        	lea rbx, [rbx*8]
 10967 00007AAC 4801DD                  	add rbp, rbx
 10968 00007AAF 4889EC                  	mov rsp, rbp         ; fix stack pointers
 10969 00007AB2 5D                      	pop rbp
 10970 00007AB3 41FFE0                  	jmp r8
 10971                                  .L_if_end_01be:
 10972                                  .L_if_end_01bf:
 10973                                  .L_if_end_01c0:
 10974 00007AB6 C9                      	leave
 10975 00007AB7 C22000                  	ret AND_KILL_FRAME(2)
 10976                                  .L_lambda_simple_end_0268:	; new closure is in rax
 10977 00007ABA 50                      	push rax
 10978 00007ABB 6A01                    	push 1	; arg count
 10979 00007ABD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10980 00007AC2 E88BF60000              	call malloc
 10981 00007AC7 50                      	push rax
 10982 00007AC8 BF08000000              	mov rdi, 8 * 1	; new rib
 10983 00007ACD E880F60000              	call malloc
 10984 00007AD2 50                      	push rax
 10985 00007AD3 BF10000000              	mov rdi, 8 * 2	; extended env
 10986 00007AD8 E875F60000              	call malloc
 10987 00007ADD 488B7D10                	mov rdi, ENV
 10988 00007AE1 BE00000000              	mov rsi, 0
 10989 00007AE6 BA01000000              	mov rdx, 1
 10990                                  .L_lambda_simple_env_loop_0269:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 10991 00007AEB 4883FE01                	cmp rsi, 1
 10992 00007AEF 7410                    	je .L_lambda_simple_env_end_0269
 10993 00007AF1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10994 00007AF5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10995 00007AF9 48FFC6                  	inc rsi
 10996 00007AFC 48FFC2                  	inc rdx
 10997 00007AFF EBEA                    	jmp .L_lambda_simple_env_loop_0269
 10998                                  .L_lambda_simple_env_end_0269:
 10999 00007B01 5B                      	pop rbx
 11000 00007B02 BE00000000              	mov rsi, 0
 11001                                  .L_lambda_simple_params_loop_0269:	; copy params
 11002 00007B07 4883FE01                	cmp rsi, 1
 11003 00007B0B 740E                    	je .L_lambda_simple_params_end_0269
 11004 00007B0D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11005 00007B12 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11006 00007B16 48FFC6                  	inc rsi
 11007 00007B19 EBEC                    	jmp .L_lambda_simple_params_loop_0269
 11008                                  .L_lambda_simple_params_end_0269:
 11009 00007B1B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 11010 00007B1E 4889C3                  	mov rbx, rax
 11011 00007B21 58                      	pop rax
 11012 00007B22 C60004                  	mov byte [rax], T_closure
 11013 00007B25 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11014 00007B29 48C74009[367B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0269
 11015 00007B31 E9FD030000              	jmp .L_lambda_simple_end_0269
 11016                                  .L_lambda_simple_code_0269:	; lambda-simple body
 11017 00007B36 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11018 00007B3C 740B                    	je .L_lambda_simple_arity_check_ok_0269
 11019 00007B3E FF742410                	push qword [rsp + 8 * 2]
 11020 00007B42 6A01                    	push 1
 11021 00007B44 E9C2F50000              	jmp L_error_incorrect_arity_simple
 11022                                  .L_lambda_simple_arity_check_ok_0269:
 11023 00007B49 C8000000                	enter 0, 0
 11024 00007B4D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11025 00007B52 E8FBF50000              	call malloc
 11026 00007B57 50                      	push rax
 11027 00007B58 BF08000000              	mov rdi, 8 * 1	; new rib
 11028 00007B5D E8F0F50000              	call malloc
 11029 00007B62 50                      	push rax
 11030 00007B63 BF18000000              	mov rdi, 8 * 3	; extended env
 11031 00007B68 E8E5F50000              	call malloc
 11032 00007B6D 488B7D10                	mov rdi, ENV
 11033 00007B71 BE00000000              	mov rsi, 0
 11034 00007B76 BA01000000              	mov rdx, 1
 11035                                  .L_lambda_opt_env_loop_0053:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 11036 00007B7B 4883FE02                	cmp rsi, 2
 11037 00007B7F 7410                    	je .L_lambda_opt_env_end_0053
 11038 00007B81 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11039 00007B85 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11040 00007B89 48FFC6                  	inc rsi
 11041 00007B8C 48FFC2                  	inc rdx
 11042 00007B8F EBEA                    	jmp .L_lambda_opt_env_loop_0053
 11043                                  .L_lambda_opt_env_end_0053:
 11044 00007B91 5B                      	pop rbx
 11045 00007B92 BE00000000              	mov rsi, 0
 11046                                  .L_lambda_opt_params_loop_0053:	; copy params
 11047 00007B97 4883FE01                	cmp rsi, 1
 11048 00007B9B 740E                    	je .L_lambda_opt_params_end_0053
 11049 00007B9D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11050 00007BA2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11051 00007BA6 48FFC6                  	inc rsi
 11052 00007BA9 EBEC                    	jmp .L_lambda_opt_params_loop_0053
 11053                                  .L_lambda_opt_params_end_0053:
 11054 00007BAB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 11055 00007BAE 4889C3                  	mov rbx, rax
 11056 00007BB1 58                      	pop rax
 11057 00007BB2 C60004                  	mov byte [rax], T_closure
 11058 00007BB5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11059 00007BB9 48C74009[C67B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0053
 11060 00007BC1 E969030000              	jmp .L_lambda_opt_end_0053
 11061                                  .L_lambda_opt_code_0053:	; lambda-opt body
 11062 00007BC6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11063 00007BCC 740D                    	je .L_lambda_opt_arity_check_exact_0053
 11064 00007BCE 7F48                    	jg .L_lambda_opt_arity_check_more_0053
 11065 00007BD0 FF742410                	push qword [rsp + 8 * 2]
 11066 00007BD4 6A01                    	push 1
 11067 00007BD6 E944F50000              	jmp L_error_incorrect_arity_opt
 11068                                  .L_lambda_opt_arity_check_exact_0053:
 11069 00007BDB 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update argument count (fixed params + 1 for nil)
 11070 00007BE4 41BA04000000            	mov r10, 4	; r10 = total addresses to adjust (fixed params + 3)
 11071 00007BEA FF3424                  	push qword [rsp]	; Save the top stack element
 11072 00007BED 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
 11073                                  .L_lambda_opt_stack_shrink_loop_00f7:
 11074 00007BF3 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
 11075 00007BF6 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_00f7	; Exit loop if all elements processed
 11076 00007BF8 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
 11077 00007BFD 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
 11078 00007C01 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
 11079 00007C06 49FFC3                  	inc r11	; Increment loop index
 11080 00007C09 EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_00f7	; Jump back to loop start
 11081                                  .L_lambda_opt_stack_shrink_loop_exit_00f7:
 11082 00007C0B 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
 11083 00007C13 E988000000              	jmp .L_lambda_opt_stack_adjusted_0053
 11084                                  .L_lambda_opt_arity_check_more_0053:
 11085 00007C18 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
 11086 00007C1D 4983E801                	sub r8, 1	; r8 = count of optional params
 11087 00007C21 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update the number of params (fixed params + 1 for list opt)
 11088 00007C2A 41B900000000            	mov r9, 0	; r9 = index of optional argument list
 11089 00007C30 4E8D54C418              	lea r10, [rsp + 2 * 8 + 1 * 8 + r8 * 8]	; r10 = address of first optional param
 11090 00007C35 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
 11090 00007C37 [0100000000000000] 
 11091                                  .L_lambda_opt_stack_shrink_loop_00f8:
 11092 00007C3F 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
 11093 00007C42 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_00f8	; Exit loop if all optional params are processed
 11094 00007C44 BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
 11095 00007C49 E804F50000              	call malloc	; Allocate memory for a new pair
 11096 00007C4E 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
 11097 00007C52 49F7D9                  	neg r9	; Negate index to access in reverse
 11098 00007C55 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
 11099 00007C59 49F7D9                  	neg r9	; Negate index back
 11100 00007C5C 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
 11101 00007C60 C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
 11102 00007C63 4989C3                  	mov r11, rax	; Update current pair to the newly created one
 11103 00007C66 49FFC1                  	inc r9	; Increment the index
 11104 00007C69 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_00f8	; Repeat the loop for the next param
 11105                                  .L_lambda_opt_stack_shrink_loop_exit_00f8:
 11106 00007C6B 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
 11107 00007C6E 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
 11108 00007C72 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
 11109 00007C75 4983C418                	add r12, 24	; Skip fixed params and return address
 11110 00007C79 41BD04000000            	mov r13, 4	; r13 = loop counter (number of params, old fp, ret addr, lex env)
 11111                                  .L_lambda_opt_stack_shrink_loop_00f9:
 11112 00007C7F 4983FD00                	cmp r13, 0	; Check if there are more values to copy
 11113 00007C83 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_00f9	; Exit loop if all values are copied
 11114 00007C85 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
 11115 00007C89 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
 11116 00007C8C 49FFCD                  	dec r13	; Decrement the loop counter
 11117 00007C8F 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
 11118 00007C93 4983EC08                	sub r12, 8	; Move the source pointer to the next location
 11119 00007C97 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_00f9	; Repeat the loop for the next value
 11120                                  .L_lambda_opt_stack_shrink_loop_exit_00f9:
 11121 00007C99 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
 11122 00007C9D 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
 11123                                  .L_lambda_opt_stack_adjusted_0053:
 11124 00007CA0 C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
 11125                                  	; preparing a non-tail-call
 11126 00007CA4 488B4528                	mov rax, PARAM(1)	; param s
 11127 00007CA8 50                      	push rax
 11128 00007CA9 6A01                    	push 1	; arg count
 11129 00007CAB 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 11130 00007CB3 803805                  	cmp byte [rax], T_undefined
 11131 00007CB6 0F8469F30000            	je L_error_fvar_undefined
 11132 00007CBC 803804                  	cmp byte [rax], T_closure
 11133 00007CBF 0F85E4F30000            	jne L_error_non_closure
 11134 00007CC5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11135 00007CC8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11136 00007CCB 483D[02000000]          	cmp rax, sob_boolean_false
 11137 00007CD1 0F848A000000            	je .L_if_else_01c1
 11138                                  	; preparing a tail-call
 11139 00007CD7 488B4520                	mov rax, PARAM(0)	; param a
 11140 00007CDB 50                      	push rax
 11141 00007CDC 48B8-                   	mov rax, L_constants + 2135
 11141 00007CDE [5708000000000000] 
 11142 00007CE6 50                      	push rax
 11143 00007CE7 6A02                    	push 2	; arg count
 11144 00007CE9 488B4510                	mov rax, ENV
 11145 00007CED 488B00                  	mov rax, qword [rax + 8 * 0]
 11146 00007CF0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 11147 00007CF3 803804                  	cmp byte [rax], T_closure
 11148 00007CF6 0F85ADF30000            	jne L_error_non_closure
 11149 00007CFC FF7001                  	push SOB_CLOSURE_ENV(rax)
 11150 00007CFF 4C8B4009                	mov r8, qword [rax + 1 + 8]
 11151 00007D03 FF7508                  	push qword [rbp + 8]				; push old return address
 11152 00007D06 FF7500                  	push qword [rbp]					; push old rbp
 11153                                  	;; move stack up ;;
 11154 00007D09 488B5D18                	mov rbx, [rbp + 3*8]
 11155 00007D0D 4889DE                  	mov rsi, rbx						; save old size in rsi
 11156 00007D10 4883C303                	add rbx, 3
 11157 00007D14 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 11158 00007D1C B902000000              	mov rcx, 2
 11159 00007D21 4883C104                	add rcx, 4				; num of iterations in rcx
 11160                                  .L_tc_recycle_frame_loop_032a:
 11161 00007D25 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 11162 00007D2D 488B143C                	mov rdx, [rsp + rdi]
 11163 00007D31 4889541D00              	mov [rbp + rbx], rdx
 11164 00007D36 4883EB08                	sub rbx, 8
 11165 00007D3A 48FFC9                  	dec rcx
 11166 00007D3D 4883F900                	cmp rcx, 0
 11167 00007D41 75E2                    	jne .L_tc_recycle_frame_loop_032a
 11168 00007D43 4889F3                  	mov rbx, rsi
 11169 00007D46 4883EB02                	sub rbx, 2
 11170 00007D4A 488D1CDD00000000        	lea rbx, [rbx*8]
 11171 00007D52 4801DD                  	add rbp, rbx
 11172 00007D55 4889EC                  	mov rsp, rbp         ; fix stack pointers
 11173 00007D58 5D                      	pop rbp
 11174 00007D59 41FFE0                  	jmp r8
 11175 00007D5C E9CA010000              	jmp .L_if_end_01c1
 11176                                  .L_if_else_01c1:
 11177                                  	; preparing a tail-call
 11178                                  	; preparing a non-tail-call
 11179 00007D61 488B4528                	mov rax, PARAM(1)	; param s
 11180 00007D65 50                      	push rax
 11181 00007D66 48B8-                   	mov rax, L_constants + 2135
 11181 00007D68 [5708000000000000] 
 11182 00007D70 50                      	push rax
 11183 00007D71 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 11184 00007D79 803805                  	cmp byte [rax], T_undefined
 11185 00007D7C 0F84A3F20000            	je L_error_fvar_undefined
 11186 00007D82 50                      	push rax
 11187 00007D83 6A03                    	push 3	; arg count
 11188 00007D85 488B0425[7C130000]      	mov rax, qword [free_var_85]	; free var fold-left
 11189 00007D8D 803805                  	cmp byte [rax], T_undefined
 11190 00007D90 0F848FF20000            	je L_error_fvar_undefined
 11191 00007D96 803804                  	cmp byte [rax], T_closure
 11192 00007D99 0F850AF30000            	jne L_error_non_closure
 11193 00007D9F FF7001                  	push SOB_CLOSURE_ENV(rax)
 11194 00007DA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11195 00007DA5 50                      	push rax
 11196 00007DA6 6A01                    	push 1	; arg count
 11197 00007DA8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11198 00007DAD E8A0F30000              	call malloc
 11199 00007DB2 50                      	push rax
 11200 00007DB3 BF10000000              	mov rdi, 8 * 2	; new rib
 11201 00007DB8 E895F30000              	call malloc
 11202 00007DBD 50                      	push rax
 11203 00007DBE BF20000000              	mov rdi, 8 * 4	; extended env
 11204 00007DC3 E88AF30000              	call malloc
 11205 00007DC8 488B7D10                	mov rdi, ENV
 11206 00007DCC BE00000000              	mov rsi, 0
 11207 00007DD1 BA01000000              	mov rdx, 1
 11208                                  .L_lambda_simple_env_loop_026a:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 11209 00007DD6 4883FE03                	cmp rsi, 3
 11210 00007DDA 7410                    	je .L_lambda_simple_env_end_026a
 11211 00007DDC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11212 00007DE0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11213 00007DE4 48FFC6                  	inc rsi
 11214 00007DE7 48FFC2                  	inc rdx
 11215 00007DEA EBEA                    	jmp .L_lambda_simple_env_loop_026a
 11216                                  .L_lambda_simple_env_end_026a:
 11217 00007DEC 5B                      	pop rbx
 11218 00007DED BE00000000              	mov rsi, 0
 11219                                  .L_lambda_simple_params_loop_026a:	; copy params
 11220 00007DF2 4883FE02                	cmp rsi, 2
 11221 00007DF6 740E                    	je .L_lambda_simple_params_end_026a
 11222 00007DF8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11223 00007DFD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11224 00007E01 48FFC6                  	inc rsi
 11225 00007E04 EBEC                    	jmp .L_lambda_simple_params_loop_026a
 11226                                  .L_lambda_simple_params_end_026a:
 11227 00007E06 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 11228 00007E09 4889C3                  	mov rbx, rax
 11229 00007E0C 58                      	pop rax
 11230 00007E0D C60004                  	mov byte [rax], T_closure
 11231 00007E10 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11232 00007E14 48C74009[217E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_026a
 11233 00007E1C E9A1000000              	jmp .L_lambda_simple_end_026a
 11234                                  .L_lambda_simple_code_026a:	; lambda-simple body
 11235 00007E21 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11236 00007E27 740B                    	je .L_lambda_simple_arity_check_ok_026a
 11237 00007E29 FF742410                	push qword [rsp + 8 * 2]
 11238 00007E2D 6A01                    	push 1
 11239 00007E2F E9D7F20000              	jmp L_error_incorrect_arity_simple
 11240                                  .L_lambda_simple_arity_check_ok_026a:
 11241 00007E34 C8000000                	enter 0, 0
 11242                                  	; preparing a tail-call
 11243 00007E38 488B4520                	mov rax, PARAM(0)	; param b
 11244 00007E3C 50                      	push rax
 11245 00007E3D 488B4510                	mov rax, ENV
 11246 00007E41 488B00                  	mov rax, qword [rax + 8 * 0]
 11247 00007E44 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 11248 00007E47 50                      	push rax
 11249 00007E48 6A02                    	push 2	; arg count
 11250 00007E4A 488B4510                	mov rax, ENV
 11251 00007E4E 488B4008                	mov rax, qword [rax + 8 * 1]
 11252 00007E52 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 11253 00007E55 803804                  	cmp byte [rax], T_closure
 11254 00007E58 0F854BF20000            	jne L_error_non_closure
 11255 00007E5E FF7001                  	push SOB_CLOSURE_ENV(rax)
 11256 00007E61 4C8B4009                	mov r8, qword [rax + 1 + 8]
 11257 00007E65 FF7508                  	push qword [rbp + 8]				; push old return address
 11258 00007E68 FF7500                  	push qword [rbp]					; push old rbp
 11259                                  	;; move stack up ;;
 11260 00007E6B 488B5D18                	mov rbx, [rbp + 3*8]
 11261 00007E6F 4889DE                  	mov rsi, rbx						; save old size in rsi
 11262 00007E72 4883C303                	add rbx, 3
 11263 00007E76 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 11264 00007E7E B902000000              	mov rcx, 2
 11265 00007E83 4883C104                	add rcx, 4				; num of iterations in rcx
 11266                                  .L_tc_recycle_frame_loop_032c:
 11267 00007E87 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 11268 00007E8F 488B143C                	mov rdx, [rsp + rdi]
 11269 00007E93 4889541D00              	mov [rbp + rbx], rdx
 11270 00007E98 4883EB08                	sub rbx, 8
 11271 00007E9C 48FFC9                  	dec rcx
 11272 00007E9F 4883F900                	cmp rcx, 0
 11273 00007EA3 75E2                    	jne .L_tc_recycle_frame_loop_032c
 11274 00007EA5 4889F3                  	mov rbx, rsi
 11275 00007EA8 4883EB02                	sub rbx, 2
 11276 00007EAC 488D1CDD00000000        	lea rbx, [rbx*8]
 11277 00007EB4 4801DD                  	add rbp, rbx
 11278 00007EB7 4889EC                  	mov rsp, rbp         ; fix stack pointers
 11279 00007EBA 5D                      	pop rbp
 11280 00007EBB 41FFE0                  	jmp r8
 11281 00007EBE C9                      	leave
 11282 00007EBF C21800                  	ret AND_KILL_FRAME(1)
 11283                                  .L_lambda_simple_end_026a:	; new closure is in rax
 11284 00007EC2 803804                  	cmp byte [rax], T_closure
 11285 00007EC5 0F85DEF10000            	jne L_error_non_closure
 11286 00007ECB FF7001                  	push SOB_CLOSURE_ENV(rax)
 11287 00007ECE 4C8B4009                	mov r8, qword [rax + 1 + 8]
 11288 00007ED2 FF7508                  	push qword [rbp + 8]				; push old return address
 11289 00007ED5 FF7500                  	push qword [rbp]					; push old rbp
 11290                                  	;; move stack up ;;
 11291 00007ED8 488B5D18                	mov rbx, [rbp + 3*8]
 11292 00007EDC 4889DE                  	mov rsi, rbx						; save old size in rsi
 11293 00007EDF 4883C303                	add rbx, 3
 11294 00007EE3 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 11295 00007EEB B901000000              	mov rcx, 1
 11296 00007EF0 4883C104                	add rcx, 4				; num of iterations in rcx
 11297                                  .L_tc_recycle_frame_loop_032b:
 11298 00007EF4 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 11299 00007EFC 488B143C                	mov rdx, [rsp + rdi]
 11300 00007F00 4889541D00              	mov [rbp + rbx], rdx
 11301 00007F05 4883EB08                	sub rbx, 8
 11302 00007F09 48FFC9                  	dec rcx
 11303 00007F0C 4883F900                	cmp rcx, 0
 11304 00007F10 75E2                    	jne .L_tc_recycle_frame_loop_032b
 11305 00007F12 4889F3                  	mov rbx, rsi
 11306 00007F15 4883EB01                	sub rbx, 1
 11307 00007F19 488D1CDD00000000        	lea rbx, [rbx*8]
 11308 00007F21 4801DD                  	add rbp, rbx
 11309 00007F24 4889EC                  	mov rsp, rbp         ; fix stack pointers
 11310 00007F27 5D                      	pop rbp
 11311 00007F28 41FFE0                  	jmp r8
 11312                                  .L_if_end_01c1:
 11313 00007F2B C9                      	leave	; Restore the previous stack frame
 11314 00007F2C C22000                  	ret AND_KILL_FRAME(2)
 11315                                  .L_lambda_opt_end_0053:	; new closure is in rax
 11316 00007F2F C9                      	leave
 11317 00007F30 C21800                  	ret AND_KILL_FRAME(1)
 11318                                  .L_lambda_simple_end_0269:	; new closure is in rax
 11319 00007F33 803804                  	cmp byte [rax], T_closure
 11320 00007F36 0F856DF10000            	jne L_error_non_closure
 11321 00007F3C FF7001                  	push SOB_CLOSURE_ENV(rax)
 11322 00007F3F 4C8B4009                	mov r8, qword [rax + 1 + 8]
 11323 00007F43 FF7508                  	push qword [rbp + 8]				; push old return address
 11324 00007F46 FF7500                  	push qword [rbp]					; push old rbp
 11325                                  	;; move stack up ;;
 11326 00007F49 488B5D18                	mov rbx, [rbp + 3*8]
 11327 00007F4D 4889DE                  	mov rsi, rbx						; save old size in rsi
 11328 00007F50 4883C303                	add rbx, 3
 11329 00007F54 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 11330 00007F5C B901000000              	mov rcx, 1
 11331 00007F61 4883C104                	add rcx, 4				; num of iterations in rcx
 11332                                  .L_tc_recycle_frame_loop_031c:
 11333 00007F65 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 11334 00007F6D 488B143C                	mov rdx, [rsp + rdi]
 11335 00007F71 4889541D00              	mov [rbp + rbx], rdx
 11336 00007F76 4883EB08                	sub rbx, 8
 11337 00007F7A 48FFC9                  	dec rcx
 11338 00007F7D 4883F900                	cmp rcx, 0
 11339 00007F81 75E2                    	jne .L_tc_recycle_frame_loop_031c
 11340 00007F83 4889F3                  	mov rbx, rsi
 11341 00007F86 4883EB01                	sub rbx, 1
 11342 00007F8A 488D1CDD00000000        	lea rbx, [rbx*8]
 11343 00007F92 4801DD                  	add rbp, rbx
 11344 00007F95 4889EC                  	mov rsp, rbp         ; fix stack pointers
 11345 00007F98 5D                      	pop rbp
 11346 00007F99 41FFE0                  	jmp r8
 11347 00007F9C C9                      	leave
 11348 00007F9D C21800                  	ret AND_KILL_FRAME(1)
 11349                                  .L_lambda_simple_end_0267:	; new closure is in rax
 11350 00007FA0 803804                  	cmp byte [rax], T_closure
 11351 00007FA3 0F8500F10000            	jne L_error_non_closure
 11352 00007FA9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11353 00007FAC FF5009                  	call SOB_CLOSURE_CODE(rax)
 11354 00007FAF 48890425[F90D0000]      	mov qword [free_var_2], rax
 11355 00007FB7 48B8-                   	mov rax, sob_void
 11355 00007FB9 [0000000000000000] 
 11356                                  
 11357 00007FC1 4889C7                  	mov rdi, rax
 11358 00007FC4 E8DEF30000              	call print_sexpr_if_not_void
 11359                                  	; preparing a non-tail-call
 11360 00007FC9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11361 00007FCE E87FF10000              	call malloc
 11362 00007FD3 50                      	push rax
 11363 00007FD4 BF00000000              	mov rdi, 8 * 0	; new rib
 11364 00007FD9 E874F10000              	call malloc
 11365 00007FDE 50                      	push rax
 11366 00007FDF BF08000000              	mov rdi, 8 * 1	; extended env
 11367 00007FE4 E869F10000              	call malloc
 11368 00007FE9 488B7D10                	mov rdi, ENV
 11369 00007FED BE00000000              	mov rsi, 0
 11370 00007FF2 BA01000000              	mov rdx, 1
 11371                                  .L_lambda_simple_env_loop_026b:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 11372 00007FF7 4883FE00                	cmp rsi, 0
 11373 00007FFB 7410                    	je .L_lambda_simple_env_end_026b
 11374 00007FFD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11375 00008001 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11376 00008005 48FFC6                  	inc rsi
 11377 00008008 48FFC2                  	inc rdx
 11378 0000800B EBEA                    	jmp .L_lambda_simple_env_loop_026b
 11379                                  .L_lambda_simple_env_end_026b:
 11380 0000800D 5B                      	pop rbx
 11381 0000800E BE00000000              	mov rsi, 0
 11382                                  .L_lambda_simple_params_loop_026b:	; copy params
 11383 00008013 4883FE00                	cmp rsi, 0
 11384 00008017 740E                    	je .L_lambda_simple_params_end_026b
 11385 00008019 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11386 0000801E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11387 00008022 48FFC6                  	inc rsi
 11388 00008025 EBEC                    	jmp .L_lambda_simple_params_loop_026b
 11389                                  .L_lambda_simple_params_end_026b:
 11390 00008027 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 11391 0000802A 4889C3                  	mov rbx, rax
 11392 0000802D 58                      	pop rax
 11393 0000802E C60004                  	mov byte [rax], T_closure
 11394 00008031 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11395 00008035 48C74009[42800000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_026b
 11396 0000803D E9AD000000              	jmp .L_lambda_simple_end_026b
 11397                                  .L_lambda_simple_code_026b:	; lambda-simple body
 11398 00008042 48837C241000            	cmp qword [rsp + 8 * 2], 0
 11399 00008048 740B                    	je .L_lambda_simple_arity_check_ok_026b
 11400 0000804A FF742410                	push qword [rsp + 8 * 2]
 11401 0000804E 6A00                    	push 0
 11402 00008050 E9B6F00000              	jmp L_error_incorrect_arity_simple
 11403                                  .L_lambda_simple_arity_check_ok_026b:
 11404 00008055 C8000000                	enter 0, 0
 11405                                  	; preparing a tail-call
 11406 00008059 48B8-                   	mov rax, L_constants + 2187
 11406 0000805B [8B08000000000000] 
 11407 00008063 50                      	push rax
 11408 00008064 48B8-                   	mov rax, L_constants + 2279
 11408 00008066 [E708000000000000] 
 11409 0000806E 50                      	push rax
 11410 0000806F 6A02                    	push 2	; arg count
 11411 00008071 488B0425[49130000]      	mov rax, qword [free_var_82]	; free var error
 11412 00008079 803805                  	cmp byte [rax], T_undefined
 11413 0000807C 0F84A3EF0000            	je L_error_fvar_undefined
 11414 00008082 803804                  	cmp byte [rax], T_closure
 11415 00008085 0F851EF00000            	jne L_error_non_closure
 11416 0000808B FF7001                  	push SOB_CLOSURE_ENV(rax)
 11417 0000808E 4C8B4009                	mov r8, qword [rax + 1 + 8]
 11418 00008092 FF7508                  	push qword [rbp + 8]				; push old return address
 11419 00008095 FF7500                  	push qword [rbp]					; push old rbp
 11420                                  	;; move stack up ;;
 11421 00008098 488B5D18                	mov rbx, [rbp + 3*8]
 11422 0000809C 4889DE                  	mov rsi, rbx						; save old size in rsi
 11423 0000809F 4883C303                	add rbx, 3
 11424 000080A3 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 11425 000080AB B902000000              	mov rcx, 2
 11426 000080B0 4883C104                	add rcx, 4				; num of iterations in rcx
 11427                                  .L_tc_recycle_frame_loop_032d:
 11428 000080B4 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 11429 000080BC 488B143C                	mov rdx, [rsp + rdi]
 11430 000080C0 4889541D00              	mov [rbp + rbx], rdx
 11431 000080C5 4883EB08                	sub rbx, 8
 11432 000080C9 48FFC9                  	dec rcx
 11433 000080CC 4883F900                	cmp rcx, 0
 11434 000080D0 75E2                    	jne .L_tc_recycle_frame_loop_032d
 11435 000080D2 4889F3                  	mov rbx, rsi
 11436 000080D5 4883EB02                	sub rbx, 2
 11437 000080D9 488D1CDD00000000        	lea rbx, [rbx*8]
 11438 000080E1 4801DD                  	add rbp, rbx
 11439 000080E4 4889EC                  	mov rsp, rbp         ; fix stack pointers
 11440 000080E7 5D                      	pop rbp
 11441 000080E8 41FFE0                  	jmp r8
 11442 000080EB C9                      	leave
 11443 000080EC C21000                  	ret AND_KILL_FRAME(0)
 11444                                  .L_lambda_simple_end_026b:	; new closure is in rax
 11445 000080EF 50                      	push rax
 11446 000080F0 6A01                    	push 1	; arg count
 11447 000080F2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11448 000080F7 E856F00000              	call malloc
 11449 000080FC 50                      	push rax
 11450 000080FD BF00000000              	mov rdi, 8 * 0	; new rib
 11451 00008102 E84BF00000              	call malloc
 11452 00008107 50                      	push rax
 11453 00008108 BF08000000              	mov rdi, 8 * 1	; extended env
 11454 0000810D E840F00000              	call malloc
 11455 00008112 488B7D10                	mov rdi, ENV
 11456 00008116 BE00000000              	mov rsi, 0
 11457 0000811B BA01000000              	mov rdx, 1
 11458                                  .L_lambda_simple_env_loop_026c:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 11459 00008120 4883FE00                	cmp rsi, 0
 11460 00008124 7410                    	je .L_lambda_simple_env_end_026c
 11461 00008126 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11462 0000812A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11463 0000812E 48FFC6                  	inc rsi
 11464 00008131 48FFC2                  	inc rdx
 11465 00008134 EBEA                    	jmp .L_lambda_simple_env_loop_026c
 11466                                  .L_lambda_simple_env_end_026c:
 11467 00008136 5B                      	pop rbx
 11468 00008137 BE00000000              	mov rsi, 0
 11469                                  .L_lambda_simple_params_loop_026c:	; copy params
 11470 0000813C 4883FE00                	cmp rsi, 0
 11471 00008140 740E                    	je .L_lambda_simple_params_end_026c
 11472 00008142 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11473 00008147 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11474 0000814B 48FFC6                  	inc rsi
 11475 0000814E EBEC                    	jmp .L_lambda_simple_params_loop_026c
 11476                                  .L_lambda_simple_params_end_026c:
 11477 00008150 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 11478 00008153 4889C3                  	mov rbx, rax
 11479 00008156 58                      	pop rax
 11480 00008157 C60004                  	mov byte [rax], T_closure
 11481 0000815A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11482 0000815E 48C74009[6B810000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_026c
 11483 00008166 E9910D0000              	jmp .L_lambda_simple_end_026c
 11484                                  .L_lambda_simple_code_026c:	; lambda-simple body
 11485 0000816B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11486 00008171 740B                    	je .L_lambda_simple_arity_check_ok_026c
 11487 00008173 FF742410                	push qword [rsp + 8 * 2]
 11488 00008177 6A01                    	push 1
 11489 00008179 E98DEF0000              	jmp L_error_incorrect_arity_simple
 11490                                  .L_lambda_simple_arity_check_ok_026c:
 11491 0000817E C8000000                	enter 0, 0
 11492                                  	; preparing a tail-call
 11493 00008182 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11494 00008187 E8C6EF0000              	call malloc
 11495 0000818C 50                      	push rax
 11496 0000818D BF08000000              	mov rdi, 8 * 1	; new rib
 11497 00008192 E8BBEF0000              	call malloc
 11498 00008197 50                      	push rax
 11499 00008198 BF10000000              	mov rdi, 8 * 2	; extended env
 11500 0000819D E8B0EF0000              	call malloc
 11501 000081A2 488B7D10                	mov rdi, ENV
 11502 000081A6 BE00000000              	mov rsi, 0
 11503 000081AB BA01000000              	mov rdx, 1
 11504                                  .L_lambda_simple_env_loop_026d:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 11505 000081B0 4883FE01                	cmp rsi, 1
 11506 000081B4 7410                    	je .L_lambda_simple_env_end_026d
 11507 000081B6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11508 000081BA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11509 000081BE 48FFC6                  	inc rsi
 11510 000081C1 48FFC2                  	inc rdx
 11511 000081C4 EBEA                    	jmp .L_lambda_simple_env_loop_026d
 11512                                  .L_lambda_simple_env_end_026d:
 11513 000081C6 5B                      	pop rbx
 11514 000081C7 BE00000000              	mov rsi, 0
 11515                                  .L_lambda_simple_params_loop_026d:	; copy params
 11516 000081CC 4883FE01                	cmp rsi, 1
 11517 000081D0 740E                    	je .L_lambda_simple_params_end_026d
 11518 000081D2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11519 000081D7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11520 000081DB 48FFC6                  	inc rsi
 11521 000081DE EBEC                    	jmp .L_lambda_simple_params_loop_026d
 11522                                  .L_lambda_simple_params_end_026d:
 11523 000081E0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 11524 000081E3 4889C3                  	mov rbx, rax
 11525 000081E6 58                      	pop rax
 11526 000081E7 C60004                  	mov byte [rax], T_closure
 11527 000081EA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11528 000081EE 48C74009[FB810000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_026d
 11529 000081F6 E90B0A0000              	jmp .L_lambda_simple_end_026d
 11530                                  .L_lambda_simple_code_026d:	; lambda-simple body
 11531 000081FB 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11532 00008201 740B                    	je .L_lambda_simple_arity_check_ok_026d
 11533 00008203 FF742410                	push qword [rsp + 8 * 2]
 11534 00008207 6A02                    	push 2
 11535 00008209 E9FDEE0000              	jmp L_error_incorrect_arity_simple
 11536                                  .L_lambda_simple_arity_check_ok_026d:
 11537 0000820E C8000000                	enter 0, 0
 11538                                  	; preparing a non-tail-call
 11539 00008212 488B4520                	mov rax, PARAM(0)	; param a
 11540 00008216 50                      	push rax
 11541 00008217 6A01                    	push 1	; arg count
 11542 00008219 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 11543 00008221 803805                  	cmp byte [rax], T_undefined
 11544 00008224 0F84FBED0000            	je L_error_fvar_undefined
 11545 0000822A 803804                  	cmp byte [rax], T_closure
 11546 0000822D 0F8576EE0000            	jne L_error_non_closure
 11547 00008233 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11548 00008236 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11549 00008239 483D[02000000]          	cmp rax, sob_boolean_false
 11550 0000823F 0F84F7020000            	je .L_if_else_01cd
 11551                                  	; preparing a non-tail-call
 11552 00008245 488B4528                	mov rax, PARAM(1)	; param b
 11553 00008249 50                      	push rax
 11554 0000824A 6A01                    	push 1	; arg count
 11555 0000824C 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 11556 00008254 803805                  	cmp byte [rax], T_undefined
 11557 00008257 0F84C8ED0000            	je L_error_fvar_undefined
 11558 0000825D 803804                  	cmp byte [rax], T_closure
 11559 00008260 0F8543EE0000            	jne L_error_non_closure
 11560 00008266 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11561 00008269 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11562 0000826C 483D[02000000]          	cmp rax, sob_boolean_false
 11563 00008272 0F848B000000            	je .L_if_else_01c4
 11564                                  	; preparing a tail-call
 11565 00008278 488B4528                	mov rax, PARAM(1)	; param b
 11566 0000827C 50                      	push rax
 11567 0000827D 488B4520                	mov rax, PARAM(0)	; param a
 11568 00008281 50                      	push rax
 11569 00008282 6A02                    	push 2	; arg count
 11570 00008284 488B0425[6F0F0000]      	mov rax, qword [free_var_24]	; free var __bin-mul-zz
 11571 0000828C 803805                  	cmp byte [rax], T_undefined
 11572 0000828F 0F8490ED0000            	je L_error_fvar_undefined
 11573 00008295 803804                  	cmp byte [rax], T_closure
 11574 00008298 0F850BEE0000            	jne L_error_non_closure
 11575 0000829E FF7001                  	push SOB_CLOSURE_ENV(rax)
 11576 000082A1 4C8B4009                	mov r8, qword [rax + 1 + 8]
 11577 000082A5 FF7508                  	push qword [rbp + 8]				; push old return address
 11578 000082A8 FF7500                  	push qword [rbp]					; push old rbp
 11579                                  	;; move stack up ;;
 11580 000082AB 488B5D18                	mov rbx, [rbp + 3*8]
 11581 000082AF 4889DE                  	mov rsi, rbx						; save old size in rsi
 11582 000082B2 4883C303                	add rbx, 3
 11583 000082B6 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 11584 000082BE B902000000              	mov rcx, 2
 11585 000082C3 4883C104                	add rcx, 4				; num of iterations in rcx
 11586                                  .L_tc_recycle_frame_loop_032f:
 11587 000082C7 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 11588 000082CF 488B143C                	mov rdx, [rsp + rdi]
 11589 000082D3 4889541D00              	mov [rbp + rbx], rdx
 11590 000082D8 4883EB08                	sub rbx, 8
 11591 000082DC 48FFC9                  	dec rcx
 11592 000082DF 4883F900                	cmp rcx, 0
 11593 000082E3 75E2                    	jne .L_tc_recycle_frame_loop_032f
 11594 000082E5 4889F3                  	mov rbx, rsi
 11595 000082E8 4883EB02                	sub rbx, 2
 11596 000082EC 488D1CDD00000000        	lea rbx, [rbx*8]
 11597 000082F4 4801DD                  	add rbp, rbx
 11598 000082F7 4889EC                  	mov rsp, rbp         ; fix stack pointers
 11599 000082FA 5D                      	pop rbp
 11600 000082FB 41FFE0                  	jmp r8
 11601 000082FE E934020000              	jmp .L_if_end_01c4
 11602                                  .L_if_else_01c4:
 11603                                  	; preparing a non-tail-call
 11604 00008303 488B4528                	mov rax, PARAM(1)	; param b
 11605 00008307 50                      	push rax
 11606 00008308 6A01                    	push 1	; arg count
 11607 0000830A 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 11608 00008312 803805                  	cmp byte [rax], T_undefined
 11609 00008315 0F840AED0000            	je L_error_fvar_undefined
 11610 0000831B 803804                  	cmp byte [rax], T_closure
 11611 0000831E 0F8585ED0000            	jne L_error_non_closure
 11612 00008324 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11613 00008327 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11614 0000832A 483D[02000000]          	cmp rax, sob_boolean_false
 11615 00008330 0F84AE000000            	je .L_if_else_01c3
 11616                                  	; preparing a tail-call
 11617 00008336 488B4528                	mov rax, PARAM(1)	; param b
 11618 0000833A 50                      	push rax
 11619                                  	; preparing a non-tail-call
 11620 0000833B 488B4520                	mov rax, PARAM(0)	; param a
 11621 0000833F 50                      	push rax
 11622 00008340 6A01                    	push 1	; arg count
 11623 00008342 488B0425[C40F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 11624 0000834A 803805                  	cmp byte [rax], T_undefined
 11625 0000834D 0F84D2EC0000            	je L_error_fvar_undefined
 11626 00008353 803804                  	cmp byte [rax], T_closure
 11627 00008356 0F854DED0000            	jne L_error_non_closure
 11628 0000835C FF7001                  	push SOB_CLOSURE_ENV(rax)
 11629 0000835F FF5009                  	call SOB_CLOSURE_CODE(rax)
 11630 00008362 50                      	push rax
 11631 00008363 6A02                    	push 2	; arg count
 11632 00008365 488B0425[4D0F0000]      	mov rax, qword [free_var_22]	; free var __bin-mul-qq
 11633 0000836D 803805                  	cmp byte [rax], T_undefined
 11634 00008370 0F84AFEC0000            	je L_error_fvar_undefined
 11635 00008376 803804                  	cmp byte [rax], T_closure
 11636 00008379 0F852AED0000            	jne L_error_non_closure
 11637 0000837F FF7001                  	push SOB_CLOSURE_ENV(rax)
 11638 00008382 4C8B4009                	mov r8, qword [rax + 1 + 8]
 11639 00008386 FF7508                  	push qword [rbp + 8]				; push old return address
 11640 00008389 FF7500                  	push qword [rbp]					; push old rbp
 11641                                  	;; move stack up ;;
 11642 0000838C 488B5D18                	mov rbx, [rbp + 3*8]
 11643 00008390 4889DE                  	mov rsi, rbx						; save old size in rsi
 11644 00008393 4883C303                	add rbx, 3
 11645 00008397 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 11646 0000839F B902000000              	mov rcx, 2
 11647 000083A4 4883C104                	add rcx, 4				; num of iterations in rcx
 11648                                  .L_tc_recycle_frame_loop_0330:
 11649 000083A8 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 11650 000083B0 488B143C                	mov rdx, [rsp + rdi]
 11651 000083B4 4889541D00              	mov [rbp + rbx], rdx
 11652 000083B9 4883EB08                	sub rbx, 8
 11653 000083BD 48FFC9                  	dec rcx
 11654 000083C0 4883F900                	cmp rcx, 0
 11655 000083C4 75E2                    	jne .L_tc_recycle_frame_loop_0330
 11656 000083C6 4889F3                  	mov rbx, rsi
 11657 000083C9 4883EB02                	sub rbx, 2
 11658 000083CD 488D1CDD00000000        	lea rbx, [rbx*8]
 11659 000083D5 4801DD                  	add rbp, rbx
 11660 000083D8 4889EC                  	mov rsp, rbp         ; fix stack pointers
 11661 000083DB 5D                      	pop rbp
 11662 000083DC 41FFE0                  	jmp r8
 11663 000083DF E953010000              	jmp .L_if_end_01c3
 11664                                  .L_if_else_01c3:
 11665                                  	; preparing a non-tail-call
 11666 000083E4 488B4528                	mov rax, PARAM(1)	; param b
 11667 000083E8 50                      	push rax
 11668 000083E9 6A01                    	push 1	; arg count
 11669 000083EB 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 11670 000083F3 803805                  	cmp byte [rax], T_undefined
 11671 000083F6 0F8429EC0000            	je L_error_fvar_undefined
 11672 000083FC 803804                  	cmp byte [rax], T_closure
 11673 000083FF 0F85A4EC0000            	jne L_error_non_closure
 11674 00008405 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11675 00008408 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11676 0000840B 483D[02000000]          	cmp rax, sob_boolean_false
 11677 00008411 0F84AB000000            	je .L_if_else_01c2
 11678                                  	; preparing a tail-call
 11679 00008417 488B4528                	mov rax, PARAM(1)	; param b
 11680 0000841B 50                      	push rax
 11681                                  	; preparing a non-tail-call
 11682 0000841C 488B4520                	mov rax, PARAM(0)	; param a
 11683 00008420 50                      	push rax
 11684 00008421 6A01                    	push 1	; arg count
 11685 00008423 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
 11686 0000842B 803805                  	cmp byte [rax], T_undefined
 11687 0000842E 0F84F1EB0000            	je L_error_fvar_undefined
 11688 00008434 803804                  	cmp byte [rax], T_closure
 11689 00008437 0F856CEC0000            	jne L_error_non_closure
 11690 0000843D FF7001                  	push SOB_CLOSURE_ENV(rax)
 11691 00008440 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11692 00008443 50                      	push rax
 11693 00008444 6A02                    	push 2	; arg count
 11694 00008446 488B0425[5E0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 11695 0000844E 803805                  	cmp byte [rax], T_undefined
 11696 00008451 0F84CEEB0000            	je L_error_fvar_undefined
 11697 00008457 803804                  	cmp byte [rax], T_closure
 11698 0000845A 0F8549EC0000            	jne L_error_non_closure
 11699 00008460 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11700 00008463 4C8B4009                	mov r8, qword [rax + 1 + 8]
 11701 00008467 FF7508                  	push qword [rbp + 8]				; push old return address
 11702 0000846A FF7500                  	push qword [rbp]					; push old rbp
 11703                                  	;; move stack up ;;
 11704 0000846D 488B5D18                	mov rbx, [rbp + 3*8]
 11705 00008471 4889DE                  	mov rsi, rbx						; save old size in rsi
 11706 00008474 4883C303                	add rbx, 3
 11707 00008478 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 11708 00008480 B902000000              	mov rcx, 2
 11709 00008485 4883C104                	add rcx, 4				; num of iterations in rcx
 11710                                  .L_tc_recycle_frame_loop_0331:
 11711 00008489 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 11712 00008491 488B143C                	mov rdx, [rsp + rdi]
 11713 00008495 4889541D00              	mov [rbp + rbx], rdx
 11714 0000849A 4883EB08                	sub rbx, 8
 11715 0000849E 48FFC9                  	dec rcx
 11716 000084A1 4883F900                	cmp rcx, 0
 11717 000084A5 75E2                    	jne .L_tc_recycle_frame_loop_0331
 11718 000084A7 4889F3                  	mov rbx, rsi
 11719 000084AA 4883EB02                	sub rbx, 2
 11720 000084AE 488D1CDD00000000        	lea rbx, [rbx*8]
 11721 000084B6 4801DD                  	add rbp, rbx
 11722 000084B9 4889EC                  	mov rsp, rbp         ; fix stack pointers
 11723 000084BC 5D                      	pop rbp
 11724 000084BD 41FFE0                  	jmp r8
 11725 000084C0 EB75                    	jmp .L_if_end_01c2
 11726                                  .L_if_else_01c2:
 11727                                  	; preparing a tail-call
 11728 000084C2 6A00                    	push 0	; arg count
 11729 000084C4 488B4510                	mov rax, ENV
 11730 000084C8 488B00                  	mov rax, qword [rax + 8 * 0]
 11731 000084CB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11732 000084CE 803804                  	cmp byte [rax], T_closure
 11733 000084D1 0F85D2EB0000            	jne L_error_non_closure
 11734 000084D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11735 000084DA 4C8B4009                	mov r8, qword [rax + 1 + 8]
 11736 000084DE FF7508                  	push qword [rbp + 8]				; push old return address
 11737 000084E1 FF7500                  	push qword [rbp]					; push old rbp
 11738                                  	;; move stack up ;;
 11739 000084E4 488B5D18                	mov rbx, [rbp + 3*8]
 11740 000084E8 4889DE                  	mov rsi, rbx						; save old size in rsi
 11741 000084EB 4883C303                	add rbx, 3
 11742 000084EF 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 11743 000084F7 B900000000              	mov rcx, 0
 11744 000084FC 4883C104                	add rcx, 4				; num of iterations in rcx
 11745                                  .L_tc_recycle_frame_loop_0332:
 11746 00008500 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 11747 00008508 488B143C                	mov rdx, [rsp + rdi]
 11748 0000850C 4889541D00              	mov [rbp + rbx], rdx
 11749 00008511 4883EB08                	sub rbx, 8
 11750 00008515 48FFC9                  	dec rcx
 11751 00008518 4883F900                	cmp rcx, 0
 11752 0000851C 75E2                    	jne .L_tc_recycle_frame_loop_0332
 11753 0000851E 4889F3                  	mov rbx, rsi
 11754 00008521 4883EB00                	sub rbx, 0
 11755 00008525 488D1CDD00000000        	lea rbx, [rbx*8]
 11756 0000852D 4801DD                  	add rbp, rbx
 11757 00008530 4889EC                  	mov rsp, rbp         ; fix stack pointers
 11758 00008533 5D                      	pop rbp
 11759 00008534 41FFE0                  	jmp r8
 11760                                  .L_if_end_01c2:
 11761                                  .L_if_end_01c3:
 11762                                  .L_if_end_01c4:
 11763 00008537 E9C6060000              	jmp .L_if_end_01cd
 11764                                  .L_if_else_01cd:
 11765                                  	; preparing a non-tail-call
 11766 0000853C 488B4520                	mov rax, PARAM(0)	; param a
 11767 00008540 50                      	push rax
 11768 00008541 6A01                    	push 1	; arg count
 11769 00008543 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 11770 0000854B 803805                  	cmp byte [rax], T_undefined
 11771 0000854E 0F84D1EA0000            	je L_error_fvar_undefined
 11772 00008554 803804                  	cmp byte [rax], T_closure
 11773 00008557 0F854CEB0000            	jne L_error_non_closure
 11774 0000855D FF7001                  	push SOB_CLOSURE_ENV(rax)
 11775 00008560 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11776 00008563 483D[02000000]          	cmp rax, sob_boolean_false
 11777 00008569 0F84F7020000            	je .L_if_else_01cc
 11778                                  	; preparing a non-tail-call
 11779 0000856F 488B4528                	mov rax, PARAM(1)	; param b
 11780 00008573 50                      	push rax
 11781 00008574 6A01                    	push 1	; arg count
 11782 00008576 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 11783 0000857E 803805                  	cmp byte [rax], T_undefined
 11784 00008581 0F849EEA0000            	je L_error_fvar_undefined
 11785 00008587 803804                  	cmp byte [rax], T_closure
 11786 0000858A 0F8519EB0000            	jne L_error_non_closure
 11787 00008590 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11788 00008593 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11789 00008596 483D[02000000]          	cmp rax, sob_boolean_false
 11790 0000859C 0F84AE000000            	je .L_if_else_01c7
 11791                                  	; preparing a tail-call
 11792                                  	; preparing a non-tail-call
 11793 000085A2 488B4528                	mov rax, PARAM(1)	; param b
 11794 000085A6 50                      	push rax
 11795 000085A7 6A01                    	push 1	; arg count
 11796 000085A9 488B0425[C40F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 11797 000085B1 803805                  	cmp byte [rax], T_undefined
 11798 000085B4 0F846BEA0000            	je L_error_fvar_undefined
 11799 000085BA 803804                  	cmp byte [rax], T_closure
 11800 000085BD 0F85E6EA0000            	jne L_error_non_closure
 11801 000085C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11802 000085C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11803 000085C9 50                      	push rax
 11804 000085CA 488B4520                	mov rax, PARAM(0)	; param a
 11805 000085CE 50                      	push rax
 11806 000085CF 6A02                    	push 2	; arg count
 11807 000085D1 488B0425[4D0F0000]      	mov rax, qword [free_var_22]	; free var __bin-mul-qq
 11808 000085D9 803805                  	cmp byte [rax], T_undefined
 11809 000085DC 0F8443EA0000            	je L_error_fvar_undefined
 11810 000085E2 803804                  	cmp byte [rax], T_closure
 11811 000085E5 0F85BEEA0000            	jne L_error_non_closure
 11812 000085EB FF7001                  	push SOB_CLOSURE_ENV(rax)
 11813 000085EE 4C8B4009                	mov r8, qword [rax + 1 + 8]
 11814 000085F2 FF7508                  	push qword [rbp + 8]				; push old return address
 11815 000085F5 FF7500                  	push qword [rbp]					; push old rbp
 11816                                  	;; move stack up ;;
 11817 000085F8 488B5D18                	mov rbx, [rbp + 3*8]
 11818 000085FC 4889DE                  	mov rsi, rbx						; save old size in rsi
 11819 000085FF 4883C303                	add rbx, 3
 11820 00008603 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 11821 0000860B B902000000              	mov rcx, 2
 11822 00008610 4883C104                	add rcx, 4				; num of iterations in rcx
 11823                                  .L_tc_recycle_frame_loop_0333:
 11824 00008614 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 11825 0000861C 488B143C                	mov rdx, [rsp + rdi]
 11826 00008620 4889541D00              	mov [rbp + rbx], rdx
 11827 00008625 4883EB08                	sub rbx, 8
 11828 00008629 48FFC9                  	dec rcx
 11829 0000862C 4883F900                	cmp rcx, 0
 11830 00008630 75E2                    	jne .L_tc_recycle_frame_loop_0333
 11831 00008632 4889F3                  	mov rbx, rsi
 11832 00008635 4883EB02                	sub rbx, 2
 11833 00008639 488D1CDD00000000        	lea rbx, [rbx*8]
 11834 00008641 4801DD                  	add rbp, rbx
 11835 00008644 4889EC                  	mov rsp, rbp         ; fix stack pointers
 11836 00008647 5D                      	pop rbp
 11837 00008648 41FFE0                  	jmp r8
 11838 0000864B E911020000              	jmp .L_if_end_01c7
 11839                                  .L_if_else_01c7:
 11840                                  	; preparing a non-tail-call
 11841 00008650 488B4528                	mov rax, PARAM(1)	; param b
 11842 00008654 50                      	push rax
 11843 00008655 6A01                    	push 1	; arg count
 11844 00008657 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 11845 0000865F 803805                  	cmp byte [rax], T_undefined
 11846 00008662 0F84BDE90000            	je L_error_fvar_undefined
 11847 00008668 803804                  	cmp byte [rax], T_closure
 11848 0000866B 0F8538EA0000            	jne L_error_non_closure
 11849 00008671 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11850 00008674 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11851 00008677 483D[02000000]          	cmp rax, sob_boolean_false
 11852 0000867D 0F848B000000            	je .L_if_else_01c6
 11853                                  	; preparing a tail-call
 11854 00008683 488B4528                	mov rax, PARAM(1)	; param b
 11855 00008687 50                      	push rax
 11856 00008688 488B4520                	mov rax, PARAM(0)	; param a
 11857 0000868C 50                      	push rax
 11858 0000868D 6A02                    	push 2	; arg count
 11859 0000868F 488B0425[4D0F0000]      	mov rax, qword [free_var_22]	; free var __bin-mul-qq
 11860 00008697 803805                  	cmp byte [rax], T_undefined
 11861 0000869A 0F8485E90000            	je L_error_fvar_undefined
 11862 000086A0 803804                  	cmp byte [rax], T_closure
 11863 000086A3 0F8500EA0000            	jne L_error_non_closure
 11864 000086A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11865 000086AC 4C8B4009                	mov r8, qword [rax + 1 + 8]
 11866 000086B0 FF7508                  	push qword [rbp + 8]				; push old return address
 11867 000086B3 FF7500                  	push qword [rbp]					; push old rbp
 11868                                  	;; move stack up ;;
 11869 000086B6 488B5D18                	mov rbx, [rbp + 3*8]
 11870 000086BA 4889DE                  	mov rsi, rbx						; save old size in rsi
 11871 000086BD 4883C303                	add rbx, 3
 11872 000086C1 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 11873 000086C9 B902000000              	mov rcx, 2
 11874 000086CE 4883C104                	add rcx, 4				; num of iterations in rcx
 11875                                  .L_tc_recycle_frame_loop_0334:
 11876 000086D2 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 11877 000086DA 488B143C                	mov rdx, [rsp + rdi]
 11878 000086DE 4889541D00              	mov [rbp + rbx], rdx
 11879 000086E3 4883EB08                	sub rbx, 8
 11880 000086E7 48FFC9                  	dec rcx
 11881 000086EA 4883F900                	cmp rcx, 0
 11882 000086EE 75E2                    	jne .L_tc_recycle_frame_loop_0334
 11883 000086F0 4889F3                  	mov rbx, rsi
 11884 000086F3 4883EB02                	sub rbx, 2
 11885 000086F7 488D1CDD00000000        	lea rbx, [rbx*8]
 11886 000086FF 4801DD                  	add rbp, rbx
 11887 00008702 4889EC                  	mov rsp, rbp         ; fix stack pointers
 11888 00008705 5D                      	pop rbp
 11889 00008706 41FFE0                  	jmp r8
 11890 00008709 E953010000              	jmp .L_if_end_01c6
 11891                                  .L_if_else_01c6:
 11892                                  	; preparing a non-tail-call
 11893 0000870E 488B4528                	mov rax, PARAM(1)	; param b
 11894 00008712 50                      	push rax
 11895 00008713 6A01                    	push 1	; arg count
 11896 00008715 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 11897 0000871D 803805                  	cmp byte [rax], T_undefined
 11898 00008720 0F84FFE80000            	je L_error_fvar_undefined
 11899 00008726 803804                  	cmp byte [rax], T_closure
 11900 00008729 0F857AE90000            	jne L_error_non_closure
 11901 0000872F FF7001                  	push SOB_CLOSURE_ENV(rax)
 11902 00008732 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11903 00008735 483D[02000000]          	cmp rax, sob_boolean_false
 11904 0000873B 0F84AB000000            	je .L_if_else_01c5
 11905                                  	; preparing a tail-call
 11906 00008741 488B4528                	mov rax, PARAM(1)	; param b
 11907 00008745 50                      	push rax
 11908                                  	; preparing a non-tail-call
 11909 00008746 488B4520                	mov rax, PARAM(0)	; param a
 11910 0000874A 50                      	push rax
 11911 0000874B 6A01                    	push 1	; arg count
 11912 0000874D 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 11913 00008755 803805                  	cmp byte [rax], T_undefined
 11914 00008758 0F84C7E80000            	je L_error_fvar_undefined
 11915 0000875E 803804                  	cmp byte [rax], T_closure
 11916 00008761 0F8542E90000            	jne L_error_non_closure
 11917 00008767 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11918 0000876A FF5009                  	call SOB_CLOSURE_CODE(rax)
 11919 0000876D 50                      	push rax
 11920 0000876E 6A02                    	push 2	; arg count
 11921 00008770 488B0425[5E0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 11922 00008778 803805                  	cmp byte [rax], T_undefined
 11923 0000877B 0F84A4E80000            	je L_error_fvar_undefined
 11924 00008781 803804                  	cmp byte [rax], T_closure
 11925 00008784 0F851FE90000            	jne L_error_non_closure
 11926 0000878A FF7001                  	push SOB_CLOSURE_ENV(rax)
 11927 0000878D 4C8B4009                	mov r8, qword [rax + 1 + 8]
 11928 00008791 FF7508                  	push qword [rbp + 8]				; push old return address
 11929 00008794 FF7500                  	push qword [rbp]					; push old rbp
 11930                                  	;; move stack up ;;
 11931 00008797 488B5D18                	mov rbx, [rbp + 3*8]
 11932 0000879B 4889DE                  	mov rsi, rbx						; save old size in rsi
 11933 0000879E 4883C303                	add rbx, 3
 11934 000087A2 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 11935 000087AA B902000000              	mov rcx, 2
 11936 000087AF 4883C104                	add rcx, 4				; num of iterations in rcx
 11937                                  .L_tc_recycle_frame_loop_0335:
 11938 000087B3 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 11939 000087BB 488B143C                	mov rdx, [rsp + rdi]
 11940 000087BF 4889541D00              	mov [rbp + rbx], rdx
 11941 000087C4 4883EB08                	sub rbx, 8
 11942 000087C8 48FFC9                  	dec rcx
 11943 000087CB 4883F900                	cmp rcx, 0
 11944 000087CF 75E2                    	jne .L_tc_recycle_frame_loop_0335
 11945 000087D1 4889F3                  	mov rbx, rsi
 11946 000087D4 4883EB02                	sub rbx, 2
 11947 000087D8 488D1CDD00000000        	lea rbx, [rbx*8]
 11948 000087E0 4801DD                  	add rbp, rbx
 11949 000087E3 4889EC                  	mov rsp, rbp         ; fix stack pointers
 11950 000087E6 5D                      	pop rbp
 11951 000087E7 41FFE0                  	jmp r8
 11952 000087EA EB75                    	jmp .L_if_end_01c5
 11953                                  .L_if_else_01c5:
 11954                                  	; preparing a tail-call
 11955 000087EC 6A00                    	push 0	; arg count
 11956 000087EE 488B4510                	mov rax, ENV
 11957 000087F2 488B00                  	mov rax, qword [rax + 8 * 0]
 11958 000087F5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11959 000087F8 803804                  	cmp byte [rax], T_closure
 11960 000087FB 0F85A8E80000            	jne L_error_non_closure
 11961 00008801 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11962 00008804 4C8B4009                	mov r8, qword [rax + 1 + 8]
 11963 00008808 FF7508                  	push qword [rbp + 8]				; push old return address
 11964 0000880B FF7500                  	push qword [rbp]					; push old rbp
 11965                                  	;; move stack up ;;
 11966 0000880E 488B5D18                	mov rbx, [rbp + 3*8]
 11967 00008812 4889DE                  	mov rsi, rbx						; save old size in rsi
 11968 00008815 4883C303                	add rbx, 3
 11969 00008819 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 11970 00008821 B900000000              	mov rcx, 0
 11971 00008826 4883C104                	add rcx, 4				; num of iterations in rcx
 11972                                  .L_tc_recycle_frame_loop_0336:
 11973 0000882A 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 11974 00008832 488B143C                	mov rdx, [rsp + rdi]
 11975 00008836 4889541D00              	mov [rbp + rbx], rdx
 11976 0000883B 4883EB08                	sub rbx, 8
 11977 0000883F 48FFC9                  	dec rcx
 11978 00008842 4883F900                	cmp rcx, 0
 11979 00008846 75E2                    	jne .L_tc_recycle_frame_loop_0336
 11980 00008848 4889F3                  	mov rbx, rsi
 11981 0000884B 4883EB00                	sub rbx, 0
 11982 0000884F 488D1CDD00000000        	lea rbx, [rbx*8]
 11983 00008857 4801DD                  	add rbp, rbx
 11984 0000885A 4889EC                  	mov rsp, rbp         ; fix stack pointers
 11985 0000885D 5D                      	pop rbp
 11986 0000885E 41FFE0                  	jmp r8
 11987                                  .L_if_end_01c5:
 11988                                  .L_if_end_01c6:
 11989                                  .L_if_end_01c7:
 11990 00008861 E99C030000              	jmp .L_if_end_01cc
 11991                                  .L_if_else_01cc:
 11992                                  	; preparing a non-tail-call
 11993 00008866 488B4520                	mov rax, PARAM(0)	; param a
 11994 0000886A 50                      	push rax
 11995 0000886B 6A01                    	push 1	; arg count
 11996 0000886D 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 11997 00008875 803805                  	cmp byte [rax], T_undefined
 11998 00008878 0F84A7E70000            	je L_error_fvar_undefined
 11999 0000887E 803804                  	cmp byte [rax], T_closure
 12000 00008881 0F8522E80000            	jne L_error_non_closure
 12001 00008887 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12002 0000888A FF5009                  	call SOB_CLOSURE_CODE(rax)
 12003 0000888D 483D[02000000]          	cmp rax, sob_boolean_false
 12004 00008893 0F84F4020000            	je .L_if_else_01cb
 12005                                  	; preparing a non-tail-call
 12006 00008899 488B4528                	mov rax, PARAM(1)	; param b
 12007 0000889D 50                      	push rax
 12008 0000889E 6A01                    	push 1	; arg count
 12009 000088A0 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 12010 000088A8 803805                  	cmp byte [rax], T_undefined
 12011 000088AB 0F8474E70000            	je L_error_fvar_undefined
 12012 000088B1 803804                  	cmp byte [rax], T_closure
 12013 000088B4 0F85EFE70000            	jne L_error_non_closure
 12014 000088BA FF7001                  	push SOB_CLOSURE_ENV(rax)
 12015 000088BD FF5009                  	call SOB_CLOSURE_CODE(rax)
 12016 000088C0 483D[02000000]          	cmp rax, sob_boolean_false
 12017 000088C6 0F84AE000000            	je .L_if_else_01ca
 12018                                  	; preparing a tail-call
 12019                                  	; preparing a non-tail-call
 12020 000088CC 488B4528                	mov rax, PARAM(1)	; param b
 12021 000088D0 50                      	push rax
 12022 000088D1 6A01                    	push 1	; arg count
 12023 000088D3 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
 12024 000088DB 803805                  	cmp byte [rax], T_undefined
 12025 000088DE 0F8441E70000            	je L_error_fvar_undefined
 12026 000088E4 803804                  	cmp byte [rax], T_closure
 12027 000088E7 0F85BCE70000            	jne L_error_non_closure
 12028 000088ED FF7001                  	push SOB_CLOSURE_ENV(rax)
 12029 000088F0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12030 000088F3 50                      	push rax
 12031 000088F4 488B4520                	mov rax, PARAM(0)	; param a
 12032 000088F8 50                      	push rax
 12033 000088F9 6A02                    	push 2	; arg count
 12034 000088FB 488B0425[5E0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 12035 00008903 803805                  	cmp byte [rax], T_undefined
 12036 00008906 0F8419E70000            	je L_error_fvar_undefined
 12037 0000890C 803804                  	cmp byte [rax], T_closure
 12038 0000890F 0F8594E70000            	jne L_error_non_closure
 12039 00008915 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12040 00008918 4C8B4009                	mov r8, qword [rax + 1 + 8]
 12041 0000891C FF7508                  	push qword [rbp + 8]				; push old return address
 12042 0000891F FF7500                  	push qword [rbp]					; push old rbp
 12043                                  	;; move stack up ;;
 12044 00008922 488B5D18                	mov rbx, [rbp + 3*8]
 12045 00008926 4889DE                  	mov rsi, rbx						; save old size in rsi
 12046 00008929 4883C303                	add rbx, 3
 12047 0000892D 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 12048 00008935 B902000000              	mov rcx, 2
 12049 0000893A 4883C104                	add rcx, 4				; num of iterations in rcx
 12050                                  .L_tc_recycle_frame_loop_0337:
 12051 0000893E 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 12052 00008946 488B143C                	mov rdx, [rsp + rdi]
 12053 0000894A 4889541D00              	mov [rbp + rbx], rdx
 12054 0000894F 4883EB08                	sub rbx, 8
 12055 00008953 48FFC9                  	dec rcx
 12056 00008956 4883F900                	cmp rcx, 0
 12057 0000895A 75E2                    	jne .L_tc_recycle_frame_loop_0337
 12058 0000895C 4889F3                  	mov rbx, rsi
 12059 0000895F 4883EB02                	sub rbx, 2
 12060 00008963 488D1CDD00000000        	lea rbx, [rbx*8]
 12061 0000896B 4801DD                  	add rbp, rbx
 12062 0000896E 4889EC                  	mov rsp, rbp         ; fix stack pointers
 12063 00008971 5D                      	pop rbp
 12064 00008972 41FFE0                  	jmp r8
 12065 00008975 E911020000              	jmp .L_if_end_01ca
 12066                                  .L_if_else_01ca:
 12067                                  	; preparing a non-tail-call
 12068 0000897A 488B4528                	mov rax, PARAM(1)	; param b
 12069 0000897E 50                      	push rax
 12070 0000897F 6A01                    	push 1	; arg count
 12071 00008981 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 12072 00008989 803805                  	cmp byte [rax], T_undefined
 12073 0000898C 0F8493E60000            	je L_error_fvar_undefined
 12074 00008992 803804                  	cmp byte [rax], T_closure
 12075 00008995 0F850EE70000            	jne L_error_non_closure
 12076 0000899B FF7001                  	push SOB_CLOSURE_ENV(rax)
 12077 0000899E FF5009                  	call SOB_CLOSURE_CODE(rax)
 12078 000089A1 483D[02000000]          	cmp rax, sob_boolean_false
 12079 000089A7 0F84AE000000            	je .L_if_else_01c9
 12080                                  	; preparing a tail-call
 12081                                  	; preparing a non-tail-call
 12082 000089AD 488B4528                	mov rax, PARAM(1)	; param b
 12083 000089B1 50                      	push rax
 12084 000089B2 6A01                    	push 1	; arg count
 12085 000089B4 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 12086 000089BC 803805                  	cmp byte [rax], T_undefined
 12087 000089BF 0F8460E60000            	je L_error_fvar_undefined
 12088 000089C5 803804                  	cmp byte [rax], T_closure
 12089 000089C8 0F85DBE60000            	jne L_error_non_closure
 12090 000089CE FF7001                  	push SOB_CLOSURE_ENV(rax)
 12091 000089D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12092 000089D4 50                      	push rax
 12093 000089D5 488B4520                	mov rax, PARAM(0)	; param a
 12094 000089D9 50                      	push rax
 12095 000089DA 6A02                    	push 2	; arg count
 12096 000089DC 488B0425[5E0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 12097 000089E4 803805                  	cmp byte [rax], T_undefined
 12098 000089E7 0F8438E60000            	je L_error_fvar_undefined
 12099 000089ED 803804                  	cmp byte [rax], T_closure
 12100 000089F0 0F85B3E60000            	jne L_error_non_closure
 12101 000089F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12102 000089F9 4C8B4009                	mov r8, qword [rax + 1 + 8]
 12103 000089FD FF7508                  	push qword [rbp + 8]				; push old return address
 12104 00008A00 FF7500                  	push qword [rbp]					; push old rbp
 12105                                  	;; move stack up ;;
 12106 00008A03 488B5D18                	mov rbx, [rbp + 3*8]
 12107 00008A07 4889DE                  	mov rsi, rbx						; save old size in rsi
 12108 00008A0A 4883C303                	add rbx, 3
 12109 00008A0E 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 12110 00008A16 B902000000              	mov rcx, 2
 12111 00008A1B 4883C104                	add rcx, 4				; num of iterations in rcx
 12112                                  .L_tc_recycle_frame_loop_0338:
 12113 00008A1F 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 12114 00008A27 488B143C                	mov rdx, [rsp + rdi]
 12115 00008A2B 4889541D00              	mov [rbp + rbx], rdx
 12116 00008A30 4883EB08                	sub rbx, 8
 12117 00008A34 48FFC9                  	dec rcx
 12118 00008A37 4883F900                	cmp rcx, 0
 12119 00008A3B 75E2                    	jne .L_tc_recycle_frame_loop_0338
 12120 00008A3D 4889F3                  	mov rbx, rsi
 12121 00008A40 4883EB02                	sub rbx, 2
 12122 00008A44 488D1CDD00000000        	lea rbx, [rbx*8]
 12123 00008A4C 4801DD                  	add rbp, rbx
 12124 00008A4F 4889EC                  	mov rsp, rbp         ; fix stack pointers
 12125 00008A52 5D                      	pop rbp
 12126 00008A53 41FFE0                  	jmp r8
 12127 00008A56 E930010000              	jmp .L_if_end_01c9
 12128                                  .L_if_else_01c9:
 12129                                  	; preparing a non-tail-call
 12130 00008A5B 488B4528                	mov rax, PARAM(1)	; param b
 12131 00008A5F 50                      	push rax
 12132 00008A60 6A01                    	push 1	; arg count
 12133 00008A62 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 12134 00008A6A 803805                  	cmp byte [rax], T_undefined
 12135 00008A6D 0F84B2E50000            	je L_error_fvar_undefined
 12136 00008A73 803804                  	cmp byte [rax], T_closure
 12137 00008A76 0F852DE60000            	jne L_error_non_closure
 12138 00008A7C FF7001                  	push SOB_CLOSURE_ENV(rax)
 12139 00008A7F FF5009                  	call SOB_CLOSURE_CODE(rax)
 12140 00008A82 483D[02000000]          	cmp rax, sob_boolean_false
 12141 00008A88 0F8488000000            	je .L_if_else_01c8
 12142                                  	; preparing a tail-call
 12143 00008A8E 488B4528                	mov rax, PARAM(1)	; param b
 12144 00008A92 50                      	push rax
 12145 00008A93 488B4520                	mov rax, PARAM(0)	; param a
 12146 00008A97 50                      	push rax
 12147 00008A98 6A02                    	push 2	; arg count
 12148 00008A9A 488B0425[5E0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 12149 00008AA2 803805                  	cmp byte [rax], T_undefined
 12150 00008AA5 0F847AE50000            	je L_error_fvar_undefined
 12151 00008AAB 803804                  	cmp byte [rax], T_closure
 12152 00008AAE 0F85F5E50000            	jne L_error_non_closure
 12153 00008AB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12154 00008AB7 4C8B4009                	mov r8, qword [rax + 1 + 8]
 12155 00008ABB FF7508                  	push qword [rbp + 8]				; push old return address
 12156 00008ABE FF7500                  	push qword [rbp]					; push old rbp
 12157                                  	;; move stack up ;;
 12158 00008AC1 488B5D18                	mov rbx, [rbp + 3*8]
 12159 00008AC5 4889DE                  	mov rsi, rbx						; save old size in rsi
 12160 00008AC8 4883C303                	add rbx, 3
 12161 00008ACC 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 12162 00008AD4 B902000000              	mov rcx, 2
 12163 00008AD9 4883C104                	add rcx, 4				; num of iterations in rcx
 12164                                  .L_tc_recycle_frame_loop_0339:
 12165 00008ADD 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 12166 00008AE5 488B143C                	mov rdx, [rsp + rdi]
 12167 00008AE9 4889541D00              	mov [rbp + rbx], rdx
 12168 00008AEE 4883EB08                	sub rbx, 8
 12169 00008AF2 48FFC9                  	dec rcx
 12170 00008AF5 4883F900                	cmp rcx, 0
 12171 00008AF9 75E2                    	jne .L_tc_recycle_frame_loop_0339
 12172 00008AFB 4889F3                  	mov rbx, rsi
 12173 00008AFE 4883EB02                	sub rbx, 2
 12174 00008B02 488D1CDD00000000        	lea rbx, [rbx*8]
 12175 00008B0A 4801DD                  	add rbp, rbx
 12176 00008B0D 4889EC                  	mov rsp, rbp         ; fix stack pointers
 12177 00008B10 5D                      	pop rbp
 12178 00008B11 41FFE0                  	jmp r8
 12179 00008B14 EB75                    	jmp .L_if_end_01c8
 12180                                  .L_if_else_01c8:
 12181                                  	; preparing a tail-call
 12182 00008B16 6A00                    	push 0	; arg count
 12183 00008B18 488B4510                	mov rax, ENV
 12184 00008B1C 488B00                  	mov rax, qword [rax + 8 * 0]
 12185 00008B1F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12186 00008B22 803804                  	cmp byte [rax], T_closure
 12187 00008B25 0F857EE50000            	jne L_error_non_closure
 12188 00008B2B FF7001                  	push SOB_CLOSURE_ENV(rax)
 12189 00008B2E 4C8B4009                	mov r8, qword [rax + 1 + 8]
 12190 00008B32 FF7508                  	push qword [rbp + 8]				; push old return address
 12191 00008B35 FF7500                  	push qword [rbp]					; push old rbp
 12192                                  	;; move stack up ;;
 12193 00008B38 488B5D18                	mov rbx, [rbp + 3*8]
 12194 00008B3C 4889DE                  	mov rsi, rbx						; save old size in rsi
 12195 00008B3F 4883C303                	add rbx, 3
 12196 00008B43 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 12197 00008B4B B900000000              	mov rcx, 0
 12198 00008B50 4883C104                	add rcx, 4				; num of iterations in rcx
 12199                                  .L_tc_recycle_frame_loop_033a:
 12200 00008B54 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 12201 00008B5C 488B143C                	mov rdx, [rsp + rdi]
 12202 00008B60 4889541D00              	mov [rbp + rbx], rdx
 12203 00008B65 4883EB08                	sub rbx, 8
 12204 00008B69 48FFC9                  	dec rcx
 12205 00008B6C 4883F900                	cmp rcx, 0
 12206 00008B70 75E2                    	jne .L_tc_recycle_frame_loop_033a
 12207 00008B72 4889F3                  	mov rbx, rsi
 12208 00008B75 4883EB00                	sub rbx, 0
 12209 00008B79 488D1CDD00000000        	lea rbx, [rbx*8]
 12210 00008B81 4801DD                  	add rbp, rbx
 12211 00008B84 4889EC                  	mov rsp, rbp         ; fix stack pointers
 12212 00008B87 5D                      	pop rbp
 12213 00008B88 41FFE0                  	jmp r8
 12214                                  .L_if_end_01c8:
 12215                                  .L_if_end_01c9:
 12216                                  .L_if_end_01ca:
 12217 00008B8B EB75                    	jmp .L_if_end_01cb
 12218                                  .L_if_else_01cb:
 12219                                  	; preparing a tail-call
 12220 00008B8D 6A00                    	push 0	; arg count
 12221 00008B8F 488B4510                	mov rax, ENV
 12222 00008B93 488B00                  	mov rax, qword [rax + 8 * 0]
 12223 00008B96 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12224 00008B99 803804                  	cmp byte [rax], T_closure
 12225 00008B9C 0F8507E50000            	jne L_error_non_closure
 12226 00008BA2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12227 00008BA5 4C8B4009                	mov r8, qword [rax + 1 + 8]
 12228 00008BA9 FF7508                  	push qword [rbp + 8]				; push old return address
 12229 00008BAC FF7500                  	push qword [rbp]					; push old rbp
 12230                                  	;; move stack up ;;
 12231 00008BAF 488B5D18                	mov rbx, [rbp + 3*8]
 12232 00008BB3 4889DE                  	mov rsi, rbx						; save old size in rsi
 12233 00008BB6 4883C303                	add rbx, 3
 12234 00008BBA 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 12235 00008BC2 B900000000              	mov rcx, 0
 12236 00008BC7 4883C104                	add rcx, 4				; num of iterations in rcx
 12237                                  .L_tc_recycle_frame_loop_033b:
 12238 00008BCB 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 12239 00008BD3 488B143C                	mov rdx, [rsp + rdi]
 12240 00008BD7 4889541D00              	mov [rbp + rbx], rdx
 12241 00008BDC 4883EB08                	sub rbx, 8
 12242 00008BE0 48FFC9                  	dec rcx
 12243 00008BE3 4883F900                	cmp rcx, 0
 12244 00008BE7 75E2                    	jne .L_tc_recycle_frame_loop_033b
 12245 00008BE9 4889F3                  	mov rbx, rsi
 12246 00008BEC 4883EB00                	sub rbx, 0
 12247 00008BF0 488D1CDD00000000        	lea rbx, [rbx*8]
 12248 00008BF8 4801DD                  	add rbp, rbx
 12249 00008BFB 4889EC                  	mov rsp, rbp         ; fix stack pointers
 12250 00008BFE 5D                      	pop rbp
 12251 00008BFF 41FFE0                  	jmp r8
 12252                                  .L_if_end_01cb:
 12253                                  .L_if_end_01cc:
 12254                                  .L_if_end_01cd:
 12255 00008C02 C9                      	leave
 12256 00008C03 C22000                  	ret AND_KILL_FRAME(2)
 12257                                  .L_lambda_simple_end_026d:	; new closure is in rax
 12258 00008C06 50                      	push rax
 12259 00008C07 6A01                    	push 1	; arg count
 12260 00008C09 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12261 00008C0E E83FE50000              	call malloc
 12262 00008C13 50                      	push rax
 12263 00008C14 BF08000000              	mov rdi, 8 * 1	; new rib
 12264 00008C19 E834E50000              	call malloc
 12265 00008C1E 50                      	push rax
 12266 00008C1F BF10000000              	mov rdi, 8 * 2	; extended env
 12267 00008C24 E829E50000              	call malloc
 12268 00008C29 488B7D10                	mov rdi, ENV
 12269 00008C2D BE00000000              	mov rsi, 0
 12270 00008C32 BA01000000              	mov rdx, 1
 12271                                  .L_lambda_simple_env_loop_026e:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 12272 00008C37 4883FE01                	cmp rsi, 1
 12273 00008C3B 7410                    	je .L_lambda_simple_env_end_026e
 12274 00008C3D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12275 00008C41 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12276 00008C45 48FFC6                  	inc rsi
 12277 00008C48 48FFC2                  	inc rdx
 12278 00008C4B EBEA                    	jmp .L_lambda_simple_env_loop_026e
 12279                                  .L_lambda_simple_env_end_026e:
 12280 00008C4D 5B                      	pop rbx
 12281 00008C4E BE00000000              	mov rsi, 0
 12282                                  .L_lambda_simple_params_loop_026e:	; copy params
 12283 00008C53 4883FE01                	cmp rsi, 1
 12284 00008C57 740E                    	je .L_lambda_simple_params_end_026e
 12285 00008C59 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12286 00008C5E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12287 00008C62 48FFC6                  	inc rsi
 12288 00008C65 EBEC                    	jmp .L_lambda_simple_params_loop_026e
 12289                                  .L_lambda_simple_params_end_026e:
 12290 00008C67 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 12291 00008C6A 4889C3                  	mov rbx, rax
 12292 00008C6D 58                      	pop rax
 12293 00008C6E C60004                  	mov byte [rax], T_closure
 12294 00008C71 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12295 00008C75 48C74009[828C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_026e
 12296 00008C7D E90D020000              	jmp .L_lambda_simple_end_026e
 12297                                  .L_lambda_simple_code_026e:	; lambda-simple body
 12298 00008C82 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12299 00008C88 740B                    	je .L_lambda_simple_arity_check_ok_026e
 12300 00008C8A FF742410                	push qword [rsp + 8 * 2]
 12301 00008C8E 6A01                    	push 1
 12302 00008C90 E976E40000              	jmp L_error_incorrect_arity_simple
 12303                                  .L_lambda_simple_arity_check_ok_026e:
 12304 00008C95 C8000000                	enter 0, 0
 12305 00008C99 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12306 00008C9E E8AFE40000              	call malloc
 12307 00008CA3 50                      	push rax
 12308 00008CA4 BF08000000              	mov rdi, 8 * 1	; new rib
 12309 00008CA9 E8A4E40000              	call malloc
 12310 00008CAE 50                      	push rax
 12311 00008CAF BF18000000              	mov rdi, 8 * 3	; extended env
 12312 00008CB4 E899E40000              	call malloc
 12313 00008CB9 488B7D10                	mov rdi, ENV
 12314 00008CBD BE00000000              	mov rsi, 0
 12315 00008CC2 BA01000000              	mov rdx, 1
 12316                                  .L_lambda_opt_env_loop_0054:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 12317 00008CC7 4883FE02                	cmp rsi, 2
 12318 00008CCB 7410                    	je .L_lambda_opt_env_end_0054
 12319 00008CCD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12320 00008CD1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12321 00008CD5 48FFC6                  	inc rsi
 12322 00008CD8 48FFC2                  	inc rdx
 12323 00008CDB EBEA                    	jmp .L_lambda_opt_env_loop_0054
 12324                                  .L_lambda_opt_env_end_0054:
 12325 00008CDD 5B                      	pop rbx
 12326 00008CDE BE00000000              	mov rsi, 0
 12327                                  .L_lambda_opt_params_loop_0054:	; copy params
 12328 00008CE3 4883FE01                	cmp rsi, 1
 12329 00008CE7 740E                    	je .L_lambda_opt_params_end_0054
 12330 00008CE9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12331 00008CEE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12332 00008CF2 48FFC6                  	inc rsi
 12333 00008CF5 EBEC                    	jmp .L_lambda_opt_params_loop_0054
 12334                                  .L_lambda_opt_params_end_0054:
 12335 00008CF7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 12336 00008CFA 4889C3                  	mov rbx, rax
 12337 00008CFD 58                      	pop rax
 12338 00008CFE C60004                  	mov byte [rax], T_closure
 12339 00008D01 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12340 00008D05 48C74009[128D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0054
 12341 00008D0D E979010000              	jmp .L_lambda_opt_end_0054
 12342                                  .L_lambda_opt_code_0054:	; lambda-opt body
 12343 00008D12 48837C241000            	cmp qword [rsp + 8 * 2], 0
 12344 00008D18 740D                    	je .L_lambda_opt_arity_check_exact_0054
 12345 00008D1A 7F48                    	jg .L_lambda_opt_arity_check_more_0054
 12346 00008D1C FF742410                	push qword [rsp + 8 * 2]
 12347 00008D20 6A00                    	push 0
 12348 00008D22 E9F8E30000              	jmp L_error_incorrect_arity_opt
 12349                                  .L_lambda_opt_arity_check_exact_0054:
 12350 00008D27 48C744241001000000      	mov qword [rsp + 8 * 2], 1	; Update argument count (fixed params + 1 for nil)
 12351 00008D30 41BA03000000            	mov r10, 3	; r10 = total addresses to adjust (fixed params + 3)
 12352 00008D36 FF3424                  	push qword [rsp]	; Save the top stack element
 12353 00008D39 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
 12354                                  .L_lambda_opt_stack_shrink_loop_00fa:
 12355 00008D3F 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
 12356 00008D42 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_00fa	; Exit loop if all elements processed
 12357 00008D44 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
 12358 00008D49 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
 12359 00008D4D 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
 12360 00008D52 49FFC3                  	inc r11	; Increment loop index
 12361 00008D55 EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_00fa	; Jump back to loop start
 12362                                  .L_lambda_opt_stack_shrink_loop_exit_00fa:
 12363 00008D57 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
 12364 00008D5F E988000000              	jmp .L_lambda_opt_stack_adjusted_0054
 12365                                  .L_lambda_opt_arity_check_more_0054:
 12366 00008D64 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
 12367 00008D69 4983E800                	sub r8, 0	; r8 = count of optional params
 12368 00008D6D 48C744241001000000      	mov qword [rsp + 8 * 2], 1	; Update the number of params (fixed params + 1 for list opt)
 12369 00008D76 41B900000000            	mov r9, 0	; r9 = index of optional argument list
 12370 00008D7C 4E8D54C410              	lea r10, [rsp + 2 * 8 + 0 * 8 + r8 * 8]	; r10 = address of first optional param
 12371 00008D81 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
 12371 00008D83 [0100000000000000] 
 12372                                  .L_lambda_opt_stack_shrink_loop_00fb:
 12373 00008D8B 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
 12374 00008D8E 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_00fb	; Exit loop if all optional params are processed
 12375 00008D90 BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
 12376 00008D95 E8B8E30000              	call malloc	; Allocate memory for a new pair
 12377 00008D9A 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
 12378 00008D9E 49F7D9                  	neg r9	; Negate index to access in reverse
 12379 00008DA1 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
 12380 00008DA5 49F7D9                  	neg r9	; Negate index back
 12381 00008DA8 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
 12382 00008DAC C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
 12383 00008DAF 4989C3                  	mov r11, rax	; Update current pair to the newly created one
 12384 00008DB2 49FFC1                  	inc r9	; Increment the index
 12385 00008DB5 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_00fb	; Repeat the loop for the next param
 12386                                  .L_lambda_opt_stack_shrink_loop_exit_00fb:
 12387 00008DB7 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
 12388 00008DBA 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
 12389 00008DBE 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
 12390 00008DC1 4983C410                	add r12, 16	; Skip fixed params and return address
 12391 00008DC5 41BD03000000            	mov r13, 3	; r13 = loop counter (number of params, old fp, ret addr, lex env)
 12392                                  .L_lambda_opt_stack_shrink_loop_00fc:
 12393 00008DCB 4983FD00                	cmp r13, 0	; Check if there are more values to copy
 12394 00008DCF 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_00fc	; Exit loop if all values are copied
 12395 00008DD1 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
 12396 00008DD5 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
 12397 00008DD8 49FFCD                  	dec r13	; Decrement the loop counter
 12398 00008DDB 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
 12399 00008DDF 4983EC08                	sub r12, 8	; Move the source pointer to the next location
 12400 00008DE3 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_00fc	; Repeat the loop for the next value
 12401                                  .L_lambda_opt_stack_shrink_loop_exit_00fc:
 12402 00008DE5 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
 12403 00008DE9 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
 12404                                  .L_lambda_opt_stack_adjusted_0054:
 12405 00008DEC C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
 12406                                  	; preparing a tail-call
 12407 00008DF0 488B4520                	mov rax, PARAM(0)	; param s
 12408 00008DF4 50                      	push rax
 12409 00008DF5 48B8-                   	mov rax, L_constants + 2270
 12409 00008DF7 [DE08000000000000] 
 12410 00008DFF 50                      	push rax
 12411 00008E00 488B4510                	mov rax, ENV
 12412 00008E04 488B00                  	mov rax, qword [rax + 8 * 0]
 12413 00008E07 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin*
 12414 00008E0A 50                      	push rax
 12415 00008E0B 6A03                    	push 3	; arg count
 12416 00008E0D 488B0425[7C130000]      	mov rax, qword [free_var_85]	; free var fold-left
 12417 00008E15 803805                  	cmp byte [rax], T_undefined
 12418 00008E18 0F8407E20000            	je L_error_fvar_undefined
 12419 00008E1E 803804                  	cmp byte [rax], T_closure
 12420 00008E21 0F8582E20000            	jne L_error_non_closure
 12421 00008E27 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12422 00008E2A 4C8B4009                	mov r8, qword [rax + 1 + 8]
 12423 00008E2E FF7508                  	push qword [rbp + 8]				; push old return address
 12424 00008E31 FF7500                  	push qword [rbp]					; push old rbp
 12425                                  	;; move stack up ;;
 12426 00008E34 488B5D18                	mov rbx, [rbp + 3*8]
 12427 00008E38 4889DE                  	mov rsi, rbx						; save old size in rsi
 12428 00008E3B 4883C303                	add rbx, 3
 12429 00008E3F 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 12430 00008E47 B903000000              	mov rcx, 3
 12431 00008E4C 4883C104                	add rcx, 4				; num of iterations in rcx
 12432                                  .L_tc_recycle_frame_loop_033c:
 12433 00008E50 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 12434 00008E58 488B143C                	mov rdx, [rsp + rdi]
 12435 00008E5C 4889541D00              	mov [rbp + rbx], rdx
 12436 00008E61 4883EB08                	sub rbx, 8
 12437 00008E65 48FFC9                  	dec rcx
 12438 00008E68 4883F900                	cmp rcx, 0
 12439 00008E6C 75E2                    	jne .L_tc_recycle_frame_loop_033c
 12440 00008E6E 4889F3                  	mov rbx, rsi
 12441 00008E71 4883EB03                	sub rbx, 3
 12442 00008E75 488D1CDD00000000        	lea rbx, [rbx*8]
 12443 00008E7D 4801DD                  	add rbp, rbx
 12444 00008E80 4889EC                  	mov rsp, rbp         ; fix stack pointers
 12445 00008E83 5D                      	pop rbp
 12446 00008E84 41FFE0                  	jmp r8
 12447 00008E87 C9                      	leave	; Restore the previous stack frame
 12448 00008E88 C21800                  	ret AND_KILL_FRAME(1)
 12449                                  .L_lambda_opt_end_0054:	; new closure is in rax
 12450 00008E8B C9                      	leave
 12451 00008E8C C21800                  	ret AND_KILL_FRAME(1)
 12452                                  .L_lambda_simple_end_026e:	; new closure is in rax
 12453 00008E8F 803804                  	cmp byte [rax], T_closure
 12454 00008E92 0F8511E20000            	jne L_error_non_closure
 12455 00008E98 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12456 00008E9B 4C8B4009                	mov r8, qword [rax + 1 + 8]
 12457 00008E9F FF7508                  	push qword [rbp + 8]				; push old return address
 12458 00008EA2 FF7500                  	push qword [rbp]					; push old rbp
 12459                                  	;; move stack up ;;
 12460 00008EA5 488B5D18                	mov rbx, [rbp + 3*8]
 12461 00008EA9 4889DE                  	mov rsi, rbx						; save old size in rsi
 12462 00008EAC 4883C303                	add rbx, 3
 12463 00008EB0 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 12464 00008EB8 B901000000              	mov rcx, 1
 12465 00008EBD 4883C104                	add rcx, 4				; num of iterations in rcx
 12466                                  .L_tc_recycle_frame_loop_032e:
 12467 00008EC1 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 12468 00008EC9 488B143C                	mov rdx, [rsp + rdi]
 12469 00008ECD 4889541D00              	mov [rbp + rbx], rdx
 12470 00008ED2 4883EB08                	sub rbx, 8
 12471 00008ED6 48FFC9                  	dec rcx
 12472 00008ED9 4883F900                	cmp rcx, 0
 12473 00008EDD 75E2                    	jne .L_tc_recycle_frame_loop_032e
 12474 00008EDF 4889F3                  	mov rbx, rsi
 12475 00008EE2 4883EB01                	sub rbx, 1
 12476 00008EE6 488D1CDD00000000        	lea rbx, [rbx*8]
 12477 00008EEE 4801DD                  	add rbp, rbx
 12478 00008EF1 4889EC                  	mov rsp, rbp         ; fix stack pointers
 12479 00008EF4 5D                      	pop rbp
 12480 00008EF5 41FFE0                  	jmp r8
 12481 00008EF8 C9                      	leave
 12482 00008EF9 C21800                  	ret AND_KILL_FRAME(1)
 12483                                  .L_lambda_simple_end_026c:	; new closure is in rax
 12484 00008EFC 803804                  	cmp byte [rax], T_closure
 12485 00008EFF 0F85A4E10000            	jne L_error_non_closure
 12486 00008F05 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12487 00008F08 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12488 00008F0B 48890425[D70D0000]      	mov qword [free_var_0], rax
 12489 00008F13 48B8-                   	mov rax, sob_void
 12489 00008F15 [0000000000000000] 
 12490                                  
 12491 00008F1D 4889C7                  	mov rdi, rax
 12492 00008F20 E882E40000              	call print_sexpr_if_not_void
 12493                                  	; preparing a non-tail-call
 12494 00008F25 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12495 00008F2A E823E20000              	call malloc
 12496 00008F2F 50                      	push rax
 12497 00008F30 BF00000000              	mov rdi, 8 * 0	; new rib
 12498 00008F35 E818E20000              	call malloc
 12499 00008F3A 50                      	push rax
 12500 00008F3B BF08000000              	mov rdi, 8 * 1	; extended env
 12501 00008F40 E80DE20000              	call malloc
 12502 00008F45 488B7D10                	mov rdi, ENV
 12503 00008F49 BE00000000              	mov rsi, 0
 12504 00008F4E BA01000000              	mov rdx, 1
 12505                                  .L_lambda_simple_env_loop_026f:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 12506 00008F53 4883FE00                	cmp rsi, 0
 12507 00008F57 7410                    	je .L_lambda_simple_env_end_026f
 12508 00008F59 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12509 00008F5D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12510 00008F61 48FFC6                  	inc rsi
 12511 00008F64 48FFC2                  	inc rdx
 12512 00008F67 EBEA                    	jmp .L_lambda_simple_env_loop_026f
 12513                                  .L_lambda_simple_env_end_026f:
 12514 00008F69 5B                      	pop rbx
 12515 00008F6A BE00000000              	mov rsi, 0
 12516                                  .L_lambda_simple_params_loop_026f:	; copy params
 12517 00008F6F 4883FE00                	cmp rsi, 0
 12518 00008F73 740E                    	je .L_lambda_simple_params_end_026f
 12519 00008F75 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12520 00008F7A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12521 00008F7E 48FFC6                  	inc rsi
 12522 00008F81 EBEC                    	jmp .L_lambda_simple_params_loop_026f
 12523                                  .L_lambda_simple_params_end_026f:
 12524 00008F83 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 12525 00008F86 4889C3                  	mov rbx, rax
 12526 00008F89 58                      	pop rax
 12527 00008F8A C60004                  	mov byte [rax], T_closure
 12528 00008F8D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12529 00008F91 48C74009[9E8F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_026f
 12530 00008F99 E9AD000000              	jmp .L_lambda_simple_end_026f
 12531                                  .L_lambda_simple_code_026f:	; lambda-simple body
 12532 00008F9E 48837C241000            	cmp qword [rsp + 8 * 2], 0
 12533 00008FA4 740B                    	je .L_lambda_simple_arity_check_ok_026f
 12534 00008FA6 FF742410                	push qword [rsp + 8 * 2]
 12535 00008FAA 6A00                    	push 0
 12536 00008FAC E95AE10000              	jmp L_error_incorrect_arity_simple
 12537                                  .L_lambda_simple_arity_check_ok_026f:
 12538 00008FB1 C8000000                	enter 0, 0
 12539                                  	; preparing a tail-call
 12540 00008FB5 48B8-                   	mov rax, L_constants + 2187
 12540 00008FB7 [8B08000000000000] 
 12541 00008FBF 50                      	push rax
 12542 00008FC0 48B8-                   	mov rax, L_constants + 2298
 12542 00008FC2 [FA08000000000000] 
 12543 00008FCA 50                      	push rax
 12544 00008FCB 6A02                    	push 2	; arg count
 12545 00008FCD 488B0425[49130000]      	mov rax, qword [free_var_82]	; free var error
 12546 00008FD5 803805                  	cmp byte [rax], T_undefined
 12547 00008FD8 0F8447E00000            	je L_error_fvar_undefined
 12548 00008FDE 803804                  	cmp byte [rax], T_closure
 12549 00008FE1 0F85C2E00000            	jne L_error_non_closure
 12550 00008FE7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12551 00008FEA 4C8B4009                	mov r8, qword [rax + 1 + 8]
 12552 00008FEE FF7508                  	push qword [rbp + 8]				; push old return address
 12553 00008FF1 FF7500                  	push qword [rbp]					; push old rbp
 12554                                  	;; move stack up ;;
 12555 00008FF4 488B5D18                	mov rbx, [rbp + 3*8]
 12556 00008FF8 4889DE                  	mov rsi, rbx						; save old size in rsi
 12557 00008FFB 4883C303                	add rbx, 3
 12558 00008FFF 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 12559 00009007 B902000000              	mov rcx, 2
 12560 0000900C 4883C104                	add rcx, 4				; num of iterations in rcx
 12561                                  .L_tc_recycle_frame_loop_033d:
 12562 00009010 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 12563 00009018 488B143C                	mov rdx, [rsp + rdi]
 12564 0000901C 4889541D00              	mov [rbp + rbx], rdx
 12565 00009021 4883EB08                	sub rbx, 8
 12566 00009025 48FFC9                  	dec rcx
 12567 00009028 4883F900                	cmp rcx, 0
 12568 0000902C 75E2                    	jne .L_tc_recycle_frame_loop_033d
 12569 0000902E 4889F3                  	mov rbx, rsi
 12570 00009031 4883EB02                	sub rbx, 2
 12571 00009035 488D1CDD00000000        	lea rbx, [rbx*8]
 12572 0000903D 4801DD                  	add rbp, rbx
 12573 00009040 4889EC                  	mov rsp, rbp         ; fix stack pointers
 12574 00009043 5D                      	pop rbp
 12575 00009044 41FFE0                  	jmp r8
 12576 00009047 C9                      	leave
 12577 00009048 C21000                  	ret AND_KILL_FRAME(0)
 12578                                  .L_lambda_simple_end_026f:	; new closure is in rax
 12579 0000904B 50                      	push rax
 12580 0000904C 6A01                    	push 1	; arg count
 12581 0000904E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12582 00009053 E8FAE00000              	call malloc
 12583 00009058 50                      	push rax
 12584 00009059 BF00000000              	mov rdi, 8 * 0	; new rib
 12585 0000905E E8EFE00000              	call malloc
 12586 00009063 50                      	push rax
 12587 00009064 BF08000000              	mov rdi, 8 * 1	; extended env
 12588 00009069 E8E4E00000              	call malloc
 12589 0000906E 488B7D10                	mov rdi, ENV
 12590 00009072 BE00000000              	mov rsi, 0
 12591 00009077 BA01000000              	mov rdx, 1
 12592                                  .L_lambda_simple_env_loop_0270:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 12593 0000907C 4883FE00                	cmp rsi, 0
 12594 00009080 7410                    	je .L_lambda_simple_env_end_0270
 12595 00009082 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12596 00009086 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12597 0000908A 48FFC6                  	inc rsi
 12598 0000908D 48FFC2                  	inc rdx
 12599 00009090 EBEA                    	jmp .L_lambda_simple_env_loop_0270
 12600                                  .L_lambda_simple_env_end_0270:
 12601 00009092 5B                      	pop rbx
 12602 00009093 BE00000000              	mov rsi, 0
 12603                                  .L_lambda_simple_params_loop_0270:	; copy params
 12604 00009098 4883FE00                	cmp rsi, 0
 12605 0000909C 740E                    	je .L_lambda_simple_params_end_0270
 12606 0000909E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12607 000090A3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12608 000090A7 48FFC6                  	inc rsi
 12609 000090AA EBEC                    	jmp .L_lambda_simple_params_loop_0270
 12610                                  .L_lambda_simple_params_end_0270:
 12611 000090AC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 12612 000090AF 4889C3                  	mov rbx, rax
 12613 000090B2 58                      	pop rax
 12614 000090B3 C60004                  	mov byte [rax], T_closure
 12615 000090B6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12616 000090BA 48C74009[C7900000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0270
 12617 000090C2 E9810F0000              	jmp .L_lambda_simple_end_0270
 12618                                  .L_lambda_simple_code_0270:	; lambda-simple body
 12619 000090C7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12620 000090CD 740B                    	je .L_lambda_simple_arity_check_ok_0270
 12621 000090CF FF742410                	push qword [rsp + 8 * 2]
 12622 000090D3 6A01                    	push 1
 12623 000090D5 E931E00000              	jmp L_error_incorrect_arity_simple
 12624                                  .L_lambda_simple_arity_check_ok_0270:
 12625 000090DA C8000000                	enter 0, 0
 12626                                  	; preparing a tail-call
 12627 000090DE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12628 000090E3 E86AE00000              	call malloc
 12629 000090E8 50                      	push rax
 12630 000090E9 BF08000000              	mov rdi, 8 * 1	; new rib
 12631 000090EE E85FE00000              	call malloc
 12632 000090F3 50                      	push rax
 12633 000090F4 BF10000000              	mov rdi, 8 * 2	; extended env
 12634 000090F9 E854E00000              	call malloc
 12635 000090FE 488B7D10                	mov rdi, ENV
 12636 00009102 BE00000000              	mov rsi, 0
 12637 00009107 BA01000000              	mov rdx, 1
 12638                                  .L_lambda_simple_env_loop_0271:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 12639 0000910C 4883FE01                	cmp rsi, 1
 12640 00009110 7410                    	je .L_lambda_simple_env_end_0271
 12641 00009112 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12642 00009116 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12643 0000911A 48FFC6                  	inc rsi
 12644 0000911D 48FFC2                  	inc rdx
 12645 00009120 EBEA                    	jmp .L_lambda_simple_env_loop_0271
 12646                                  .L_lambda_simple_env_end_0271:
 12647 00009122 5B                      	pop rbx
 12648 00009123 BE00000000              	mov rsi, 0
 12649                                  .L_lambda_simple_params_loop_0271:	; copy params
 12650 00009128 4883FE01                	cmp rsi, 1
 12651 0000912C 740E                    	je .L_lambda_simple_params_end_0271
 12652 0000912E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12653 00009133 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12654 00009137 48FFC6                  	inc rsi
 12655 0000913A EBEC                    	jmp .L_lambda_simple_params_loop_0271
 12656                                  .L_lambda_simple_params_end_0271:
 12657 0000913C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 12658 0000913F 4889C3                  	mov rbx, rax
 12659 00009142 58                      	pop rax
 12660 00009143 C60004                  	mov byte [rax], T_closure
 12661 00009146 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12662 0000914A 48C74009[57910000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0271
 12663 00009152 E90B0A0000              	jmp .L_lambda_simple_end_0271
 12664                                  .L_lambda_simple_code_0271:	; lambda-simple body
 12665 00009157 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12666 0000915D 740B                    	je .L_lambda_simple_arity_check_ok_0271
 12667 0000915F FF742410                	push qword [rsp + 8 * 2]
 12668 00009163 6A02                    	push 2
 12669 00009165 E9A1DF0000              	jmp L_error_incorrect_arity_simple
 12670                                  .L_lambda_simple_arity_check_ok_0271:
 12671 0000916A C8000000                	enter 0, 0
 12672                                  	; preparing a non-tail-call
 12673 0000916E 488B4520                	mov rax, PARAM(0)	; param a
 12674 00009172 50                      	push rax
 12675 00009173 6A01                    	push 1	; arg count
 12676 00009175 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 12677 0000917D 803805                  	cmp byte [rax], T_undefined
 12678 00009180 0F849FDE0000            	je L_error_fvar_undefined
 12679 00009186 803804                  	cmp byte [rax], T_closure
 12680 00009189 0F851ADF0000            	jne L_error_non_closure
 12681 0000918F FF7001                  	push SOB_CLOSURE_ENV(rax)
 12682 00009192 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12683 00009195 483D[02000000]          	cmp rax, sob_boolean_false
 12684 0000919B 0F84F7020000            	je .L_if_else_01d9
 12685                                  	; preparing a non-tail-call
 12686 000091A1 488B4528                	mov rax, PARAM(1)	; param b
 12687 000091A5 50                      	push rax
 12688 000091A6 6A01                    	push 1	; arg count
 12689 000091A8 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 12690 000091B0 803805                  	cmp byte [rax], T_undefined
 12691 000091B3 0F846CDE0000            	je L_error_fvar_undefined
 12692 000091B9 803804                  	cmp byte [rax], T_closure
 12693 000091BC 0F85E7DE0000            	jne L_error_non_closure
 12694 000091C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12695 000091C5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12696 000091C8 483D[02000000]          	cmp rax, sob_boolean_false
 12697 000091CE 0F848B000000            	je .L_if_else_01d0
 12698                                  	; preparing a tail-call
 12699 000091D4 488B4528                	mov rax, PARAM(1)	; param b
 12700 000091D8 50                      	push rax
 12701 000091D9 488B4520                	mov rax, PARAM(0)	; param a
 12702 000091DD 50                      	push rax
 12703 000091DE 6A02                    	push 2	; arg count
 12704 000091E0 488B0425[D60E0000]      	mov rax, qword [free_var_15]	; free var __bin-div-zz
 12705 000091E8 803805                  	cmp byte [rax], T_undefined
 12706 000091EB 0F8434DE0000            	je L_error_fvar_undefined
 12707 000091F1 803804                  	cmp byte [rax], T_closure
 12708 000091F4 0F85AFDE0000            	jne L_error_non_closure
 12709 000091FA FF7001                  	push SOB_CLOSURE_ENV(rax)
 12710 000091FD 4C8B4009                	mov r8, qword [rax + 1 + 8]
 12711 00009201 FF7508                  	push qword [rbp + 8]				; push old return address
 12712 00009204 FF7500                  	push qword [rbp]					; push old rbp
 12713                                  	;; move stack up ;;
 12714 00009207 488B5D18                	mov rbx, [rbp + 3*8]
 12715 0000920B 4889DE                  	mov rsi, rbx						; save old size in rsi
 12716 0000920E 4883C303                	add rbx, 3
 12717 00009212 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 12718 0000921A B902000000              	mov rcx, 2
 12719 0000921F 4883C104                	add rcx, 4				; num of iterations in rcx
 12720                                  .L_tc_recycle_frame_loop_033f:
 12721 00009223 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 12722 0000922B 488B143C                	mov rdx, [rsp + rdi]
 12723 0000922F 4889541D00              	mov [rbp + rbx], rdx
 12724 00009234 4883EB08                	sub rbx, 8
 12725 00009238 48FFC9                  	dec rcx
 12726 0000923B 4883F900                	cmp rcx, 0
 12727 0000923F 75E2                    	jne .L_tc_recycle_frame_loop_033f
 12728 00009241 4889F3                  	mov rbx, rsi
 12729 00009244 4883EB02                	sub rbx, 2
 12730 00009248 488D1CDD00000000        	lea rbx, [rbx*8]
 12731 00009250 4801DD                  	add rbp, rbx
 12732 00009253 4889EC                  	mov rsp, rbp         ; fix stack pointers
 12733 00009256 5D                      	pop rbp
 12734 00009257 41FFE0                  	jmp r8
 12735 0000925A E934020000              	jmp .L_if_end_01d0
 12736                                  .L_if_else_01d0:
 12737                                  	; preparing a non-tail-call
 12738 0000925F 488B4528                	mov rax, PARAM(1)	; param b
 12739 00009263 50                      	push rax
 12740 00009264 6A01                    	push 1	; arg count
 12741 00009266 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 12742 0000926E 803805                  	cmp byte [rax], T_undefined
 12743 00009271 0F84AEDD0000            	je L_error_fvar_undefined
 12744 00009277 803804                  	cmp byte [rax], T_closure
 12745 0000927A 0F8529DE0000            	jne L_error_non_closure
 12746 00009280 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12747 00009283 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12748 00009286 483D[02000000]          	cmp rax, sob_boolean_false
 12749 0000928C 0F84AE000000            	je .L_if_else_01cf
 12750                                  	; preparing a tail-call
 12751 00009292 488B4528                	mov rax, PARAM(1)	; param b
 12752 00009296 50                      	push rax
 12753                                  	; preparing a non-tail-call
 12754 00009297 488B4520                	mov rax, PARAM(0)	; param a
 12755 0000929B 50                      	push rax
 12756 0000929C 6A01                    	push 1	; arg count
 12757 0000929E 488B0425[C40F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 12758 000092A6 803805                  	cmp byte [rax], T_undefined
 12759 000092A9 0F8476DD0000            	je L_error_fvar_undefined
 12760 000092AF 803804                  	cmp byte [rax], T_closure
 12761 000092B2 0F85F1DD0000            	jne L_error_non_closure
 12762 000092B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12763 000092BB FF5009                  	call SOB_CLOSURE_CODE(rax)
 12764 000092BE 50                      	push rax
 12765 000092BF 6A02                    	push 2	; arg count
 12766 000092C1 488B0425[B40E0000]      	mov rax, qword [free_var_13]	; free var __bin-div-qq
 12767 000092C9 803805                  	cmp byte [rax], T_undefined
 12768 000092CC 0F8453DD0000            	je L_error_fvar_undefined
 12769 000092D2 803804                  	cmp byte [rax], T_closure
 12770 000092D5 0F85CEDD0000            	jne L_error_non_closure
 12771 000092DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 12772 000092DE 4C8B4009                	mov r8, qword [rax + 1 + 8]
 12773 000092E2 FF7508                  	push qword [rbp + 8]				; push old return address
 12774 000092E5 FF7500                  	push qword [rbp]					; push old rbp
 12775                                  	;; move stack up ;;
 12776 000092E8 488B5D18                	mov rbx, [rbp + 3*8]
 12777 000092EC 4889DE                  	mov rsi, rbx						; save old size in rsi
 12778 000092EF 4883C303                	add rbx, 3
 12779 000092F3 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 12780 000092FB B902000000              	mov rcx, 2
 12781 00009300 4883C104                	add rcx, 4				; num of iterations in rcx
 12782                                  .L_tc_recycle_frame_loop_0340:
 12783 00009304 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 12784 0000930C 488B143C                	mov rdx, [rsp + rdi]
 12785 00009310 4889541D00              	mov [rbp + rbx], rdx
 12786 00009315 4883EB08                	sub rbx, 8
 12787 00009319 48FFC9                  	dec rcx
 12788 0000931C 4883F900                	cmp rcx, 0
 12789 00009320 75E2                    	jne .L_tc_recycle_frame_loop_0340
 12790 00009322 4889F3                  	mov rbx, rsi
 12791 00009325 4883EB02                	sub rbx, 2
 12792 00009329 488D1CDD00000000        	lea rbx, [rbx*8]
 12793 00009331 4801DD                  	add rbp, rbx
 12794 00009334 4889EC                  	mov rsp, rbp         ; fix stack pointers
 12795 00009337 5D                      	pop rbp
 12796 00009338 41FFE0                  	jmp r8
 12797 0000933B E953010000              	jmp .L_if_end_01cf
 12798                                  .L_if_else_01cf:
 12799                                  	; preparing a non-tail-call
 12800 00009340 488B4528                	mov rax, PARAM(1)	; param b
 12801 00009344 50                      	push rax
 12802 00009345 6A01                    	push 1	; arg count
 12803 00009347 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 12804 0000934F 803805                  	cmp byte [rax], T_undefined
 12805 00009352 0F84CDDC0000            	je L_error_fvar_undefined
 12806 00009358 803804                  	cmp byte [rax], T_closure
 12807 0000935B 0F8548DD0000            	jne L_error_non_closure
 12808 00009361 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12809 00009364 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12810 00009367 483D[02000000]          	cmp rax, sob_boolean_false
 12811 0000936D 0F84AB000000            	je .L_if_else_01ce
 12812                                  	; preparing a tail-call
 12813 00009373 488B4528                	mov rax, PARAM(1)	; param b
 12814 00009377 50                      	push rax
 12815                                  	; preparing a non-tail-call
 12816 00009378 488B4520                	mov rax, PARAM(0)	; param a
 12817 0000937C 50                      	push rax
 12818 0000937D 6A01                    	push 1	; arg count
 12819 0000937F 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
 12820 00009387 803805                  	cmp byte [rax], T_undefined
 12821 0000938A 0F8495DC0000            	je L_error_fvar_undefined
 12822 00009390 803804                  	cmp byte [rax], T_closure
 12823 00009393 0F8510DD0000            	jne L_error_non_closure
 12824 00009399 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12825 0000939C FF5009                  	call SOB_CLOSURE_CODE(rax)
 12826 0000939F 50                      	push rax
 12827 000093A0 6A02                    	push 2	; arg count
 12828 000093A2 488B0425[C50E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 12829 000093AA 803805                  	cmp byte [rax], T_undefined
 12830 000093AD 0F8472DC0000            	je L_error_fvar_undefined
 12831 000093B3 803804                  	cmp byte [rax], T_closure
 12832 000093B6 0F85EDDC0000            	jne L_error_non_closure
 12833 000093BC FF7001                  	push SOB_CLOSURE_ENV(rax)
 12834 000093BF 4C8B4009                	mov r8, qword [rax + 1 + 8]
 12835 000093C3 FF7508                  	push qword [rbp + 8]				; push old return address
 12836 000093C6 FF7500                  	push qword [rbp]					; push old rbp
 12837                                  	;; move stack up ;;
 12838 000093C9 488B5D18                	mov rbx, [rbp + 3*8]
 12839 000093CD 4889DE                  	mov rsi, rbx						; save old size in rsi
 12840 000093D0 4883C303                	add rbx, 3
 12841 000093D4 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 12842 000093DC B902000000              	mov rcx, 2
 12843 000093E1 4883C104                	add rcx, 4				; num of iterations in rcx
 12844                                  .L_tc_recycle_frame_loop_0341:
 12845 000093E5 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 12846 000093ED 488B143C                	mov rdx, [rsp + rdi]
 12847 000093F1 4889541D00              	mov [rbp + rbx], rdx
 12848 000093F6 4883EB08                	sub rbx, 8
 12849 000093FA 48FFC9                  	dec rcx
 12850 000093FD 4883F900                	cmp rcx, 0
 12851 00009401 75E2                    	jne .L_tc_recycle_frame_loop_0341
 12852 00009403 4889F3                  	mov rbx, rsi
 12853 00009406 4883EB02                	sub rbx, 2
 12854 0000940A 488D1CDD00000000        	lea rbx, [rbx*8]
 12855 00009412 4801DD                  	add rbp, rbx
 12856 00009415 4889EC                  	mov rsp, rbp         ; fix stack pointers
 12857 00009418 5D                      	pop rbp
 12858 00009419 41FFE0                  	jmp r8
 12859 0000941C EB75                    	jmp .L_if_end_01ce
 12860                                  .L_if_else_01ce:
 12861                                  	; preparing a tail-call
 12862 0000941E 6A00                    	push 0	; arg count
 12863 00009420 488B4510                	mov rax, ENV
 12864 00009424 488B00                  	mov rax, qword [rax + 8 * 0]
 12865 00009427 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12866 0000942A 803804                  	cmp byte [rax], T_closure
 12867 0000942D 0F8576DC0000            	jne L_error_non_closure
 12868 00009433 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12869 00009436 4C8B4009                	mov r8, qword [rax + 1 + 8]
 12870 0000943A FF7508                  	push qword [rbp + 8]				; push old return address
 12871 0000943D FF7500                  	push qword [rbp]					; push old rbp
 12872                                  	;; move stack up ;;
 12873 00009440 488B5D18                	mov rbx, [rbp + 3*8]
 12874 00009444 4889DE                  	mov rsi, rbx						; save old size in rsi
 12875 00009447 4883C303                	add rbx, 3
 12876 0000944B 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 12877 00009453 B900000000              	mov rcx, 0
 12878 00009458 4883C104                	add rcx, 4				; num of iterations in rcx
 12879                                  .L_tc_recycle_frame_loop_0342:
 12880 0000945C 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 12881 00009464 488B143C                	mov rdx, [rsp + rdi]
 12882 00009468 4889541D00              	mov [rbp + rbx], rdx
 12883 0000946D 4883EB08                	sub rbx, 8
 12884 00009471 48FFC9                  	dec rcx
 12885 00009474 4883F900                	cmp rcx, 0
 12886 00009478 75E2                    	jne .L_tc_recycle_frame_loop_0342
 12887 0000947A 4889F3                  	mov rbx, rsi
 12888 0000947D 4883EB00                	sub rbx, 0
 12889 00009481 488D1CDD00000000        	lea rbx, [rbx*8]
 12890 00009489 4801DD                  	add rbp, rbx
 12891 0000948C 4889EC                  	mov rsp, rbp         ; fix stack pointers
 12892 0000948F 5D                      	pop rbp
 12893 00009490 41FFE0                  	jmp r8
 12894                                  .L_if_end_01ce:
 12895                                  .L_if_end_01cf:
 12896                                  .L_if_end_01d0:
 12897 00009493 E9C6060000              	jmp .L_if_end_01d9
 12898                                  .L_if_else_01d9:
 12899                                  	; preparing a non-tail-call
 12900 00009498 488B4520                	mov rax, PARAM(0)	; param a
 12901 0000949C 50                      	push rax
 12902 0000949D 6A01                    	push 1	; arg count
 12903 0000949F 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 12904 000094A7 803805                  	cmp byte [rax], T_undefined
 12905 000094AA 0F8475DB0000            	je L_error_fvar_undefined
 12906 000094B0 803804                  	cmp byte [rax], T_closure
 12907 000094B3 0F85F0DB0000            	jne L_error_non_closure
 12908 000094B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12909 000094BC FF5009                  	call SOB_CLOSURE_CODE(rax)
 12910 000094BF 483D[02000000]          	cmp rax, sob_boolean_false
 12911 000094C5 0F84F7020000            	je .L_if_else_01d8
 12912                                  	; preparing a non-tail-call
 12913 000094CB 488B4528                	mov rax, PARAM(1)	; param b
 12914 000094CF 50                      	push rax
 12915 000094D0 6A01                    	push 1	; arg count
 12916 000094D2 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 12917 000094DA 803805                  	cmp byte [rax], T_undefined
 12918 000094DD 0F8442DB0000            	je L_error_fvar_undefined
 12919 000094E3 803804                  	cmp byte [rax], T_closure
 12920 000094E6 0F85BDDB0000            	jne L_error_non_closure
 12921 000094EC FF7001                  	push SOB_CLOSURE_ENV(rax)
 12922 000094EF FF5009                  	call SOB_CLOSURE_CODE(rax)
 12923 000094F2 483D[02000000]          	cmp rax, sob_boolean_false
 12924 000094F8 0F84AE000000            	je .L_if_else_01d3
 12925                                  	; preparing a tail-call
 12926                                  	; preparing a non-tail-call
 12927 000094FE 488B4528                	mov rax, PARAM(1)	; param b
 12928 00009502 50                      	push rax
 12929 00009503 6A01                    	push 1	; arg count
 12930 00009505 488B0425[C40F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 12931 0000950D 803805                  	cmp byte [rax], T_undefined
 12932 00009510 0F840FDB0000            	je L_error_fvar_undefined
 12933 00009516 803804                  	cmp byte [rax], T_closure
 12934 00009519 0F858ADB0000            	jne L_error_non_closure
 12935 0000951F FF7001                  	push SOB_CLOSURE_ENV(rax)
 12936 00009522 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12937 00009525 50                      	push rax
 12938 00009526 488B4520                	mov rax, PARAM(0)	; param a
 12939 0000952A 50                      	push rax
 12940 0000952B 6A02                    	push 2	; arg count
 12941 0000952D 488B0425[B40E0000]      	mov rax, qword [free_var_13]	; free var __bin-div-qq
 12942 00009535 803805                  	cmp byte [rax], T_undefined
 12943 00009538 0F84E7DA0000            	je L_error_fvar_undefined
 12944 0000953E 803804                  	cmp byte [rax], T_closure
 12945 00009541 0F8562DB0000            	jne L_error_non_closure
 12946 00009547 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12947 0000954A 4C8B4009                	mov r8, qword [rax + 1 + 8]
 12948 0000954E FF7508                  	push qword [rbp + 8]				; push old return address
 12949 00009551 FF7500                  	push qword [rbp]					; push old rbp
 12950                                  	;; move stack up ;;
 12951 00009554 488B5D18                	mov rbx, [rbp + 3*8]
 12952 00009558 4889DE                  	mov rsi, rbx						; save old size in rsi
 12953 0000955B 4883C303                	add rbx, 3
 12954 0000955F 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 12955 00009567 B902000000              	mov rcx, 2
 12956 0000956C 4883C104                	add rcx, 4				; num of iterations in rcx
 12957                                  .L_tc_recycle_frame_loop_0343:
 12958 00009570 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 12959 00009578 488B143C                	mov rdx, [rsp + rdi]
 12960 0000957C 4889541D00              	mov [rbp + rbx], rdx
 12961 00009581 4883EB08                	sub rbx, 8
 12962 00009585 48FFC9                  	dec rcx
 12963 00009588 4883F900                	cmp rcx, 0
 12964 0000958C 75E2                    	jne .L_tc_recycle_frame_loop_0343
 12965 0000958E 4889F3                  	mov rbx, rsi
 12966 00009591 4883EB02                	sub rbx, 2
 12967 00009595 488D1CDD00000000        	lea rbx, [rbx*8]
 12968 0000959D 4801DD                  	add rbp, rbx
 12969 000095A0 4889EC                  	mov rsp, rbp         ; fix stack pointers
 12970 000095A3 5D                      	pop rbp
 12971 000095A4 41FFE0                  	jmp r8
 12972 000095A7 E911020000              	jmp .L_if_end_01d3
 12973                                  .L_if_else_01d3:
 12974                                  	; preparing a non-tail-call
 12975 000095AC 488B4528                	mov rax, PARAM(1)	; param b
 12976 000095B0 50                      	push rax
 12977 000095B1 6A01                    	push 1	; arg count
 12978 000095B3 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 12979 000095BB 803805                  	cmp byte [rax], T_undefined
 12980 000095BE 0F8461DA0000            	je L_error_fvar_undefined
 12981 000095C4 803804                  	cmp byte [rax], T_closure
 12982 000095C7 0F85DCDA0000            	jne L_error_non_closure
 12983 000095CD FF7001                  	push SOB_CLOSURE_ENV(rax)
 12984 000095D0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12985 000095D3 483D[02000000]          	cmp rax, sob_boolean_false
 12986 000095D9 0F848B000000            	je .L_if_else_01d2
 12987                                  	; preparing a tail-call
 12988 000095DF 488B4528                	mov rax, PARAM(1)	; param b
 12989 000095E3 50                      	push rax
 12990 000095E4 488B4520                	mov rax, PARAM(0)	; param a
 12991 000095E8 50                      	push rax
 12992 000095E9 6A02                    	push 2	; arg count
 12993 000095EB 488B0425[B40E0000]      	mov rax, qword [free_var_13]	; free var __bin-div-qq
 12994 000095F3 803805                  	cmp byte [rax], T_undefined
 12995 000095F6 0F8429DA0000            	je L_error_fvar_undefined
 12996 000095FC 803804                  	cmp byte [rax], T_closure
 12997 000095FF 0F85A4DA0000            	jne L_error_non_closure
 12998 00009605 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12999 00009608 4C8B4009                	mov r8, qword [rax + 1 + 8]
 13000 0000960C FF7508                  	push qword [rbp + 8]				; push old return address
 13001 0000960F FF7500                  	push qword [rbp]					; push old rbp
 13002                                  	;; move stack up ;;
 13003 00009612 488B5D18                	mov rbx, [rbp + 3*8]
 13004 00009616 4889DE                  	mov rsi, rbx						; save old size in rsi
 13005 00009619 4883C303                	add rbx, 3
 13006 0000961D 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 13007 00009625 B902000000              	mov rcx, 2
 13008 0000962A 4883C104                	add rcx, 4				; num of iterations in rcx
 13009                                  .L_tc_recycle_frame_loop_0344:
 13010 0000962E 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 13011 00009636 488B143C                	mov rdx, [rsp + rdi]
 13012 0000963A 4889541D00              	mov [rbp + rbx], rdx
 13013 0000963F 4883EB08                	sub rbx, 8
 13014 00009643 48FFC9                  	dec rcx
 13015 00009646 4883F900                	cmp rcx, 0
 13016 0000964A 75E2                    	jne .L_tc_recycle_frame_loop_0344
 13017 0000964C 4889F3                  	mov rbx, rsi
 13018 0000964F 4883EB02                	sub rbx, 2
 13019 00009653 488D1CDD00000000        	lea rbx, [rbx*8]
 13020 0000965B 4801DD                  	add rbp, rbx
 13021 0000965E 4889EC                  	mov rsp, rbp         ; fix stack pointers
 13022 00009661 5D                      	pop rbp
 13023 00009662 41FFE0                  	jmp r8
 13024 00009665 E953010000              	jmp .L_if_end_01d2
 13025                                  .L_if_else_01d2:
 13026                                  	; preparing a non-tail-call
 13027 0000966A 488B4528                	mov rax, PARAM(1)	; param b
 13028 0000966E 50                      	push rax
 13029 0000966F 6A01                    	push 1	; arg count
 13030 00009671 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 13031 00009679 803805                  	cmp byte [rax], T_undefined
 13032 0000967C 0F84A3D90000            	je L_error_fvar_undefined
 13033 00009682 803804                  	cmp byte [rax], T_closure
 13034 00009685 0F851EDA0000            	jne L_error_non_closure
 13035 0000968B FF7001                  	push SOB_CLOSURE_ENV(rax)
 13036 0000968E FF5009                  	call SOB_CLOSURE_CODE(rax)
 13037 00009691 483D[02000000]          	cmp rax, sob_boolean_false
 13038 00009697 0F84AB000000            	je .L_if_else_01d1
 13039                                  	; preparing a tail-call
 13040 0000969D 488B4528                	mov rax, PARAM(1)	; param b
 13041 000096A1 50                      	push rax
 13042                                  	; preparing a non-tail-call
 13043 000096A2 488B4520                	mov rax, PARAM(0)	; param a
 13044 000096A6 50                      	push rax
 13045 000096A7 6A01                    	push 1	; arg count
 13046 000096A9 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 13047 000096B1 803805                  	cmp byte [rax], T_undefined
 13048 000096B4 0F846BD90000            	je L_error_fvar_undefined
 13049 000096BA 803804                  	cmp byte [rax], T_closure
 13050 000096BD 0F85E6D90000            	jne L_error_non_closure
 13051 000096C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13052 000096C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13053 000096C9 50                      	push rax
 13054 000096CA 6A02                    	push 2	; arg count
 13055 000096CC 488B0425[C50E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 13056 000096D4 803805                  	cmp byte [rax], T_undefined
 13057 000096D7 0F8448D90000            	je L_error_fvar_undefined
 13058 000096DD 803804                  	cmp byte [rax], T_closure
 13059 000096E0 0F85C3D90000            	jne L_error_non_closure
 13060 000096E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13061 000096E9 4C8B4009                	mov r8, qword [rax + 1 + 8]
 13062 000096ED FF7508                  	push qword [rbp + 8]				; push old return address
 13063 000096F0 FF7500                  	push qword [rbp]					; push old rbp
 13064                                  	;; move stack up ;;
 13065 000096F3 488B5D18                	mov rbx, [rbp + 3*8]
 13066 000096F7 4889DE                  	mov rsi, rbx						; save old size in rsi
 13067 000096FA 4883C303                	add rbx, 3
 13068 000096FE 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 13069 00009706 B902000000              	mov rcx, 2
 13070 0000970B 4883C104                	add rcx, 4				; num of iterations in rcx
 13071                                  .L_tc_recycle_frame_loop_0345:
 13072 0000970F 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 13073 00009717 488B143C                	mov rdx, [rsp + rdi]
 13074 0000971B 4889541D00              	mov [rbp + rbx], rdx
 13075 00009720 4883EB08                	sub rbx, 8
 13076 00009724 48FFC9                  	dec rcx
 13077 00009727 4883F900                	cmp rcx, 0
 13078 0000972B 75E2                    	jne .L_tc_recycle_frame_loop_0345
 13079 0000972D 4889F3                  	mov rbx, rsi
 13080 00009730 4883EB02                	sub rbx, 2
 13081 00009734 488D1CDD00000000        	lea rbx, [rbx*8]
 13082 0000973C 4801DD                  	add rbp, rbx
 13083 0000973F 4889EC                  	mov rsp, rbp         ; fix stack pointers
 13084 00009742 5D                      	pop rbp
 13085 00009743 41FFE0                  	jmp r8
 13086 00009746 EB75                    	jmp .L_if_end_01d1
 13087                                  .L_if_else_01d1:
 13088                                  	; preparing a tail-call
 13089 00009748 6A00                    	push 0	; arg count
 13090 0000974A 488B4510                	mov rax, ENV
 13091 0000974E 488B00                  	mov rax, qword [rax + 8 * 0]
 13092 00009751 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13093 00009754 803804                  	cmp byte [rax], T_closure
 13094 00009757 0F854CD90000            	jne L_error_non_closure
 13095 0000975D FF7001                  	push SOB_CLOSURE_ENV(rax)
 13096 00009760 4C8B4009                	mov r8, qword [rax + 1 + 8]
 13097 00009764 FF7508                  	push qword [rbp + 8]				; push old return address
 13098 00009767 FF7500                  	push qword [rbp]					; push old rbp
 13099                                  	;; move stack up ;;
 13100 0000976A 488B5D18                	mov rbx, [rbp + 3*8]
 13101 0000976E 4889DE                  	mov rsi, rbx						; save old size in rsi
 13102 00009771 4883C303                	add rbx, 3
 13103 00009775 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 13104 0000977D B900000000              	mov rcx, 0
 13105 00009782 4883C104                	add rcx, 4				; num of iterations in rcx
 13106                                  .L_tc_recycle_frame_loop_0346:
 13107 00009786 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 13108 0000978E 488B143C                	mov rdx, [rsp + rdi]
 13109 00009792 4889541D00              	mov [rbp + rbx], rdx
 13110 00009797 4883EB08                	sub rbx, 8
 13111 0000979B 48FFC9                  	dec rcx
 13112 0000979E 4883F900                	cmp rcx, 0
 13113 000097A2 75E2                    	jne .L_tc_recycle_frame_loop_0346
 13114 000097A4 4889F3                  	mov rbx, rsi
 13115 000097A7 4883EB00                	sub rbx, 0
 13116 000097AB 488D1CDD00000000        	lea rbx, [rbx*8]
 13117 000097B3 4801DD                  	add rbp, rbx
 13118 000097B6 4889EC                  	mov rsp, rbp         ; fix stack pointers
 13119 000097B9 5D                      	pop rbp
 13120 000097BA 41FFE0                  	jmp r8
 13121                                  .L_if_end_01d1:
 13122                                  .L_if_end_01d2:
 13123                                  .L_if_end_01d3:
 13124 000097BD E99C030000              	jmp .L_if_end_01d8
 13125                                  .L_if_else_01d8:
 13126                                  	; preparing a non-tail-call
 13127 000097C2 488B4520                	mov rax, PARAM(0)	; param a
 13128 000097C6 50                      	push rax
 13129 000097C7 6A01                    	push 1	; arg count
 13130 000097C9 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 13131 000097D1 803805                  	cmp byte [rax], T_undefined
 13132 000097D4 0F844BD80000            	je L_error_fvar_undefined
 13133 000097DA 803804                  	cmp byte [rax], T_closure
 13134 000097DD 0F85C6D80000            	jne L_error_non_closure
 13135 000097E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13136 000097E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13137 000097E9 483D[02000000]          	cmp rax, sob_boolean_false
 13138 000097EF 0F84F4020000            	je .L_if_else_01d7
 13139                                  	; preparing a non-tail-call
 13140 000097F5 488B4528                	mov rax, PARAM(1)	; param b
 13141 000097F9 50                      	push rax
 13142 000097FA 6A01                    	push 1	; arg count
 13143 000097FC 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 13144 00009804 803805                  	cmp byte [rax], T_undefined
 13145 00009807 0F8418D80000            	je L_error_fvar_undefined
 13146 0000980D 803804                  	cmp byte [rax], T_closure
 13147 00009810 0F8593D80000            	jne L_error_non_closure
 13148 00009816 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13149 00009819 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13150 0000981C 483D[02000000]          	cmp rax, sob_boolean_false
 13151 00009822 0F84AE000000            	je .L_if_else_01d6
 13152                                  	; preparing a tail-call
 13153                                  	; preparing a non-tail-call
 13154 00009828 488B4528                	mov rax, PARAM(1)	; param b
 13155 0000982C 50                      	push rax
 13156 0000982D 6A01                    	push 1	; arg count
 13157 0000982F 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
 13158 00009837 803805                  	cmp byte [rax], T_undefined
 13159 0000983A 0F84E5D70000            	je L_error_fvar_undefined
 13160 00009840 803804                  	cmp byte [rax], T_closure
 13161 00009843 0F8560D80000            	jne L_error_non_closure
 13162 00009849 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13163 0000984C FF5009                  	call SOB_CLOSURE_CODE(rax)
 13164 0000984F 50                      	push rax
 13165 00009850 488B4520                	mov rax, PARAM(0)	; param a
 13166 00009854 50                      	push rax
 13167 00009855 6A02                    	push 2	; arg count
 13168 00009857 488B0425[C50E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 13169 0000985F 803805                  	cmp byte [rax], T_undefined
 13170 00009862 0F84BDD70000            	je L_error_fvar_undefined
 13171 00009868 803804                  	cmp byte [rax], T_closure
 13172 0000986B 0F8538D80000            	jne L_error_non_closure
 13173 00009871 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13174 00009874 4C8B4009                	mov r8, qword [rax + 1 + 8]
 13175 00009878 FF7508                  	push qword [rbp + 8]				; push old return address
 13176 0000987B FF7500                  	push qword [rbp]					; push old rbp
 13177                                  	;; move stack up ;;
 13178 0000987E 488B5D18                	mov rbx, [rbp + 3*8]
 13179 00009882 4889DE                  	mov rsi, rbx						; save old size in rsi
 13180 00009885 4883C303                	add rbx, 3
 13181 00009889 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 13182 00009891 B902000000              	mov rcx, 2
 13183 00009896 4883C104                	add rcx, 4				; num of iterations in rcx
 13184                                  .L_tc_recycle_frame_loop_0347:
 13185 0000989A 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 13186 000098A2 488B143C                	mov rdx, [rsp + rdi]
 13187 000098A6 4889541D00              	mov [rbp + rbx], rdx
 13188 000098AB 4883EB08                	sub rbx, 8
 13189 000098AF 48FFC9                  	dec rcx
 13190 000098B2 4883F900                	cmp rcx, 0
 13191 000098B6 75E2                    	jne .L_tc_recycle_frame_loop_0347
 13192 000098B8 4889F3                  	mov rbx, rsi
 13193 000098BB 4883EB02                	sub rbx, 2
 13194 000098BF 488D1CDD00000000        	lea rbx, [rbx*8]
 13195 000098C7 4801DD                  	add rbp, rbx
 13196 000098CA 4889EC                  	mov rsp, rbp         ; fix stack pointers
 13197 000098CD 5D                      	pop rbp
 13198 000098CE 41FFE0                  	jmp r8
 13199 000098D1 E911020000              	jmp .L_if_end_01d6
 13200                                  .L_if_else_01d6:
 13201                                  	; preparing a non-tail-call
 13202 000098D6 488B4528                	mov rax, PARAM(1)	; param b
 13203 000098DA 50                      	push rax
 13204 000098DB 6A01                    	push 1	; arg count
 13205 000098DD 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 13206 000098E5 803805                  	cmp byte [rax], T_undefined
 13207 000098E8 0F8437D70000            	je L_error_fvar_undefined
 13208 000098EE 803804                  	cmp byte [rax], T_closure
 13209 000098F1 0F85B2D70000            	jne L_error_non_closure
 13210 000098F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13211 000098FA FF5009                  	call SOB_CLOSURE_CODE(rax)
 13212 000098FD 483D[02000000]          	cmp rax, sob_boolean_false
 13213 00009903 0F84AE000000            	je .L_if_else_01d5
 13214                                  	; preparing a tail-call
 13215                                  	; preparing a non-tail-call
 13216 00009909 488B4528                	mov rax, PARAM(1)	; param b
 13217 0000990D 50                      	push rax
 13218 0000990E 6A01                    	push 1	; arg count
 13219 00009910 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 13220 00009918 803805                  	cmp byte [rax], T_undefined
 13221 0000991B 0F8404D70000            	je L_error_fvar_undefined
 13222 00009921 803804                  	cmp byte [rax], T_closure
 13223 00009924 0F857FD70000            	jne L_error_non_closure
 13224 0000992A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13225 0000992D FF5009                  	call SOB_CLOSURE_CODE(rax)
 13226 00009930 50                      	push rax
 13227 00009931 488B4520                	mov rax, PARAM(0)	; param a
 13228 00009935 50                      	push rax
 13229 00009936 6A02                    	push 2	; arg count
 13230 00009938 488B0425[C50E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 13231 00009940 803805                  	cmp byte [rax], T_undefined
 13232 00009943 0F84DCD60000            	je L_error_fvar_undefined
 13233 00009949 803804                  	cmp byte [rax], T_closure
 13234 0000994C 0F8557D70000            	jne L_error_non_closure
 13235 00009952 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13236 00009955 4C8B4009                	mov r8, qword [rax + 1 + 8]
 13237 00009959 FF7508                  	push qword [rbp + 8]				; push old return address
 13238 0000995C FF7500                  	push qword [rbp]					; push old rbp
 13239                                  	;; move stack up ;;
 13240 0000995F 488B5D18                	mov rbx, [rbp + 3*8]
 13241 00009963 4889DE                  	mov rsi, rbx						; save old size in rsi
 13242 00009966 4883C303                	add rbx, 3
 13243 0000996A 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 13244 00009972 B902000000              	mov rcx, 2
 13245 00009977 4883C104                	add rcx, 4				; num of iterations in rcx
 13246                                  .L_tc_recycle_frame_loop_0348:
 13247 0000997B 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 13248 00009983 488B143C                	mov rdx, [rsp + rdi]
 13249 00009987 4889541D00              	mov [rbp + rbx], rdx
 13250 0000998C 4883EB08                	sub rbx, 8
 13251 00009990 48FFC9                  	dec rcx
 13252 00009993 4883F900                	cmp rcx, 0
 13253 00009997 75E2                    	jne .L_tc_recycle_frame_loop_0348
 13254 00009999 4889F3                  	mov rbx, rsi
 13255 0000999C 4883EB02                	sub rbx, 2
 13256 000099A0 488D1CDD00000000        	lea rbx, [rbx*8]
 13257 000099A8 4801DD                  	add rbp, rbx
 13258 000099AB 4889EC                  	mov rsp, rbp         ; fix stack pointers
 13259 000099AE 5D                      	pop rbp
 13260 000099AF 41FFE0                  	jmp r8
 13261 000099B2 E930010000              	jmp .L_if_end_01d5
 13262                                  .L_if_else_01d5:
 13263                                  	; preparing a non-tail-call
 13264 000099B7 488B4528                	mov rax, PARAM(1)	; param b
 13265 000099BB 50                      	push rax
 13266 000099BC 6A01                    	push 1	; arg count
 13267 000099BE 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 13268 000099C6 803805                  	cmp byte [rax], T_undefined
 13269 000099C9 0F8456D60000            	je L_error_fvar_undefined
 13270 000099CF 803804                  	cmp byte [rax], T_closure
 13271 000099D2 0F85D1D60000            	jne L_error_non_closure
 13272 000099D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13273 000099DB FF5009                  	call SOB_CLOSURE_CODE(rax)
 13274 000099DE 483D[02000000]          	cmp rax, sob_boolean_false
 13275 000099E4 0F8488000000            	je .L_if_else_01d4
 13276                                  	; preparing a tail-call
 13277 000099EA 488B4528                	mov rax, PARAM(1)	; param b
 13278 000099EE 50                      	push rax
 13279 000099EF 488B4520                	mov rax, PARAM(0)	; param a
 13280 000099F3 50                      	push rax
 13281 000099F4 6A02                    	push 2	; arg count
 13282 000099F6 488B0425[C50E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 13283 000099FE 803805                  	cmp byte [rax], T_undefined
 13284 00009A01 0F841ED60000            	je L_error_fvar_undefined
 13285 00009A07 803804                  	cmp byte [rax], T_closure
 13286 00009A0A 0F8599D60000            	jne L_error_non_closure
 13287 00009A10 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13288 00009A13 4C8B4009                	mov r8, qword [rax + 1 + 8]
 13289 00009A17 FF7508                  	push qword [rbp + 8]				; push old return address
 13290 00009A1A FF7500                  	push qword [rbp]					; push old rbp
 13291                                  	;; move stack up ;;
 13292 00009A1D 488B5D18                	mov rbx, [rbp + 3*8]
 13293 00009A21 4889DE                  	mov rsi, rbx						; save old size in rsi
 13294 00009A24 4883C303                	add rbx, 3
 13295 00009A28 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 13296 00009A30 B902000000              	mov rcx, 2
 13297 00009A35 4883C104                	add rcx, 4				; num of iterations in rcx
 13298                                  .L_tc_recycle_frame_loop_0349:
 13299 00009A39 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 13300 00009A41 488B143C                	mov rdx, [rsp + rdi]
 13301 00009A45 4889541D00              	mov [rbp + rbx], rdx
 13302 00009A4A 4883EB08                	sub rbx, 8
 13303 00009A4E 48FFC9                  	dec rcx
 13304 00009A51 4883F900                	cmp rcx, 0
 13305 00009A55 75E2                    	jne .L_tc_recycle_frame_loop_0349
 13306 00009A57 4889F3                  	mov rbx, rsi
 13307 00009A5A 4883EB02                	sub rbx, 2
 13308 00009A5E 488D1CDD00000000        	lea rbx, [rbx*8]
 13309 00009A66 4801DD                  	add rbp, rbx
 13310 00009A69 4889EC                  	mov rsp, rbp         ; fix stack pointers
 13311 00009A6C 5D                      	pop rbp
 13312 00009A6D 41FFE0                  	jmp r8
 13313 00009A70 EB75                    	jmp .L_if_end_01d4
 13314                                  .L_if_else_01d4:
 13315                                  	; preparing a tail-call
 13316 00009A72 6A00                    	push 0	; arg count
 13317 00009A74 488B4510                	mov rax, ENV
 13318 00009A78 488B00                  	mov rax, qword [rax + 8 * 0]
 13319 00009A7B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13320 00009A7E 803804                  	cmp byte [rax], T_closure
 13321 00009A81 0F8522D60000            	jne L_error_non_closure
 13322 00009A87 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13323 00009A8A 4C8B4009                	mov r8, qword [rax + 1 + 8]
 13324 00009A8E FF7508                  	push qword [rbp + 8]				; push old return address
 13325 00009A91 FF7500                  	push qword [rbp]					; push old rbp
 13326                                  	;; move stack up ;;
 13327 00009A94 488B5D18                	mov rbx, [rbp + 3*8]
 13328 00009A98 4889DE                  	mov rsi, rbx						; save old size in rsi
 13329 00009A9B 4883C303                	add rbx, 3
 13330 00009A9F 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 13331 00009AA7 B900000000              	mov rcx, 0
 13332 00009AAC 4883C104                	add rcx, 4				; num of iterations in rcx
 13333                                  .L_tc_recycle_frame_loop_034a:
 13334 00009AB0 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 13335 00009AB8 488B143C                	mov rdx, [rsp + rdi]
 13336 00009ABC 4889541D00              	mov [rbp + rbx], rdx
 13337 00009AC1 4883EB08                	sub rbx, 8
 13338 00009AC5 48FFC9                  	dec rcx
 13339 00009AC8 4883F900                	cmp rcx, 0
 13340 00009ACC 75E2                    	jne .L_tc_recycle_frame_loop_034a
 13341 00009ACE 4889F3                  	mov rbx, rsi
 13342 00009AD1 4883EB00                	sub rbx, 0
 13343 00009AD5 488D1CDD00000000        	lea rbx, [rbx*8]
 13344 00009ADD 4801DD                  	add rbp, rbx
 13345 00009AE0 4889EC                  	mov rsp, rbp         ; fix stack pointers
 13346 00009AE3 5D                      	pop rbp
 13347 00009AE4 41FFE0                  	jmp r8
 13348                                  .L_if_end_01d4:
 13349                                  .L_if_end_01d5:
 13350                                  .L_if_end_01d6:
 13351 00009AE7 EB75                    	jmp .L_if_end_01d7
 13352                                  .L_if_else_01d7:
 13353                                  	; preparing a tail-call
 13354 00009AE9 6A00                    	push 0	; arg count
 13355 00009AEB 488B4510                	mov rax, ENV
 13356 00009AEF 488B00                  	mov rax, qword [rax + 8 * 0]
 13357 00009AF2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13358 00009AF5 803804                  	cmp byte [rax], T_closure
 13359 00009AF8 0F85ABD50000            	jne L_error_non_closure
 13360 00009AFE FF7001                  	push SOB_CLOSURE_ENV(rax)
 13361 00009B01 4C8B4009                	mov r8, qword [rax + 1 + 8]
 13362 00009B05 FF7508                  	push qword [rbp + 8]				; push old return address
 13363 00009B08 FF7500                  	push qword [rbp]					; push old rbp
 13364                                  	;; move stack up ;;
 13365 00009B0B 488B5D18                	mov rbx, [rbp + 3*8]
 13366 00009B0F 4889DE                  	mov rsi, rbx						; save old size in rsi
 13367 00009B12 4883C303                	add rbx, 3
 13368 00009B16 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 13369 00009B1E B900000000              	mov rcx, 0
 13370 00009B23 4883C104                	add rcx, 4				; num of iterations in rcx
 13371                                  .L_tc_recycle_frame_loop_034b:
 13372 00009B27 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 13373 00009B2F 488B143C                	mov rdx, [rsp + rdi]
 13374 00009B33 4889541D00              	mov [rbp + rbx], rdx
 13375 00009B38 4883EB08                	sub rbx, 8
 13376 00009B3C 48FFC9                  	dec rcx
 13377 00009B3F 4883F900                	cmp rcx, 0
 13378 00009B43 75E2                    	jne .L_tc_recycle_frame_loop_034b
 13379 00009B45 4889F3                  	mov rbx, rsi
 13380 00009B48 4883EB00                	sub rbx, 0
 13381 00009B4C 488D1CDD00000000        	lea rbx, [rbx*8]
 13382 00009B54 4801DD                  	add rbp, rbx
 13383 00009B57 4889EC                  	mov rsp, rbp         ; fix stack pointers
 13384 00009B5A 5D                      	pop rbp
 13385 00009B5B 41FFE0                  	jmp r8
 13386                                  .L_if_end_01d7:
 13387                                  .L_if_end_01d8:
 13388                                  .L_if_end_01d9:
 13389 00009B5E C9                      	leave
 13390 00009B5F C22000                  	ret AND_KILL_FRAME(2)
 13391                                  .L_lambda_simple_end_0271:	; new closure is in rax
 13392 00009B62 50                      	push rax
 13393 00009B63 6A01                    	push 1	; arg count
 13394 00009B65 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13395 00009B6A E8E3D50000              	call malloc
 13396 00009B6F 50                      	push rax
 13397 00009B70 BF08000000              	mov rdi, 8 * 1	; new rib
 13398 00009B75 E8D8D50000              	call malloc
 13399 00009B7A 50                      	push rax
 13400 00009B7B BF10000000              	mov rdi, 8 * 2	; extended env
 13401 00009B80 E8CDD50000              	call malloc
 13402 00009B85 488B7D10                	mov rdi, ENV
 13403 00009B89 BE00000000              	mov rsi, 0
 13404 00009B8E BA01000000              	mov rdx, 1
 13405                                  .L_lambda_simple_env_loop_0272:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 13406 00009B93 4883FE01                	cmp rsi, 1
 13407 00009B97 7410                    	je .L_lambda_simple_env_end_0272
 13408 00009B99 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13409 00009B9D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13410 00009BA1 48FFC6                  	inc rsi
 13411 00009BA4 48FFC2                  	inc rdx
 13412 00009BA7 EBEA                    	jmp .L_lambda_simple_env_loop_0272
 13413                                  .L_lambda_simple_env_end_0272:
 13414 00009BA9 5B                      	pop rbx
 13415 00009BAA BE00000000              	mov rsi, 0
 13416                                  .L_lambda_simple_params_loop_0272:	; copy params
 13417 00009BAF 4883FE01                	cmp rsi, 1
 13418 00009BB3 740E                    	je .L_lambda_simple_params_end_0272
 13419 00009BB5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13420 00009BBA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13421 00009BBE 48FFC6                  	inc rsi
 13422 00009BC1 EBEC                    	jmp .L_lambda_simple_params_loop_0272
 13423                                  .L_lambda_simple_params_end_0272:
 13424 00009BC3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 13425 00009BC6 4889C3                  	mov rbx, rax
 13426 00009BC9 58                      	pop rax
 13427 00009BCA C60004                  	mov byte [rax], T_closure
 13428 00009BCD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13429 00009BD1 48C74009[DE9B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0272
 13430 00009BD9 E9FD030000              	jmp .L_lambda_simple_end_0272
 13431                                  .L_lambda_simple_code_0272:	; lambda-simple body
 13432 00009BDE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13433 00009BE4 740B                    	je .L_lambda_simple_arity_check_ok_0272
 13434 00009BE6 FF742410                	push qword [rsp + 8 * 2]
 13435 00009BEA 6A01                    	push 1
 13436 00009BEC E91AD50000              	jmp L_error_incorrect_arity_simple
 13437                                  .L_lambda_simple_arity_check_ok_0272:
 13438 00009BF1 C8000000                	enter 0, 0
 13439 00009BF5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13440 00009BFA E853D50000              	call malloc
 13441 00009BFF 50                      	push rax
 13442 00009C00 BF08000000              	mov rdi, 8 * 1	; new rib
 13443 00009C05 E848D50000              	call malloc
 13444 00009C0A 50                      	push rax
 13445 00009C0B BF18000000              	mov rdi, 8 * 3	; extended env
 13446 00009C10 E83DD50000              	call malloc
 13447 00009C15 488B7D10                	mov rdi, ENV
 13448 00009C19 BE00000000              	mov rsi, 0
 13449 00009C1E BA01000000              	mov rdx, 1
 13450                                  .L_lambda_opt_env_loop_0055:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 13451 00009C23 4883FE02                	cmp rsi, 2
 13452 00009C27 7410                    	je .L_lambda_opt_env_end_0055
 13453 00009C29 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13454 00009C2D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13455 00009C31 48FFC6                  	inc rsi
 13456 00009C34 48FFC2                  	inc rdx
 13457 00009C37 EBEA                    	jmp .L_lambda_opt_env_loop_0055
 13458                                  .L_lambda_opt_env_end_0055:
 13459 00009C39 5B                      	pop rbx
 13460 00009C3A BE00000000              	mov rsi, 0
 13461                                  .L_lambda_opt_params_loop_0055:	; copy params
 13462 00009C3F 4883FE01                	cmp rsi, 1
 13463 00009C43 740E                    	je .L_lambda_opt_params_end_0055
 13464 00009C45 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13465 00009C4A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13466 00009C4E 48FFC6                  	inc rsi
 13467 00009C51 EBEC                    	jmp .L_lambda_opt_params_loop_0055
 13468                                  .L_lambda_opt_params_end_0055:
 13469 00009C53 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 13470 00009C56 4889C3                  	mov rbx, rax
 13471 00009C59 58                      	pop rax
 13472 00009C5A C60004                  	mov byte [rax], T_closure
 13473 00009C5D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13474 00009C61 48C74009[6E9C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0055
 13475 00009C69 E969030000              	jmp .L_lambda_opt_end_0055
 13476                                  .L_lambda_opt_code_0055:	; lambda-opt body
 13477 00009C6E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13478 00009C74 740D                    	je .L_lambda_opt_arity_check_exact_0055
 13479 00009C76 7F48                    	jg .L_lambda_opt_arity_check_more_0055
 13480 00009C78 FF742410                	push qword [rsp + 8 * 2]
 13481 00009C7C 6A01                    	push 1
 13482 00009C7E E99CD40000              	jmp L_error_incorrect_arity_opt
 13483                                  .L_lambda_opt_arity_check_exact_0055:
 13484 00009C83 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update argument count (fixed params + 1 for nil)
 13485 00009C8C 41BA04000000            	mov r10, 4	; r10 = total addresses to adjust (fixed params + 3)
 13486 00009C92 FF3424                  	push qword [rsp]	; Save the top stack element
 13487 00009C95 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
 13488                                  .L_lambda_opt_stack_shrink_loop_00fd:
 13489 00009C9B 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
 13490 00009C9E 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_00fd	; Exit loop if all elements processed
 13491 00009CA0 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
 13492 00009CA5 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
 13493 00009CA9 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
 13494 00009CAE 49FFC3                  	inc r11	; Increment loop index
 13495 00009CB1 EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_00fd	; Jump back to loop start
 13496                                  .L_lambda_opt_stack_shrink_loop_exit_00fd:
 13497 00009CB3 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
 13498 00009CBB E988000000              	jmp .L_lambda_opt_stack_adjusted_0055
 13499                                  .L_lambda_opt_arity_check_more_0055:
 13500 00009CC0 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
 13501 00009CC5 4983E801                	sub r8, 1	; r8 = count of optional params
 13502 00009CC9 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update the number of params (fixed params + 1 for list opt)
 13503 00009CD2 41B900000000            	mov r9, 0	; r9 = index of optional argument list
 13504 00009CD8 4E8D54C418              	lea r10, [rsp + 2 * 8 + 1 * 8 + r8 * 8]	; r10 = address of first optional param
 13505 00009CDD 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
 13505 00009CDF [0100000000000000] 
 13506                                  .L_lambda_opt_stack_shrink_loop_00fe:
 13507 00009CE7 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
 13508 00009CEA 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_00fe	; Exit loop if all optional params are processed
 13509 00009CEC BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
 13510 00009CF1 E85CD40000              	call malloc	; Allocate memory for a new pair
 13511 00009CF6 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
 13512 00009CFA 49F7D9                  	neg r9	; Negate index to access in reverse
 13513 00009CFD 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
 13514 00009D01 49F7D9                  	neg r9	; Negate index back
 13515 00009D04 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
 13516 00009D08 C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
 13517 00009D0B 4989C3                  	mov r11, rax	; Update current pair to the newly created one
 13518 00009D0E 49FFC1                  	inc r9	; Increment the index
 13519 00009D11 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_00fe	; Repeat the loop for the next param
 13520                                  .L_lambda_opt_stack_shrink_loop_exit_00fe:
 13521 00009D13 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
 13522 00009D16 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
 13523 00009D1A 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
 13524 00009D1D 4983C418                	add r12, 24	; Skip fixed params and return address
 13525 00009D21 41BD04000000            	mov r13, 4	; r13 = loop counter (number of params, old fp, ret addr, lex env)
 13526                                  .L_lambda_opt_stack_shrink_loop_00ff:
 13527 00009D27 4983FD00                	cmp r13, 0	; Check if there are more values to copy
 13528 00009D2B 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_00ff	; Exit loop if all values are copied
 13529 00009D2D 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
 13530 00009D31 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
 13531 00009D34 49FFCD                  	dec r13	; Decrement the loop counter
 13532 00009D37 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
 13533 00009D3B 4983EC08                	sub r12, 8	; Move the source pointer to the next location
 13534 00009D3F EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_00ff	; Repeat the loop for the next value
 13535                                  .L_lambda_opt_stack_shrink_loop_exit_00ff:
 13536 00009D41 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
 13537 00009D45 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
 13538                                  .L_lambda_opt_stack_adjusted_0055:
 13539 00009D48 C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
 13540                                  	; preparing a non-tail-call
 13541 00009D4C 488B4528                	mov rax, PARAM(1)	; param s
 13542 00009D50 50                      	push rax
 13543 00009D51 6A01                    	push 1	; arg count
 13544 00009D53 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 13545 00009D5B 803805                  	cmp byte [rax], T_undefined
 13546 00009D5E 0F84C1D20000            	je L_error_fvar_undefined
 13547 00009D64 803804                  	cmp byte [rax], T_closure
 13548 00009D67 0F853CD30000            	jne L_error_non_closure
 13549 00009D6D FF7001                  	push SOB_CLOSURE_ENV(rax)
 13550 00009D70 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13551 00009D73 483D[02000000]          	cmp rax, sob_boolean_false
 13552 00009D79 0F848A000000            	je .L_if_else_01da
 13553                                  	; preparing a tail-call
 13554 00009D7F 488B4520                	mov rax, PARAM(0)	; param a
 13555 00009D83 50                      	push rax
 13556 00009D84 48B8-                   	mov rax, L_constants + 2270
 13556 00009D86 [DE08000000000000] 
 13557 00009D8E 50                      	push rax
 13558 00009D8F 6A02                    	push 2	; arg count
 13559 00009D91 488B4510                	mov rax, ENV
 13560 00009D95 488B00                  	mov rax, qword [rax + 8 * 0]
 13561 00009D98 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 13562 00009D9B 803804                  	cmp byte [rax], T_closure
 13563 00009D9E 0F8505D30000            	jne L_error_non_closure
 13564 00009DA4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13565 00009DA7 4C8B4009                	mov r8, qword [rax + 1 + 8]
 13566 00009DAB FF7508                  	push qword [rbp + 8]				; push old return address
 13567 00009DAE FF7500                  	push qword [rbp]					; push old rbp
 13568                                  	;; move stack up ;;
 13569 00009DB1 488B5D18                	mov rbx, [rbp + 3*8]
 13570 00009DB5 4889DE                  	mov rsi, rbx						; save old size in rsi
 13571 00009DB8 4883C303                	add rbx, 3
 13572 00009DBC 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 13573 00009DC4 B902000000              	mov rcx, 2
 13574 00009DC9 4883C104                	add rcx, 4				; num of iterations in rcx
 13575                                  .L_tc_recycle_frame_loop_034c:
 13576 00009DCD 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 13577 00009DD5 488B143C                	mov rdx, [rsp + rdi]
 13578 00009DD9 4889541D00              	mov [rbp + rbx], rdx
 13579 00009DDE 4883EB08                	sub rbx, 8
 13580 00009DE2 48FFC9                  	dec rcx
 13581 00009DE5 4883F900                	cmp rcx, 0
 13582 00009DE9 75E2                    	jne .L_tc_recycle_frame_loop_034c
 13583 00009DEB 4889F3                  	mov rbx, rsi
 13584 00009DEE 4883EB02                	sub rbx, 2
 13585 00009DF2 488D1CDD00000000        	lea rbx, [rbx*8]
 13586 00009DFA 4801DD                  	add rbp, rbx
 13587 00009DFD 4889EC                  	mov rsp, rbp         ; fix stack pointers
 13588 00009E00 5D                      	pop rbp
 13589 00009E01 41FFE0                  	jmp r8
 13590 00009E04 E9CA010000              	jmp .L_if_end_01da
 13591                                  .L_if_else_01da:
 13592                                  	; preparing a tail-call
 13593                                  	; preparing a non-tail-call
 13594 00009E09 488B4528                	mov rax, PARAM(1)	; param s
 13595 00009E0D 50                      	push rax
 13596 00009E0E 48B8-                   	mov rax, L_constants + 2270
 13596 00009E10 [DE08000000000000] 
 13597 00009E18 50                      	push rax
 13598 00009E19 488B0425[D70D0000]      	mov rax, qword [free_var_0]	; free var *
 13599 00009E21 803805                  	cmp byte [rax], T_undefined
 13600 00009E24 0F84FBD10000            	je L_error_fvar_undefined
 13601 00009E2A 50                      	push rax
 13602 00009E2B 6A03                    	push 3	; arg count
 13603 00009E2D 488B0425[7C130000]      	mov rax, qword [free_var_85]	; free var fold-left
 13604 00009E35 803805                  	cmp byte [rax], T_undefined
 13605 00009E38 0F84E7D10000            	je L_error_fvar_undefined
 13606 00009E3E 803804                  	cmp byte [rax], T_closure
 13607 00009E41 0F8562D20000            	jne L_error_non_closure
 13608 00009E47 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13609 00009E4A FF5009                  	call SOB_CLOSURE_CODE(rax)
 13610 00009E4D 50                      	push rax
 13611 00009E4E 6A01                    	push 1	; arg count
 13612 00009E50 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13613 00009E55 E8F8D20000              	call malloc
 13614 00009E5A 50                      	push rax
 13615 00009E5B BF10000000              	mov rdi, 8 * 2	; new rib
 13616 00009E60 E8EDD20000              	call malloc
 13617 00009E65 50                      	push rax
 13618 00009E66 BF20000000              	mov rdi, 8 * 4	; extended env
 13619 00009E6B E8E2D20000              	call malloc
 13620 00009E70 488B7D10                	mov rdi, ENV
 13621 00009E74 BE00000000              	mov rsi, 0
 13622 00009E79 BA01000000              	mov rdx, 1
 13623                                  .L_lambda_simple_env_loop_0273:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 13624 00009E7E 4883FE03                	cmp rsi, 3
 13625 00009E82 7410                    	je .L_lambda_simple_env_end_0273
 13626 00009E84 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13627 00009E88 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13628 00009E8C 48FFC6                  	inc rsi
 13629 00009E8F 48FFC2                  	inc rdx
 13630 00009E92 EBEA                    	jmp .L_lambda_simple_env_loop_0273
 13631                                  .L_lambda_simple_env_end_0273:
 13632 00009E94 5B                      	pop rbx
 13633 00009E95 BE00000000              	mov rsi, 0
 13634                                  .L_lambda_simple_params_loop_0273:	; copy params
 13635 00009E9A 4883FE02                	cmp rsi, 2
 13636 00009E9E 740E                    	je .L_lambda_simple_params_end_0273
 13637 00009EA0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13638 00009EA5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13639 00009EA9 48FFC6                  	inc rsi
 13640 00009EAC EBEC                    	jmp .L_lambda_simple_params_loop_0273
 13641                                  .L_lambda_simple_params_end_0273:
 13642 00009EAE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 13643 00009EB1 4889C3                  	mov rbx, rax
 13644 00009EB4 58                      	pop rax
 13645 00009EB5 C60004                  	mov byte [rax], T_closure
 13646 00009EB8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13647 00009EBC 48C74009[C99E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0273
 13648 00009EC4 E9A1000000              	jmp .L_lambda_simple_end_0273
 13649                                  .L_lambda_simple_code_0273:	; lambda-simple body
 13650 00009EC9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13651 00009ECF 740B                    	je .L_lambda_simple_arity_check_ok_0273
 13652 00009ED1 FF742410                	push qword [rsp + 8 * 2]
 13653 00009ED5 6A01                    	push 1
 13654 00009ED7 E92FD20000              	jmp L_error_incorrect_arity_simple
 13655                                  .L_lambda_simple_arity_check_ok_0273:
 13656 00009EDC C8000000                	enter 0, 0
 13657                                  	; preparing a tail-call
 13658 00009EE0 488B4520                	mov rax, PARAM(0)	; param b
 13659 00009EE4 50                      	push rax
 13660 00009EE5 488B4510                	mov rax, ENV
 13661 00009EE9 488B00                  	mov rax, qword [rax + 8 * 0]
 13662 00009EEC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 13663 00009EEF 50                      	push rax
 13664 00009EF0 6A02                    	push 2	; arg count
 13665 00009EF2 488B4510                	mov rax, ENV
 13666 00009EF6 488B4008                	mov rax, qword [rax + 8 * 1]
 13667 00009EFA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 13668 00009EFD 803804                  	cmp byte [rax], T_closure
 13669 00009F00 0F85A3D10000            	jne L_error_non_closure
 13670 00009F06 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13671 00009F09 4C8B4009                	mov r8, qword [rax + 1 + 8]
 13672 00009F0D FF7508                  	push qword [rbp + 8]				; push old return address
 13673 00009F10 FF7500                  	push qword [rbp]					; push old rbp
 13674                                  	;; move stack up ;;
 13675 00009F13 488B5D18                	mov rbx, [rbp + 3*8]
 13676 00009F17 4889DE                  	mov rsi, rbx						; save old size in rsi
 13677 00009F1A 4883C303                	add rbx, 3
 13678 00009F1E 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 13679 00009F26 B902000000              	mov rcx, 2
 13680 00009F2B 4883C104                	add rcx, 4				; num of iterations in rcx
 13681                                  .L_tc_recycle_frame_loop_034e:
 13682 00009F2F 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 13683 00009F37 488B143C                	mov rdx, [rsp + rdi]
 13684 00009F3B 4889541D00              	mov [rbp + rbx], rdx
 13685 00009F40 4883EB08                	sub rbx, 8
 13686 00009F44 48FFC9                  	dec rcx
 13687 00009F47 4883F900                	cmp rcx, 0
 13688 00009F4B 75E2                    	jne .L_tc_recycle_frame_loop_034e
 13689 00009F4D 4889F3                  	mov rbx, rsi
 13690 00009F50 4883EB02                	sub rbx, 2
 13691 00009F54 488D1CDD00000000        	lea rbx, [rbx*8]
 13692 00009F5C 4801DD                  	add rbp, rbx
 13693 00009F5F 4889EC                  	mov rsp, rbp         ; fix stack pointers
 13694 00009F62 5D                      	pop rbp
 13695 00009F63 41FFE0                  	jmp r8
 13696 00009F66 C9                      	leave
 13697 00009F67 C21800                  	ret AND_KILL_FRAME(1)
 13698                                  .L_lambda_simple_end_0273:	; new closure is in rax
 13699 00009F6A 803804                  	cmp byte [rax], T_closure
 13700 00009F6D 0F8536D10000            	jne L_error_non_closure
 13701 00009F73 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13702 00009F76 4C8B4009                	mov r8, qword [rax + 1 + 8]
 13703 00009F7A FF7508                  	push qword [rbp + 8]				; push old return address
 13704 00009F7D FF7500                  	push qword [rbp]					; push old rbp
 13705                                  	;; move stack up ;;
 13706 00009F80 488B5D18                	mov rbx, [rbp + 3*8]
 13707 00009F84 4889DE                  	mov rsi, rbx						; save old size in rsi
 13708 00009F87 4883C303                	add rbx, 3
 13709 00009F8B 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 13710 00009F93 B901000000              	mov rcx, 1
 13711 00009F98 4883C104                	add rcx, 4				; num of iterations in rcx
 13712                                  .L_tc_recycle_frame_loop_034d:
 13713 00009F9C 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 13714 00009FA4 488B143C                	mov rdx, [rsp + rdi]
 13715 00009FA8 4889541D00              	mov [rbp + rbx], rdx
 13716 00009FAD 4883EB08                	sub rbx, 8
 13717 00009FB1 48FFC9                  	dec rcx
 13718 00009FB4 4883F900                	cmp rcx, 0
 13719 00009FB8 75E2                    	jne .L_tc_recycle_frame_loop_034d
 13720 00009FBA 4889F3                  	mov rbx, rsi
 13721 00009FBD 4883EB01                	sub rbx, 1
 13722 00009FC1 488D1CDD00000000        	lea rbx, [rbx*8]
 13723 00009FC9 4801DD                  	add rbp, rbx
 13724 00009FCC 4889EC                  	mov rsp, rbp         ; fix stack pointers
 13725 00009FCF 5D                      	pop rbp
 13726 00009FD0 41FFE0                  	jmp r8
 13727                                  .L_if_end_01da:
 13728 00009FD3 C9                      	leave	; Restore the previous stack frame
 13729 00009FD4 C22000                  	ret AND_KILL_FRAME(2)
 13730                                  .L_lambda_opt_end_0055:	; new closure is in rax
 13731 00009FD7 C9                      	leave
 13732 00009FD8 C21800                  	ret AND_KILL_FRAME(1)
 13733                                  .L_lambda_simple_end_0272:	; new closure is in rax
 13734 00009FDB 803804                  	cmp byte [rax], T_closure
 13735 00009FDE 0F85C5D00000            	jne L_error_non_closure
 13736 00009FE4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13737 00009FE7 4C8B4009                	mov r8, qword [rax + 1 + 8]
 13738 00009FEB FF7508                  	push qword [rbp + 8]				; push old return address
 13739 00009FEE FF7500                  	push qword [rbp]					; push old rbp
 13740                                  	;; move stack up ;;
 13741 00009FF1 488B5D18                	mov rbx, [rbp + 3*8]
 13742 00009FF5 4889DE                  	mov rsi, rbx						; save old size in rsi
 13743 00009FF8 4883C303                	add rbx, 3
 13744 00009FFC 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 13745 0000A004 B901000000              	mov rcx, 1
 13746 0000A009 4883C104                	add rcx, 4				; num of iterations in rcx
 13747                                  .L_tc_recycle_frame_loop_033e:
 13748 0000A00D 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 13749 0000A015 488B143C                	mov rdx, [rsp + rdi]
 13750 0000A019 4889541D00              	mov [rbp + rbx], rdx
 13751 0000A01E 4883EB08                	sub rbx, 8
 13752 0000A022 48FFC9                  	dec rcx
 13753 0000A025 4883F900                	cmp rcx, 0
 13754 0000A029 75E2                    	jne .L_tc_recycle_frame_loop_033e
 13755 0000A02B 4889F3                  	mov rbx, rsi
 13756 0000A02E 4883EB01                	sub rbx, 1
 13757 0000A032 488D1CDD00000000        	lea rbx, [rbx*8]
 13758 0000A03A 4801DD                  	add rbp, rbx
 13759 0000A03D 4889EC                  	mov rsp, rbp         ; fix stack pointers
 13760 0000A040 5D                      	pop rbp
 13761 0000A041 41FFE0                  	jmp r8
 13762 0000A044 C9                      	leave
 13763 0000A045 C21800                  	ret AND_KILL_FRAME(1)
 13764                                  .L_lambda_simple_end_0270:	; new closure is in rax
 13765 0000A048 803804                  	cmp byte [rax], T_closure
 13766 0000A04B 0F8558D00000            	jne L_error_non_closure
 13767 0000A051 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13768 0000A054 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13769 0000A057 48890425[0A0E0000]      	mov qword [free_var_3], rax
 13770 0000A05F 48B8-                   	mov rax, sob_void
 13770 0000A061 [0000000000000000] 
 13771                                  
 13772 0000A069 4889C7                  	mov rdi, rax
 13773 0000A06C E836D30000              	call print_sexpr_if_not_void
 13774 0000A071 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13775 0000A076 E8D7D00000              	call malloc
 13776 0000A07B 50                      	push rax
 13777 0000A07C BF00000000              	mov rdi, 8 * 0	; new rib
 13778 0000A081 E8CCD00000              	call malloc
 13779 0000A086 50                      	push rax
 13780 0000A087 BF08000000              	mov rdi, 8 * 1	; extended env
 13781 0000A08C E8C1D00000              	call malloc
 13782 0000A091 488B7D10                	mov rdi, ENV
 13783 0000A095 BE00000000              	mov rsi, 0
 13784 0000A09A BA01000000              	mov rdx, 1
 13785                                  .L_lambda_simple_env_loop_0274:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 13786 0000A09F 4883FE00                	cmp rsi, 0
 13787 0000A0A3 7410                    	je .L_lambda_simple_env_end_0274
 13788 0000A0A5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13789 0000A0A9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13790 0000A0AD 48FFC6                  	inc rsi
 13791 0000A0B0 48FFC2                  	inc rdx
 13792 0000A0B3 EBEA                    	jmp .L_lambda_simple_env_loop_0274
 13793                                  .L_lambda_simple_env_end_0274:
 13794 0000A0B5 5B                      	pop rbx
 13795 0000A0B6 BE00000000              	mov rsi, 0
 13796                                  .L_lambda_simple_params_loop_0274:	; copy params
 13797 0000A0BB 4883FE00                	cmp rsi, 0
 13798 0000A0BF 740E                    	je .L_lambda_simple_params_end_0274
 13799 0000A0C1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13800 0000A0C6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13801 0000A0CA 48FFC6                  	inc rsi
 13802 0000A0CD EBEC                    	jmp .L_lambda_simple_params_loop_0274
 13803                                  .L_lambda_simple_params_end_0274:
 13804 0000A0CF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 13805 0000A0D2 4889C3                  	mov rbx, rax
 13806 0000A0D5 58                      	pop rax
 13807 0000A0D6 C60004                  	mov byte [rax], T_closure
 13808 0000A0D9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13809 0000A0DD 48C74009[EAA00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0274
 13810 0000A0E5 E930010000              	jmp .L_lambda_simple_end_0274
 13811                                  .L_lambda_simple_code_0274:	; lambda-simple body
 13812 0000A0EA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13813 0000A0F0 740B                    	je .L_lambda_simple_arity_check_ok_0274
 13814 0000A0F2 FF742410                	push qword [rsp + 8 * 2]
 13815 0000A0F6 6A01                    	push 1
 13816 0000A0F8 E90ED00000              	jmp L_error_incorrect_arity_simple
 13817                                  .L_lambda_simple_arity_check_ok_0274:
 13818 0000A0FD C8000000                	enter 0, 0
 13819                                  	; preparing a non-tail-call
 13820 0000A101 488B4520                	mov rax, PARAM(0)	; param n
 13821 0000A105 50                      	push rax
 13822 0000A106 6A01                    	push 1	; arg count
 13823 0000A108 488B0425[DE170000]      	mov rax, qword [free_var_151]	; free var zero?
 13824 0000A110 803805                  	cmp byte [rax], T_undefined
 13825 0000A113 0F840CCF0000            	je L_error_fvar_undefined
 13826 0000A119 803804                  	cmp byte [rax], T_closure
 13827 0000A11C 0F8587CF0000            	jne L_error_non_closure
 13828 0000A122 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13829 0000A125 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13830 0000A128 483D[02000000]          	cmp rax, sob_boolean_false
 13831 0000A12E 740F                    	je .L_if_else_01db
 13832 0000A130 48B8-                   	mov rax, L_constants + 2270
 13832 0000A132 [DE08000000000000] 
 13833 0000A13A E9D7000000              	jmp .L_if_end_01db
 13834                                  .L_if_else_01db:
 13835                                  	; preparing a tail-call
 13836                                  	; preparing a non-tail-call
 13837                                  	; preparing a non-tail-call
 13838 0000A13F 48B8-                   	mov rax, L_constants + 2270
 13838 0000A141 [DE08000000000000] 
 13839 0000A149 50                      	push rax
 13840 0000A14A 488B4520                	mov rax, PARAM(0)	; param n
 13841 0000A14E 50                      	push rax
 13842 0000A14F 6A02                    	push 2	; arg count
 13843 0000A151 488B0425[F90D0000]      	mov rax, qword [free_var_2]	; free var -
 13844 0000A159 803805                  	cmp byte [rax], T_undefined
 13845 0000A15C 0F84C3CE0000            	je L_error_fvar_undefined
 13846 0000A162 803804                  	cmp byte [rax], T_closure
 13847 0000A165 0F853ECF0000            	jne L_error_non_closure
 13848 0000A16B FF7001                  	push SOB_CLOSURE_ENV(rax)
 13849 0000A16E FF5009                  	call SOB_CLOSURE_CODE(rax)
 13850 0000A171 50                      	push rax
 13851 0000A172 6A01                    	push 1	; arg count
 13852 0000A174 488B0425[6B130000]      	mov rax, qword [free_var_84]	; free var fact
 13853 0000A17C 803805                  	cmp byte [rax], T_undefined
 13854 0000A17F 0F84A0CE0000            	je L_error_fvar_undefined
 13855 0000A185 803804                  	cmp byte [rax], T_closure
 13856 0000A188 0F851BCF0000            	jne L_error_non_closure
 13857 0000A18E FF7001                  	push SOB_CLOSURE_ENV(rax)
 13858 0000A191 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13859 0000A194 50                      	push rax
 13860 0000A195 488B4520                	mov rax, PARAM(0)	; param n
 13861 0000A199 50                      	push rax
 13862 0000A19A 6A02                    	push 2	; arg count
 13863 0000A19C 488B0425[D70D0000]      	mov rax, qword [free_var_0]	; free var *
 13864 0000A1A4 803805                  	cmp byte [rax], T_undefined
 13865 0000A1A7 0F8478CE0000            	je L_error_fvar_undefined
 13866 0000A1AD 803804                  	cmp byte [rax], T_closure
 13867 0000A1B0 0F85F3CE0000            	jne L_error_non_closure
 13868 0000A1B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13869 0000A1B9 4C8B4009                	mov r8, qword [rax + 1 + 8]
 13870 0000A1BD FF7508                  	push qword [rbp + 8]				; push old return address
 13871 0000A1C0 FF7500                  	push qword [rbp]					; push old rbp
 13872                                  	;; move stack up ;;
 13873 0000A1C3 488B5D18                	mov rbx, [rbp + 3*8]
 13874 0000A1C7 4889DE                  	mov rsi, rbx						; save old size in rsi
 13875 0000A1CA 4883C303                	add rbx, 3
 13876 0000A1CE 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 13877 0000A1D6 B902000000              	mov rcx, 2
 13878 0000A1DB 4883C104                	add rcx, 4				; num of iterations in rcx
 13879                                  .L_tc_recycle_frame_loop_034f:
 13880 0000A1DF 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 13881 0000A1E7 488B143C                	mov rdx, [rsp + rdi]
 13882 0000A1EB 4889541D00              	mov [rbp + rbx], rdx
 13883 0000A1F0 4883EB08                	sub rbx, 8
 13884 0000A1F4 48FFC9                  	dec rcx
 13885 0000A1F7 4883F900                	cmp rcx, 0
 13886 0000A1FB 75E2                    	jne .L_tc_recycle_frame_loop_034f
 13887 0000A1FD 4889F3                  	mov rbx, rsi
 13888 0000A200 4883EB02                	sub rbx, 2
 13889 0000A204 488D1CDD00000000        	lea rbx, [rbx*8]
 13890 0000A20C 4801DD                  	add rbp, rbx
 13891 0000A20F 4889EC                  	mov rsp, rbp         ; fix stack pointers
 13892 0000A212 5D                      	pop rbp
 13893 0000A213 41FFE0                  	jmp r8
 13894                                  .L_if_end_01db:
 13895 0000A216 C9                      	leave
 13896 0000A217 C21800                  	ret AND_KILL_FRAME(1)
 13897                                  .L_lambda_simple_end_0274:	; new closure is in rax
 13898 0000A21A 48890425[6B130000]      	mov qword [free_var_84], rax
 13899 0000A222 48B8-                   	mov rax, sob_void
 13899 0000A224 [0000000000000000] 
 13900                                  
 13901 0000A22C 4889C7                  	mov rdi, rax
 13902 0000A22F E873D10000              	call print_sexpr_if_not_void
 13903 0000A234 48B8-                   	mov rax, L_constants + 0
 13903 0000A236 [0000000000000000] 
 13904 0000A23E 48890425[1B0E0000]      	mov qword [free_var_4], rax
 13905 0000A246 48B8-                   	mov rax, sob_void
 13905 0000A248 [0000000000000000] 
 13906                                  
 13907 0000A250 4889C7                  	mov rdi, rax
 13908 0000A253 E84FD10000              	call print_sexpr_if_not_void
 13909 0000A258 48B8-                   	mov rax, L_constants + 0
 13909 0000A25A [0000000000000000] 
 13910 0000A262 48890425[2C0E0000]      	mov qword [free_var_5], rax
 13911 0000A26A 48B8-                   	mov rax, sob_void
 13911 0000A26C [0000000000000000] 
 13912                                  
 13913 0000A274 4889C7                  	mov rdi, rax
 13914 0000A277 E82BD10000              	call print_sexpr_if_not_void
 13915 0000A27C 48B8-                   	mov rax, L_constants + 0
 13915 0000A27E [0000000000000000] 
 13916 0000A286 48890425[4E0E0000]      	mov qword [free_var_7], rax
 13917 0000A28E 48B8-                   	mov rax, sob_void
 13917 0000A290 [0000000000000000] 
 13918                                  
 13919 0000A298 4889C7                  	mov rdi, rax
 13920 0000A29B E807D10000              	call print_sexpr_if_not_void
 13921 0000A2A0 48B8-                   	mov rax, L_constants + 0
 13921 0000A2A2 [0000000000000000] 
 13922 0000A2AA 48890425[5F0E0000]      	mov qword [free_var_8], rax
 13923 0000A2B2 48B8-                   	mov rax, sob_void
 13923 0000A2B4 [0000000000000000] 
 13924                                  
 13925 0000A2BC 4889C7                  	mov rdi, rax
 13926 0000A2BF E8E3D00000              	call print_sexpr_if_not_void
 13927 0000A2C4 48B8-                   	mov rax, L_constants + 0
 13927 0000A2C6 [0000000000000000] 
 13928 0000A2CE 48890425[3D0E0000]      	mov qword [free_var_6], rax
 13929 0000A2D6 48B8-                   	mov rax, sob_void
 13929 0000A2D8 [0000000000000000] 
 13930                                  
 13931 0000A2E0 4889C7                  	mov rdi, rax
 13932 0000A2E3 E8BFD00000              	call print_sexpr_if_not_void
 13933                                  	; preparing a non-tail-call
 13934 0000A2E8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13935 0000A2ED E860CE0000              	call malloc
 13936 0000A2F2 50                      	push rax
 13937 0000A2F3 BF00000000              	mov rdi, 8 * 0	; new rib
 13938 0000A2F8 E855CE0000              	call malloc
 13939 0000A2FD 50                      	push rax
 13940 0000A2FE BF08000000              	mov rdi, 8 * 1	; extended env
 13941 0000A303 E84ACE0000              	call malloc
 13942 0000A308 488B7D10                	mov rdi, ENV
 13943 0000A30C BE00000000              	mov rsi, 0
 13944 0000A311 BA01000000              	mov rdx, 1
 13945                                  .L_lambda_simple_env_loop_0275:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 13946 0000A316 4883FE00                	cmp rsi, 0
 13947 0000A31A 7410                    	je .L_lambda_simple_env_end_0275
 13948 0000A31C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13949 0000A320 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13950 0000A324 48FFC6                  	inc rsi
 13951 0000A327 48FFC2                  	inc rdx
 13952 0000A32A EBEA                    	jmp .L_lambda_simple_env_loop_0275
 13953                                  .L_lambda_simple_env_end_0275:
 13954 0000A32C 5B                      	pop rbx
 13955 0000A32D BE00000000              	mov rsi, 0
 13956                                  .L_lambda_simple_params_loop_0275:	; copy params
 13957 0000A332 4883FE00                	cmp rsi, 0
 13958 0000A336 740E                    	je .L_lambda_simple_params_end_0275
 13959 0000A338 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13960 0000A33D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13961 0000A341 48FFC6                  	inc rsi
 13962 0000A344 EBEC                    	jmp .L_lambda_simple_params_loop_0275
 13963                                  .L_lambda_simple_params_end_0275:
 13964 0000A346 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 13965 0000A349 4889C3                  	mov rbx, rax
 13966 0000A34C 58                      	pop rax
 13967 0000A34D C60004                  	mov byte [rax], T_closure
 13968 0000A350 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13969 0000A354 48C74009[61A30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0275
 13970 0000A35C E9AD000000              	jmp .L_lambda_simple_end_0275
 13971                                  .L_lambda_simple_code_0275:	; lambda-simple body
 13972 0000A361 48837C241000            	cmp qword [rsp + 8 * 2], 0
 13973 0000A367 740B                    	je .L_lambda_simple_arity_check_ok_0275
 13974 0000A369 FF742410                	push qword [rsp + 8 * 2]
 13975 0000A36D 6A00                    	push 0
 13976 0000A36F E997CD0000              	jmp L_error_incorrect_arity_simple
 13977                                  .L_lambda_simple_arity_check_ok_0275:
 13978 0000A374 C8000000                	enter 0, 0
 13979                                  	; preparing a tail-call
 13980 0000A378 48B8-                   	mov rax, L_constants + 2408
 13980 0000A37A [6809000000000000] 
 13981 0000A382 50                      	push rax
 13982 0000A383 48B8-                   	mov rax, L_constants + 2399
 13982 0000A385 [5F09000000000000] 
 13983 0000A38D 50                      	push rax
 13984 0000A38E 6A02                    	push 2	; arg count
 13985 0000A390 488B0425[49130000]      	mov rax, qword [free_var_82]	; free var error
 13986 0000A398 803805                  	cmp byte [rax], T_undefined
 13987 0000A39B 0F8484CC0000            	je L_error_fvar_undefined
 13988 0000A3A1 803804                  	cmp byte [rax], T_closure
 13989 0000A3A4 0F85FFCC0000            	jne L_error_non_closure
 13990 0000A3AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 13991 0000A3AD 4C8B4009                	mov r8, qword [rax + 1 + 8]
 13992 0000A3B1 FF7508                  	push qword [rbp + 8]				; push old return address
 13993 0000A3B4 FF7500                  	push qword [rbp]					; push old rbp
 13994                                  	;; move stack up ;;
 13995 0000A3B7 488B5D18                	mov rbx, [rbp + 3*8]
 13996 0000A3BB 4889DE                  	mov rsi, rbx						; save old size in rsi
 13997 0000A3BE 4883C303                	add rbx, 3
 13998 0000A3C2 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 13999 0000A3CA B902000000              	mov rcx, 2
 14000 0000A3CF 4883C104                	add rcx, 4				; num of iterations in rcx
 14001                                  .L_tc_recycle_frame_loop_0350:
 14002 0000A3D3 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 14003 0000A3DB 488B143C                	mov rdx, [rsp + rdi]
 14004 0000A3DF 4889541D00              	mov [rbp + rbx], rdx
 14005 0000A3E4 4883EB08                	sub rbx, 8
 14006 0000A3E8 48FFC9                  	dec rcx
 14007 0000A3EB 4883F900                	cmp rcx, 0
 14008 0000A3EF 75E2                    	jne .L_tc_recycle_frame_loop_0350
 14009 0000A3F1 4889F3                  	mov rbx, rsi
 14010 0000A3F4 4883EB02                	sub rbx, 2
 14011 0000A3F8 488D1CDD00000000        	lea rbx, [rbx*8]
 14012 0000A400 4801DD                  	add rbp, rbx
 14013 0000A403 4889EC                  	mov rsp, rbp         ; fix stack pointers
 14014 0000A406 5D                      	pop rbp
 14015 0000A407 41FFE0                  	jmp r8
 14016 0000A40A C9                      	leave
 14017 0000A40B C21000                  	ret AND_KILL_FRAME(0)
 14018                                  .L_lambda_simple_end_0275:	; new closure is in rax
 14019 0000A40E 50                      	push rax
 14020 0000A40F 6A01                    	push 1	; arg count
 14021 0000A411 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14022 0000A416 E837CD0000              	call malloc
 14023 0000A41B 50                      	push rax
 14024 0000A41C BF00000000              	mov rdi, 8 * 0	; new rib
 14025 0000A421 E82CCD0000              	call malloc
 14026 0000A426 50                      	push rax
 14027 0000A427 BF08000000              	mov rdi, 8 * 1	; extended env
 14028 0000A42C E821CD0000              	call malloc
 14029 0000A431 488B7D10                	mov rdi, ENV
 14030 0000A435 BE00000000              	mov rsi, 0
 14031 0000A43A BA01000000              	mov rdx, 1
 14032                                  .L_lambda_simple_env_loop_0276:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 14033 0000A43F 4883FE00                	cmp rsi, 0
 14034 0000A443 7410                    	je .L_lambda_simple_env_end_0276
 14035 0000A445 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14036 0000A449 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14037 0000A44D 48FFC6                  	inc rsi
 14038 0000A450 48FFC2                  	inc rdx
 14039 0000A453 EBEA                    	jmp .L_lambda_simple_env_loop_0276
 14040                                  .L_lambda_simple_env_end_0276:
 14041 0000A455 5B                      	pop rbx
 14042 0000A456 BE00000000              	mov rsi, 0
 14043                                  .L_lambda_simple_params_loop_0276:	; copy params
 14044 0000A45B 4883FE00                	cmp rsi, 0
 14045 0000A45F 740E                    	je .L_lambda_simple_params_end_0276
 14046 0000A461 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14047 0000A466 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14048 0000A46A 48FFC6                  	inc rsi
 14049 0000A46D EBEC                    	jmp .L_lambda_simple_params_loop_0276
 14050                                  .L_lambda_simple_params_end_0276:
 14051 0000A46F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 14052 0000A472 4889C3                  	mov rbx, rax
 14053 0000A475 58                      	pop rax
 14054 0000A476 C60004                  	mov byte [rax], T_closure
 14055 0000A479 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14056 0000A47D 48C74009[8AA40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0276
 14057 0000A485 E9BE1C0000              	jmp .L_lambda_simple_end_0276
 14058                                  .L_lambda_simple_code_0276:	; lambda-simple body
 14059 0000A48A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14060 0000A490 740B                    	je .L_lambda_simple_arity_check_ok_0276
 14061 0000A492 FF742410                	push qword [rsp + 8 * 2]
 14062 0000A496 6A01                    	push 1
 14063 0000A498 E96ECC0000              	jmp L_error_incorrect_arity_simple
 14064                                  .L_lambda_simple_arity_check_ok_0276:
 14065 0000A49D C8000000                	enter 0, 0
 14066                                  	; preparing a tail-call
 14067 0000A4A1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14068 0000A4A6 E8A7CC0000              	call malloc
 14069 0000A4AB 50                      	push rax
 14070 0000A4AC BF08000000              	mov rdi, 8 * 1	; new rib
 14071 0000A4B1 E89CCC0000              	call malloc
 14072 0000A4B6 50                      	push rax
 14073 0000A4B7 BF10000000              	mov rdi, 8 * 2	; extended env
 14074 0000A4BC E891CC0000              	call malloc
 14075 0000A4C1 488B7D10                	mov rdi, ENV
 14076 0000A4C5 BE00000000              	mov rsi, 0
 14077 0000A4CA BA01000000              	mov rdx, 1
 14078                                  .L_lambda_simple_env_loop_0277:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 14079 0000A4CF 4883FE01                	cmp rsi, 1
 14080 0000A4D3 7410                    	je .L_lambda_simple_env_end_0277
 14081 0000A4D5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14082 0000A4D9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14083 0000A4DD 48FFC6                  	inc rsi
 14084 0000A4E0 48FFC2                  	inc rdx
 14085 0000A4E3 EBEA                    	jmp .L_lambda_simple_env_loop_0277
 14086                                  .L_lambda_simple_env_end_0277:
 14087 0000A4E5 5B                      	pop rbx
 14088 0000A4E6 BE00000000              	mov rsi, 0
 14089                                  .L_lambda_simple_params_loop_0277:	; copy params
 14090 0000A4EB 4883FE01                	cmp rsi, 1
 14091 0000A4EF 740E                    	je .L_lambda_simple_params_end_0277
 14092 0000A4F1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14093 0000A4F6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14094 0000A4FA 48FFC6                  	inc rsi
 14095 0000A4FD EBEC                    	jmp .L_lambda_simple_params_loop_0277
 14096                                  .L_lambda_simple_params_end_0277:
 14097 0000A4FF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 14098 0000A502 4889C3                  	mov rbx, rax
 14099 0000A505 58                      	pop rax
 14100 0000A506 C60004                  	mov byte [rax], T_closure
 14101 0000A509 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14102 0000A50D 48C74009[1AA50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0277
 14103 0000A515 E96C0A0000              	jmp .L_lambda_simple_end_0277
 14104                                  .L_lambda_simple_code_0277:	; lambda-simple body
 14105 0000A51A 48837C241003            	cmp qword [rsp + 8 * 2], 3
 14106 0000A520 740B                    	je .L_lambda_simple_arity_check_ok_0277
 14107 0000A522 FF742410                	push qword [rsp + 8 * 2]
 14108 0000A526 6A03                    	push 3
 14109 0000A528 E9DECB0000              	jmp L_error_incorrect_arity_simple
 14110                                  .L_lambda_simple_arity_check_ok_0277:
 14111 0000A52D C8000000                	enter 0, 0
 14112 0000A531 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14113 0000A536 E817CC0000              	call malloc
 14114 0000A53B 50                      	push rax
 14115 0000A53C BF18000000              	mov rdi, 8 * 3	; new rib
 14116 0000A541 E80CCC0000              	call malloc
 14117 0000A546 50                      	push rax
 14118 0000A547 BF18000000              	mov rdi, 8 * 3	; extended env
 14119 0000A54C E801CC0000              	call malloc
 14120 0000A551 488B7D10                	mov rdi, ENV
 14121 0000A555 BE00000000              	mov rsi, 0
 14122 0000A55A BA01000000              	mov rdx, 1
 14123                                  .L_lambda_simple_env_loop_0278:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 14124 0000A55F 4883FE02                	cmp rsi, 2
 14125 0000A563 7410                    	je .L_lambda_simple_env_end_0278
 14126 0000A565 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14127 0000A569 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14128 0000A56D 48FFC6                  	inc rsi
 14129 0000A570 48FFC2                  	inc rdx
 14130 0000A573 EBEA                    	jmp .L_lambda_simple_env_loop_0278
 14131                                  .L_lambda_simple_env_end_0278:
 14132 0000A575 5B                      	pop rbx
 14133 0000A576 BE00000000              	mov rsi, 0
 14134                                  .L_lambda_simple_params_loop_0278:	; copy params
 14135 0000A57B 4883FE03                	cmp rsi, 3
 14136 0000A57F 740E                    	je .L_lambda_simple_params_end_0278
 14137 0000A581 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14138 0000A586 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14139 0000A58A 48FFC6                  	inc rsi
 14140 0000A58D EBEC                    	jmp .L_lambda_simple_params_loop_0278
 14141                                  .L_lambda_simple_params_end_0278:
 14142 0000A58F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 14143 0000A592 4889C3                  	mov rbx, rax
 14144 0000A595 58                      	pop rax
 14145 0000A596 C60004                  	mov byte [rax], T_closure
 14146 0000A599 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14147 0000A59D 48C74009[AAA50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0278
 14148 0000A5A5 E9D8090000              	jmp .L_lambda_simple_end_0278
 14149                                  .L_lambda_simple_code_0278:	; lambda-simple body
 14150 0000A5AA 48837C241002            	cmp qword [rsp + 8 * 2], 2
 14151 0000A5B0 740B                    	je .L_lambda_simple_arity_check_ok_0278
 14152 0000A5B2 FF742410                	push qword [rsp + 8 * 2]
 14153 0000A5B6 6A02                    	push 2
 14154 0000A5B8 E94ECB0000              	jmp L_error_incorrect_arity_simple
 14155                                  .L_lambda_simple_arity_check_ok_0278:
 14156 0000A5BD C8000000                	enter 0, 0
 14157                                  	; preparing a non-tail-call
 14158 0000A5C1 488B4520                	mov rax, PARAM(0)	; param a
 14159 0000A5C5 50                      	push rax
 14160 0000A5C6 6A01                    	push 1	; arg count
 14161 0000A5C8 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 14162 0000A5D0 803805                  	cmp byte [rax], T_undefined
 14163 0000A5D3 0F844CCA0000            	je L_error_fvar_undefined
 14164 0000A5D9 803804                  	cmp byte [rax], T_closure
 14165 0000A5DC 0F85C7CA0000            	jne L_error_non_closure
 14166 0000A5E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14167 0000A5E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14168 0000A5E8 483D[02000000]          	cmp rax, sob_boolean_false
 14169 0000A5EE 0F84E5020000            	je .L_if_else_01e7
 14170                                  	; preparing a non-tail-call
 14171 0000A5F4 488B4528                	mov rax, PARAM(1)	; param b
 14172 0000A5F8 50                      	push rax
 14173 0000A5F9 6A01                    	push 1	; arg count
 14174 0000A5FB 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 14175 0000A603 803805                  	cmp byte [rax], T_undefined
 14176 0000A606 0F8419CA0000            	je L_error_fvar_undefined
 14177 0000A60C 803804                  	cmp byte [rax], T_closure
 14178 0000A60F 0F8594CA0000            	jne L_error_non_closure
 14179 0000A615 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14180 0000A618 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14181 0000A61B 483D[02000000]          	cmp rax, sob_boolean_false
 14182 0000A621 0F8484000000            	je .L_if_else_01de
 14183                                  	; preparing a tail-call
 14184 0000A627 488B4528                	mov rax, PARAM(1)	; param b
 14185 0000A62B 50                      	push rax
 14186 0000A62C 488B4520                	mov rax, PARAM(0)	; param a
 14187 0000A630 50                      	push rax
 14188 0000A631 6A02                    	push 2	; arg count
 14189 0000A633 488B4510                	mov rax, ENV
 14190 0000A637 488B00                  	mov rax, qword [rax + 8 * 0]
 14191 0000A63A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator-zz
 14192 0000A63D 803804                  	cmp byte [rax], T_closure
 14193 0000A640 0F8563CA0000            	jne L_error_non_closure
 14194 0000A646 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14195 0000A649 4C8B4009                	mov r8, qword [rax + 1 + 8]
 14196 0000A64D FF7508                  	push qword [rbp + 8]				; push old return address
 14197 0000A650 FF7500                  	push qword [rbp]					; push old rbp
 14198                                  	;; move stack up ;;
 14199 0000A653 488B5D18                	mov rbx, [rbp + 3*8]
 14200 0000A657 4889DE                  	mov rsi, rbx						; save old size in rsi
 14201 0000A65A 4883C303                	add rbx, 3
 14202 0000A65E 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 14203 0000A666 B902000000              	mov rcx, 2
 14204 0000A66B 4883C104                	add rcx, 4				; num of iterations in rcx
 14205                                  .L_tc_recycle_frame_loop_0352:
 14206 0000A66F 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 14207 0000A677 488B143C                	mov rdx, [rsp + rdi]
 14208 0000A67B 4889541D00              	mov [rbp + rbx], rdx
 14209 0000A680 4883EB08                	sub rbx, 8
 14210 0000A684 48FFC9                  	dec rcx
 14211 0000A687 4883F900                	cmp rcx, 0
 14212 0000A68B 75E2                    	jne .L_tc_recycle_frame_loop_0352
 14213 0000A68D 4889F3                  	mov rbx, rsi
 14214 0000A690 4883EB02                	sub rbx, 2
 14215 0000A694 488D1CDD00000000        	lea rbx, [rbx*8]
 14216 0000A69C 4801DD                  	add rbp, rbx
 14217 0000A69F 4889EC                  	mov rsp, rbp         ; fix stack pointers
 14218 0000A6A2 5D                      	pop rbp
 14219 0000A6A3 41FFE0                  	jmp r8
 14220 0000A6A6 E929020000              	jmp .L_if_end_01de
 14221                                  .L_if_else_01de:
 14222                                  	; preparing a non-tail-call
 14223 0000A6AB 488B4528                	mov rax, PARAM(1)	; param b
 14224 0000A6AF 50                      	push rax
 14225 0000A6B0 6A01                    	push 1	; arg count
 14226 0000A6B2 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 14227 0000A6BA 803805                  	cmp byte [rax], T_undefined
 14228 0000A6BD 0F8462C90000            	je L_error_fvar_undefined
 14229 0000A6C3 803804                  	cmp byte [rax], T_closure
 14230 0000A6C6 0F85DDC90000            	jne L_error_non_closure
 14231 0000A6CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 14232 0000A6CF FF5009                  	call SOB_CLOSURE_CODE(rax)
 14233 0000A6D2 483D[02000000]          	cmp rax, sob_boolean_false
 14234 0000A6D8 0F84A8000000            	je .L_if_else_01dd
 14235                                  	; preparing a tail-call
 14236 0000A6DE 488B4528                	mov rax, PARAM(1)	; param b
 14237 0000A6E2 50                      	push rax
 14238                                  	; preparing a non-tail-call
 14239 0000A6E3 488B4520                	mov rax, PARAM(0)	; param a
 14240 0000A6E7 50                      	push rax
 14241 0000A6E8 6A01                    	push 1	; arg count
 14242 0000A6EA 488B0425[C40F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 14243 0000A6F2 803805                  	cmp byte [rax], T_undefined
 14244 0000A6F5 0F842AC90000            	je L_error_fvar_undefined
 14245 0000A6FB 803804                  	cmp byte [rax], T_closure
 14246 0000A6FE 0F85A5C90000            	jne L_error_non_closure
 14247 0000A704 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14248 0000A707 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14249 0000A70A 50                      	push rax
 14250 0000A70B 6A02                    	push 2	; arg count
 14251 0000A70D 488B4510                	mov rax, ENV
 14252 0000A711 488B00                  	mov rax, qword [rax + 8 * 0]
 14253 0000A714 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 14254 0000A718 803804                  	cmp byte [rax], T_closure
 14255 0000A71B 0F8588C90000            	jne L_error_non_closure
 14256 0000A721 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14257 0000A724 4C8B4009                	mov r8, qword [rax + 1 + 8]
 14258 0000A728 FF7508                  	push qword [rbp + 8]				; push old return address
 14259 0000A72B FF7500                  	push qword [rbp]					; push old rbp
 14260                                  	;; move stack up ;;
 14261 0000A72E 488B5D18                	mov rbx, [rbp + 3*8]
 14262 0000A732 4889DE                  	mov rsi, rbx						; save old size in rsi
 14263 0000A735 4883C303                	add rbx, 3
 14264 0000A739 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 14265 0000A741 B902000000              	mov rcx, 2
 14266 0000A746 4883C104                	add rcx, 4				; num of iterations in rcx
 14267                                  .L_tc_recycle_frame_loop_0353:
 14268 0000A74A 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 14269 0000A752 488B143C                	mov rdx, [rsp + rdi]
 14270 0000A756 4889541D00              	mov [rbp + rbx], rdx
 14271 0000A75B 4883EB08                	sub rbx, 8
 14272 0000A75F 48FFC9                  	dec rcx
 14273 0000A762 4883F900                	cmp rcx, 0
 14274 0000A766 75E2                    	jne .L_tc_recycle_frame_loop_0353
 14275 0000A768 4889F3                  	mov rbx, rsi
 14276 0000A76B 4883EB02                	sub rbx, 2
 14277 0000A76F 488D1CDD00000000        	lea rbx, [rbx*8]
 14278 0000A777 4801DD                  	add rbp, rbx
 14279 0000A77A 4889EC                  	mov rsp, rbp         ; fix stack pointers
 14280 0000A77D 5D                      	pop rbp
 14281 0000A77E 41FFE0                  	jmp r8
 14282 0000A781 E94E010000              	jmp .L_if_end_01dd
 14283                                  .L_if_else_01dd:
 14284                                  	; preparing a non-tail-call
 14285 0000A786 488B4528                	mov rax, PARAM(1)	; param b
 14286 0000A78A 50                      	push rax
 14287 0000A78B 6A01                    	push 1	; arg count
 14288 0000A78D 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 14289 0000A795 803805                  	cmp byte [rax], T_undefined
 14290 0000A798 0F8487C80000            	je L_error_fvar_undefined
 14291 0000A79E 803804                  	cmp byte [rax], T_closure
 14292 0000A7A1 0F8502C90000            	jne L_error_non_closure
 14293 0000A7A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14294 0000A7AA FF5009                  	call SOB_CLOSURE_CODE(rax)
 14295 0000A7AD 483D[02000000]          	cmp rax, sob_boolean_false
 14296 0000A7B3 0F84A5000000            	je .L_if_else_01dc
 14297                                  	; preparing a tail-call
 14298 0000A7B9 488B4528                	mov rax, PARAM(1)	; param b
 14299 0000A7BD 50                      	push rax
 14300                                  	; preparing a non-tail-call
 14301 0000A7BE 488B4520                	mov rax, PARAM(0)	; param a
 14302 0000A7C2 50                      	push rax
 14303 0000A7C3 6A01                    	push 1	; arg count
 14304 0000A7C5 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
 14305 0000A7CD 803805                  	cmp byte [rax], T_undefined
 14306 0000A7D0 0F844FC80000            	je L_error_fvar_undefined
 14307 0000A7D6 803804                  	cmp byte [rax], T_closure
 14308 0000A7D9 0F85CAC80000            	jne L_error_non_closure
 14309 0000A7DF FF7001                  	push SOB_CLOSURE_ENV(rax)
 14310 0000A7E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14311 0000A7E5 50                      	push rax
 14312 0000A7E6 6A02                    	push 2	; arg count
 14313 0000A7E8 488B4510                	mov rax, ENV
 14314 0000A7EC 488B00                  	mov rax, qword [rax + 8 * 0]
 14315 0000A7EF 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14316 0000A7F3 803804                  	cmp byte [rax], T_closure
 14317 0000A7F6 0F85ADC80000            	jne L_error_non_closure
 14318 0000A7FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 14319 0000A7FF 4C8B4009                	mov r8, qword [rax + 1 + 8]
 14320 0000A803 FF7508                  	push qword [rbp + 8]				; push old return address
 14321 0000A806 FF7500                  	push qword [rbp]					; push old rbp
 14322                                  	;; move stack up ;;
 14323 0000A809 488B5D18                	mov rbx, [rbp + 3*8]
 14324 0000A80D 4889DE                  	mov rsi, rbx						; save old size in rsi
 14325 0000A810 4883C303                	add rbx, 3
 14326 0000A814 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 14327 0000A81C B902000000              	mov rcx, 2
 14328 0000A821 4883C104                	add rcx, 4				; num of iterations in rcx
 14329                                  .L_tc_recycle_frame_loop_0354:
 14330 0000A825 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 14331 0000A82D 488B143C                	mov rdx, [rsp + rdi]
 14332 0000A831 4889541D00              	mov [rbp + rbx], rdx
 14333 0000A836 4883EB08                	sub rbx, 8
 14334 0000A83A 48FFC9                  	dec rcx
 14335 0000A83D 4883F900                	cmp rcx, 0
 14336 0000A841 75E2                    	jne .L_tc_recycle_frame_loop_0354
 14337 0000A843 4889F3                  	mov rbx, rsi
 14338 0000A846 4883EB02                	sub rbx, 2
 14339 0000A84A 488D1CDD00000000        	lea rbx, [rbx*8]
 14340 0000A852 4801DD                  	add rbp, rbx
 14341 0000A855 4889EC                  	mov rsp, rbp         ; fix stack pointers
 14342 0000A858 5D                      	pop rbp
 14343 0000A859 41FFE0                  	jmp r8
 14344 0000A85C EB76                    	jmp .L_if_end_01dc
 14345                                  .L_if_else_01dc:
 14346                                  	; preparing a tail-call
 14347 0000A85E 6A00                    	push 0	; arg count
 14348 0000A860 488B4510                	mov rax, ENV
 14349 0000A864 488B4008                	mov rax, qword [rax + 8 * 1]
 14350 0000A868 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 14351 0000A86B 803804                  	cmp byte [rax], T_closure
 14352 0000A86E 0F8535C80000            	jne L_error_non_closure
 14353 0000A874 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14354 0000A877 4C8B4009                	mov r8, qword [rax + 1 + 8]
 14355 0000A87B FF7508                  	push qword [rbp + 8]				; push old return address
 14356 0000A87E FF7500                  	push qword [rbp]					; push old rbp
 14357                                  	;; move stack up ;;
 14358 0000A881 488B5D18                	mov rbx, [rbp + 3*8]
 14359 0000A885 4889DE                  	mov rsi, rbx						; save old size in rsi
 14360 0000A888 4883C303                	add rbx, 3
 14361 0000A88C 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 14362 0000A894 B900000000              	mov rcx, 0
 14363 0000A899 4883C104                	add rcx, 4				; num of iterations in rcx
 14364                                  .L_tc_recycle_frame_loop_0355:
 14365 0000A89D 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 14366 0000A8A5 488B143C                	mov rdx, [rsp + rdi]
 14367 0000A8A9 4889541D00              	mov [rbp + rbx], rdx
 14368 0000A8AE 4883EB08                	sub rbx, 8
 14369 0000A8B2 48FFC9                  	dec rcx
 14370 0000A8B5 4883F900                	cmp rcx, 0
 14371 0000A8B9 75E2                    	jne .L_tc_recycle_frame_loop_0355
 14372 0000A8BB 4889F3                  	mov rbx, rsi
 14373 0000A8BE 4883EB00                	sub rbx, 0
 14374 0000A8C2 488D1CDD00000000        	lea rbx, [rbx*8]
 14375 0000A8CA 4801DD                  	add rbp, rbx
 14376 0000A8CD 4889EC                  	mov rsp, rbp         ; fix stack pointers
 14377 0000A8D0 5D                      	pop rbp
 14378 0000A8D1 41FFE0                  	jmp r8
 14379                                  .L_if_end_01dc:
 14380                                  .L_if_end_01dd:
 14381                                  .L_if_end_01de:
 14382 0000A8D4 E9A5060000              	jmp .L_if_end_01e7
 14383                                  .L_if_else_01e7:
 14384                                  	; preparing a non-tail-call
 14385 0000A8D9 488B4520                	mov rax, PARAM(0)	; param a
 14386 0000A8DD 50                      	push rax
 14387 0000A8DE 6A01                    	push 1	; arg count
 14388 0000A8E0 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 14389 0000A8E8 803805                  	cmp byte [rax], T_undefined
 14390 0000A8EB 0F8434C70000            	je L_error_fvar_undefined
 14391 0000A8F1 803804                  	cmp byte [rax], T_closure
 14392 0000A8F4 0F85AFC70000            	jne L_error_non_closure
 14393 0000A8FA FF7001                  	push SOB_CLOSURE_ENV(rax)
 14394 0000A8FD FF5009                  	call SOB_CLOSURE_CODE(rax)
 14395 0000A900 483D[02000000]          	cmp rax, sob_boolean_false
 14396 0000A906 0F84E6020000            	je .L_if_else_01e6
 14397                                  	; preparing a non-tail-call
 14398 0000A90C 488B4528                	mov rax, PARAM(1)	; param b
 14399 0000A910 50                      	push rax
 14400 0000A911 6A01                    	push 1	; arg count
 14401 0000A913 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 14402 0000A91B 803805                  	cmp byte [rax], T_undefined
 14403 0000A91E 0F8401C70000            	je L_error_fvar_undefined
 14404 0000A924 803804                  	cmp byte [rax], T_closure
 14405 0000A927 0F857CC70000            	jne L_error_non_closure
 14406 0000A92D FF7001                  	push SOB_CLOSURE_ENV(rax)
 14407 0000A930 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14408 0000A933 483D[02000000]          	cmp rax, sob_boolean_false
 14409 0000A939 0F84A8000000            	je .L_if_else_01e1
 14410                                  	; preparing a tail-call
 14411                                  	; preparing a non-tail-call
 14412 0000A93F 488B4528                	mov rax, PARAM(1)	; param b
 14413 0000A943 50                      	push rax
 14414 0000A944 6A01                    	push 1	; arg count
 14415 0000A946 488B0425[C40F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 14416 0000A94E 803805                  	cmp byte [rax], T_undefined
 14417 0000A951 0F84CEC60000            	je L_error_fvar_undefined
 14418 0000A957 803804                  	cmp byte [rax], T_closure
 14419 0000A95A 0F8549C70000            	jne L_error_non_closure
 14420 0000A960 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14421 0000A963 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14422 0000A966 50                      	push rax
 14423 0000A967 488B4520                	mov rax, PARAM(0)	; param a
 14424 0000A96B 50                      	push rax
 14425 0000A96C 6A02                    	push 2	; arg count
 14426 0000A96E 488B4510                	mov rax, ENV
 14427 0000A972 488B00                  	mov rax, qword [rax + 8 * 0]
 14428 0000A975 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 14429 0000A979 803804                  	cmp byte [rax], T_closure
 14430 0000A97C 0F8527C70000            	jne L_error_non_closure
 14431 0000A982 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14432 0000A985 4C8B4009                	mov r8, qword [rax + 1 + 8]
 14433 0000A989 FF7508                  	push qword [rbp + 8]				; push old return address
 14434 0000A98C FF7500                  	push qword [rbp]					; push old rbp
 14435                                  	;; move stack up ;;
 14436 0000A98F 488B5D18                	mov rbx, [rbp + 3*8]
 14437 0000A993 4889DE                  	mov rsi, rbx						; save old size in rsi
 14438 0000A996 4883C303                	add rbx, 3
 14439 0000A99A 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 14440 0000A9A2 B902000000              	mov rcx, 2
 14441 0000A9A7 4883C104                	add rcx, 4				; num of iterations in rcx
 14442                                  .L_tc_recycle_frame_loop_0356:
 14443 0000A9AB 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 14444 0000A9B3 488B143C                	mov rdx, [rsp + rdi]
 14445 0000A9B7 4889541D00              	mov [rbp + rbx], rdx
 14446 0000A9BC 4883EB08                	sub rbx, 8
 14447 0000A9C0 48FFC9                  	dec rcx
 14448 0000A9C3 4883F900                	cmp rcx, 0
 14449 0000A9C7 75E2                    	jne .L_tc_recycle_frame_loop_0356
 14450 0000A9C9 4889F3                  	mov rbx, rsi
 14451 0000A9CC 4883EB02                	sub rbx, 2
 14452 0000A9D0 488D1CDD00000000        	lea rbx, [rbx*8]
 14453 0000A9D8 4801DD                  	add rbp, rbx
 14454 0000A9DB 4889EC                  	mov rsp, rbp         ; fix stack pointers
 14455 0000A9DE 5D                      	pop rbp
 14456 0000A9DF 41FFE0                  	jmp r8
 14457 0000A9E2 E906020000              	jmp .L_if_end_01e1
 14458                                  .L_if_else_01e1:
 14459                                  	; preparing a non-tail-call
 14460 0000A9E7 488B4528                	mov rax, PARAM(1)	; param b
 14461 0000A9EB 50                      	push rax
 14462 0000A9EC 6A01                    	push 1	; arg count
 14463 0000A9EE 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 14464 0000A9F6 803805                  	cmp byte [rax], T_undefined
 14465 0000A9F9 0F8426C60000            	je L_error_fvar_undefined
 14466 0000A9FF 803804                  	cmp byte [rax], T_closure
 14467 0000AA02 0F85A1C60000            	jne L_error_non_closure
 14468 0000AA08 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14469 0000AA0B FF5009                  	call SOB_CLOSURE_CODE(rax)
 14470 0000AA0E 483D[02000000]          	cmp rax, sob_boolean_false
 14471 0000AA14 0F8485000000            	je .L_if_else_01e0
 14472                                  	; preparing a tail-call
 14473 0000AA1A 488B4528                	mov rax, PARAM(1)	; param b
 14474 0000AA1E 50                      	push rax
 14475 0000AA1F 488B4520                	mov rax, PARAM(0)	; param a
 14476 0000AA23 50                      	push rax
 14477 0000AA24 6A02                    	push 2	; arg count
 14478 0000AA26 488B4510                	mov rax, ENV
 14479 0000AA2A 488B00                  	mov rax, qword [rax + 8 * 0]
 14480 0000AA2D 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 14481 0000AA31 803804                  	cmp byte [rax], T_closure
 14482 0000AA34 0F856FC60000            	jne L_error_non_closure
 14483 0000AA3A FF7001                  	push SOB_CLOSURE_ENV(rax)
 14484 0000AA3D 4C8B4009                	mov r8, qword [rax + 1 + 8]
 14485 0000AA41 FF7508                  	push qword [rbp + 8]				; push old return address
 14486 0000AA44 FF7500                  	push qword [rbp]					; push old rbp
 14487                                  	;; move stack up ;;
 14488 0000AA47 488B5D18                	mov rbx, [rbp + 3*8]
 14489 0000AA4B 4889DE                  	mov rsi, rbx						; save old size in rsi
 14490 0000AA4E 4883C303                	add rbx, 3
 14491 0000AA52 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 14492 0000AA5A B902000000              	mov rcx, 2
 14493 0000AA5F 4883C104                	add rcx, 4				; num of iterations in rcx
 14494                                  .L_tc_recycle_frame_loop_0357:
 14495 0000AA63 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 14496 0000AA6B 488B143C                	mov rdx, [rsp + rdi]
 14497 0000AA6F 4889541D00              	mov [rbp + rbx], rdx
 14498 0000AA74 4883EB08                	sub rbx, 8
 14499 0000AA78 48FFC9                  	dec rcx
 14500 0000AA7B 4883F900                	cmp rcx, 0
 14501 0000AA7F 75E2                    	jne .L_tc_recycle_frame_loop_0357
 14502 0000AA81 4889F3                  	mov rbx, rsi
 14503 0000AA84 4883EB02                	sub rbx, 2
 14504 0000AA88 488D1CDD00000000        	lea rbx, [rbx*8]
 14505 0000AA90 4801DD                  	add rbp, rbx
 14506 0000AA93 4889EC                  	mov rsp, rbp         ; fix stack pointers
 14507 0000AA96 5D                      	pop rbp
 14508 0000AA97 41FFE0                  	jmp r8
 14509 0000AA9A E94E010000              	jmp .L_if_end_01e0
 14510                                  .L_if_else_01e0:
 14511                                  	; preparing a non-tail-call
 14512 0000AA9F 488B4528                	mov rax, PARAM(1)	; param b
 14513 0000AAA3 50                      	push rax
 14514 0000AAA4 6A01                    	push 1	; arg count
 14515 0000AAA6 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 14516 0000AAAE 803805                  	cmp byte [rax], T_undefined
 14517 0000AAB1 0F846EC50000            	je L_error_fvar_undefined
 14518 0000AAB7 803804                  	cmp byte [rax], T_closure
 14519 0000AABA 0F85E9C50000            	jne L_error_non_closure
 14520 0000AAC0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14521 0000AAC3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14522 0000AAC6 483D[02000000]          	cmp rax, sob_boolean_false
 14523 0000AACC 0F84A5000000            	je .L_if_else_01df
 14524                                  	; preparing a tail-call
 14525 0000AAD2 488B4528                	mov rax, PARAM(1)	; param b
 14526 0000AAD6 50                      	push rax
 14527                                  	; preparing a non-tail-call
 14528 0000AAD7 488B4520                	mov rax, PARAM(0)	; param a
 14529 0000AADB 50                      	push rax
 14530 0000AADC 6A01                    	push 1	; arg count
 14531 0000AADE 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 14532 0000AAE6 803805                  	cmp byte [rax], T_undefined
 14533 0000AAE9 0F8436C50000            	je L_error_fvar_undefined
 14534 0000AAEF 803804                  	cmp byte [rax], T_closure
 14535 0000AAF2 0F85B1C50000            	jne L_error_non_closure
 14536 0000AAF8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14537 0000AAFB FF5009                  	call SOB_CLOSURE_CODE(rax)
 14538 0000AAFE 50                      	push rax
 14539 0000AAFF 6A02                    	push 2	; arg count
 14540 0000AB01 488B4510                	mov rax, ENV
 14541 0000AB05 488B00                  	mov rax, qword [rax + 8 * 0]
 14542 0000AB08 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14543 0000AB0C 803804                  	cmp byte [rax], T_closure
 14544 0000AB0F 0F8594C50000            	jne L_error_non_closure
 14545 0000AB15 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14546 0000AB18 4C8B4009                	mov r8, qword [rax + 1 + 8]
 14547 0000AB1C FF7508                  	push qword [rbp + 8]				; push old return address
 14548 0000AB1F FF7500                  	push qword [rbp]					; push old rbp
 14549                                  	;; move stack up ;;
 14550 0000AB22 488B5D18                	mov rbx, [rbp + 3*8]
 14551 0000AB26 4889DE                  	mov rsi, rbx						; save old size in rsi
 14552 0000AB29 4883C303                	add rbx, 3
 14553 0000AB2D 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 14554 0000AB35 B902000000              	mov rcx, 2
 14555 0000AB3A 4883C104                	add rcx, 4				; num of iterations in rcx
 14556                                  .L_tc_recycle_frame_loop_0358:
 14557 0000AB3E 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 14558 0000AB46 488B143C                	mov rdx, [rsp + rdi]
 14559 0000AB4A 4889541D00              	mov [rbp + rbx], rdx
 14560 0000AB4F 4883EB08                	sub rbx, 8
 14561 0000AB53 48FFC9                  	dec rcx
 14562 0000AB56 4883F900                	cmp rcx, 0
 14563 0000AB5A 75E2                    	jne .L_tc_recycle_frame_loop_0358
 14564 0000AB5C 4889F3                  	mov rbx, rsi
 14565 0000AB5F 4883EB02                	sub rbx, 2
 14566 0000AB63 488D1CDD00000000        	lea rbx, [rbx*8]
 14567 0000AB6B 4801DD                  	add rbp, rbx
 14568 0000AB6E 4889EC                  	mov rsp, rbp         ; fix stack pointers
 14569 0000AB71 5D                      	pop rbp
 14570 0000AB72 41FFE0                  	jmp r8
 14571 0000AB75 EB76                    	jmp .L_if_end_01df
 14572                                  .L_if_else_01df:
 14573                                  	; preparing a tail-call
 14574 0000AB77 6A00                    	push 0	; arg count
 14575 0000AB79 488B4510                	mov rax, ENV
 14576 0000AB7D 488B4008                	mov rax, qword [rax + 8 * 1]
 14577 0000AB81 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 14578 0000AB84 803804                  	cmp byte [rax], T_closure
 14579 0000AB87 0F851CC50000            	jne L_error_non_closure
 14580 0000AB8D FF7001                  	push SOB_CLOSURE_ENV(rax)
 14581 0000AB90 4C8B4009                	mov r8, qword [rax + 1 + 8]
 14582 0000AB94 FF7508                  	push qword [rbp + 8]				; push old return address
 14583 0000AB97 FF7500                  	push qword [rbp]					; push old rbp
 14584                                  	;; move stack up ;;
 14585 0000AB9A 488B5D18                	mov rbx, [rbp + 3*8]
 14586 0000AB9E 4889DE                  	mov rsi, rbx						; save old size in rsi
 14587 0000ABA1 4883C303                	add rbx, 3
 14588 0000ABA5 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 14589 0000ABAD B900000000              	mov rcx, 0
 14590 0000ABB2 4883C104                	add rcx, 4				; num of iterations in rcx
 14591                                  .L_tc_recycle_frame_loop_0359:
 14592 0000ABB6 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 14593 0000ABBE 488B143C                	mov rdx, [rsp + rdi]
 14594 0000ABC2 4889541D00              	mov [rbp + rbx], rdx
 14595 0000ABC7 4883EB08                	sub rbx, 8
 14596 0000ABCB 48FFC9                  	dec rcx
 14597 0000ABCE 4883F900                	cmp rcx, 0
 14598 0000ABD2 75E2                    	jne .L_tc_recycle_frame_loop_0359
 14599 0000ABD4 4889F3                  	mov rbx, rsi
 14600 0000ABD7 4883EB00                	sub rbx, 0
 14601 0000ABDB 488D1CDD00000000        	lea rbx, [rbx*8]
 14602 0000ABE3 4801DD                  	add rbp, rbx
 14603 0000ABE6 4889EC                  	mov rsp, rbp         ; fix stack pointers
 14604 0000ABE9 5D                      	pop rbp
 14605 0000ABEA 41FFE0                  	jmp r8
 14606                                  .L_if_end_01df:
 14607                                  .L_if_end_01e0:
 14608                                  .L_if_end_01e1:
 14609 0000ABED E98C030000              	jmp .L_if_end_01e6
 14610                                  .L_if_else_01e6:
 14611                                  	; preparing a non-tail-call
 14612 0000ABF2 488B4520                	mov rax, PARAM(0)	; param a
 14613 0000ABF6 50                      	push rax
 14614 0000ABF7 6A01                    	push 1	; arg count
 14615 0000ABF9 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 14616 0000AC01 803805                  	cmp byte [rax], T_undefined
 14617 0000AC04 0F841BC40000            	je L_error_fvar_undefined
 14618 0000AC0A 803804                  	cmp byte [rax], T_closure
 14619 0000AC0D 0F8596C40000            	jne L_error_non_closure
 14620 0000AC13 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14621 0000AC16 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14622 0000AC19 483D[02000000]          	cmp rax, sob_boolean_false
 14623 0000AC1F 0F84E3020000            	je .L_if_else_01e5
 14624                                  	; preparing a non-tail-call
 14625 0000AC25 488B4528                	mov rax, PARAM(1)	; param b
 14626 0000AC29 50                      	push rax
 14627 0000AC2A 6A01                    	push 1	; arg count
 14628 0000AC2C 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 14629 0000AC34 803805                  	cmp byte [rax], T_undefined
 14630 0000AC37 0F84E8C30000            	je L_error_fvar_undefined
 14631 0000AC3D 803804                  	cmp byte [rax], T_closure
 14632 0000AC40 0F8563C40000            	jne L_error_non_closure
 14633 0000AC46 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14634 0000AC49 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14635 0000AC4C 483D[02000000]          	cmp rax, sob_boolean_false
 14636 0000AC52 0F84A8000000            	je .L_if_else_01e4
 14637                                  	; preparing a tail-call
 14638                                  	; preparing a non-tail-call
 14639 0000AC58 488B4528                	mov rax, PARAM(1)	; param b
 14640 0000AC5C 50                      	push rax
 14641 0000AC5D 6A01                    	push 1	; arg count
 14642 0000AC5F 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
 14643 0000AC67 803805                  	cmp byte [rax], T_undefined
 14644 0000AC6A 0F84B5C30000            	je L_error_fvar_undefined
 14645 0000AC70 803804                  	cmp byte [rax], T_closure
 14646 0000AC73 0F8530C40000            	jne L_error_non_closure
 14647 0000AC79 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14648 0000AC7C FF5009                  	call SOB_CLOSURE_CODE(rax)
 14649 0000AC7F 50                      	push rax
 14650 0000AC80 488B4520                	mov rax, PARAM(0)	; param a
 14651 0000AC84 50                      	push rax
 14652 0000AC85 6A02                    	push 2	; arg count
 14653 0000AC87 488B4510                	mov rax, ENV
 14654 0000AC8B 488B00                  	mov rax, qword [rax + 8 * 0]
 14655 0000AC8E 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14656 0000AC92 803804                  	cmp byte [rax], T_closure
 14657 0000AC95 0F850EC40000            	jne L_error_non_closure
 14658 0000AC9B FF7001                  	push SOB_CLOSURE_ENV(rax)
 14659 0000AC9E 4C8B4009                	mov r8, qword [rax + 1 + 8]
 14660 0000ACA2 FF7508                  	push qword [rbp + 8]				; push old return address
 14661 0000ACA5 FF7500                  	push qword [rbp]					; push old rbp
 14662                                  	;; move stack up ;;
 14663 0000ACA8 488B5D18                	mov rbx, [rbp + 3*8]
 14664 0000ACAC 4889DE                  	mov rsi, rbx						; save old size in rsi
 14665 0000ACAF 4883C303                	add rbx, 3
 14666 0000ACB3 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 14667 0000ACBB B902000000              	mov rcx, 2
 14668 0000ACC0 4883C104                	add rcx, 4				; num of iterations in rcx
 14669                                  .L_tc_recycle_frame_loop_035a:
 14670 0000ACC4 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 14671 0000ACCC 488B143C                	mov rdx, [rsp + rdi]
 14672 0000ACD0 4889541D00              	mov [rbp + rbx], rdx
 14673 0000ACD5 4883EB08                	sub rbx, 8
 14674 0000ACD9 48FFC9                  	dec rcx
 14675 0000ACDC 4883F900                	cmp rcx, 0
 14676 0000ACE0 75E2                    	jne .L_tc_recycle_frame_loop_035a
 14677 0000ACE2 4889F3                  	mov rbx, rsi
 14678 0000ACE5 4883EB02                	sub rbx, 2
 14679 0000ACE9 488D1CDD00000000        	lea rbx, [rbx*8]
 14680 0000ACF1 4801DD                  	add rbp, rbx
 14681 0000ACF4 4889EC                  	mov rsp, rbp         ; fix stack pointers
 14682 0000ACF7 5D                      	pop rbp
 14683 0000ACF8 41FFE0                  	jmp r8
 14684 0000ACFB E906020000              	jmp .L_if_end_01e4
 14685                                  .L_if_else_01e4:
 14686                                  	; preparing a non-tail-call
 14687 0000AD00 488B4528                	mov rax, PARAM(1)	; param b
 14688 0000AD04 50                      	push rax
 14689 0000AD05 6A01                    	push 1	; arg count
 14690 0000AD07 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 14691 0000AD0F 803805                  	cmp byte [rax], T_undefined
 14692 0000AD12 0F840DC30000            	je L_error_fvar_undefined
 14693 0000AD18 803804                  	cmp byte [rax], T_closure
 14694 0000AD1B 0F8588C30000            	jne L_error_non_closure
 14695 0000AD21 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14696 0000AD24 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14697 0000AD27 483D[02000000]          	cmp rax, sob_boolean_false
 14698 0000AD2D 0F84A8000000            	je .L_if_else_01e3
 14699                                  	; preparing a tail-call
 14700                                  	; preparing a non-tail-call
 14701 0000AD33 488B4528                	mov rax, PARAM(1)	; param b
 14702 0000AD37 50                      	push rax
 14703 0000AD38 6A01                    	push 1	; arg count
 14704 0000AD3A 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 14705 0000AD42 803805                  	cmp byte [rax], T_undefined
 14706 0000AD45 0F84DAC20000            	je L_error_fvar_undefined
 14707 0000AD4B 803804                  	cmp byte [rax], T_closure
 14708 0000AD4E 0F8555C30000            	jne L_error_non_closure
 14709 0000AD54 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14710 0000AD57 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14711 0000AD5A 50                      	push rax
 14712 0000AD5B 488B4520                	mov rax, PARAM(0)	; param a
 14713 0000AD5F 50                      	push rax
 14714 0000AD60 6A02                    	push 2	; arg count
 14715 0000AD62 488B4510                	mov rax, ENV
 14716 0000AD66 488B00                  	mov rax, qword [rax + 8 * 0]
 14717 0000AD69 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14718 0000AD6D 803804                  	cmp byte [rax], T_closure
 14719 0000AD70 0F8533C30000            	jne L_error_non_closure
 14720 0000AD76 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14721 0000AD79 4C8B4009                	mov r8, qword [rax + 1 + 8]
 14722 0000AD7D FF7508                  	push qword [rbp + 8]				; push old return address
 14723 0000AD80 FF7500                  	push qword [rbp]					; push old rbp
 14724                                  	;; move stack up ;;
 14725 0000AD83 488B5D18                	mov rbx, [rbp + 3*8]
 14726 0000AD87 4889DE                  	mov rsi, rbx						; save old size in rsi
 14727 0000AD8A 4883C303                	add rbx, 3
 14728 0000AD8E 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 14729 0000AD96 B902000000              	mov rcx, 2
 14730 0000AD9B 4883C104                	add rcx, 4				; num of iterations in rcx
 14731                                  .L_tc_recycle_frame_loop_035b:
 14732 0000AD9F 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 14733 0000ADA7 488B143C                	mov rdx, [rsp + rdi]
 14734 0000ADAB 4889541D00              	mov [rbp + rbx], rdx
 14735 0000ADB0 4883EB08                	sub rbx, 8
 14736 0000ADB4 48FFC9                  	dec rcx
 14737 0000ADB7 4883F900                	cmp rcx, 0
 14738 0000ADBB 75E2                    	jne .L_tc_recycle_frame_loop_035b
 14739 0000ADBD 4889F3                  	mov rbx, rsi
 14740 0000ADC0 4883EB02                	sub rbx, 2
 14741 0000ADC4 488D1CDD00000000        	lea rbx, [rbx*8]
 14742 0000ADCC 4801DD                  	add rbp, rbx
 14743 0000ADCF 4889EC                  	mov rsp, rbp         ; fix stack pointers
 14744 0000ADD2 5D                      	pop rbp
 14745 0000ADD3 41FFE0                  	jmp r8
 14746 0000ADD6 E92B010000              	jmp .L_if_end_01e3
 14747                                  .L_if_else_01e3:
 14748                                  	; preparing a non-tail-call
 14749 0000ADDB 488B4528                	mov rax, PARAM(1)	; param b
 14750 0000ADDF 50                      	push rax
 14751 0000ADE0 6A01                    	push 1	; arg count
 14752 0000ADE2 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 14753 0000ADEA 803805                  	cmp byte [rax], T_undefined
 14754 0000ADED 0F8432C20000            	je L_error_fvar_undefined
 14755 0000ADF3 803804                  	cmp byte [rax], T_closure
 14756 0000ADF6 0F85ADC20000            	jne L_error_non_closure
 14757 0000ADFC FF7001                  	push SOB_CLOSURE_ENV(rax)
 14758 0000ADFF FF5009                  	call SOB_CLOSURE_CODE(rax)
 14759 0000AE02 483D[02000000]          	cmp rax, sob_boolean_false
 14760 0000AE08 0F8482000000            	je .L_if_else_01e2
 14761                                  	; preparing a tail-call
 14762 0000AE0E 488B4528                	mov rax, PARAM(1)	; param b
 14763 0000AE12 50                      	push rax
 14764 0000AE13 488B4520                	mov rax, PARAM(0)	; param a
 14765 0000AE17 50                      	push rax
 14766 0000AE18 6A02                    	push 2	; arg count
 14767 0000AE1A 488B4510                	mov rax, ENV
 14768 0000AE1E 488B00                  	mov rax, qword [rax + 8 * 0]
 14769 0000AE21 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14770 0000AE25 803804                  	cmp byte [rax], T_closure
 14771 0000AE28 0F857BC20000            	jne L_error_non_closure
 14772 0000AE2E FF7001                  	push SOB_CLOSURE_ENV(rax)
 14773 0000AE31 4C8B4009                	mov r8, qword [rax + 1 + 8]
 14774 0000AE35 FF7508                  	push qword [rbp + 8]				; push old return address
 14775 0000AE38 FF7500                  	push qword [rbp]					; push old rbp
 14776                                  	;; move stack up ;;
 14777 0000AE3B 488B5D18                	mov rbx, [rbp + 3*8]
 14778 0000AE3F 4889DE                  	mov rsi, rbx						; save old size in rsi
 14779 0000AE42 4883C303                	add rbx, 3
 14780 0000AE46 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 14781 0000AE4E B902000000              	mov rcx, 2
 14782 0000AE53 4883C104                	add rcx, 4				; num of iterations in rcx
 14783                                  .L_tc_recycle_frame_loop_035c:
 14784 0000AE57 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 14785 0000AE5F 488B143C                	mov rdx, [rsp + rdi]
 14786 0000AE63 4889541D00              	mov [rbp + rbx], rdx
 14787 0000AE68 4883EB08                	sub rbx, 8
 14788 0000AE6C 48FFC9                  	dec rcx
 14789 0000AE6F 4883F900                	cmp rcx, 0
 14790 0000AE73 75E2                    	jne .L_tc_recycle_frame_loop_035c
 14791 0000AE75 4889F3                  	mov rbx, rsi
 14792 0000AE78 4883EB02                	sub rbx, 2
 14793 0000AE7C 488D1CDD00000000        	lea rbx, [rbx*8]
 14794 0000AE84 4801DD                  	add rbp, rbx
 14795 0000AE87 4889EC                  	mov rsp, rbp         ; fix stack pointers
 14796 0000AE8A 5D                      	pop rbp
 14797 0000AE8B 41FFE0                  	jmp r8
 14798 0000AE8E EB76                    	jmp .L_if_end_01e2
 14799                                  .L_if_else_01e2:
 14800                                  	; preparing a tail-call
 14801 0000AE90 6A00                    	push 0	; arg count
 14802 0000AE92 488B4510                	mov rax, ENV
 14803 0000AE96 488B4008                	mov rax, qword [rax + 8 * 1]
 14804 0000AE9A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 14805 0000AE9D 803804                  	cmp byte [rax], T_closure
 14806 0000AEA0 0F8503C20000            	jne L_error_non_closure
 14807 0000AEA6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14808 0000AEA9 4C8B4009                	mov r8, qword [rax + 1 + 8]
 14809 0000AEAD FF7508                  	push qword [rbp + 8]				; push old return address
 14810 0000AEB0 FF7500                  	push qword [rbp]					; push old rbp
 14811                                  	;; move stack up ;;
 14812 0000AEB3 488B5D18                	mov rbx, [rbp + 3*8]
 14813 0000AEB7 4889DE                  	mov rsi, rbx						; save old size in rsi
 14814 0000AEBA 4883C303                	add rbx, 3
 14815 0000AEBE 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 14816 0000AEC6 B900000000              	mov rcx, 0
 14817 0000AECB 4883C104                	add rcx, 4				; num of iterations in rcx
 14818                                  .L_tc_recycle_frame_loop_035d:
 14819 0000AECF 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 14820 0000AED7 488B143C                	mov rdx, [rsp + rdi]
 14821 0000AEDB 4889541D00              	mov [rbp + rbx], rdx
 14822 0000AEE0 4883EB08                	sub rbx, 8
 14823 0000AEE4 48FFC9                  	dec rcx
 14824 0000AEE7 4883F900                	cmp rcx, 0
 14825 0000AEEB 75E2                    	jne .L_tc_recycle_frame_loop_035d
 14826 0000AEED 4889F3                  	mov rbx, rsi
 14827 0000AEF0 4883EB00                	sub rbx, 0
 14828 0000AEF4 488D1CDD00000000        	lea rbx, [rbx*8]
 14829 0000AEFC 4801DD                  	add rbp, rbx
 14830 0000AEFF 4889EC                  	mov rsp, rbp         ; fix stack pointers
 14831 0000AF02 5D                      	pop rbp
 14832 0000AF03 41FFE0                  	jmp r8
 14833                                  .L_if_end_01e2:
 14834                                  .L_if_end_01e3:
 14835                                  .L_if_end_01e4:
 14836 0000AF06 EB76                    	jmp .L_if_end_01e5
 14837                                  .L_if_else_01e5:
 14838                                  	; preparing a tail-call
 14839 0000AF08 6A00                    	push 0	; arg count
 14840 0000AF0A 488B4510                	mov rax, ENV
 14841 0000AF0E 488B4008                	mov rax, qword [rax + 8 * 1]
 14842 0000AF12 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 14843 0000AF15 803804                  	cmp byte [rax], T_closure
 14844 0000AF18 0F858BC10000            	jne L_error_non_closure
 14845 0000AF1E FF7001                  	push SOB_CLOSURE_ENV(rax)
 14846 0000AF21 4C8B4009                	mov r8, qword [rax + 1 + 8]
 14847 0000AF25 FF7508                  	push qword [rbp + 8]				; push old return address
 14848 0000AF28 FF7500                  	push qword [rbp]					; push old rbp
 14849                                  	;; move stack up ;;
 14850 0000AF2B 488B5D18                	mov rbx, [rbp + 3*8]
 14851 0000AF2F 4889DE                  	mov rsi, rbx						; save old size in rsi
 14852 0000AF32 4883C303                	add rbx, 3
 14853 0000AF36 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 14854 0000AF3E B900000000              	mov rcx, 0
 14855 0000AF43 4883C104                	add rcx, 4				; num of iterations in rcx
 14856                                  .L_tc_recycle_frame_loop_035e:
 14857 0000AF47 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 14858 0000AF4F 488B143C                	mov rdx, [rsp + rdi]
 14859 0000AF53 4889541D00              	mov [rbp + rbx], rdx
 14860 0000AF58 4883EB08                	sub rbx, 8
 14861 0000AF5C 48FFC9                  	dec rcx
 14862 0000AF5F 4883F900                	cmp rcx, 0
 14863 0000AF63 75E2                    	jne .L_tc_recycle_frame_loop_035e
 14864 0000AF65 4889F3                  	mov rbx, rsi
 14865 0000AF68 4883EB00                	sub rbx, 0
 14866 0000AF6C 488D1CDD00000000        	lea rbx, [rbx*8]
 14867 0000AF74 4801DD                  	add rbp, rbx
 14868 0000AF77 4889EC                  	mov rsp, rbp         ; fix stack pointers
 14869 0000AF7A 5D                      	pop rbp
 14870 0000AF7B 41FFE0                  	jmp r8
 14871                                  .L_if_end_01e5:
 14872                                  .L_if_end_01e6:
 14873                                  .L_if_end_01e7:
 14874 0000AF7E C9                      	leave
 14875 0000AF7F C22000                  	ret AND_KILL_FRAME(2)
 14876                                  .L_lambda_simple_end_0278:	; new closure is in rax
 14877 0000AF82 C9                      	leave
 14878 0000AF83 C22800                  	ret AND_KILL_FRAME(3)
 14879                                  .L_lambda_simple_end_0277:	; new closure is in rax
 14880 0000AF86 50                      	push rax
 14881 0000AF87 6A01                    	push 1	; arg count
 14882 0000AF89 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14883 0000AF8E E8BFC10000              	call malloc
 14884 0000AF93 50                      	push rax
 14885 0000AF94 BF08000000              	mov rdi, 8 * 1	; new rib
 14886 0000AF99 E8B4C10000              	call malloc
 14887 0000AF9E 50                      	push rax
 14888 0000AF9F BF10000000              	mov rdi, 8 * 2	; extended env
 14889 0000AFA4 E8A9C10000              	call malloc
 14890 0000AFA9 488B7D10                	mov rdi, ENV
 14891 0000AFAD BE00000000              	mov rsi, 0
 14892 0000AFB2 BA01000000              	mov rdx, 1
 14893                                  .L_lambda_simple_env_loop_0279:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 14894 0000AFB7 4883FE01                	cmp rsi, 1
 14895 0000AFBB 7410                    	je .L_lambda_simple_env_end_0279
 14896 0000AFBD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14897 0000AFC1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14898 0000AFC5 48FFC6                  	inc rsi
 14899 0000AFC8 48FFC2                  	inc rdx
 14900 0000AFCB EBEA                    	jmp .L_lambda_simple_env_loop_0279
 14901                                  .L_lambda_simple_env_end_0279:
 14902 0000AFCD 5B                      	pop rbx
 14903 0000AFCE BE00000000              	mov rsi, 0
 14904                                  .L_lambda_simple_params_loop_0279:	; copy params
 14905 0000AFD3 4883FE01                	cmp rsi, 1
 14906 0000AFD7 740E                    	je .L_lambda_simple_params_end_0279
 14907 0000AFD9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14908 0000AFDE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14909 0000AFE2 48FFC6                  	inc rsi
 14910 0000AFE5 EBEC                    	jmp .L_lambda_simple_params_loop_0279
 14911                                  .L_lambda_simple_params_end_0279:
 14912 0000AFE7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 14913 0000AFEA 4889C3                  	mov rbx, rax
 14914 0000AFED 58                      	pop rax
 14915 0000AFEE C60004                  	mov byte [rax], T_closure
 14916 0000AFF1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14917 0000AFF5 48C74009[02B00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0279
 14918 0000AFFD E9D9100000              	jmp .L_lambda_simple_end_0279
 14919                                  .L_lambda_simple_code_0279:	; lambda-simple body
 14920 0000B002 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14921 0000B008 740B                    	je .L_lambda_simple_arity_check_ok_0279
 14922 0000B00A FF742410                	push qword [rsp + 8 * 2]
 14923 0000B00E 6A01                    	push 1
 14924 0000B010 E9F6C00000              	jmp L_error_incorrect_arity_simple
 14925                                  .L_lambda_simple_arity_check_ok_0279:
 14926 0000B015 C8000000                	enter 0, 0
 14927                                  	; preparing a tail-call
 14928                                  	; preparing a non-tail-call
 14929 0000B019 488B0425[2B0F0000]      	mov rax, qword [free_var_20]	; free var __bin-less-than-rr
 14930 0000B021 803805                  	cmp byte [rax], T_undefined
 14931 0000B024 0F84FBBF0000            	je L_error_fvar_undefined
 14932 0000B02A 50                      	push rax
 14933 0000B02B 488B0425[1A0F0000]      	mov rax, qword [free_var_19]	; free var __bin-less-than-qq
 14934 0000B033 803805                  	cmp byte [rax], T_undefined
 14935 0000B036 0F84E9BF0000            	je L_error_fvar_undefined
 14936 0000B03C 50                      	push rax
 14937 0000B03D 488B0425[3C0F0000]      	mov rax, qword [free_var_21]	; free var __bin-less-than-zz
 14938 0000B045 803805                  	cmp byte [rax], T_undefined
 14939 0000B048 0F84D7BF0000            	je L_error_fvar_undefined
 14940 0000B04E 50                      	push rax
 14941 0000B04F 6A03                    	push 3	; arg count
 14942 0000B051 488B4520                	mov rax, PARAM(0)	; param make-bin-comparator
 14943 0000B055 803804                  	cmp byte [rax], T_closure
 14944 0000B058 0F854BC00000            	jne L_error_non_closure
 14945 0000B05E FF7001                  	push SOB_CLOSURE_ENV(rax)
 14946 0000B061 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14947 0000B064 50                      	push rax
 14948 0000B065 6A01                    	push 1	; arg count
 14949 0000B067 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14950 0000B06C E8E1C00000              	call malloc
 14951 0000B071 50                      	push rax
 14952 0000B072 BF08000000              	mov rdi, 8 * 1	; new rib
 14953 0000B077 E8D6C00000              	call malloc
 14954 0000B07C 50                      	push rax
 14955 0000B07D BF18000000              	mov rdi, 8 * 3	; extended env
 14956 0000B082 E8CBC00000              	call malloc
 14957 0000B087 488B7D10                	mov rdi, ENV
 14958 0000B08B BE00000000              	mov rsi, 0
 14959 0000B090 BA01000000              	mov rdx, 1
 14960                                  .L_lambda_simple_env_loop_027a:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 14961 0000B095 4883FE02                	cmp rsi, 2
 14962 0000B099 7410                    	je .L_lambda_simple_env_end_027a
 14963 0000B09B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14964 0000B09F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14965 0000B0A3 48FFC6                  	inc rsi
 14966 0000B0A6 48FFC2                  	inc rdx
 14967 0000B0A9 EBEA                    	jmp .L_lambda_simple_env_loop_027a
 14968                                  .L_lambda_simple_env_end_027a:
 14969 0000B0AB 5B                      	pop rbx
 14970 0000B0AC BE00000000              	mov rsi, 0
 14971                                  .L_lambda_simple_params_loop_027a:	; copy params
 14972 0000B0B1 4883FE01                	cmp rsi, 1
 14973 0000B0B5 740E                    	je .L_lambda_simple_params_end_027a
 14974 0000B0B7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14975 0000B0BC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14976 0000B0C0 48FFC6                  	inc rsi
 14977 0000B0C3 EBEC                    	jmp .L_lambda_simple_params_loop_027a
 14978                                  .L_lambda_simple_params_end_027a:
 14979 0000B0C5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 14980 0000B0C8 4889C3                  	mov rbx, rax
 14981 0000B0CB 58                      	pop rax
 14982 0000B0CC C60004                  	mov byte [rax], T_closure
 14983 0000B0CF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14984 0000B0D3 48C74009[E0B00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_027a
 14985 0000B0DB E98E0F0000              	jmp .L_lambda_simple_end_027a
 14986                                  .L_lambda_simple_code_027a:	; lambda-simple body
 14987 0000B0E0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14988 0000B0E6 740B                    	je .L_lambda_simple_arity_check_ok_027a
 14989 0000B0E8 FF742410                	push qword [rsp + 8 * 2]
 14990 0000B0EC 6A01                    	push 1
 14991 0000B0EE E918C00000              	jmp L_error_incorrect_arity_simple
 14992                                  .L_lambda_simple_arity_check_ok_027a:
 14993 0000B0F3 C8000000                	enter 0, 0
 14994                                  	; preparing a tail-call
 14995                                  	; preparing a non-tail-call
 14996 0000B0F7 488B0425[F80E0000]      	mov rax, qword [free_var_17]	; free var __bin-equal-rr
 14997 0000B0FF 803805                  	cmp byte [rax], T_undefined
 14998 0000B102 0F841DBF0000            	je L_error_fvar_undefined
 14999 0000B108 50                      	push rax
 15000 0000B109 488B0425[E70E0000]      	mov rax, qword [free_var_16]	; free var __bin-equal-qq
 15001 0000B111 803805                  	cmp byte [rax], T_undefined
 15002 0000B114 0F840BBF0000            	je L_error_fvar_undefined
 15003 0000B11A 50                      	push rax
 15004 0000B11B 488B0425[090F0000]      	mov rax, qword [free_var_18]	; free var __bin-equal-zz
 15005 0000B123 803805                  	cmp byte [rax], T_undefined
 15006 0000B126 0F84F9BE0000            	je L_error_fvar_undefined
 15007 0000B12C 50                      	push rax
 15008 0000B12D 6A03                    	push 3	; arg count
 15009 0000B12F 488B4510                	mov rax, ENV
 15010 0000B133 488B00                  	mov rax, qword [rax + 8 * 0]
 15011 0000B136 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var make-bin-comparator
 15012 0000B139 803804                  	cmp byte [rax], T_closure
 15013 0000B13C 0F8567BF0000            	jne L_error_non_closure
 15014 0000B142 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15015 0000B145 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15016 0000B148 50                      	push rax
 15017 0000B149 6A01                    	push 1	; arg count
 15018 0000B14B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15019 0000B150 E8FDBF0000              	call malloc
 15020 0000B155 50                      	push rax
 15021 0000B156 BF08000000              	mov rdi, 8 * 1	; new rib
 15022 0000B15B E8F2BF0000              	call malloc
 15023 0000B160 50                      	push rax
 15024 0000B161 BF20000000              	mov rdi, 8 * 4	; extended env
 15025 0000B166 E8E7BF0000              	call malloc
 15026 0000B16B 488B7D10                	mov rdi, ENV
 15027 0000B16F BE00000000              	mov rsi, 0
 15028 0000B174 BA01000000              	mov rdx, 1
 15029                                  .L_lambda_simple_env_loop_027b:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 15030 0000B179 4883FE03                	cmp rsi, 3
 15031 0000B17D 7410                    	je .L_lambda_simple_env_end_027b
 15032 0000B17F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15033 0000B183 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15034 0000B187 48FFC6                  	inc rsi
 15035 0000B18A 48FFC2                  	inc rdx
 15036 0000B18D EBEA                    	jmp .L_lambda_simple_env_loop_027b
 15037                                  .L_lambda_simple_env_end_027b:
 15038 0000B18F 5B                      	pop rbx
 15039 0000B190 BE00000000              	mov rsi, 0
 15040                                  .L_lambda_simple_params_loop_027b:	; copy params
 15041 0000B195 4883FE01                	cmp rsi, 1
 15042 0000B199 740E                    	je .L_lambda_simple_params_end_027b
 15043 0000B19B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15044 0000B1A0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15045 0000B1A4 48FFC6                  	inc rsi
 15046 0000B1A7 EBEC                    	jmp .L_lambda_simple_params_loop_027b
 15047                                  .L_lambda_simple_params_end_027b:
 15048 0000B1A9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 15049 0000B1AC 4889C3                  	mov rbx, rax
 15050 0000B1AF 58                      	pop rax
 15051 0000B1B0 C60004                  	mov byte [rax], T_closure
 15052 0000B1B3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15053 0000B1B7 48C74009[C4B10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_027b
 15054 0000B1BF E93D0E0000              	jmp .L_lambda_simple_end_027b
 15055                                  .L_lambda_simple_code_027b:	; lambda-simple body
 15056 0000B1C4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15057 0000B1CA 740B                    	je .L_lambda_simple_arity_check_ok_027b
 15058 0000B1CC FF742410                	push qword [rsp + 8 * 2]
 15059 0000B1D0 6A01                    	push 1
 15060 0000B1D2 E934BF0000              	jmp L_error_incorrect_arity_simple
 15061                                  .L_lambda_simple_arity_check_ok_027b:
 15062 0000B1D7 C8000000                	enter 0, 0
 15063                                  	; preparing a tail-call
 15064 0000B1DB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15065 0000B1E0 E86DBF0000              	call malloc
 15066 0000B1E5 50                      	push rax
 15067 0000B1E6 BF08000000              	mov rdi, 8 * 1	; new rib
 15068 0000B1EB E862BF0000              	call malloc
 15069 0000B1F0 50                      	push rax
 15070 0000B1F1 BF28000000              	mov rdi, 8 * 5	; extended env
 15071 0000B1F6 E857BF0000              	call malloc
 15072 0000B1FB 488B7D10                	mov rdi, ENV
 15073 0000B1FF BE00000000              	mov rsi, 0
 15074 0000B204 BA01000000              	mov rdx, 1
 15075                                  .L_lambda_simple_env_loop_027c:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 15076 0000B209 4883FE04                	cmp rsi, 4
 15077 0000B20D 7410                    	je .L_lambda_simple_env_end_027c
 15078 0000B20F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15079 0000B213 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15080 0000B217 48FFC6                  	inc rsi
 15081 0000B21A 48FFC2                  	inc rdx
 15082 0000B21D EBEA                    	jmp .L_lambda_simple_env_loop_027c
 15083                                  .L_lambda_simple_env_end_027c:
 15084 0000B21F 5B                      	pop rbx
 15085 0000B220 BE00000000              	mov rsi, 0
 15086                                  .L_lambda_simple_params_loop_027c:	; copy params
 15087 0000B225 4883FE01                	cmp rsi, 1
 15088 0000B229 740E                    	je .L_lambda_simple_params_end_027c
 15089 0000B22B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15090 0000B230 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15091 0000B234 48FFC6                  	inc rsi
 15092 0000B237 EBEC                    	jmp .L_lambda_simple_params_loop_027c
 15093                                  .L_lambda_simple_params_end_027c:
 15094 0000B239 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 15095 0000B23C 4889C3                  	mov rbx, rax
 15096 0000B23F 58                      	pop rax
 15097 0000B240 C60004                  	mov byte [rax], T_closure
 15098 0000B243 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15099 0000B247 48C74009[54B20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_027c
 15100 0000B24F E9BE000000              	jmp .L_lambda_simple_end_027c
 15101                                  .L_lambda_simple_code_027c:	; lambda-simple body
 15102 0000B254 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15103 0000B25A 740B                    	je .L_lambda_simple_arity_check_ok_027c
 15104 0000B25C FF742410                	push qword [rsp + 8 * 2]
 15105 0000B260 6A02                    	push 2
 15106 0000B262 E9A4BE0000              	jmp L_error_incorrect_arity_simple
 15107                                  .L_lambda_simple_arity_check_ok_027c:
 15108 0000B267 C8000000                	enter 0, 0
 15109                                  	; preparing a tail-call
 15110                                  	; preparing a non-tail-call
 15111 0000B26B 488B4528                	mov rax, PARAM(1)	; param b
 15112 0000B26F 50                      	push rax
 15113 0000B270 488B4520                	mov rax, PARAM(0)	; param a
 15114 0000B274 50                      	push rax
 15115 0000B275 6A02                    	push 2	; arg count
 15116 0000B277 488B4510                	mov rax, ENV
 15117 0000B27B 488B4008                	mov rax, qword [rax + 8 * 1]
 15118 0000B27F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 15119 0000B282 803804                  	cmp byte [rax], T_closure
 15120 0000B285 0F851EBE0000            	jne L_error_non_closure
 15121 0000B28B FF7001                  	push SOB_CLOSURE_ENV(rax)
 15122 0000B28E FF5009                  	call SOB_CLOSURE_CODE(rax)
 15123 0000B291 50                      	push rax
 15124 0000B292 6A01                    	push 1	; arg count
 15125 0000B294 488B0425[E1140000]      	mov rax, qword [free_var_106]	; free var not
 15126 0000B29C 803805                  	cmp byte [rax], T_undefined
 15127 0000B29F 0F8480BD0000            	je L_error_fvar_undefined
 15128 0000B2A5 803804                  	cmp byte [rax], T_closure
 15129 0000B2A8 0F85FBBD0000            	jne L_error_non_closure
 15130 0000B2AE FF7001                  	push SOB_CLOSURE_ENV(rax)
 15131 0000B2B1 4C8B4009                	mov r8, qword [rax + 1 + 8]
 15132 0000B2B5 FF7508                  	push qword [rbp + 8]				; push old return address
 15133 0000B2B8 FF7500                  	push qword [rbp]					; push old rbp
 15134                                  	;; move stack up ;;
 15135 0000B2BB 488B5D18                	mov rbx, [rbp + 3*8]
 15136 0000B2BF 4889DE                  	mov rsi, rbx						; save old size in rsi
 15137 0000B2C2 4883C303                	add rbx, 3
 15138 0000B2C6 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 15139 0000B2CE B901000000              	mov rcx, 1
 15140 0000B2D3 4883C104                	add rcx, 4				; num of iterations in rcx
 15141                                  .L_tc_recycle_frame_loop_0362:
 15142 0000B2D7 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 15143 0000B2DF 488B143C                	mov rdx, [rsp + rdi]
 15144 0000B2E3 4889541D00              	mov [rbp + rbx], rdx
 15145 0000B2E8 4883EB08                	sub rbx, 8
 15146 0000B2EC 48FFC9                  	dec rcx
 15147 0000B2EF 4883F900                	cmp rcx, 0
 15148 0000B2F3 75E2                    	jne .L_tc_recycle_frame_loop_0362
 15149 0000B2F5 4889F3                  	mov rbx, rsi
 15150 0000B2F8 4883EB01                	sub rbx, 1
 15151 0000B2FC 488D1CDD00000000        	lea rbx, [rbx*8]
 15152 0000B304 4801DD                  	add rbp, rbx
 15153 0000B307 4889EC                  	mov rsp, rbp         ; fix stack pointers
 15154 0000B30A 5D                      	pop rbp
 15155 0000B30B 41FFE0                  	jmp r8
 15156 0000B30E C9                      	leave
 15157 0000B30F C22000                  	ret AND_KILL_FRAME(2)
 15158                                  .L_lambda_simple_end_027c:	; new closure is in rax
 15159 0000B312 50                      	push rax
 15160 0000B313 6A01                    	push 1	; arg count
 15161 0000B315 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15162 0000B31A E833BE0000              	call malloc
 15163 0000B31F 50                      	push rax
 15164 0000B320 BF08000000              	mov rdi, 8 * 1	; new rib
 15165 0000B325 E828BE0000              	call malloc
 15166 0000B32A 50                      	push rax
 15167 0000B32B BF28000000              	mov rdi, 8 * 5	; extended env
 15168 0000B330 E81DBE0000              	call malloc
 15169 0000B335 488B7D10                	mov rdi, ENV
 15170 0000B339 BE00000000              	mov rsi, 0
 15171 0000B33E BA01000000              	mov rdx, 1
 15172                                  .L_lambda_simple_env_loop_027d:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 15173 0000B343 4883FE04                	cmp rsi, 4
 15174 0000B347 7410                    	je .L_lambda_simple_env_end_027d
 15175 0000B349 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15176 0000B34D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15177 0000B351 48FFC6                  	inc rsi
 15178 0000B354 48FFC2                  	inc rdx
 15179 0000B357 EBEA                    	jmp .L_lambda_simple_env_loop_027d
 15180                                  .L_lambda_simple_env_end_027d:
 15181 0000B359 5B                      	pop rbx
 15182 0000B35A BE00000000              	mov rsi, 0
 15183                                  .L_lambda_simple_params_loop_027d:	; copy params
 15184 0000B35F 4883FE01                	cmp rsi, 1
 15185 0000B363 740E                    	je .L_lambda_simple_params_end_027d
 15186 0000B365 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15187 0000B36A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15188 0000B36E 48FFC6                  	inc rsi
 15189 0000B371 EBEC                    	jmp .L_lambda_simple_params_loop_027d
 15190                                  .L_lambda_simple_params_end_027d:
 15191 0000B373 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 15192 0000B376 4889C3                  	mov rbx, rax
 15193 0000B379 58                      	pop rax
 15194 0000B37A C60004                  	mov byte [rax], T_closure
 15195 0000B37D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15196 0000B381 48C74009[8EB30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_027d
 15197 0000B389 E9060C0000              	jmp .L_lambda_simple_end_027d
 15198                                  .L_lambda_simple_code_027d:	; lambda-simple body
 15199 0000B38E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15200 0000B394 740B                    	je .L_lambda_simple_arity_check_ok_027d
 15201 0000B396 FF742410                	push qword [rsp + 8 * 2]
 15202 0000B39A 6A01                    	push 1
 15203 0000B39C E96ABD0000              	jmp L_error_incorrect_arity_simple
 15204                                  .L_lambda_simple_arity_check_ok_027d:
 15205 0000B3A1 C8000000                	enter 0, 0
 15206                                  	; preparing a tail-call
 15207 0000B3A5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15208 0000B3AA E8A3BD0000              	call malloc
 15209 0000B3AF 50                      	push rax
 15210 0000B3B0 BF08000000              	mov rdi, 8 * 1	; new rib
 15211 0000B3B5 E898BD0000              	call malloc
 15212 0000B3BA 50                      	push rax
 15213 0000B3BB BF30000000              	mov rdi, 8 * 6	; extended env
 15214 0000B3C0 E88DBD0000              	call malloc
 15215 0000B3C5 488B7D10                	mov rdi, ENV
 15216 0000B3C9 BE00000000              	mov rsi, 0
 15217 0000B3CE BA01000000              	mov rdx, 1
 15218                                  .L_lambda_simple_env_loop_027e:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 15219 0000B3D3 4883FE05                	cmp rsi, 5
 15220 0000B3D7 7410                    	je .L_lambda_simple_env_end_027e
 15221 0000B3D9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15222 0000B3DD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15223 0000B3E1 48FFC6                  	inc rsi
 15224 0000B3E4 48FFC2                  	inc rdx
 15225 0000B3E7 EBEA                    	jmp .L_lambda_simple_env_loop_027e
 15226                                  .L_lambda_simple_env_end_027e:
 15227 0000B3E9 5B                      	pop rbx
 15228 0000B3EA BE00000000              	mov rsi, 0
 15229                                  .L_lambda_simple_params_loop_027e:	; copy params
 15230 0000B3EF 4883FE01                	cmp rsi, 1
 15231 0000B3F3 740E                    	je .L_lambda_simple_params_end_027e
 15232 0000B3F5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15233 0000B3FA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15234 0000B3FE 48FFC6                  	inc rsi
 15235 0000B401 EBEC                    	jmp .L_lambda_simple_params_loop_027e
 15236                                  .L_lambda_simple_params_end_027e:
 15237 0000B403 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 15238 0000B406 4889C3                  	mov rbx, rax
 15239 0000B409 58                      	pop rax
 15240 0000B40A C60004                  	mov byte [rax], T_closure
 15241 0000B40D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15242 0000B411 48C74009[1EB40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_027e
 15243 0000B419 E99B000000              	jmp .L_lambda_simple_end_027e
 15244                                  .L_lambda_simple_code_027e:	; lambda-simple body
 15245 0000B41E 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15246 0000B424 740B                    	je .L_lambda_simple_arity_check_ok_027e
 15247 0000B426 FF742410                	push qword [rsp + 8 * 2]
 15248 0000B42A 6A02                    	push 2
 15249 0000B42C E9DABC0000              	jmp L_error_incorrect_arity_simple
 15250                                  .L_lambda_simple_arity_check_ok_027e:
 15251 0000B431 C8000000                	enter 0, 0
 15252                                  	; preparing a tail-call
 15253 0000B435 488B4520                	mov rax, PARAM(0)	; param a
 15254 0000B439 50                      	push rax
 15255 0000B43A 488B4528                	mov rax, PARAM(1)	; param b
 15256 0000B43E 50                      	push rax
 15257 0000B43F 6A02                    	push 2	; arg count
 15258 0000B441 488B4510                	mov rax, ENV
 15259 0000B445 488B4010                	mov rax, qword [rax + 8 * 2]
 15260 0000B449 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 15261 0000B44C 803804                  	cmp byte [rax], T_closure
 15262 0000B44F 0F8554BC0000            	jne L_error_non_closure
 15263 0000B455 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15264 0000B458 4C8B4009                	mov r8, qword [rax + 1 + 8]
 15265 0000B45C FF7508                  	push qword [rbp + 8]				; push old return address
 15266 0000B45F FF7500                  	push qword [rbp]					; push old rbp
 15267                                  	;; move stack up ;;
 15268 0000B462 488B5D18                	mov rbx, [rbp + 3*8]
 15269 0000B466 4889DE                  	mov rsi, rbx						; save old size in rsi
 15270 0000B469 4883C303                	add rbx, 3
 15271 0000B46D 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 15272 0000B475 B902000000              	mov rcx, 2
 15273 0000B47A 4883C104                	add rcx, 4				; num of iterations in rcx
 15274                                  .L_tc_recycle_frame_loop_0364:
 15275 0000B47E 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 15276 0000B486 488B143C                	mov rdx, [rsp + rdi]
 15277 0000B48A 4889541D00              	mov [rbp + rbx], rdx
 15278 0000B48F 4883EB08                	sub rbx, 8
 15279 0000B493 48FFC9                  	dec rcx
 15280 0000B496 4883F900                	cmp rcx, 0
 15281 0000B49A 75E2                    	jne .L_tc_recycle_frame_loop_0364
 15282 0000B49C 4889F3                  	mov rbx, rsi
 15283 0000B49F 4883EB02                	sub rbx, 2
 15284 0000B4A3 488D1CDD00000000        	lea rbx, [rbx*8]
 15285 0000B4AB 4801DD                  	add rbp, rbx
 15286 0000B4AE 4889EC                  	mov rsp, rbp         ; fix stack pointers
 15287 0000B4B1 5D                      	pop rbp
 15288 0000B4B2 41FFE0                  	jmp r8
 15289 0000B4B5 C9                      	leave
 15290 0000B4B6 C22000                  	ret AND_KILL_FRAME(2)
 15291                                  .L_lambda_simple_end_027e:	; new closure is in rax
 15292 0000B4B9 50                      	push rax
 15293 0000B4BA 6A01                    	push 1	; arg count
 15294 0000B4BC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15295 0000B4C1 E88CBC0000              	call malloc
 15296 0000B4C6 50                      	push rax
 15297 0000B4C7 BF08000000              	mov rdi, 8 * 1	; new rib
 15298 0000B4CC E881BC0000              	call malloc
 15299 0000B4D1 50                      	push rax
 15300 0000B4D2 BF30000000              	mov rdi, 8 * 6	; extended env
 15301 0000B4D7 E876BC0000              	call malloc
 15302 0000B4DC 488B7D10                	mov rdi, ENV
 15303 0000B4E0 BE00000000              	mov rsi, 0
 15304 0000B4E5 BA01000000              	mov rdx, 1
 15305                                  .L_lambda_simple_env_loop_027f:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 15306 0000B4EA 4883FE05                	cmp rsi, 5
 15307 0000B4EE 7410                    	je .L_lambda_simple_env_end_027f
 15308 0000B4F0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15309 0000B4F4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15310 0000B4F8 48FFC6                  	inc rsi
 15311 0000B4FB 48FFC2                  	inc rdx
 15312 0000B4FE EBEA                    	jmp .L_lambda_simple_env_loop_027f
 15313                                  .L_lambda_simple_env_end_027f:
 15314 0000B500 5B                      	pop rbx
 15315 0000B501 BE00000000              	mov rsi, 0
 15316                                  .L_lambda_simple_params_loop_027f:	; copy params
 15317 0000B506 4883FE01                	cmp rsi, 1
 15318 0000B50A 740E                    	je .L_lambda_simple_params_end_027f
 15319 0000B50C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15320 0000B511 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15321 0000B515 48FFC6                  	inc rsi
 15322 0000B518 EBEC                    	jmp .L_lambda_simple_params_loop_027f
 15323                                  .L_lambda_simple_params_end_027f:
 15324 0000B51A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 15325 0000B51D 4889C3                  	mov rbx, rax
 15326 0000B520 58                      	pop rax
 15327 0000B521 C60004                  	mov byte [rax], T_closure
 15328 0000B524 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15329 0000B528 48C74009[35B50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_027f
 15330 0000B530 E9F2090000              	jmp .L_lambda_simple_end_027f
 15331                                  .L_lambda_simple_code_027f:	; lambda-simple body
 15332 0000B535 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15333 0000B53B 740B                    	je .L_lambda_simple_arity_check_ok_027f
 15334 0000B53D FF742410                	push qword [rsp + 8 * 2]
 15335 0000B541 6A01                    	push 1
 15336 0000B543 E9C3BB0000              	jmp L_error_incorrect_arity_simple
 15337                                  .L_lambda_simple_arity_check_ok_027f:
 15338 0000B548 C8000000                	enter 0, 0
 15339                                  	; preparing a tail-call
 15340 0000B54C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15341 0000B551 E8FCBB0000              	call malloc
 15342 0000B556 50                      	push rax
 15343 0000B557 BF08000000              	mov rdi, 8 * 1	; new rib
 15344 0000B55C E8F1BB0000              	call malloc
 15345 0000B561 50                      	push rax
 15346 0000B562 BF38000000              	mov rdi, 8 * 7	; extended env
 15347 0000B567 E8E6BB0000              	call malloc
 15348 0000B56C 488B7D10                	mov rdi, ENV
 15349 0000B570 BE00000000              	mov rsi, 0
 15350 0000B575 BA01000000              	mov rdx, 1
 15351                                  .L_lambda_simple_env_loop_0280:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 15352 0000B57A 4883FE06                	cmp rsi, 6
 15353 0000B57E 7410                    	je .L_lambda_simple_env_end_0280
 15354 0000B580 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15355 0000B584 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15356 0000B588 48FFC6                  	inc rsi
 15357 0000B58B 48FFC2                  	inc rdx
 15358 0000B58E EBEA                    	jmp .L_lambda_simple_env_loop_0280
 15359                                  .L_lambda_simple_env_end_0280:
 15360 0000B590 5B                      	pop rbx
 15361 0000B591 BE00000000              	mov rsi, 0
 15362                                  .L_lambda_simple_params_loop_0280:	; copy params
 15363 0000B596 4883FE01                	cmp rsi, 1
 15364 0000B59A 740E                    	je .L_lambda_simple_params_end_0280
 15365 0000B59C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15366 0000B5A1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15367 0000B5A5 48FFC6                  	inc rsi
 15368 0000B5A8 EBEC                    	jmp .L_lambda_simple_params_loop_0280
 15369                                  .L_lambda_simple_params_end_0280:
 15370 0000B5AA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 15371 0000B5AD 4889C3                  	mov rbx, rax
 15372 0000B5B0 58                      	pop rax
 15373 0000B5B1 C60004                  	mov byte [rax], T_closure
 15374 0000B5B4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15375 0000B5B8 48C74009[C5B50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0280
 15376 0000B5C0 E9BD000000              	jmp .L_lambda_simple_end_0280
 15377                                  .L_lambda_simple_code_0280:	; lambda-simple body
 15378 0000B5C5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15379 0000B5CB 740B                    	je .L_lambda_simple_arity_check_ok_0280
 15380 0000B5CD FF742410                	push qword [rsp + 8 * 2]
 15381 0000B5D1 6A02                    	push 2
 15382 0000B5D3 E933BB0000              	jmp L_error_incorrect_arity_simple
 15383                                  .L_lambda_simple_arity_check_ok_0280:
 15384 0000B5D8 C8000000                	enter 0, 0
 15385                                  	; preparing a tail-call
 15386                                  	; preparing a non-tail-call
 15387 0000B5DC 488B4528                	mov rax, PARAM(1)	; param b
 15388 0000B5E0 50                      	push rax
 15389 0000B5E1 488B4520                	mov rax, PARAM(0)	; param a
 15390 0000B5E5 50                      	push rax
 15391 0000B5E6 6A02                    	push 2	; arg count
 15392 0000B5E8 488B4510                	mov rax, ENV
 15393 0000B5EC 488B00                  	mov rax, qword [rax + 8 * 0]
 15394 0000B5EF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 15395 0000B5F2 803804                  	cmp byte [rax], T_closure
 15396 0000B5F5 0F85AEBA0000            	jne L_error_non_closure
 15397 0000B5FB FF7001                  	push SOB_CLOSURE_ENV(rax)
 15398 0000B5FE FF5009                  	call SOB_CLOSURE_CODE(rax)
 15399 0000B601 50                      	push rax
 15400 0000B602 6A01                    	push 1	; arg count
 15401 0000B604 488B0425[E1140000]      	mov rax, qword [free_var_106]	; free var not
 15402 0000B60C 803805                  	cmp byte [rax], T_undefined
 15403 0000B60F 0F8410BA0000            	je L_error_fvar_undefined
 15404 0000B615 803804                  	cmp byte [rax], T_closure
 15405 0000B618 0F858BBA0000            	jne L_error_non_closure
 15406 0000B61E FF7001                  	push SOB_CLOSURE_ENV(rax)
 15407 0000B621 4C8B4009                	mov r8, qword [rax + 1 + 8]
 15408 0000B625 FF7508                  	push qword [rbp + 8]				; push old return address
 15409 0000B628 FF7500                  	push qword [rbp]					; push old rbp
 15410                                  	;; move stack up ;;
 15411 0000B62B 488B5D18                	mov rbx, [rbp + 3*8]
 15412 0000B62F 4889DE                  	mov rsi, rbx						; save old size in rsi
 15413 0000B632 4883C303                	add rbx, 3
 15414 0000B636 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 15415 0000B63E B901000000              	mov rcx, 1
 15416 0000B643 4883C104                	add rcx, 4				; num of iterations in rcx
 15417                                  .L_tc_recycle_frame_loop_0366:
 15418 0000B647 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 15419 0000B64F 488B143C                	mov rdx, [rsp + rdi]
 15420 0000B653 4889541D00              	mov [rbp + rbx], rdx
 15421 0000B658 4883EB08                	sub rbx, 8
 15422 0000B65C 48FFC9                  	dec rcx
 15423 0000B65F 4883F900                	cmp rcx, 0
 15424 0000B663 75E2                    	jne .L_tc_recycle_frame_loop_0366
 15425 0000B665 4889F3                  	mov rbx, rsi
 15426 0000B668 4883EB01                	sub rbx, 1
 15427 0000B66C 488D1CDD00000000        	lea rbx, [rbx*8]
 15428 0000B674 4801DD                  	add rbp, rbx
 15429 0000B677 4889EC                  	mov rsp, rbp         ; fix stack pointers
 15430 0000B67A 5D                      	pop rbp
 15431 0000B67B 41FFE0                  	jmp r8
 15432 0000B67E C9                      	leave
 15433 0000B67F C22000                  	ret AND_KILL_FRAME(2)
 15434                                  .L_lambda_simple_end_0280:	; new closure is in rax
 15435 0000B682 50                      	push rax
 15436 0000B683 6A01                    	push 1	; arg count
 15437 0000B685 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15438 0000B68A E8C3BA0000              	call malloc
 15439 0000B68F 50                      	push rax
 15440 0000B690 BF08000000              	mov rdi, 8 * 1	; new rib
 15441 0000B695 E8B8BA0000              	call malloc
 15442 0000B69A 50                      	push rax
 15443 0000B69B BF38000000              	mov rdi, 8 * 7	; extended env
 15444 0000B6A0 E8ADBA0000              	call malloc
 15445 0000B6A5 488B7D10                	mov rdi, ENV
 15446 0000B6A9 BE00000000              	mov rsi, 0
 15447 0000B6AE BA01000000              	mov rdx, 1
 15448                                  .L_lambda_simple_env_loop_0281:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 15449 0000B6B3 4883FE06                	cmp rsi, 6
 15450 0000B6B7 7410                    	je .L_lambda_simple_env_end_0281
 15451 0000B6B9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15452 0000B6BD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15453 0000B6C1 48FFC6                  	inc rsi
 15454 0000B6C4 48FFC2                  	inc rdx
 15455 0000B6C7 EBEA                    	jmp .L_lambda_simple_env_loop_0281
 15456                                  .L_lambda_simple_env_end_0281:
 15457 0000B6C9 5B                      	pop rbx
 15458 0000B6CA BE00000000              	mov rsi, 0
 15459                                  .L_lambda_simple_params_loop_0281:	; copy params
 15460 0000B6CF 4883FE01                	cmp rsi, 1
 15461 0000B6D3 740E                    	je .L_lambda_simple_params_end_0281
 15462 0000B6D5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15463 0000B6DA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15464 0000B6DE 48FFC6                  	inc rsi
 15465 0000B6E1 EBEC                    	jmp .L_lambda_simple_params_loop_0281
 15466                                  .L_lambda_simple_params_end_0281:
 15467 0000B6E3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 15468 0000B6E6 4889C3                  	mov rbx, rax
 15469 0000B6E9 58                      	pop rax
 15470 0000B6EA C60004                  	mov byte [rax], T_closure
 15471 0000B6ED 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15472 0000B6F1 48C74009[FEB60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0281
 15473 0000B6F9 E9BC070000              	jmp .L_lambda_simple_end_0281
 15474                                  .L_lambda_simple_code_0281:	; lambda-simple body
 15475 0000B6FE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15476 0000B704 740B                    	je .L_lambda_simple_arity_check_ok_0281
 15477 0000B706 FF742410                	push qword [rsp + 8 * 2]
 15478 0000B70A 6A01                    	push 1
 15479 0000B70C E9FAB90000              	jmp L_error_incorrect_arity_simple
 15480                                  .L_lambda_simple_arity_check_ok_0281:
 15481 0000B711 C8000000                	enter 0, 0
 15482                                  	; preparing a tail-call
 15483 0000B715 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15484 0000B71A E833BA0000              	call malloc
 15485 0000B71F 50                      	push rax
 15486 0000B720 BF08000000              	mov rdi, 8 * 1	; new rib
 15487 0000B725 E828BA0000              	call malloc
 15488 0000B72A 50                      	push rax
 15489 0000B72B BF40000000              	mov rdi, 8 * 8	; extended env
 15490 0000B730 E81DBA0000              	call malloc
 15491 0000B735 488B7D10                	mov rdi, ENV
 15492 0000B739 BE00000000              	mov rsi, 0
 15493 0000B73E BA01000000              	mov rdx, 1
 15494                                  .L_lambda_simple_env_loop_0282:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 15495 0000B743 4883FE07                	cmp rsi, 7
 15496 0000B747 7410                    	je .L_lambda_simple_env_end_0282
 15497 0000B749 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15498 0000B74D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15499 0000B751 48FFC6                  	inc rsi
 15500 0000B754 48FFC2                  	inc rdx
 15501 0000B757 EBEA                    	jmp .L_lambda_simple_env_loop_0282
 15502                                  .L_lambda_simple_env_end_0282:
 15503 0000B759 5B                      	pop rbx
 15504 0000B75A BE00000000              	mov rsi, 0
 15505                                  .L_lambda_simple_params_loop_0282:	; copy params
 15506 0000B75F 4883FE01                	cmp rsi, 1
 15507 0000B763 740E                    	je .L_lambda_simple_params_end_0282
 15508 0000B765 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15509 0000B76A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15510 0000B76E 48FFC6                  	inc rsi
 15511 0000B771 EBEC                    	jmp .L_lambda_simple_params_loop_0282
 15512                                  .L_lambda_simple_params_end_0282:
 15513 0000B773 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 15514 0000B776 4889C3                  	mov rbx, rax
 15515 0000B779 58                      	pop rax
 15516 0000B77A C60004                  	mov byte [rax], T_closure
 15517 0000B77D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15518 0000B781 48C74009[8EB70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0282
 15519 0000B789 E92A050000              	jmp .L_lambda_simple_end_0282
 15520                                  .L_lambda_simple_code_0282:	; lambda-simple body
 15521 0000B78E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15522 0000B794 740B                    	je .L_lambda_simple_arity_check_ok_0282
 15523 0000B796 FF742410                	push qword [rsp + 8 * 2]
 15524 0000B79A 6A01                    	push 1
 15525 0000B79C E96AB90000              	jmp L_error_incorrect_arity_simple
 15526                                  .L_lambda_simple_arity_check_ok_0282:
 15527 0000B7A1 C8000000                	enter 0, 0
 15528                                  	; preparing a tail-call
 15529 0000B7A5 48B8-                   	mov rax, L_constants + 1993
 15529 0000B7A7 [C907000000000000] 
 15530 0000B7AF 50                      	push rax
 15531 0000B7B0 6A01                    	push 1	; arg count
 15532 0000B7B2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15533 0000B7B7 E896B90000              	call malloc
 15534 0000B7BC 50                      	push rax
 15535 0000B7BD BF08000000              	mov rdi, 8 * 1	; new rib
 15536 0000B7C2 E88BB90000              	call malloc
 15537 0000B7C7 50                      	push rax
 15538 0000B7C8 BF48000000              	mov rdi, 8 * 9	; extended env
 15539 0000B7CD E880B90000              	call malloc
 15540 0000B7D2 488B7D10                	mov rdi, ENV
 15541 0000B7D6 BE00000000              	mov rsi, 0
 15542 0000B7DB BA01000000              	mov rdx, 1
 15543                                  .L_lambda_simple_env_loop_0283:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 15544 0000B7E0 4883FE08                	cmp rsi, 8
 15545 0000B7E4 7410                    	je .L_lambda_simple_env_end_0283
 15546 0000B7E6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15547 0000B7EA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15548 0000B7EE 48FFC6                  	inc rsi
 15549 0000B7F1 48FFC2                  	inc rdx
 15550 0000B7F4 EBEA                    	jmp .L_lambda_simple_env_loop_0283
 15551                                  .L_lambda_simple_env_end_0283:
 15552 0000B7F6 5B                      	pop rbx
 15553 0000B7F7 BE00000000              	mov rsi, 0
 15554                                  .L_lambda_simple_params_loop_0283:	; copy params
 15555 0000B7FC 4883FE01                	cmp rsi, 1
 15556 0000B800 740E                    	je .L_lambda_simple_params_end_0283
 15557 0000B802 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15558 0000B807 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15559 0000B80B 48FFC6                  	inc rsi
 15560 0000B80E EBEC                    	jmp .L_lambda_simple_params_loop_0283
 15561                                  .L_lambda_simple_params_end_0283:
 15562 0000B810 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 15563 0000B813 4889C3                  	mov rbx, rax
 15564 0000B816 58                      	pop rax
 15565 0000B817 C60004                  	mov byte [rax], T_closure
 15566 0000B81A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15567 0000B81E 48C74009[2BB80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0283
 15568 0000B826 E920040000              	jmp .L_lambda_simple_end_0283
 15569                                  .L_lambda_simple_code_0283:	; lambda-simple body
 15570 0000B82B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15571 0000B831 740B                    	je .L_lambda_simple_arity_check_ok_0283
 15572 0000B833 FF742410                	push qword [rsp + 8 * 2]
 15573 0000B837 6A01                    	push 1
 15574 0000B839 E9CDB80000              	jmp L_error_incorrect_arity_simple
 15575                                  .L_lambda_simple_arity_check_ok_0283:
 15576 0000B83E C8000000                	enter 0, 0
 15577 0000B842 BF08000000              	mov rdi, 8
 15578 0000B847 E806B90000              	call malloc
 15579 0000B84C 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
 15580 0000B850 488918                  	mov qword[rax], rbx
 15581 0000B853 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 15582 0000B857 48B8-                   	mov rax, sob_void
 15582 0000B859 [0000000000000000] 
 15583                                  
 15584 0000B861 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15585 0000B866 E8E7B80000              	call malloc
 15586 0000B86B 50                      	push rax
 15587 0000B86C BF08000000              	mov rdi, 8 * 1	; new rib
 15588 0000B871 E8DCB80000              	call malloc
 15589 0000B876 50                      	push rax
 15590 0000B877 BF50000000              	mov rdi, 8 * 10	; extended env
 15591 0000B87C E8D1B80000              	call malloc
 15592 0000B881 488B7D10                	mov rdi, ENV
 15593 0000B885 BE00000000              	mov rsi, 0
 15594 0000B88A BA01000000              	mov rdx, 1
 15595                                  .L_lambda_simple_env_loop_0284:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 15596 0000B88F 4883FE09                	cmp rsi, 9
 15597 0000B893 7410                    	je .L_lambda_simple_env_end_0284
 15598 0000B895 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15599 0000B899 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15600 0000B89D 48FFC6                  	inc rsi
 15601 0000B8A0 48FFC2                  	inc rdx
 15602 0000B8A3 EBEA                    	jmp .L_lambda_simple_env_loop_0284
 15603                                  .L_lambda_simple_env_end_0284:
 15604 0000B8A5 5B                      	pop rbx
 15605 0000B8A6 BE00000000              	mov rsi, 0
 15606                                  .L_lambda_simple_params_loop_0284:	; copy params
 15607 0000B8AB 4883FE01                	cmp rsi, 1
 15608 0000B8AF 740E                    	je .L_lambda_simple_params_end_0284
 15609 0000B8B1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15610 0000B8B6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15611 0000B8BA 48FFC6                  	inc rsi
 15612 0000B8BD EBEC                    	jmp .L_lambda_simple_params_loop_0284
 15613                                  .L_lambda_simple_params_end_0284:
 15614 0000B8BF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 15615 0000B8C2 4889C3                  	mov rbx, rax
 15616 0000B8C5 58                      	pop rax
 15617 0000B8C6 C60004                  	mov byte [rax], T_closure
 15618 0000B8C9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15619 0000B8CD 48C74009[DAB80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0284
 15620 0000B8D5 E97F010000              	jmp .L_lambda_simple_end_0284
 15621                                  .L_lambda_simple_code_0284:	; lambda-simple body
 15622 0000B8DA 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15623 0000B8E0 740B                    	je .L_lambda_simple_arity_check_ok_0284
 15624 0000B8E2 FF742410                	push qword [rsp + 8 * 2]
 15625 0000B8E6 6A02                    	push 2
 15626 0000B8E8 E91EB80000              	jmp L_error_incorrect_arity_simple
 15627                                  .L_lambda_simple_arity_check_ok_0284:
 15628 0000B8ED C8000000                	enter 0, 0
 15629                                  	; preparing a non-tail-call
 15630 0000B8F1 488B4528                	mov rax, PARAM(1)	; param s
 15631 0000B8F5 50                      	push rax
 15632 0000B8F6 6A01                    	push 1	; arg count
 15633 0000B8F8 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 15634 0000B900 803805                  	cmp byte [rax], T_undefined
 15635 0000B903 0F841CB70000            	je L_error_fvar_undefined
 15636 0000B909 803804                  	cmp byte [rax], T_closure
 15637 0000B90C 0F8597B70000            	jne L_error_non_closure
 15638 0000B912 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15639 0000B915 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15640 0000B918 483D[02000000]          	cmp rax, sob_boolean_false
 15641 0000B91E 0F8531010000            	jne .L_or_end_0030
 15642                                  
 15643                                  	; preparing a non-tail-call
 15644                                  	; preparing a non-tail-call
 15645 0000B924 488B4528                	mov rax, PARAM(1)	; param s
 15646 0000B928 50                      	push rax
 15647 0000B929 6A01                    	push 1	; arg count
 15648 0000B92B 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 15649 0000B933 803805                  	cmp byte [rax], T_undefined
 15650 0000B936 0F84E9B60000            	je L_error_fvar_undefined
 15651 0000B93C 803804                  	cmp byte [rax], T_closure
 15652 0000B93F 0F8564B70000            	jne L_error_non_closure
 15653 0000B945 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15654 0000B948 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15655 0000B94B 50                      	push rax
 15656 0000B94C 488B4520                	mov rax, PARAM(0)	; param a
 15657 0000B950 50                      	push rax
 15658 0000B951 6A02                    	push 2	; arg count
 15659 0000B953 488B4510                	mov rax, ENV
 15660 0000B957 488B4008                	mov rax, qword [rax + 8 * 1]
 15661 0000B95B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-ordering
 15662 0000B95E 803804                  	cmp byte [rax], T_closure
 15663 0000B961 0F8542B70000            	jne L_error_non_closure
 15664 0000B967 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15665 0000B96A FF5009                  	call SOB_CLOSURE_CODE(rax)
 15666 0000B96D 483D[02000000]          	cmp rax, sob_boolean_false
 15667 0000B973 0F84CA000000            	je .L_if_else_01e8
 15668                                  	; preparing a tail-call
 15669                                  	; preparing a non-tail-call
 15670 0000B979 488B4528                	mov rax, PARAM(1)	; param s
 15671 0000B97D 50                      	push rax
 15672 0000B97E 6A01                    	push 1	; arg count
 15673 0000B980 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 15674 0000B988 803805                  	cmp byte [rax], T_undefined
 15675 0000B98B 0F8494B60000            	je L_error_fvar_undefined
 15676 0000B991 803804                  	cmp byte [rax], T_closure
 15677 0000B994 0F850FB70000            	jne L_error_non_closure
 15678 0000B99A FF7001                  	push SOB_CLOSURE_ENV(rax)
 15679 0000B99D FF5009                  	call SOB_CLOSURE_CODE(rax)
 15680 0000B9A0 50                      	push rax
 15681                                  	; preparing a non-tail-call
 15682 0000B9A1 488B4528                	mov rax, PARAM(1)	; param s
 15683 0000B9A5 50                      	push rax
 15684 0000B9A6 6A01                    	push 1	; arg count
 15685 0000B9A8 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 15686 0000B9B0 803805                  	cmp byte [rax], T_undefined
 15687 0000B9B3 0F846CB60000            	je L_error_fvar_undefined
 15688 0000B9B9 803804                  	cmp byte [rax], T_closure
 15689 0000B9BC 0F85E7B60000            	jne L_error_non_closure
 15690 0000B9C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15691 0000B9C5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15692 0000B9C8 50                      	push rax
 15693 0000B9C9 6A02                    	push 2	; arg count
 15694 0000B9CB 488B4510                	mov rax, ENV
 15695 0000B9CF 488B00                  	mov rax, qword [rax + 8 * 0]
 15696 0000B9D2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 15697 0000B9D5 488B00                  	mov rax, qword [rax]
 15698 0000B9D8 803804                  	cmp byte [rax], T_closure
 15699 0000B9DB 0F85C8B60000            	jne L_error_non_closure
 15700 0000B9E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15701 0000B9E4 4C8B4009                	mov r8, qword [rax + 1 + 8]
 15702 0000B9E8 FF7508                  	push qword [rbp + 8]				; push old return address
 15703 0000B9EB FF7500                  	push qword [rbp]					; push old rbp
 15704                                  	;; move stack up ;;
 15705 0000B9EE 488B5D18                	mov rbx, [rbp + 3*8]
 15706 0000B9F2 4889DE                  	mov rsi, rbx						; save old size in rsi
 15707 0000B9F5 4883C303                	add rbx, 3
 15708 0000B9F9 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 15709 0000BA01 B902000000              	mov rcx, 2
 15710 0000BA06 4883C104                	add rcx, 4				; num of iterations in rcx
 15711                                  .L_tc_recycle_frame_loop_0369:
 15712 0000BA0A 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 15713 0000BA12 488B143C                	mov rdx, [rsp + rdi]
 15714 0000BA16 4889541D00              	mov [rbp + rbx], rdx
 15715 0000BA1B 4883EB08                	sub rbx, 8
 15716 0000BA1F 48FFC9                  	dec rcx
 15717 0000BA22 4883F900                	cmp rcx, 0
 15718 0000BA26 75E2                    	jne .L_tc_recycle_frame_loop_0369
 15719 0000BA28 4889F3                  	mov rbx, rsi
 15720 0000BA2B 4883EB02                	sub rbx, 2
 15721 0000BA2F 488D1CDD00000000        	lea rbx, [rbx*8]
 15722 0000BA37 4801DD                  	add rbp, rbx
 15723 0000BA3A 4889EC                  	mov rsp, rbp         ; fix stack pointers
 15724 0000BA3D 5D                      	pop rbp
 15725 0000BA3E 41FFE0                  	jmp r8
 15726 0000BA41 EB0A                    	jmp .L_if_end_01e8
 15727                                  .L_if_else_01e8:
 15728 0000BA43 48B8-                   	mov rax, L_constants + 2
 15728 0000BA45 [0200000000000000] 
 15729                                  .L_if_end_01e8:
 15730 0000BA4D 483D[02000000]          	cmp rax, sob_boolean_false
 15731 0000BA53 7500                    	jne .L_or_end_0030
 15732                                  .L_or_end_0030:
 15733 0000BA55 C9                      	leave
 15734 0000BA56 C22000                  	ret AND_KILL_FRAME(2)
 15735                                  .L_lambda_simple_end_0284:	; new closure is in rax
 15736 0000BA59 50                      	push rax
 15737 0000BA5A 488B4520                	mov rax, PARAM(0)	; param run
 15738 0000BA5E 8F00                    	pop qword [rax]
 15739 0000BA60 48B8-                   	mov rax, sob_void
 15739 0000BA62 [0000000000000000] 
 15740                                  
 15741 0000BA6A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15742 0000BA6F E8DEB60000              	call malloc
 15743 0000BA74 50                      	push rax
 15744 0000BA75 BF08000000              	mov rdi, 8 * 1	; new rib
 15745 0000BA7A E8D3B60000              	call malloc
 15746 0000BA7F 50                      	push rax
 15747 0000BA80 BF50000000              	mov rdi, 8 * 10	; extended env
 15748 0000BA85 E8C8B60000              	call malloc
 15749 0000BA8A 488B7D10                	mov rdi, ENV
 15750 0000BA8E BE00000000              	mov rsi, 0
 15751 0000BA93 BA01000000              	mov rdx, 1
 15752                                  .L_lambda_opt_env_loop_0056:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 15753 0000BA98 4883FE09                	cmp rsi, 9
 15754 0000BA9C 7410                    	je .L_lambda_opt_env_end_0056
 15755 0000BA9E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15756 0000BAA2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15757 0000BAA6 48FFC6                  	inc rsi
 15758 0000BAA9 48FFC2                  	inc rdx
 15759 0000BAAC EBEA                    	jmp .L_lambda_opt_env_loop_0056
 15760                                  .L_lambda_opt_env_end_0056:
 15761 0000BAAE 5B                      	pop rbx
 15762 0000BAAF BE00000000              	mov rsi, 0
 15763                                  .L_lambda_opt_params_loop_0056:	; copy params
 15764 0000BAB4 4883FE01                	cmp rsi, 1
 15765 0000BAB8 740E                    	je .L_lambda_opt_params_end_0056
 15766 0000BABA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15767 0000BABF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15768 0000BAC3 48FFC6                  	inc rsi
 15769 0000BAC6 EBEC                    	jmp .L_lambda_opt_params_loop_0056
 15770                                  .L_lambda_opt_params_end_0056:
 15771 0000BAC8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 15772 0000BACB 4889C3                  	mov rbx, rax
 15773 0000BACE 58                      	pop rax
 15774 0000BACF C60004                  	mov byte [rax], T_closure
 15775 0000BAD2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15776 0000BAD6 48C74009[E3BA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0056
 15777 0000BADE E964010000              	jmp .L_lambda_opt_end_0056
 15778                                  .L_lambda_opt_code_0056:	; lambda-opt body
 15779 0000BAE3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15780 0000BAE9 740D                    	je .L_lambda_opt_arity_check_exact_0056
 15781 0000BAEB 7F48                    	jg .L_lambda_opt_arity_check_more_0056
 15782 0000BAED FF742410                	push qword [rsp + 8 * 2]
 15783 0000BAF1 6A01                    	push 1
 15784 0000BAF3 E927B60000              	jmp L_error_incorrect_arity_opt
 15785                                  .L_lambda_opt_arity_check_exact_0056:
 15786 0000BAF8 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update argument count (fixed params + 1 for nil)
 15787 0000BB01 41BA04000000            	mov r10, 4	; r10 = total addresses to adjust (fixed params + 3)
 15788 0000BB07 FF3424                  	push qword [rsp]	; Save the top stack element
 15789 0000BB0A 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
 15790                                  .L_lambda_opt_stack_shrink_loop_0100:
 15791 0000BB10 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
 15792 0000BB13 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0100	; Exit loop if all elements processed
 15793 0000BB15 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
 15794 0000BB1A 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
 15795 0000BB1E 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
 15796 0000BB23 49FFC3                  	inc r11	; Increment loop index
 15797 0000BB26 EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_0100	; Jump back to loop start
 15798                                  .L_lambda_opt_stack_shrink_loop_exit_0100:
 15799 0000BB28 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
 15800 0000BB30 E988000000              	jmp .L_lambda_opt_stack_adjusted_0056
 15801                                  .L_lambda_opt_arity_check_more_0056:
 15802 0000BB35 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
 15803 0000BB3A 4983E801                	sub r8, 1	; r8 = count of optional params
 15804 0000BB3E 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update the number of params (fixed params + 1 for list opt)
 15805 0000BB47 41B900000000            	mov r9, 0	; r9 = index of optional argument list
 15806 0000BB4D 4E8D54C418              	lea r10, [rsp + 2 * 8 + 1 * 8 + r8 * 8]	; r10 = address of first optional param
 15807 0000BB52 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
 15807 0000BB54 [0100000000000000] 
 15808                                  .L_lambda_opt_stack_shrink_loop_0101:
 15809 0000BB5C 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
 15810 0000BB5F 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_0101	; Exit loop if all optional params are processed
 15811 0000BB61 BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
 15812 0000BB66 E8E7B50000              	call malloc	; Allocate memory for a new pair
 15813 0000BB6B 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
 15814 0000BB6F 49F7D9                  	neg r9	; Negate index to access in reverse
 15815 0000BB72 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
 15816 0000BB76 49F7D9                  	neg r9	; Negate index back
 15817 0000BB79 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
 15818 0000BB7D C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
 15819 0000BB80 4989C3                  	mov r11, rax	; Update current pair to the newly created one
 15820 0000BB83 49FFC1                  	inc r9	; Increment the index
 15821 0000BB86 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0101	; Repeat the loop for the next param
 15822                                  .L_lambda_opt_stack_shrink_loop_exit_0101:
 15823 0000BB88 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
 15824 0000BB8B 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
 15825 0000BB8F 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
 15826 0000BB92 4983C418                	add r12, 24	; Skip fixed params and return address
 15827 0000BB96 41BD04000000            	mov r13, 4	; r13 = loop counter (number of params, old fp, ret addr, lex env)
 15828                                  .L_lambda_opt_stack_shrink_loop_0102:
 15829 0000BB9C 4983FD00                	cmp r13, 0	; Check if there are more values to copy
 15830 0000BBA0 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0102	; Exit loop if all values are copied
 15831 0000BBA2 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
 15832 0000BBA6 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
 15833 0000BBA9 49FFCD                  	dec r13	; Decrement the loop counter
 15834 0000BBAC 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
 15835 0000BBB0 4983EC08                	sub r12, 8	; Move the source pointer to the next location
 15836 0000BBB4 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0102	; Repeat the loop for the next value
 15837                                  .L_lambda_opt_stack_shrink_loop_exit_0102:
 15838 0000BBB6 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
 15839 0000BBBA 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
 15840                                  .L_lambda_opt_stack_adjusted_0056:
 15841 0000BBBD C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
 15842                                  	; preparing a tail-call
 15843 0000BBC1 488B4528                	mov rax, PARAM(1)	; param s
 15844 0000BBC5 50                      	push rax
 15845 0000BBC6 488B4520                	mov rax, PARAM(0)	; param a
 15846 0000BBCA 50                      	push rax
 15847 0000BBCB 6A02                    	push 2	; arg count
 15848 0000BBCD 488B4510                	mov rax, ENV
 15849 0000BBD1 488B00                  	mov rax, qword [rax + 8 * 0]
 15850 0000BBD4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 15851 0000BBD7 488B00                  	mov rax, qword [rax]
 15852 0000BBDA 803804                  	cmp byte [rax], T_closure
 15853 0000BBDD 0F85C6B40000            	jne L_error_non_closure
 15854 0000BBE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15855 0000BBE6 4C8B4009                	mov r8, qword [rax + 1 + 8]
 15856 0000BBEA FF7508                  	push qword [rbp + 8]				; push old return address
 15857 0000BBED FF7500                  	push qword [rbp]					; push old rbp
 15858                                  	;; move stack up ;;
 15859 0000BBF0 488B5D18                	mov rbx, [rbp + 3*8]
 15860 0000BBF4 4889DE                  	mov rsi, rbx						; save old size in rsi
 15861 0000BBF7 4883C303                	add rbx, 3
 15862 0000BBFB 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 15863 0000BC03 B902000000              	mov rcx, 2
 15864 0000BC08 4883C104                	add rcx, 4				; num of iterations in rcx
 15865                                  .L_tc_recycle_frame_loop_036a:
 15866 0000BC0C 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 15867 0000BC14 488B143C                	mov rdx, [rsp + rdi]
 15868 0000BC18 4889541D00              	mov [rbp + rbx], rdx
 15869 0000BC1D 4883EB08                	sub rbx, 8
 15870 0000BC21 48FFC9                  	dec rcx
 15871 0000BC24 4883F900                	cmp rcx, 0
 15872 0000BC28 75E2                    	jne .L_tc_recycle_frame_loop_036a
 15873 0000BC2A 4889F3                  	mov rbx, rsi
 15874 0000BC2D 4883EB02                	sub rbx, 2
 15875 0000BC31 488D1CDD00000000        	lea rbx, [rbx*8]
 15876 0000BC39 4801DD                  	add rbp, rbx
 15877 0000BC3C 4889EC                  	mov rsp, rbp         ; fix stack pointers
 15878 0000BC3F 5D                      	pop rbp
 15879 0000BC40 41FFE0                  	jmp r8
 15880 0000BC43 C9                      	leave	; Restore the previous stack frame
 15881 0000BC44 C22000                  	ret AND_KILL_FRAME(2)
 15882                                  .L_lambda_opt_end_0056:	; new closure is in rax
 15883 0000BC47 C9                      	leave
 15884 0000BC48 C21800                  	ret AND_KILL_FRAME(1)
 15885                                  .L_lambda_simple_end_0283:	; new closure is in rax
 15886 0000BC4B 803804                  	cmp byte [rax], T_closure
 15887 0000BC4E 0F8555B40000            	jne L_error_non_closure
 15888 0000BC54 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15889 0000BC57 4C8B4009                	mov r8, qword [rax + 1 + 8]
 15890 0000BC5B FF7508                  	push qword [rbp + 8]				; push old return address
 15891 0000BC5E FF7500                  	push qword [rbp]					; push old rbp
 15892                                  	;; move stack up ;;
 15893 0000BC61 488B5D18                	mov rbx, [rbp + 3*8]
 15894 0000BC65 4889DE                  	mov rsi, rbx						; save old size in rsi
 15895 0000BC68 4883C303                	add rbx, 3
 15896 0000BC6C 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 15897 0000BC74 B901000000              	mov rcx, 1
 15898 0000BC79 4883C104                	add rcx, 4				; num of iterations in rcx
 15899                                  .L_tc_recycle_frame_loop_0368:
 15900 0000BC7D 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 15901 0000BC85 488B143C                	mov rdx, [rsp + rdi]
 15902 0000BC89 4889541D00              	mov [rbp + rbx], rdx
 15903 0000BC8E 4883EB08                	sub rbx, 8
 15904 0000BC92 48FFC9                  	dec rcx
 15905 0000BC95 4883F900                	cmp rcx, 0
 15906 0000BC99 75E2                    	jne .L_tc_recycle_frame_loop_0368
 15907 0000BC9B 4889F3                  	mov rbx, rsi
 15908 0000BC9E 4883EB01                	sub rbx, 1
 15909 0000BCA2 488D1CDD00000000        	lea rbx, [rbx*8]
 15910 0000BCAA 4801DD                  	add rbp, rbx
 15911 0000BCAD 4889EC                  	mov rsp, rbp         ; fix stack pointers
 15912 0000BCB0 5D                      	pop rbp
 15913 0000BCB1 41FFE0                  	jmp r8
 15914 0000BCB4 C9                      	leave
 15915 0000BCB5 C21800                  	ret AND_KILL_FRAME(1)
 15916                                  .L_lambda_simple_end_0282:	; new closure is in rax
 15917 0000BCB8 50                      	push rax
 15918 0000BCB9 6A01                    	push 1	; arg count
 15919 0000BCBB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15920 0000BCC0 E88DB40000              	call malloc
 15921 0000BCC5 50                      	push rax
 15922 0000BCC6 BF08000000              	mov rdi, 8 * 1	; new rib
 15923 0000BCCB E882B40000              	call malloc
 15924 0000BCD0 50                      	push rax
 15925 0000BCD1 BF40000000              	mov rdi, 8 * 8	; extended env
 15926 0000BCD6 E877B40000              	call malloc
 15927 0000BCDB 488B7D10                	mov rdi, ENV
 15928 0000BCDF BE00000000              	mov rsi, 0
 15929 0000BCE4 BA01000000              	mov rdx, 1
 15930                                  .L_lambda_simple_env_loop_0285:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 15931 0000BCE9 4883FE07                	cmp rsi, 7
 15932 0000BCED 7410                    	je .L_lambda_simple_env_end_0285
 15933 0000BCEF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15934 0000BCF3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15935 0000BCF7 48FFC6                  	inc rsi
 15936 0000BCFA 48FFC2                  	inc rdx
 15937 0000BCFD EBEA                    	jmp .L_lambda_simple_env_loop_0285
 15938                                  .L_lambda_simple_env_end_0285:
 15939 0000BCFF 5B                      	pop rbx
 15940 0000BD00 BE00000000              	mov rsi, 0
 15941                                  .L_lambda_simple_params_loop_0285:	; copy params
 15942 0000BD05 4883FE01                	cmp rsi, 1
 15943 0000BD09 740E                    	je .L_lambda_simple_params_end_0285
 15944 0000BD0B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15945 0000BD10 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15946 0000BD14 48FFC6                  	inc rsi
 15947 0000BD17 EBEC                    	jmp .L_lambda_simple_params_loop_0285
 15948                                  .L_lambda_simple_params_end_0285:
 15949 0000BD19 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 15950 0000BD1C 4889C3                  	mov rbx, rax
 15951 0000BD1F 58                      	pop rax
 15952 0000BD20 C60004                  	mov byte [rax], T_closure
 15953 0000BD23 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15954 0000BD27 48C74009[34BD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0285
 15955 0000BD2F E919010000              	jmp .L_lambda_simple_end_0285
 15956                                  .L_lambda_simple_code_0285:	; lambda-simple body
 15957 0000BD34 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15958 0000BD3A 740B                    	je .L_lambda_simple_arity_check_ok_0285
 15959 0000BD3C FF742410                	push qword [rsp + 8 * 2]
 15960 0000BD40 6A01                    	push 1
 15961 0000BD42 E9C4B30000              	jmp L_error_incorrect_arity_simple
 15962                                  .L_lambda_simple_arity_check_ok_0285:
 15963 0000BD47 C8000000                	enter 0, 0
 15964                                  	; preparing a non-tail-call
 15965 0000BD4B 488B4510                	mov rax, ENV
 15966 0000BD4F 488B4020                	mov rax, qword [rax + 8 * 4]
 15967 0000BD53 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 15968 0000BD56 50                      	push rax
 15969 0000BD57 6A01                    	push 1	; arg count
 15970 0000BD59 488B4520                	mov rax, PARAM(0)	; param make-run
 15971 0000BD5D 803804                  	cmp byte [rax], T_closure
 15972 0000BD60 0F8543B30000            	jne L_error_non_closure
 15973 0000BD66 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15974 0000BD69 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15975 0000BD6C 48890425[1B0E0000]      	mov qword [free_var_4], rax
 15976 0000BD74 48B8-                   	mov rax, sob_void
 15976 0000BD76 [0000000000000000] 
 15977                                  
 15978                                  	; preparing a non-tail-call
 15979 0000BD7E 488B4510                	mov rax, ENV
 15980 0000BD82 488B00                  	mov rax, qword [rax + 8 * 0]
 15981 0000BD85 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<=?
 15982 0000BD88 50                      	push rax
 15983 0000BD89 6A01                    	push 1	; arg count
 15984 0000BD8B 488B4520                	mov rax, PARAM(0)	; param make-run
 15985 0000BD8F 803804                  	cmp byte [rax], T_closure
 15986 0000BD92 0F8511B30000            	jne L_error_non_closure
 15987 0000BD98 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15988 0000BD9B FF5009                  	call SOB_CLOSURE_CODE(rax)
 15989 0000BD9E 48890425[2C0E0000]      	mov qword [free_var_5], rax
 15990 0000BDA6 48B8-                   	mov rax, sob_void
 15990 0000BDA8 [0000000000000000] 
 15991                                  
 15992                                  	; preparing a non-tail-call
 15993 0000BDB0 488B4510                	mov rax, ENV
 15994 0000BDB4 488B4008                	mov rax, qword [rax + 8 * 1]
 15995 0000BDB8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 15996 0000BDBB 50                      	push rax
 15997 0000BDBC 6A01                    	push 1	; arg count
 15998 0000BDBE 488B4520                	mov rax, PARAM(0)	; param make-run
 15999 0000BDC2 803804                  	cmp byte [rax], T_closure
 16000 0000BDC5 0F85DEB20000            	jne L_error_non_closure
 16001 0000BDCB FF7001                  	push SOB_CLOSURE_ENV(rax)
 16002 0000BDCE FF5009                  	call SOB_CLOSURE_CODE(rax)
 16003 0000BDD1 48890425[4E0E0000]      	mov qword [free_var_7], rax
 16004 0000BDD9 48B8-                   	mov rax, sob_void
 16004 0000BDDB [0000000000000000] 
 16005                                  
 16006                                  	; preparing a non-tail-call
 16007 0000BDE3 488B4510                	mov rax, ENV
 16008 0000BDE7 488B4010                	mov rax, qword [rax + 8 * 2]
 16009 0000BDEB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>=?
 16010 0000BDEE 50                      	push rax
 16011 0000BDEF 6A01                    	push 1	; arg count
 16012 0000BDF1 488B4520                	mov rax, PARAM(0)	; param make-run
 16013 0000BDF5 803804                  	cmp byte [rax], T_closure
 16014 0000BDF8 0F85ABB20000            	jne L_error_non_closure
 16015 0000BDFE FF7001                  	push SOB_CLOSURE_ENV(rax)
 16016 0000BE01 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16017 0000BE04 48890425[5F0E0000]      	mov qword [free_var_8], rax
 16018 0000BE0C 48B8-                   	mov rax, sob_void
 16018 0000BE0E [0000000000000000] 
 16019                                  
 16020                                  	; preparing a non-tail-call
 16021 0000BE16 488B4510                	mov rax, ENV
 16022 0000BE1A 488B4018                	mov rax, qword [rax + 8 * 3]
 16023 0000BE1E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin=?
 16024 0000BE21 50                      	push rax
 16025 0000BE22 6A01                    	push 1	; arg count
 16026 0000BE24 488B4520                	mov rax, PARAM(0)	; param make-run
 16027 0000BE28 803804                  	cmp byte [rax], T_closure
 16028 0000BE2B 0F8578B20000            	jne L_error_non_closure
 16029 0000BE31 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16030 0000BE34 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16031 0000BE37 48890425[3D0E0000]      	mov qword [free_var_6], rax
 16032 0000BE3F 48B8-                   	mov rax, sob_void
 16032 0000BE41 [0000000000000000] 
 16033 0000BE49 C9                      	leave
 16034 0000BE4A C21800                  	ret AND_KILL_FRAME(1)
 16035                                  .L_lambda_simple_end_0285:	; new closure is in rax
 16036 0000BE4D 803804                  	cmp byte [rax], T_closure
 16037 0000BE50 0F8553B20000            	jne L_error_non_closure
 16038 0000BE56 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16039 0000BE59 4C8B4009                	mov r8, qword [rax + 1 + 8]
 16040 0000BE5D FF7508                  	push qword [rbp + 8]				; push old return address
 16041 0000BE60 FF7500                  	push qword [rbp]					; push old rbp
 16042                                  	;; move stack up ;;
 16043 0000BE63 488B5D18                	mov rbx, [rbp + 3*8]
 16044 0000BE67 4889DE                  	mov rsi, rbx						; save old size in rsi
 16045 0000BE6A 4883C303                	add rbx, 3
 16046 0000BE6E 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 16047 0000BE76 B901000000              	mov rcx, 1
 16048 0000BE7B 4883C104                	add rcx, 4				; num of iterations in rcx
 16049                                  .L_tc_recycle_frame_loop_0367:
 16050 0000BE7F 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 16051 0000BE87 488B143C                	mov rdx, [rsp + rdi]
 16052 0000BE8B 4889541D00              	mov [rbp + rbx], rdx
 16053 0000BE90 4883EB08                	sub rbx, 8
 16054 0000BE94 48FFC9                  	dec rcx
 16055 0000BE97 4883F900                	cmp rcx, 0
 16056 0000BE9B 75E2                    	jne .L_tc_recycle_frame_loop_0367
 16057 0000BE9D 4889F3                  	mov rbx, rsi
 16058 0000BEA0 4883EB01                	sub rbx, 1
 16059 0000BEA4 488D1CDD00000000        	lea rbx, [rbx*8]
 16060 0000BEAC 4801DD                  	add rbp, rbx
 16061 0000BEAF 4889EC                  	mov rsp, rbp         ; fix stack pointers
 16062 0000BEB2 5D                      	pop rbp
 16063 0000BEB3 41FFE0                  	jmp r8
 16064 0000BEB6 C9                      	leave
 16065 0000BEB7 C21800                  	ret AND_KILL_FRAME(1)
 16066                                  .L_lambda_simple_end_0281:	; new closure is in rax
 16067 0000BEBA 803804                  	cmp byte [rax], T_closure
 16068 0000BEBD 0F85E6B10000            	jne L_error_non_closure
 16069 0000BEC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16070 0000BEC6 4C8B4009                	mov r8, qword [rax + 1 + 8]
 16071 0000BECA FF7508                  	push qword [rbp + 8]				; push old return address
 16072 0000BECD FF7500                  	push qword [rbp]					; push old rbp
 16073                                  	;; move stack up ;;
 16074 0000BED0 488B5D18                	mov rbx, [rbp + 3*8]
 16075 0000BED4 4889DE                  	mov rsi, rbx						; save old size in rsi
 16076 0000BED7 4883C303                	add rbx, 3
 16077 0000BEDB 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 16078 0000BEE3 B901000000              	mov rcx, 1
 16079 0000BEE8 4883C104                	add rcx, 4				; num of iterations in rcx
 16080                                  .L_tc_recycle_frame_loop_0365:
 16081 0000BEEC 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 16082 0000BEF4 488B143C                	mov rdx, [rsp + rdi]
 16083 0000BEF8 4889541D00              	mov [rbp + rbx], rdx
 16084 0000BEFD 4883EB08                	sub rbx, 8
 16085 0000BF01 48FFC9                  	dec rcx
 16086 0000BF04 4883F900                	cmp rcx, 0
 16087 0000BF08 75E2                    	jne .L_tc_recycle_frame_loop_0365
 16088 0000BF0A 4889F3                  	mov rbx, rsi
 16089 0000BF0D 4883EB01                	sub rbx, 1
 16090 0000BF11 488D1CDD00000000        	lea rbx, [rbx*8]
 16091 0000BF19 4801DD                  	add rbp, rbx
 16092 0000BF1C 4889EC                  	mov rsp, rbp         ; fix stack pointers
 16093 0000BF1F 5D                      	pop rbp
 16094 0000BF20 41FFE0                  	jmp r8
 16095 0000BF23 C9                      	leave
 16096 0000BF24 C21800                  	ret AND_KILL_FRAME(1)
 16097                                  .L_lambda_simple_end_027f:	; new closure is in rax
 16098 0000BF27 803804                  	cmp byte [rax], T_closure
 16099 0000BF2A 0F8579B10000            	jne L_error_non_closure
 16100 0000BF30 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16101 0000BF33 4C8B4009                	mov r8, qword [rax + 1 + 8]
 16102 0000BF37 FF7508                  	push qword [rbp + 8]				; push old return address
 16103 0000BF3A FF7500                  	push qword [rbp]					; push old rbp
 16104                                  	;; move stack up ;;
 16105 0000BF3D 488B5D18                	mov rbx, [rbp + 3*8]
 16106 0000BF41 4889DE                  	mov rsi, rbx						; save old size in rsi
 16107 0000BF44 4883C303                	add rbx, 3
 16108 0000BF48 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 16109 0000BF50 B901000000              	mov rcx, 1
 16110 0000BF55 4883C104                	add rcx, 4				; num of iterations in rcx
 16111                                  .L_tc_recycle_frame_loop_0363:
 16112 0000BF59 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 16113 0000BF61 488B143C                	mov rdx, [rsp + rdi]
 16114 0000BF65 4889541D00              	mov [rbp + rbx], rdx
 16115 0000BF6A 4883EB08                	sub rbx, 8
 16116 0000BF6E 48FFC9                  	dec rcx
 16117 0000BF71 4883F900                	cmp rcx, 0
 16118 0000BF75 75E2                    	jne .L_tc_recycle_frame_loop_0363
 16119 0000BF77 4889F3                  	mov rbx, rsi
 16120 0000BF7A 4883EB01                	sub rbx, 1
 16121 0000BF7E 488D1CDD00000000        	lea rbx, [rbx*8]
 16122 0000BF86 4801DD                  	add rbp, rbx
 16123 0000BF89 4889EC                  	mov rsp, rbp         ; fix stack pointers
 16124 0000BF8C 5D                      	pop rbp
 16125 0000BF8D 41FFE0                  	jmp r8
 16126 0000BF90 C9                      	leave
 16127 0000BF91 C21800                  	ret AND_KILL_FRAME(1)
 16128                                  .L_lambda_simple_end_027d:	; new closure is in rax
 16129 0000BF94 803804                  	cmp byte [rax], T_closure
 16130 0000BF97 0F850CB10000            	jne L_error_non_closure
 16131 0000BF9D FF7001                  	push SOB_CLOSURE_ENV(rax)
 16132 0000BFA0 4C8B4009                	mov r8, qword [rax + 1 + 8]
 16133 0000BFA4 FF7508                  	push qword [rbp + 8]				; push old return address
 16134 0000BFA7 FF7500                  	push qword [rbp]					; push old rbp
 16135                                  	;; move stack up ;;
 16136 0000BFAA 488B5D18                	mov rbx, [rbp + 3*8]
 16137 0000BFAE 4889DE                  	mov rsi, rbx						; save old size in rsi
 16138 0000BFB1 4883C303                	add rbx, 3
 16139 0000BFB5 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 16140 0000BFBD B901000000              	mov rcx, 1
 16141 0000BFC2 4883C104                	add rcx, 4				; num of iterations in rcx
 16142                                  .L_tc_recycle_frame_loop_0361:
 16143 0000BFC6 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 16144 0000BFCE 488B143C                	mov rdx, [rsp + rdi]
 16145 0000BFD2 4889541D00              	mov [rbp + rbx], rdx
 16146 0000BFD7 4883EB08                	sub rbx, 8
 16147 0000BFDB 48FFC9                  	dec rcx
 16148 0000BFDE 4883F900                	cmp rcx, 0
 16149 0000BFE2 75E2                    	jne .L_tc_recycle_frame_loop_0361
 16150 0000BFE4 4889F3                  	mov rbx, rsi
 16151 0000BFE7 4883EB01                	sub rbx, 1
 16152 0000BFEB 488D1CDD00000000        	lea rbx, [rbx*8]
 16153 0000BFF3 4801DD                  	add rbp, rbx
 16154 0000BFF6 4889EC                  	mov rsp, rbp         ; fix stack pointers
 16155 0000BFF9 5D                      	pop rbp
 16156 0000BFFA 41FFE0                  	jmp r8
 16157 0000BFFD C9                      	leave
 16158 0000BFFE C21800                  	ret AND_KILL_FRAME(1)
 16159                                  .L_lambda_simple_end_027b:	; new closure is in rax
 16160 0000C001 803804                  	cmp byte [rax], T_closure
 16161 0000C004 0F859FB00000            	jne L_error_non_closure
 16162 0000C00A FF7001                  	push SOB_CLOSURE_ENV(rax)
 16163 0000C00D 4C8B4009                	mov r8, qword [rax + 1 + 8]
 16164 0000C011 FF7508                  	push qword [rbp + 8]				; push old return address
 16165 0000C014 FF7500                  	push qword [rbp]					; push old rbp
 16166                                  	;; move stack up ;;
 16167 0000C017 488B5D18                	mov rbx, [rbp + 3*8]
 16168 0000C01B 4889DE                  	mov rsi, rbx						; save old size in rsi
 16169 0000C01E 4883C303                	add rbx, 3
 16170 0000C022 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 16171 0000C02A B901000000              	mov rcx, 1
 16172 0000C02F 4883C104                	add rcx, 4				; num of iterations in rcx
 16173                                  .L_tc_recycle_frame_loop_0360:
 16174 0000C033 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 16175 0000C03B 488B143C                	mov rdx, [rsp + rdi]
 16176 0000C03F 4889541D00              	mov [rbp + rbx], rdx
 16177 0000C044 4883EB08                	sub rbx, 8
 16178 0000C048 48FFC9                  	dec rcx
 16179 0000C04B 4883F900                	cmp rcx, 0
 16180 0000C04F 75E2                    	jne .L_tc_recycle_frame_loop_0360
 16181 0000C051 4889F3                  	mov rbx, rsi
 16182 0000C054 4883EB01                	sub rbx, 1
 16183 0000C058 488D1CDD00000000        	lea rbx, [rbx*8]
 16184 0000C060 4801DD                  	add rbp, rbx
 16185 0000C063 4889EC                  	mov rsp, rbp         ; fix stack pointers
 16186 0000C066 5D                      	pop rbp
 16187 0000C067 41FFE0                  	jmp r8
 16188 0000C06A C9                      	leave
 16189 0000C06B C21800                  	ret AND_KILL_FRAME(1)
 16190                                  .L_lambda_simple_end_027a:	; new closure is in rax
 16191 0000C06E 803804                  	cmp byte [rax], T_closure
 16192 0000C071 0F8532B00000            	jne L_error_non_closure
 16193 0000C077 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16194 0000C07A 4C8B4009                	mov r8, qword [rax + 1 + 8]
 16195 0000C07E FF7508                  	push qword [rbp + 8]				; push old return address
 16196 0000C081 FF7500                  	push qword [rbp]					; push old rbp
 16197                                  	;; move stack up ;;
 16198 0000C084 488B5D18                	mov rbx, [rbp + 3*8]
 16199 0000C088 4889DE                  	mov rsi, rbx						; save old size in rsi
 16200 0000C08B 4883C303                	add rbx, 3
 16201 0000C08F 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 16202 0000C097 B901000000              	mov rcx, 1
 16203 0000C09C 4883C104                	add rcx, 4				; num of iterations in rcx
 16204                                  .L_tc_recycle_frame_loop_035f:
 16205 0000C0A0 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 16206 0000C0A8 488B143C                	mov rdx, [rsp + rdi]
 16207 0000C0AC 4889541D00              	mov [rbp + rbx], rdx
 16208 0000C0B1 4883EB08                	sub rbx, 8
 16209 0000C0B5 48FFC9                  	dec rcx
 16210 0000C0B8 4883F900                	cmp rcx, 0
 16211 0000C0BC 75E2                    	jne .L_tc_recycle_frame_loop_035f
 16212 0000C0BE 4889F3                  	mov rbx, rsi
 16213 0000C0C1 4883EB01                	sub rbx, 1
 16214 0000C0C5 488D1CDD00000000        	lea rbx, [rbx*8]
 16215 0000C0CD 4801DD                  	add rbp, rbx
 16216 0000C0D0 4889EC                  	mov rsp, rbp         ; fix stack pointers
 16217 0000C0D3 5D                      	pop rbp
 16218 0000C0D4 41FFE0                  	jmp r8
 16219 0000C0D7 C9                      	leave
 16220 0000C0D8 C21800                  	ret AND_KILL_FRAME(1)
 16221                                  .L_lambda_simple_end_0279:	; new closure is in rax
 16222 0000C0DB 803804                  	cmp byte [rax], T_closure
 16223 0000C0DE 0F85C5AF0000            	jne L_error_non_closure
 16224 0000C0E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16225 0000C0E7 4C8B4009                	mov r8, qword [rax + 1 + 8]
 16226 0000C0EB FF7508                  	push qword [rbp + 8]				; push old return address
 16227 0000C0EE FF7500                  	push qword [rbp]					; push old rbp
 16228                                  	;; move stack up ;;
 16229 0000C0F1 488B5D18                	mov rbx, [rbp + 3*8]
 16230 0000C0F5 4889DE                  	mov rsi, rbx						; save old size in rsi
 16231 0000C0F8 4883C303                	add rbx, 3
 16232 0000C0FC 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 16233 0000C104 B901000000              	mov rcx, 1
 16234 0000C109 4883C104                	add rcx, 4				; num of iterations in rcx
 16235                                  .L_tc_recycle_frame_loop_0351:
 16236 0000C10D 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 16237 0000C115 488B143C                	mov rdx, [rsp + rdi]
 16238 0000C119 4889541D00              	mov [rbp + rbx], rdx
 16239 0000C11E 4883EB08                	sub rbx, 8
 16240 0000C122 48FFC9                  	dec rcx
 16241 0000C125 4883F900                	cmp rcx, 0
 16242 0000C129 75E2                    	jne .L_tc_recycle_frame_loop_0351
 16243 0000C12B 4889F3                  	mov rbx, rsi
 16244 0000C12E 4883EB01                	sub rbx, 1
 16245 0000C132 488D1CDD00000000        	lea rbx, [rbx*8]
 16246 0000C13A 4801DD                  	add rbp, rbx
 16247 0000C13D 4889EC                  	mov rsp, rbp         ; fix stack pointers
 16248 0000C140 5D                      	pop rbp
 16249 0000C141 41FFE0                  	jmp r8
 16250 0000C144 C9                      	leave
 16251 0000C145 C21800                  	ret AND_KILL_FRAME(1)
 16252                                  .L_lambda_simple_end_0276:	; new closure is in rax
 16253 0000C148 803804                  	cmp byte [rax], T_closure
 16254 0000C14B 0F8558AF0000            	jne L_error_non_closure
 16255 0000C151 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16256 0000C154 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16257                                  
 16258 0000C157 4889C7                  	mov rdi, rax
 16259 0000C15A E848B20000              	call print_sexpr_if_not_void
 16260 0000C15F 48B8-                   	mov rax, L_constants + 0
 16260 0000C161 [0000000000000000] 
 16261 0000C169 48890425[C1120000]      	mov qword [free_var_74], rax
 16262 0000C171 48B8-                   	mov rax, sob_void
 16262 0000C173 [0000000000000000] 
 16263                                  
 16264 0000C17B 4889C7                  	mov rdi, rax
 16265 0000C17E E824B20000              	call print_sexpr_if_not_void
 16266 0000C183 48B8-                   	mov rax, L_constants + 0
 16266 0000C185 [0000000000000000] 
 16267 0000C18D 48890425[B0120000]      	mov qword [free_var_73], rax
 16268 0000C195 48B8-                   	mov rax, sob_void
 16268 0000C197 [0000000000000000] 
 16269                                  
 16270 0000C19F 4889C7                  	mov rdi, rax
 16271 0000C1A2 E800B20000              	call print_sexpr_if_not_void
 16272 0000C1A7 48B8-                   	mov rax, L_constants + 0
 16272 0000C1A9 [0000000000000000] 
 16273 0000C1B1 48890425[D2120000]      	mov qword [free_var_75], rax
 16274 0000C1B9 48B8-                   	mov rax, sob_void
 16274 0000C1BB [0000000000000000] 
 16275                                  
 16276 0000C1C3 4889C7                  	mov rdi, rax
 16277 0000C1C6 E8DCB10000              	call print_sexpr_if_not_void
 16278 0000C1CB 48B8-                   	mov rax, L_constants + 0
 16278 0000C1CD [0000000000000000] 
 16279 0000C1D5 48890425[F4120000]      	mov qword [free_var_77], rax
 16280 0000C1DD 48B8-                   	mov rax, sob_void
 16280 0000C1DF [0000000000000000] 
 16281                                  
 16282 0000C1E7 4889C7                  	mov rdi, rax
 16283 0000C1EA E8B8B10000              	call print_sexpr_if_not_void
 16284 0000C1EF 48B8-                   	mov rax, L_constants + 0
 16284 0000C1F1 [0000000000000000] 
 16285 0000C1F9 48890425[E3120000]      	mov qword [free_var_76], rax
 16286 0000C201 48B8-                   	mov rax, sob_void
 16286 0000C203 [0000000000000000] 
 16287                                  
 16288 0000C20B 4889C7                  	mov rdi, rax
 16289 0000C20E E894B10000              	call print_sexpr_if_not_void
 16290                                  	; preparing a non-tail-call
 16291 0000C213 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16292 0000C218 E835AF0000              	call malloc
 16293 0000C21D 50                      	push rax
 16294 0000C21E BF00000000              	mov rdi, 8 * 0	; new rib
 16295 0000C223 E82AAF0000              	call malloc
 16296 0000C228 50                      	push rax
 16297 0000C229 BF08000000              	mov rdi, 8 * 1	; extended env
 16298 0000C22E E81FAF0000              	call malloc
 16299 0000C233 488B7D10                	mov rdi, ENV
 16300 0000C237 BE00000000              	mov rsi, 0
 16301 0000C23C BA01000000              	mov rdx, 1
 16302                                  .L_lambda_simple_env_loop_0286:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 16303 0000C241 4883FE00                	cmp rsi, 0
 16304 0000C245 7410                    	je .L_lambda_simple_env_end_0286
 16305 0000C247 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16306 0000C24B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16307 0000C24F 48FFC6                  	inc rsi
 16308 0000C252 48FFC2                  	inc rdx
 16309 0000C255 EBEA                    	jmp .L_lambda_simple_env_loop_0286
 16310                                  .L_lambda_simple_env_end_0286:
 16311 0000C257 5B                      	pop rbx
 16312 0000C258 BE00000000              	mov rsi, 0
 16313                                  .L_lambda_simple_params_loop_0286:	; copy params
 16314 0000C25D 4883FE00                	cmp rsi, 0
 16315 0000C261 740E                    	je .L_lambda_simple_params_end_0286
 16316 0000C263 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16317 0000C268 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16318 0000C26C 48FFC6                  	inc rsi
 16319 0000C26F EBEC                    	jmp .L_lambda_simple_params_loop_0286
 16320                                  .L_lambda_simple_params_end_0286:
 16321 0000C271 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 16322 0000C274 4889C3                  	mov rbx, rax
 16323 0000C277 58                      	pop rax
 16324 0000C278 C60004                  	mov byte [rax], T_closure
 16325 0000C27B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16326 0000C27F 48C74009[8CC20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0286
 16327 0000C287 E937020000              	jmp .L_lambda_simple_end_0286
 16328                                  .L_lambda_simple_code_0286:	; lambda-simple body
 16329 0000C28C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16330 0000C292 740B                    	je .L_lambda_simple_arity_check_ok_0286
 16331 0000C294 FF742410                	push qword [rsp + 8 * 2]
 16332 0000C298 6A01                    	push 1
 16333 0000C29A E96CAE0000              	jmp L_error_incorrect_arity_simple
 16334                                  .L_lambda_simple_arity_check_ok_0286:
 16335 0000C29F C8000000                	enter 0, 0
 16336 0000C2A3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16337 0000C2A8 E8A5AE0000              	call malloc
 16338 0000C2AD 50                      	push rax
 16339 0000C2AE BF08000000              	mov rdi, 8 * 1	; new rib
 16340 0000C2B3 E89AAE0000              	call malloc
 16341 0000C2B8 50                      	push rax
 16342 0000C2B9 BF10000000              	mov rdi, 8 * 2	; extended env
 16343 0000C2BE E88FAE0000              	call malloc
 16344 0000C2C3 488B7D10                	mov rdi, ENV
 16345 0000C2C7 BE00000000              	mov rsi, 0
 16346 0000C2CC BA01000000              	mov rdx, 1
 16347                                  .L_lambda_opt_env_loop_0057:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 16348 0000C2D1 4883FE01                	cmp rsi, 1
 16349 0000C2D5 7410                    	je .L_lambda_opt_env_end_0057
 16350 0000C2D7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16351 0000C2DB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16352 0000C2DF 48FFC6                  	inc rsi
 16353 0000C2E2 48FFC2                  	inc rdx
 16354 0000C2E5 EBEA                    	jmp .L_lambda_opt_env_loop_0057
 16355                                  .L_lambda_opt_env_end_0057:
 16356 0000C2E7 5B                      	pop rbx
 16357 0000C2E8 BE00000000              	mov rsi, 0
 16358                                  .L_lambda_opt_params_loop_0057:	; copy params
 16359 0000C2ED 4883FE01                	cmp rsi, 1
 16360 0000C2F1 740E                    	je .L_lambda_opt_params_end_0057
 16361 0000C2F3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16362 0000C2F8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16363 0000C2FC 48FFC6                  	inc rsi
 16364 0000C2FF EBEC                    	jmp .L_lambda_opt_params_loop_0057
 16365                                  .L_lambda_opt_params_end_0057:
 16366 0000C301 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 16367 0000C304 4889C3                  	mov rbx, rax
 16368 0000C307 58                      	pop rax
 16369 0000C308 C60004                  	mov byte [rax], T_closure
 16370 0000C30B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16371 0000C30F 48C74009[1CC30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0057
 16372 0000C317 E9A3010000              	jmp .L_lambda_opt_end_0057
 16373                                  .L_lambda_opt_code_0057:	; lambda-opt body
 16374 0000C31C 48837C241000            	cmp qword [rsp + 8 * 2], 0
 16375 0000C322 740D                    	je .L_lambda_opt_arity_check_exact_0057
 16376 0000C324 7F48                    	jg .L_lambda_opt_arity_check_more_0057
 16377 0000C326 FF742410                	push qword [rsp + 8 * 2]
 16378 0000C32A 6A00                    	push 0
 16379 0000C32C E9EEAD0000              	jmp L_error_incorrect_arity_opt
 16380                                  .L_lambda_opt_arity_check_exact_0057:
 16381 0000C331 48C744241001000000      	mov qword [rsp + 8 * 2], 1	; Update argument count (fixed params + 1 for nil)
 16382 0000C33A 41BA03000000            	mov r10, 3	; r10 = total addresses to adjust (fixed params + 3)
 16383 0000C340 FF3424                  	push qword [rsp]	; Save the top stack element
 16384 0000C343 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
 16385                                  .L_lambda_opt_stack_shrink_loop_0103:
 16386 0000C349 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
 16387 0000C34C 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0103	; Exit loop if all elements processed
 16388 0000C34E 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
 16389 0000C353 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
 16390 0000C357 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
 16391 0000C35C 49FFC3                  	inc r11	; Increment loop index
 16392 0000C35F EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_0103	; Jump back to loop start
 16393                                  .L_lambda_opt_stack_shrink_loop_exit_0103:
 16394 0000C361 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
 16395 0000C369 E988000000              	jmp .L_lambda_opt_stack_adjusted_0057
 16396                                  .L_lambda_opt_arity_check_more_0057:
 16397 0000C36E 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
 16398 0000C373 4983E800                	sub r8, 0	; r8 = count of optional params
 16399 0000C377 48C744241001000000      	mov qword [rsp + 8 * 2], 1	; Update the number of params (fixed params + 1 for list opt)
 16400 0000C380 41B900000000            	mov r9, 0	; r9 = index of optional argument list
 16401 0000C386 4E8D54C410              	lea r10, [rsp + 2 * 8 + 0 * 8 + r8 * 8]	; r10 = address of first optional param
 16402 0000C38B 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
 16402 0000C38D [0100000000000000] 
 16403                                  .L_lambda_opt_stack_shrink_loop_0104:
 16404 0000C395 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
 16405 0000C398 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_0104	; Exit loop if all optional params are processed
 16406 0000C39A BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
 16407 0000C39F E8AEAD0000              	call malloc	; Allocate memory for a new pair
 16408 0000C3A4 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
 16409 0000C3A8 49F7D9                  	neg r9	; Negate index to access in reverse
 16410 0000C3AB 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
 16411 0000C3AF 49F7D9                  	neg r9	; Negate index back
 16412 0000C3B2 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
 16413 0000C3B6 C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
 16414 0000C3B9 4989C3                  	mov r11, rax	; Update current pair to the newly created one
 16415 0000C3BC 49FFC1                  	inc r9	; Increment the index
 16416 0000C3BF EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0104	; Repeat the loop for the next param
 16417                                  .L_lambda_opt_stack_shrink_loop_exit_0104:
 16418 0000C3C1 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
 16419 0000C3C4 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
 16420 0000C3C8 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
 16421 0000C3CB 4983C410                	add r12, 16	; Skip fixed params and return address
 16422 0000C3CF 41BD03000000            	mov r13, 3	; r13 = loop counter (number of params, old fp, ret addr, lex env)
 16423                                  .L_lambda_opt_stack_shrink_loop_0105:
 16424 0000C3D5 4983FD00                	cmp r13, 0	; Check if there are more values to copy
 16425 0000C3D9 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0105	; Exit loop if all values are copied
 16426 0000C3DB 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
 16427 0000C3DF 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
 16428 0000C3E2 49FFCD                  	dec r13	; Decrement the loop counter
 16429 0000C3E5 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
 16430 0000C3E9 4983EC08                	sub r12, 8	; Move the source pointer to the next location
 16431 0000C3ED EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0105	; Repeat the loop for the next value
 16432                                  .L_lambda_opt_stack_shrink_loop_exit_0105:
 16433 0000C3EF 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
 16434 0000C3F3 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
 16435                                  .L_lambda_opt_stack_adjusted_0057:
 16436 0000C3F6 C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
 16437                                  	; preparing a tail-call
 16438                                  	; preparing a non-tail-call
 16439 0000C3FA 488B4520                	mov rax, PARAM(0)	; param s
 16440 0000C3FE 50                      	push rax
 16441 0000C3FF 488B0425[28120000]      	mov rax, qword [free_var_65]	; free var char->integer
 16442 0000C407 803805                  	cmp byte [rax], T_undefined
 16443 0000C40A 0F8415AC0000            	je L_error_fvar_undefined
 16444 0000C410 50                      	push rax
 16445 0000C411 6A02                    	push 2	; arg count
 16446 0000C413 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
 16447 0000C41B 803805                  	cmp byte [rax], T_undefined
 16448 0000C41E 0F8401AC0000            	je L_error_fvar_undefined
 16449 0000C424 803804                  	cmp byte [rax], T_closure
 16450 0000C427 0F857CAC0000            	jne L_error_non_closure
 16451 0000C42D FF7001                  	push SOB_CLOSURE_ENV(rax)
 16452 0000C430 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16453 0000C433 50                      	push rax
 16454 0000C434 488B4510                	mov rax, ENV
 16455 0000C438 488B00                  	mov rax, qword [rax + 8 * 0]
 16456 0000C43B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 16457 0000C43E 50                      	push rax
 16458 0000C43F 6A02                    	push 2	; arg count
 16459 0000C441 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
 16460 0000C449 803805                  	cmp byte [rax], T_undefined
 16461 0000C44C 0F84D3AB0000            	je L_error_fvar_undefined
 16462 0000C452 803804                  	cmp byte [rax], T_closure
 16463 0000C455 0F854EAC0000            	jne L_error_non_closure
 16464 0000C45B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16465 0000C45E 4C8B4009                	mov r8, qword [rax + 1 + 8]
 16466 0000C462 FF7508                  	push qword [rbp + 8]				; push old return address
 16467 0000C465 FF7500                  	push qword [rbp]					; push old rbp
 16468                                  	;; move stack up ;;
 16469 0000C468 488B5D18                	mov rbx, [rbp + 3*8]
 16470 0000C46C 4889DE                  	mov rsi, rbx						; save old size in rsi
 16471 0000C46F 4883C303                	add rbx, 3
 16472 0000C473 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 16473 0000C47B B902000000              	mov rcx, 2
 16474 0000C480 4883C104                	add rcx, 4				; num of iterations in rcx
 16475                                  .L_tc_recycle_frame_loop_036b:
 16476 0000C484 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 16477 0000C48C 488B143C                	mov rdx, [rsp + rdi]
 16478 0000C490 4889541D00              	mov [rbp + rbx], rdx
 16479 0000C495 4883EB08                	sub rbx, 8
 16480 0000C499 48FFC9                  	dec rcx
 16481 0000C49C 4883F900                	cmp rcx, 0
 16482 0000C4A0 75E2                    	jne .L_tc_recycle_frame_loop_036b
 16483 0000C4A2 4889F3                  	mov rbx, rsi
 16484 0000C4A5 4883EB02                	sub rbx, 2
 16485 0000C4A9 488D1CDD00000000        	lea rbx, [rbx*8]
 16486 0000C4B1 4801DD                  	add rbp, rbx
 16487 0000C4B4 4889EC                  	mov rsp, rbp         ; fix stack pointers
 16488 0000C4B7 5D                      	pop rbp
 16489 0000C4B8 41FFE0                  	jmp r8
 16490 0000C4BB C9                      	leave	; Restore the previous stack frame
 16491 0000C4BC C21800                  	ret AND_KILL_FRAME(1)
 16492                                  .L_lambda_opt_end_0057:	; new closure is in rax
 16493 0000C4BF C9                      	leave
 16494 0000C4C0 C21800                  	ret AND_KILL_FRAME(1)
 16495                                  .L_lambda_simple_end_0286:	; new closure is in rax
 16496 0000C4C3 50                      	push rax
 16497 0000C4C4 6A01                    	push 1	; arg count
 16498 0000C4C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16499 0000C4CB E882AC0000              	call malloc
 16500 0000C4D0 50                      	push rax
 16501 0000C4D1 BF00000000              	mov rdi, 8 * 0	; new rib
 16502 0000C4D6 E877AC0000              	call malloc
 16503 0000C4DB 50                      	push rax
 16504 0000C4DC BF08000000              	mov rdi, 8 * 1	; extended env
 16505 0000C4E1 E86CAC0000              	call malloc
 16506 0000C4E6 488B7D10                	mov rdi, ENV
 16507 0000C4EA BE00000000              	mov rsi, 0
 16508 0000C4EF BA01000000              	mov rdx, 1
 16509                                  .L_lambda_simple_env_loop_0287:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 16510 0000C4F4 4883FE00                	cmp rsi, 0
 16511 0000C4F8 7410                    	je .L_lambda_simple_env_end_0287
 16512 0000C4FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16513 0000C4FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16514 0000C502 48FFC6                  	inc rsi
 16515 0000C505 48FFC2                  	inc rdx
 16516 0000C508 EBEA                    	jmp .L_lambda_simple_env_loop_0287
 16517                                  .L_lambda_simple_env_end_0287:
 16518 0000C50A 5B                      	pop rbx
 16519 0000C50B BE00000000              	mov rsi, 0
 16520                                  .L_lambda_simple_params_loop_0287:	; copy params
 16521 0000C510 4883FE00                	cmp rsi, 0
 16522 0000C514 740E                    	je .L_lambda_simple_params_end_0287
 16523 0000C516 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16524 0000C51B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16525 0000C51F 48FFC6                  	inc rsi
 16526 0000C522 EBEC                    	jmp .L_lambda_simple_params_loop_0287
 16527                                  .L_lambda_simple_params_end_0287:
 16528 0000C524 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 16529 0000C527 4889C3                  	mov rbx, rax
 16530 0000C52A 58                      	pop rax
 16531 0000C52B C60004                  	mov byte [rax], T_closure
 16532 0000C52E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16533 0000C532 48C74009[3FC50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0287
 16534 0000C53A E938010000              	jmp .L_lambda_simple_end_0287
 16535                                  .L_lambda_simple_code_0287:	; lambda-simple body
 16536 0000C53F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16537 0000C545 740B                    	je .L_lambda_simple_arity_check_ok_0287
 16538 0000C547 FF742410                	push qword [rsp + 8 * 2]
 16539 0000C54B 6A01                    	push 1
 16540 0000C54D E9B9AB0000              	jmp L_error_incorrect_arity_simple
 16541                                  .L_lambda_simple_arity_check_ok_0287:
 16542 0000C552 C8000000                	enter 0, 0
 16543                                  	; preparing a non-tail-call
 16544 0000C556 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 16545 0000C55E 803805                  	cmp byte [rax], T_undefined
 16546 0000C561 0F84BEAA0000            	je L_error_fvar_undefined
 16547 0000C567 50                      	push rax
 16548 0000C568 6A01                    	push 1	; arg count
 16549 0000C56A 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16550 0000C56E 803804                  	cmp byte [rax], T_closure
 16551 0000C571 0F8532AB0000            	jne L_error_non_closure
 16552 0000C577 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16553 0000C57A FF5009                  	call SOB_CLOSURE_CODE(rax)
 16554 0000C57D 48890425[C1120000]      	mov qword [free_var_74], rax
 16555 0000C585 48B8-                   	mov rax, sob_void
 16555 0000C587 [0000000000000000] 
 16556                                  
 16557                                  	; preparing a non-tail-call
 16558 0000C58F 488B0425[2C0E0000]      	mov rax, qword [free_var_5]	; free var <=
 16559 0000C597 803805                  	cmp byte [rax], T_undefined
 16560 0000C59A 0F8485AA0000            	je L_error_fvar_undefined
 16561 0000C5A0 50                      	push rax
 16562 0000C5A1 6A01                    	push 1	; arg count
 16563 0000C5A3 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16564 0000C5A7 803804                  	cmp byte [rax], T_closure
 16565 0000C5AA 0F85F9AA0000            	jne L_error_non_closure
 16566 0000C5B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16567 0000C5B3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16568 0000C5B6 48890425[B0120000]      	mov qword [free_var_73], rax
 16569 0000C5BE 48B8-                   	mov rax, sob_void
 16569 0000C5C0 [0000000000000000] 
 16570                                  
 16571                                  	; preparing a non-tail-call
 16572 0000C5C8 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 16573 0000C5D0 803805                  	cmp byte [rax], T_undefined
 16574 0000C5D3 0F844CAA0000            	je L_error_fvar_undefined
 16575 0000C5D9 50                      	push rax
 16576 0000C5DA 6A01                    	push 1	; arg count
 16577 0000C5DC 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16578 0000C5E0 803804                  	cmp byte [rax], T_closure
 16579 0000C5E3 0F85C0AA0000            	jne L_error_non_closure
 16580 0000C5E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16581 0000C5EC FF5009                  	call SOB_CLOSURE_CODE(rax)
 16582 0000C5EF 48890425[D2120000]      	mov qword [free_var_75], rax
 16583 0000C5F7 48B8-                   	mov rax, sob_void
 16583 0000C5F9 [0000000000000000] 
 16584                                  
 16585                                  	; preparing a non-tail-call
 16586 0000C601 488B0425[4E0E0000]      	mov rax, qword [free_var_7]	; free var >
 16587 0000C609 803805                  	cmp byte [rax], T_undefined
 16588 0000C60C 0F8413AA0000            	je L_error_fvar_undefined
 16589 0000C612 50                      	push rax
 16590 0000C613 6A01                    	push 1	; arg count
 16591 0000C615 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16592 0000C619 803804                  	cmp byte [rax], T_closure
 16593 0000C61C 0F8587AA0000            	jne L_error_non_closure
 16594 0000C622 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16595 0000C625 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16596 0000C628 48890425[F4120000]      	mov qword [free_var_77], rax
 16597 0000C630 48B8-                   	mov rax, sob_void
 16597 0000C632 [0000000000000000] 
 16598                                  
 16599                                  	; preparing a non-tail-call
 16600 0000C63A 488B0425[5F0E0000]      	mov rax, qword [free_var_8]	; free var >=
 16601 0000C642 803805                  	cmp byte [rax], T_undefined
 16602 0000C645 0F84DAA90000            	je L_error_fvar_undefined
 16603 0000C64B 50                      	push rax
 16604 0000C64C 6A01                    	push 1	; arg count
 16605 0000C64E 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16606 0000C652 803804                  	cmp byte [rax], T_closure
 16607 0000C655 0F854EAA0000            	jne L_error_non_closure
 16608 0000C65B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16609 0000C65E FF5009                  	call SOB_CLOSURE_CODE(rax)
 16610 0000C661 48890425[E3120000]      	mov qword [free_var_76], rax
 16611 0000C669 48B8-                   	mov rax, sob_void
 16611 0000C66B [0000000000000000] 
 16612 0000C673 C9                      	leave
 16613 0000C674 C21800                  	ret AND_KILL_FRAME(1)
 16614                                  .L_lambda_simple_end_0287:	; new closure is in rax
 16615 0000C677 803804                  	cmp byte [rax], T_closure
 16616 0000C67A 0F8529AA0000            	jne L_error_non_closure
 16617 0000C680 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16618 0000C683 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16619                                  
 16620 0000C686 4889C7                  	mov rdi, rax
 16621 0000C689 E819AD0000              	call print_sexpr_if_not_void
 16622 0000C68E 48B8-                   	mov rax, L_constants + 0
 16622 0000C690 [0000000000000000] 
 16623 0000C698 48890425[8E120000]      	mov qword [free_var_71], rax
 16624 0000C6A0 48B8-                   	mov rax, sob_void
 16624 0000C6A2 [0000000000000000] 
 16625                                  
 16626 0000C6AA 4889C7                  	mov rdi, rax
 16627 0000C6AD E8F5AC0000              	call print_sexpr_if_not_void
 16628 0000C6B2 48B8-                   	mov rax, L_constants + 0
 16628 0000C6B4 [0000000000000000] 
 16629 0000C6BC 48890425[9F120000]      	mov qword [free_var_72], rax
 16630 0000C6C4 48B8-                   	mov rax, sob_void
 16630 0000C6C6 [0000000000000000] 
 16631                                  
 16632 0000C6CE 4889C7                  	mov rdi, rax
 16633 0000C6D1 E8D1AC0000              	call print_sexpr_if_not_void
 16634                                  	; preparing a non-tail-call
 16635                                  	; preparing a non-tail-call
 16636                                  	; preparing a non-tail-call
 16637 0000C6D6 48B8-                   	mov rax, L_constants + 2569
 16637 0000C6D8 [090A000000000000] 
 16638 0000C6E0 50                      	push rax
 16639 0000C6E1 6A01                    	push 1	; arg count
 16640 0000C6E3 488B0425[28120000]      	mov rax, qword [free_var_65]	; free var char->integer
 16641 0000C6EB 803805                  	cmp byte [rax], T_undefined
 16642 0000C6EE 0F8431A90000            	je L_error_fvar_undefined
 16643 0000C6F4 803804                  	cmp byte [rax], T_closure
 16644 0000C6F7 0F85ACA90000            	jne L_error_non_closure
 16645 0000C6FD FF7001                  	push SOB_CLOSURE_ENV(rax)
 16646 0000C700 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16647 0000C703 50                      	push rax
 16648                                  	; preparing a non-tail-call
 16649 0000C704 48B8-                   	mov rax, L_constants + 2573
 16649 0000C706 [0D0A000000000000] 
 16650 0000C70E 50                      	push rax
 16651 0000C70F 6A01                    	push 1	; arg count
 16652 0000C711 488B0425[28120000]      	mov rax, qword [free_var_65]	; free var char->integer
 16653 0000C719 803805                  	cmp byte [rax], T_undefined
 16654 0000C71C 0F8403A90000            	je L_error_fvar_undefined
 16655 0000C722 803804                  	cmp byte [rax], T_closure
 16656 0000C725 0F857EA90000            	jne L_error_non_closure
 16657 0000C72B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16658 0000C72E FF5009                  	call SOB_CLOSURE_CODE(rax)
 16659 0000C731 50                      	push rax
 16660 0000C732 6A02                    	push 2	; arg count
 16661 0000C734 488B0425[F90D0000]      	mov rax, qword [free_var_2]	; free var -
 16662 0000C73C 803805                  	cmp byte [rax], T_undefined
 16663 0000C73F 0F84E0A80000            	je L_error_fvar_undefined
 16664 0000C745 803804                  	cmp byte [rax], T_closure
 16665 0000C748 0F855BA90000            	jne L_error_non_closure
 16666 0000C74E FF7001                  	push SOB_CLOSURE_ENV(rax)
 16667 0000C751 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16668 0000C754 50                      	push rax
 16669 0000C755 6A01                    	push 1	; arg count
 16670 0000C757 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16671 0000C75C E8F1A90000              	call malloc
 16672 0000C761 50                      	push rax
 16673 0000C762 BF00000000              	mov rdi, 8 * 0	; new rib
 16674 0000C767 E8E6A90000              	call malloc
 16675 0000C76C 50                      	push rax
 16676 0000C76D BF08000000              	mov rdi, 8 * 1	; extended env
 16677 0000C772 E8DBA90000              	call malloc
 16678 0000C777 488B7D10                	mov rdi, ENV
 16679 0000C77B BE00000000              	mov rsi, 0
 16680 0000C780 BA01000000              	mov rdx, 1
 16681                                  .L_lambda_simple_env_loop_0288:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 16682 0000C785 4883FE00                	cmp rsi, 0
 16683 0000C789 7410                    	je .L_lambda_simple_env_end_0288
 16684 0000C78B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16685 0000C78F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16686 0000C793 48FFC6                  	inc rsi
 16687 0000C796 48FFC2                  	inc rdx
 16688 0000C799 EBEA                    	jmp .L_lambda_simple_env_loop_0288
 16689                                  .L_lambda_simple_env_end_0288:
 16690 0000C79B 5B                      	pop rbx
 16691 0000C79C BE00000000              	mov rsi, 0
 16692                                  .L_lambda_simple_params_loop_0288:	; copy params
 16693 0000C7A1 4883FE00                	cmp rsi, 0
 16694 0000C7A5 740E                    	je .L_lambda_simple_params_end_0288
 16695 0000C7A7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16696 0000C7AC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16697 0000C7B0 48FFC6                  	inc rsi
 16698 0000C7B3 EBEC                    	jmp .L_lambda_simple_params_loop_0288
 16699                                  .L_lambda_simple_params_end_0288:
 16700 0000C7B5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 16701 0000C7B8 4889C3                  	mov rbx, rax
 16702 0000C7BB 58                      	pop rax
 16703 0000C7BC C60004                  	mov byte [rax], T_closure
 16704 0000C7BF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16705 0000C7C3 48C74009[D0C70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0288
 16706 0000C7CB E9A9030000              	jmp .L_lambda_simple_end_0288
 16707                                  .L_lambda_simple_code_0288:	; lambda-simple body
 16708 0000C7D0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16709 0000C7D6 740B                    	je .L_lambda_simple_arity_check_ok_0288
 16710 0000C7D8 FF742410                	push qword [rsp + 8 * 2]
 16711 0000C7DC 6A01                    	push 1
 16712 0000C7DE E928A90000              	jmp L_error_incorrect_arity_simple
 16713                                  .L_lambda_simple_arity_check_ok_0288:
 16714 0000C7E3 C8000000                	enter 0, 0
 16715 0000C7E7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16716 0000C7EC E861A90000              	call malloc
 16717 0000C7F1 50                      	push rax
 16718 0000C7F2 BF08000000              	mov rdi, 8 * 1	; new rib
 16719 0000C7F7 E856A90000              	call malloc
 16720 0000C7FC 50                      	push rax
 16721 0000C7FD BF10000000              	mov rdi, 8 * 2	; extended env
 16722 0000C802 E84BA90000              	call malloc
 16723 0000C807 488B7D10                	mov rdi, ENV
 16724 0000C80B BE00000000              	mov rsi, 0
 16725 0000C810 BA01000000              	mov rdx, 1
 16726                                  .L_lambda_simple_env_loop_0289:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 16727 0000C815 4883FE01                	cmp rsi, 1
 16728 0000C819 7410                    	je .L_lambda_simple_env_end_0289
 16729 0000C81B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16730 0000C81F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16731 0000C823 48FFC6                  	inc rsi
 16732 0000C826 48FFC2                  	inc rdx
 16733 0000C829 EBEA                    	jmp .L_lambda_simple_env_loop_0289
 16734                                  .L_lambda_simple_env_end_0289:
 16735 0000C82B 5B                      	pop rbx
 16736 0000C82C BE00000000              	mov rsi, 0
 16737                                  .L_lambda_simple_params_loop_0289:	; copy params
 16738 0000C831 4883FE01                	cmp rsi, 1
 16739 0000C835 740E                    	je .L_lambda_simple_params_end_0289
 16740 0000C837 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16741 0000C83C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16742 0000C840 48FFC6                  	inc rsi
 16743 0000C843 EBEC                    	jmp .L_lambda_simple_params_loop_0289
 16744                                  .L_lambda_simple_params_end_0289:
 16745 0000C845 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 16746 0000C848 4889C3                  	mov rbx, rax
 16747 0000C84B 58                      	pop rax
 16748 0000C84C C60004                  	mov byte [rax], T_closure
 16749 0000C84F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16750 0000C853 48C74009[60C80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0289
 16751 0000C85B E93C010000              	jmp .L_lambda_simple_end_0289
 16752                                  .L_lambda_simple_code_0289:	; lambda-simple body
 16753 0000C860 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16754 0000C866 740B                    	je .L_lambda_simple_arity_check_ok_0289
 16755 0000C868 FF742410                	push qword [rsp + 8 * 2]
 16756 0000C86C 6A01                    	push 1
 16757 0000C86E E998A80000              	jmp L_error_incorrect_arity_simple
 16758                                  .L_lambda_simple_arity_check_ok_0289:
 16759 0000C873 C8000000                	enter 0, 0
 16760                                  	; preparing a non-tail-call
 16761 0000C877 48B8-                   	mov rax, L_constants + 2571
 16761 0000C879 [0B0A000000000000] 
 16762 0000C881 50                      	push rax
 16763 0000C882 488B4520                	mov rax, PARAM(0)	; param ch
 16764 0000C886 50                      	push rax
 16765 0000C887 48B8-                   	mov rax, L_constants + 2569
 16765 0000C889 [090A000000000000] 
 16766 0000C891 50                      	push rax
 16767 0000C892 6A03                    	push 3	; arg count
 16768 0000C894 488B0425[B0120000]      	mov rax, qword [free_var_73]	; free var char<=?
 16769 0000C89C 803805                  	cmp byte [rax], T_undefined
 16770 0000C89F 0F8480A70000            	je L_error_fvar_undefined
 16771 0000C8A5 803804                  	cmp byte [rax], T_closure
 16772 0000C8A8 0F85FBA70000            	jne L_error_non_closure
 16773 0000C8AE FF7001                  	push SOB_CLOSURE_ENV(rax)
 16774 0000C8B1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16775 0000C8B4 483D[02000000]          	cmp rax, sob_boolean_false
 16776 0000C8BA 0F84D4000000            	je .L_if_else_01e9
 16777                                  	; preparing a tail-call
 16778                                  	; preparing a non-tail-call
 16779 0000C8C0 488B4510                	mov rax, ENV
 16780 0000C8C4 488B00                  	mov rax, qword [rax + 8 * 0]
 16781 0000C8C7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 16782 0000C8CA 50                      	push rax
 16783                                  	; preparing a non-tail-call
 16784 0000C8CB 488B4520                	mov rax, PARAM(0)	; param ch
 16785 0000C8CF 50                      	push rax
 16786 0000C8D0 6A01                    	push 1	; arg count
 16787 0000C8D2 488B0425[28120000]      	mov rax, qword [free_var_65]	; free var char->integer
 16788 0000C8DA 803805                  	cmp byte [rax], T_undefined
 16789 0000C8DD 0F8442A70000            	je L_error_fvar_undefined
 16790 0000C8E3 803804                  	cmp byte [rax], T_closure
 16791 0000C8E6 0F85BDA70000            	jne L_error_non_closure
 16792 0000C8EC FF7001                  	push SOB_CLOSURE_ENV(rax)
 16793 0000C8EF FF5009                  	call SOB_CLOSURE_CODE(rax)
 16794 0000C8F2 50                      	push rax
 16795 0000C8F3 6A02                    	push 2	; arg count
 16796 0000C8F5 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 16797 0000C8FD 803805                  	cmp byte [rax], T_undefined
 16798 0000C900 0F841FA70000            	je L_error_fvar_undefined
 16799 0000C906 803804                  	cmp byte [rax], T_closure
 16800 0000C909 0F859AA70000            	jne L_error_non_closure
 16801 0000C90F FF7001                  	push SOB_CLOSURE_ENV(rax)
 16802 0000C912 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16803 0000C915 50                      	push rax
 16804 0000C916 6A01                    	push 1	; arg count
 16805 0000C918 488B0425[C0130000]      	mov rax, qword [free_var_89]	; free var integer->char
 16806 0000C920 803805                  	cmp byte [rax], T_undefined
 16807 0000C923 0F84FCA60000            	je L_error_fvar_undefined
 16808 0000C929 803804                  	cmp byte [rax], T_closure
 16809 0000C92C 0F8577A70000            	jne L_error_non_closure
 16810 0000C932 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16811 0000C935 4C8B4009                	mov r8, qword [rax + 1 + 8]
 16812 0000C939 FF7508                  	push qword [rbp + 8]				; push old return address
 16813 0000C93C FF7500                  	push qword [rbp]					; push old rbp
 16814                                  	;; move stack up ;;
 16815 0000C93F 488B5D18                	mov rbx, [rbp + 3*8]
 16816 0000C943 4889DE                  	mov rsi, rbx						; save old size in rsi
 16817 0000C946 4883C303                	add rbx, 3
 16818 0000C94A 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 16819 0000C952 B901000000              	mov rcx, 1
 16820 0000C957 4883C104                	add rcx, 4				; num of iterations in rcx
 16821                                  .L_tc_recycle_frame_loop_036c:
 16822 0000C95B 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 16823 0000C963 488B143C                	mov rdx, [rsp + rdi]
 16824 0000C967 4889541D00              	mov [rbp + rbx], rdx
 16825 0000C96C 4883EB08                	sub rbx, 8
 16826 0000C970 48FFC9                  	dec rcx
 16827 0000C973 4883F900                	cmp rcx, 0
 16828 0000C977 75E2                    	jne .L_tc_recycle_frame_loop_036c
 16829 0000C979 4889F3                  	mov rbx, rsi
 16830 0000C97C 4883EB01                	sub rbx, 1
 16831 0000C980 488D1CDD00000000        	lea rbx, [rbx*8]
 16832 0000C988 4801DD                  	add rbp, rbx
 16833 0000C98B 4889EC                  	mov rsp, rbp         ; fix stack pointers
 16834 0000C98E 5D                      	pop rbp
 16835 0000C98F 41FFE0                  	jmp r8
 16836 0000C992 EB04                    	jmp .L_if_end_01e9
 16837                                  .L_if_else_01e9:
 16838 0000C994 488B4520                	mov rax, PARAM(0)	; param ch
 16839                                  .L_if_end_01e9:
 16840 0000C998 C9                      	leave
 16841 0000C999 C21800                  	ret AND_KILL_FRAME(1)
 16842                                  .L_lambda_simple_end_0289:	; new closure is in rax
 16843 0000C99C 48890425[8E120000]      	mov qword [free_var_71], rax
 16844 0000C9A4 48B8-                   	mov rax, sob_void
 16844 0000C9A6 [0000000000000000] 
 16845                                  
 16846 0000C9AE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16847 0000C9B3 E89AA70000              	call malloc
 16848 0000C9B8 50                      	push rax
 16849 0000C9B9 BF08000000              	mov rdi, 8 * 1	; new rib
 16850 0000C9BE E88FA70000              	call malloc
 16851 0000C9C3 50                      	push rax
 16852 0000C9C4 BF10000000              	mov rdi, 8 * 2	; extended env
 16853 0000C9C9 E884A70000              	call malloc
 16854 0000C9CE 488B7D10                	mov rdi, ENV
 16855 0000C9D2 BE00000000              	mov rsi, 0
 16856 0000C9D7 BA01000000              	mov rdx, 1
 16857                                  .L_lambda_simple_env_loop_028a:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 16858 0000C9DC 4883FE01                	cmp rsi, 1
 16859 0000C9E0 7410                    	je .L_lambda_simple_env_end_028a
 16860 0000C9E2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16861 0000C9E6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16862 0000C9EA 48FFC6                  	inc rsi
 16863 0000C9ED 48FFC2                  	inc rdx
 16864 0000C9F0 EBEA                    	jmp .L_lambda_simple_env_loop_028a
 16865                                  .L_lambda_simple_env_end_028a:
 16866 0000C9F2 5B                      	pop rbx
 16867 0000C9F3 BE00000000              	mov rsi, 0
 16868                                  .L_lambda_simple_params_loop_028a:	; copy params
 16869 0000C9F8 4883FE01                	cmp rsi, 1
 16870 0000C9FC 740E                    	je .L_lambda_simple_params_end_028a
 16871 0000C9FE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16872 0000CA03 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16873 0000CA07 48FFC6                  	inc rsi
 16874 0000CA0A EBEC                    	jmp .L_lambda_simple_params_loop_028a
 16875                                  .L_lambda_simple_params_end_028a:
 16876 0000CA0C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 16877 0000CA0F 4889C3                  	mov rbx, rax
 16878 0000CA12 58                      	pop rax
 16879 0000CA13 C60004                  	mov byte [rax], T_closure
 16880 0000CA16 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16881 0000CA1A 48C74009[27CA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_028a
 16882 0000CA22 E93C010000              	jmp .L_lambda_simple_end_028a
 16883                                  .L_lambda_simple_code_028a:	; lambda-simple body
 16884 0000CA27 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16885 0000CA2D 740B                    	je .L_lambda_simple_arity_check_ok_028a
 16886 0000CA2F FF742410                	push qword [rsp + 8 * 2]
 16887 0000CA33 6A01                    	push 1
 16888 0000CA35 E9D1A60000              	jmp L_error_incorrect_arity_simple
 16889                                  .L_lambda_simple_arity_check_ok_028a:
 16890 0000CA3A C8000000                	enter 0, 0
 16891                                  	; preparing a non-tail-call
 16892 0000CA3E 48B8-                   	mov rax, L_constants + 2575
 16892 0000CA40 [0F0A000000000000] 
 16893 0000CA48 50                      	push rax
 16894 0000CA49 488B4520                	mov rax, PARAM(0)	; param ch
 16895 0000CA4D 50                      	push rax
 16896 0000CA4E 48B8-                   	mov rax, L_constants + 2573
 16896 0000CA50 [0D0A000000000000] 
 16897 0000CA58 50                      	push rax
 16898 0000CA59 6A03                    	push 3	; arg count
 16899 0000CA5B 488B0425[B0120000]      	mov rax, qword [free_var_73]	; free var char<=?
 16900 0000CA63 803805                  	cmp byte [rax], T_undefined
 16901 0000CA66 0F84B9A50000            	je L_error_fvar_undefined
 16902 0000CA6C 803804                  	cmp byte [rax], T_closure
 16903 0000CA6F 0F8534A60000            	jne L_error_non_closure
 16904 0000CA75 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16905 0000CA78 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16906 0000CA7B 483D[02000000]          	cmp rax, sob_boolean_false
 16907 0000CA81 0F84D4000000            	je .L_if_else_01ea
 16908                                  	; preparing a tail-call
 16909                                  	; preparing a non-tail-call
 16910 0000CA87 488B4510                	mov rax, ENV
 16911 0000CA8B 488B00                  	mov rax, qword [rax + 8 * 0]
 16912 0000CA8E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 16913 0000CA91 50                      	push rax
 16914                                  	; preparing a non-tail-call
 16915 0000CA92 488B4520                	mov rax, PARAM(0)	; param ch
 16916 0000CA96 50                      	push rax
 16917 0000CA97 6A01                    	push 1	; arg count
 16918 0000CA99 488B0425[28120000]      	mov rax, qword [free_var_65]	; free var char->integer
 16919 0000CAA1 803805                  	cmp byte [rax], T_undefined
 16920 0000CAA4 0F847BA50000            	je L_error_fvar_undefined
 16921 0000CAAA 803804                  	cmp byte [rax], T_closure
 16922 0000CAAD 0F85F6A50000            	jne L_error_non_closure
 16923 0000CAB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16924 0000CAB6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16925 0000CAB9 50                      	push rax
 16926 0000CABA 6A02                    	push 2	; arg count
 16927 0000CABC 488B0425[F90D0000]      	mov rax, qword [free_var_2]	; free var -
 16928 0000CAC4 803805                  	cmp byte [rax], T_undefined
 16929 0000CAC7 0F8458A50000            	je L_error_fvar_undefined
 16930 0000CACD 803804                  	cmp byte [rax], T_closure
 16931 0000CAD0 0F85D3A50000            	jne L_error_non_closure
 16932 0000CAD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16933 0000CAD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16934 0000CADC 50                      	push rax
 16935 0000CADD 6A01                    	push 1	; arg count
 16936 0000CADF 488B0425[C0130000]      	mov rax, qword [free_var_89]	; free var integer->char
 16937 0000CAE7 803805                  	cmp byte [rax], T_undefined
 16938 0000CAEA 0F8435A50000            	je L_error_fvar_undefined
 16939 0000CAF0 803804                  	cmp byte [rax], T_closure
 16940 0000CAF3 0F85B0A50000            	jne L_error_non_closure
 16941 0000CAF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16942 0000CAFC 4C8B4009                	mov r8, qword [rax + 1 + 8]
 16943 0000CB00 FF7508                  	push qword [rbp + 8]				; push old return address
 16944 0000CB03 FF7500                  	push qword [rbp]					; push old rbp
 16945                                  	;; move stack up ;;
 16946 0000CB06 488B5D18                	mov rbx, [rbp + 3*8]
 16947 0000CB0A 4889DE                  	mov rsi, rbx						; save old size in rsi
 16948 0000CB0D 4883C303                	add rbx, 3
 16949 0000CB11 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 16950 0000CB19 B901000000              	mov rcx, 1
 16951 0000CB1E 4883C104                	add rcx, 4				; num of iterations in rcx
 16952                                  .L_tc_recycle_frame_loop_036d:
 16953 0000CB22 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 16954 0000CB2A 488B143C                	mov rdx, [rsp + rdi]
 16955 0000CB2E 4889541D00              	mov [rbp + rbx], rdx
 16956 0000CB33 4883EB08                	sub rbx, 8
 16957 0000CB37 48FFC9                  	dec rcx
 16958 0000CB3A 4883F900                	cmp rcx, 0
 16959 0000CB3E 75E2                    	jne .L_tc_recycle_frame_loop_036d
 16960 0000CB40 4889F3                  	mov rbx, rsi
 16961 0000CB43 4883EB01                	sub rbx, 1
 16962 0000CB47 488D1CDD00000000        	lea rbx, [rbx*8]
 16963 0000CB4F 4801DD                  	add rbp, rbx
 16964 0000CB52 4889EC                  	mov rsp, rbp         ; fix stack pointers
 16965 0000CB55 5D                      	pop rbp
 16966 0000CB56 41FFE0                  	jmp r8
 16967 0000CB59 EB04                    	jmp .L_if_end_01ea
 16968                                  .L_if_else_01ea:
 16969 0000CB5B 488B4520                	mov rax, PARAM(0)	; param ch
 16970                                  .L_if_end_01ea:
 16971 0000CB5F C9                      	leave
 16972 0000CB60 C21800                  	ret AND_KILL_FRAME(1)
 16973                                  .L_lambda_simple_end_028a:	; new closure is in rax
 16974 0000CB63 48890425[9F120000]      	mov qword [free_var_72], rax
 16975 0000CB6B 48B8-                   	mov rax, sob_void
 16975 0000CB6D [0000000000000000] 
 16976 0000CB75 C9                      	leave
 16977 0000CB76 C21800                  	ret AND_KILL_FRAME(1)
 16978                                  .L_lambda_simple_end_0288:	; new closure is in rax
 16979 0000CB79 803804                  	cmp byte [rax], T_closure
 16980 0000CB7C 0F8527A50000            	jne L_error_non_closure
 16981 0000CB82 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16982 0000CB85 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16983                                  
 16984 0000CB88 4889C7                  	mov rdi, rax
 16985 0000CB8B E817A80000              	call print_sexpr_if_not_void
 16986 0000CB90 48B8-                   	mov rax, L_constants + 0
 16986 0000CB92 [0000000000000000] 
 16987 0000CB9A 48890425[4A120000]      	mov qword [free_var_67], rax
 16988 0000CBA2 48B8-                   	mov rax, sob_void
 16988 0000CBA4 [0000000000000000] 
 16989                                  
 16990 0000CBAC 4889C7                  	mov rdi, rax
 16991 0000CBAF E8F3A70000              	call print_sexpr_if_not_void
 16992 0000CBB4 48B8-                   	mov rax, L_constants + 0
 16992 0000CBB6 [0000000000000000] 
 16993 0000CBBE 48890425[39120000]      	mov qword [free_var_66], rax
 16994 0000CBC6 48B8-                   	mov rax, sob_void
 16994 0000CBC8 [0000000000000000] 
 16995                                  
 16996 0000CBD0 4889C7                  	mov rdi, rax
 16997 0000CBD3 E8CFA70000              	call print_sexpr_if_not_void
 16998 0000CBD8 48B8-                   	mov rax, L_constants + 0
 16998 0000CBDA [0000000000000000] 
 16999 0000CBE2 48890425[5B120000]      	mov qword [free_var_68], rax
 17000 0000CBEA 48B8-                   	mov rax, sob_void
 17000 0000CBEC [0000000000000000] 
 17001                                  
 17002 0000CBF4 4889C7                  	mov rdi, rax
 17003 0000CBF7 E8ABA70000              	call print_sexpr_if_not_void
 17004 0000CBFC 48B8-                   	mov rax, L_constants + 0
 17004 0000CBFE [0000000000000000] 
 17005 0000CC06 48890425[7D120000]      	mov qword [free_var_70], rax
 17006 0000CC0E 48B8-                   	mov rax, sob_void
 17006 0000CC10 [0000000000000000] 
 17007                                  
 17008 0000CC18 4889C7                  	mov rdi, rax
 17009 0000CC1B E887A70000              	call print_sexpr_if_not_void
 17010 0000CC20 48B8-                   	mov rax, L_constants + 0
 17010 0000CC22 [0000000000000000] 
 17011 0000CC2A 48890425[6C120000]      	mov qword [free_var_69], rax
 17012 0000CC32 48B8-                   	mov rax, sob_void
 17012 0000CC34 [0000000000000000] 
 17013                                  
 17014 0000CC3C 4889C7                  	mov rdi, rax
 17015 0000CC3F E863A70000              	call print_sexpr_if_not_void
 17016                                  	; preparing a non-tail-call
 17017 0000CC44 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17018 0000CC49 E804A50000              	call malloc
 17019 0000CC4E 50                      	push rax
 17020 0000CC4F BF00000000              	mov rdi, 8 * 0	; new rib
 17021 0000CC54 E8F9A40000              	call malloc
 17022 0000CC59 50                      	push rax
 17023 0000CC5A BF08000000              	mov rdi, 8 * 1	; extended env
 17024 0000CC5F E8EEA40000              	call malloc
 17025 0000CC64 488B7D10                	mov rdi, ENV
 17026 0000CC68 BE00000000              	mov rsi, 0
 17027 0000CC6D BA01000000              	mov rdx, 1
 17028                                  .L_lambda_simple_env_loop_028b:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 17029 0000CC72 4883FE00                	cmp rsi, 0
 17030 0000CC76 7410                    	je .L_lambda_simple_env_end_028b
 17031 0000CC78 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17032 0000CC7C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17033 0000CC80 48FFC6                  	inc rsi
 17034 0000CC83 48FFC2                  	inc rdx
 17035 0000CC86 EBEA                    	jmp .L_lambda_simple_env_loop_028b
 17036                                  .L_lambda_simple_env_end_028b:
 17037 0000CC88 5B                      	pop rbx
 17038 0000CC89 BE00000000              	mov rsi, 0
 17039                                  .L_lambda_simple_params_loop_028b:	; copy params
 17040 0000CC8E 4883FE00                	cmp rsi, 0
 17041 0000CC92 740E                    	je .L_lambda_simple_params_end_028b
 17042 0000CC94 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17043 0000CC99 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17044 0000CC9D 48FFC6                  	inc rsi
 17045 0000CCA0 EBEC                    	jmp .L_lambda_simple_params_loop_028b
 17046                                  .L_lambda_simple_params_end_028b:
 17047 0000CCA2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 17048 0000CCA5 4889C3                  	mov rbx, rax
 17049 0000CCA8 58                      	pop rax
 17050 0000CCA9 C60004                  	mov byte [rax], T_closure
 17051 0000CCAC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17052 0000CCB0 48C74009[BDCC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_028b
 17053 0000CCB8 E95E030000              	jmp .L_lambda_simple_end_028b
 17054                                  .L_lambda_simple_code_028b:	; lambda-simple body
 17055 0000CCBD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17056 0000CCC3 740B                    	je .L_lambda_simple_arity_check_ok_028b
 17057 0000CCC5 FF742410                	push qword [rsp + 8 * 2]
 17058 0000CCC9 6A01                    	push 1
 17059 0000CCCB E93BA40000              	jmp L_error_incorrect_arity_simple
 17060                                  .L_lambda_simple_arity_check_ok_028b:
 17061 0000CCD0 C8000000                	enter 0, 0
 17062 0000CCD4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17063 0000CCD9 E874A40000              	call malloc
 17064 0000CCDE 50                      	push rax
 17065 0000CCDF BF08000000              	mov rdi, 8 * 1	; new rib
 17066 0000CCE4 E869A40000              	call malloc
 17067 0000CCE9 50                      	push rax
 17068 0000CCEA BF10000000              	mov rdi, 8 * 2	; extended env
 17069 0000CCEF E85EA40000              	call malloc
 17070 0000CCF4 488B7D10                	mov rdi, ENV
 17071 0000CCF8 BE00000000              	mov rsi, 0
 17072 0000CCFD BA01000000              	mov rdx, 1
 17073                                  .L_lambda_opt_env_loop_0058:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 17074 0000CD02 4883FE01                	cmp rsi, 1
 17075 0000CD06 7410                    	je .L_lambda_opt_env_end_0058
 17076 0000CD08 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17077 0000CD0C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17078 0000CD10 48FFC6                  	inc rsi
 17079 0000CD13 48FFC2                  	inc rdx
 17080 0000CD16 EBEA                    	jmp .L_lambda_opt_env_loop_0058
 17081                                  .L_lambda_opt_env_end_0058:
 17082 0000CD18 5B                      	pop rbx
 17083 0000CD19 BE00000000              	mov rsi, 0
 17084                                  .L_lambda_opt_params_loop_0058:	; copy params
 17085 0000CD1E 4883FE01                	cmp rsi, 1
 17086 0000CD22 740E                    	je .L_lambda_opt_params_end_0058
 17087 0000CD24 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17088 0000CD29 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17089 0000CD2D 48FFC6                  	inc rsi
 17090 0000CD30 EBEC                    	jmp .L_lambda_opt_params_loop_0058
 17091                                  .L_lambda_opt_params_end_0058:
 17092 0000CD32 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 17093 0000CD35 4889C3                  	mov rbx, rax
 17094 0000CD38 58                      	pop rax
 17095 0000CD39 C60004                  	mov byte [rax], T_closure
 17096 0000CD3C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17097 0000CD40 48C74009[4DCD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0058
 17098 0000CD48 E9CA020000              	jmp .L_lambda_opt_end_0058
 17099                                  .L_lambda_opt_code_0058:	; lambda-opt body
 17100 0000CD4D 48837C241000            	cmp qword [rsp + 8 * 2], 0
 17101 0000CD53 740D                    	je .L_lambda_opt_arity_check_exact_0058
 17102 0000CD55 7F48                    	jg .L_lambda_opt_arity_check_more_0058
 17103 0000CD57 FF742410                	push qword [rsp + 8 * 2]
 17104 0000CD5B 6A00                    	push 0
 17105 0000CD5D E9BDA30000              	jmp L_error_incorrect_arity_opt
 17106                                  .L_lambda_opt_arity_check_exact_0058:
 17107 0000CD62 48C744241001000000      	mov qword [rsp + 8 * 2], 1	; Update argument count (fixed params + 1 for nil)
 17108 0000CD6B 41BA03000000            	mov r10, 3	; r10 = total addresses to adjust (fixed params + 3)
 17109 0000CD71 FF3424                  	push qword [rsp]	; Save the top stack element
 17110 0000CD74 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
 17111                                  .L_lambda_opt_stack_shrink_loop_0106:
 17112 0000CD7A 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
 17113 0000CD7D 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0106	; Exit loop if all elements processed
 17114 0000CD7F 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
 17115 0000CD84 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
 17116 0000CD88 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
 17117 0000CD8D 49FFC3                  	inc r11	; Increment loop index
 17118 0000CD90 EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_0106	; Jump back to loop start
 17119                                  .L_lambda_opt_stack_shrink_loop_exit_0106:
 17120 0000CD92 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
 17121 0000CD9A E988000000              	jmp .L_lambda_opt_stack_adjusted_0058
 17122                                  .L_lambda_opt_arity_check_more_0058:
 17123 0000CD9F 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
 17124 0000CDA4 4983E800                	sub r8, 0	; r8 = count of optional params
 17125 0000CDA8 48C744241001000000      	mov qword [rsp + 8 * 2], 1	; Update the number of params (fixed params + 1 for list opt)
 17126 0000CDB1 41B900000000            	mov r9, 0	; r9 = index of optional argument list
 17127 0000CDB7 4E8D54C410              	lea r10, [rsp + 2 * 8 + 0 * 8 + r8 * 8]	; r10 = address of first optional param
 17128 0000CDBC 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
 17128 0000CDBE [0100000000000000] 
 17129                                  .L_lambda_opt_stack_shrink_loop_0107:
 17130 0000CDC6 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
 17131 0000CDC9 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_0107	; Exit loop if all optional params are processed
 17132 0000CDCB BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
 17133 0000CDD0 E87DA30000              	call malloc	; Allocate memory for a new pair
 17134 0000CDD5 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
 17135 0000CDD9 49F7D9                  	neg r9	; Negate index to access in reverse
 17136 0000CDDC 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
 17137 0000CDE0 49F7D9                  	neg r9	; Negate index back
 17138 0000CDE3 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
 17139 0000CDE7 C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
 17140 0000CDEA 4989C3                  	mov r11, rax	; Update current pair to the newly created one
 17141 0000CDED 49FFC1                  	inc r9	; Increment the index
 17142 0000CDF0 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0107	; Repeat the loop for the next param
 17143                                  .L_lambda_opt_stack_shrink_loop_exit_0107:
 17144 0000CDF2 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
 17145 0000CDF5 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
 17146 0000CDF9 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
 17147 0000CDFC 4983C410                	add r12, 16	; Skip fixed params and return address
 17148 0000CE00 41BD03000000            	mov r13, 3	; r13 = loop counter (number of params, old fp, ret addr, lex env)
 17149                                  .L_lambda_opt_stack_shrink_loop_0108:
 17150 0000CE06 4983FD00                	cmp r13, 0	; Check if there are more values to copy
 17151 0000CE0A 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0108	; Exit loop if all values are copied
 17152 0000CE0C 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
 17153 0000CE10 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
 17154 0000CE13 49FFCD                  	dec r13	; Decrement the loop counter
 17155 0000CE16 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
 17156 0000CE1A 4983EC08                	sub r12, 8	; Move the source pointer to the next location
 17157 0000CE1E EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0108	; Repeat the loop for the next value
 17158                                  .L_lambda_opt_stack_shrink_loop_exit_0108:
 17159 0000CE20 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
 17160 0000CE24 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
 17161                                  .L_lambda_opt_stack_adjusted_0058:
 17162 0000CE27 C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
 17163                                  	; preparing a tail-call
 17164                                  	; preparing a non-tail-call
 17165 0000CE2B 488B4520                	mov rax, PARAM(0)	; param s
 17166 0000CE2F 50                      	push rax
 17167 0000CE30 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17168 0000CE35 E818A30000              	call malloc
 17169 0000CE3A 50                      	push rax
 17170 0000CE3B BF08000000              	mov rdi, 8 * 1	; new rib
 17171 0000CE40 E80DA30000              	call malloc
 17172 0000CE45 50                      	push rax
 17173 0000CE46 BF18000000              	mov rdi, 8 * 3	; extended env
 17174 0000CE4B E802A30000              	call malloc
 17175 0000CE50 488B7D10                	mov rdi, ENV
 17176 0000CE54 BE00000000              	mov rsi, 0
 17177 0000CE59 BA01000000              	mov rdx, 1
 17178                                  .L_lambda_simple_env_loop_028c:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 17179 0000CE5E 4883FE02                	cmp rsi, 2
 17180 0000CE62 7410                    	je .L_lambda_simple_env_end_028c
 17181 0000CE64 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17182 0000CE68 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17183 0000CE6C 48FFC6                  	inc rsi
 17184 0000CE6F 48FFC2                  	inc rdx
 17185 0000CE72 EBEA                    	jmp .L_lambda_simple_env_loop_028c
 17186                                  .L_lambda_simple_env_end_028c:
 17187 0000CE74 5B                      	pop rbx
 17188 0000CE75 BE00000000              	mov rsi, 0
 17189                                  .L_lambda_simple_params_loop_028c:	; copy params
 17190 0000CE7A 4883FE01                	cmp rsi, 1
 17191 0000CE7E 740E                    	je .L_lambda_simple_params_end_028c
 17192 0000CE80 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17193 0000CE85 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17194 0000CE89 48FFC6                  	inc rsi
 17195 0000CE8C EBEC                    	jmp .L_lambda_simple_params_loop_028c
 17196                                  .L_lambda_simple_params_end_028c:
 17197 0000CE8E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 17198 0000CE91 4889C3                  	mov rbx, rax
 17199 0000CE94 58                      	pop rax
 17200 0000CE95 C60004                  	mov byte [rax], T_closure
 17201 0000CE98 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17202 0000CE9C 48C74009[A9CE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_028c
 17203 0000CEA4 E9BF000000              	jmp .L_lambda_simple_end_028c
 17204                                  .L_lambda_simple_code_028c:	; lambda-simple body
 17205 0000CEA9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17206 0000CEAF 740B                    	je .L_lambda_simple_arity_check_ok_028c
 17207 0000CEB1 FF742410                	push qword [rsp + 8 * 2]
 17208 0000CEB5 6A01                    	push 1
 17209 0000CEB7 E94FA20000              	jmp L_error_incorrect_arity_simple
 17210                                  .L_lambda_simple_arity_check_ok_028c:
 17211 0000CEBC C8000000                	enter 0, 0
 17212                                  	; preparing a tail-call
 17213                                  	; preparing a non-tail-call
 17214 0000CEC0 488B4520                	mov rax, PARAM(0)	; param ch
 17215 0000CEC4 50                      	push rax
 17216 0000CEC5 6A01                    	push 1	; arg count
 17217 0000CEC7 488B0425[8E120000]      	mov rax, qword [free_var_71]	; free var char-downcase
 17218 0000CECF 803805                  	cmp byte [rax], T_undefined
 17219 0000CED2 0F844DA10000            	je L_error_fvar_undefined
 17220 0000CED8 803804                  	cmp byte [rax], T_closure
 17221 0000CEDB 0F85C8A10000            	jne L_error_non_closure
 17222 0000CEE1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17223 0000CEE4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17224 0000CEE7 50                      	push rax
 17225 0000CEE8 6A01                    	push 1	; arg count
 17226 0000CEEA 488B0425[28120000]      	mov rax, qword [free_var_65]	; free var char->integer
 17227 0000CEF2 803805                  	cmp byte [rax], T_undefined
 17228 0000CEF5 0F842AA10000            	je L_error_fvar_undefined
 17229 0000CEFB 803804                  	cmp byte [rax], T_closure
 17230 0000CEFE 0F85A5A10000            	jne L_error_non_closure
 17231 0000CF04 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17232 0000CF07 4C8B4009                	mov r8, qword [rax + 1 + 8]
 17233 0000CF0B FF7508                  	push qword [rbp + 8]				; push old return address
 17234 0000CF0E FF7500                  	push qword [rbp]					; push old rbp
 17235                                  	;; move stack up ;;
 17236 0000CF11 488B5D18                	mov rbx, [rbp + 3*8]
 17237 0000CF15 4889DE                  	mov rsi, rbx						; save old size in rsi
 17238 0000CF18 4883C303                	add rbx, 3
 17239 0000CF1C 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 17240 0000CF24 B901000000              	mov rcx, 1
 17241 0000CF29 4883C104                	add rcx, 4				; num of iterations in rcx
 17242                                  .L_tc_recycle_frame_loop_036f:
 17243 0000CF2D 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 17244 0000CF35 488B143C                	mov rdx, [rsp + rdi]
 17245 0000CF39 4889541D00              	mov [rbp + rbx], rdx
 17246 0000CF3E 4883EB08                	sub rbx, 8
 17247 0000CF42 48FFC9                  	dec rcx
 17248 0000CF45 4883F900                	cmp rcx, 0
 17249 0000CF49 75E2                    	jne .L_tc_recycle_frame_loop_036f
 17250 0000CF4B 4889F3                  	mov rbx, rsi
 17251 0000CF4E 4883EB01                	sub rbx, 1
 17252 0000CF52 488D1CDD00000000        	lea rbx, [rbx*8]
 17253 0000CF5A 4801DD                  	add rbp, rbx
 17254 0000CF5D 4889EC                  	mov rsp, rbp         ; fix stack pointers
 17255 0000CF60 5D                      	pop rbp
 17256 0000CF61 41FFE0                  	jmp r8
 17257 0000CF64 C9                      	leave
 17258 0000CF65 C21800                  	ret AND_KILL_FRAME(1)
 17259                                  .L_lambda_simple_end_028c:	; new closure is in rax
 17260 0000CF68 50                      	push rax
 17261 0000CF69 6A02                    	push 2	; arg count
 17262 0000CF6B 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
 17263 0000CF73 803805                  	cmp byte [rax], T_undefined
 17264 0000CF76 0F84A9A00000            	je L_error_fvar_undefined
 17265 0000CF7C 803804                  	cmp byte [rax], T_closure
 17266 0000CF7F 0F8524A10000            	jne L_error_non_closure
 17267 0000CF85 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17268 0000CF88 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17269 0000CF8B 50                      	push rax
 17270 0000CF8C 488B4510                	mov rax, ENV
 17271 0000CF90 488B00                  	mov rax, qword [rax + 8 * 0]
 17272 0000CF93 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 17273 0000CF96 50                      	push rax
 17274 0000CF97 6A02                    	push 2	; arg count
 17275 0000CF99 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
 17276 0000CFA1 803805                  	cmp byte [rax], T_undefined
 17277 0000CFA4 0F847BA00000            	je L_error_fvar_undefined
 17278 0000CFAA 803804                  	cmp byte [rax], T_closure
 17279 0000CFAD 0F85F6A00000            	jne L_error_non_closure
 17280 0000CFB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17281 0000CFB6 4C8B4009                	mov r8, qword [rax + 1 + 8]
 17282 0000CFBA FF7508                  	push qword [rbp + 8]				; push old return address
 17283 0000CFBD FF7500                  	push qword [rbp]					; push old rbp
 17284                                  	;; move stack up ;;
 17285 0000CFC0 488B5D18                	mov rbx, [rbp + 3*8]
 17286 0000CFC4 4889DE                  	mov rsi, rbx						; save old size in rsi
 17287 0000CFC7 4883C303                	add rbx, 3
 17288 0000CFCB 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 17289 0000CFD3 B902000000              	mov rcx, 2
 17290 0000CFD8 4883C104                	add rcx, 4				; num of iterations in rcx
 17291                                  .L_tc_recycle_frame_loop_036e:
 17292 0000CFDC 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 17293 0000CFE4 488B143C                	mov rdx, [rsp + rdi]
 17294 0000CFE8 4889541D00              	mov [rbp + rbx], rdx
 17295 0000CFED 4883EB08                	sub rbx, 8
 17296 0000CFF1 48FFC9                  	dec rcx
 17297 0000CFF4 4883F900                	cmp rcx, 0
 17298 0000CFF8 75E2                    	jne .L_tc_recycle_frame_loop_036e
 17299 0000CFFA 4889F3                  	mov rbx, rsi
 17300 0000CFFD 4883EB02                	sub rbx, 2
 17301 0000D001 488D1CDD00000000        	lea rbx, [rbx*8]
 17302 0000D009 4801DD                  	add rbp, rbx
 17303 0000D00C 4889EC                  	mov rsp, rbp         ; fix stack pointers
 17304 0000D00F 5D                      	pop rbp
 17305 0000D010 41FFE0                  	jmp r8
 17306 0000D013 C9                      	leave	; Restore the previous stack frame
 17307 0000D014 C21800                  	ret AND_KILL_FRAME(1)
 17308                                  .L_lambda_opt_end_0058:	; new closure is in rax
 17309 0000D017 C9                      	leave
 17310 0000D018 C21800                  	ret AND_KILL_FRAME(1)
 17311                                  .L_lambda_simple_end_028b:	; new closure is in rax
 17312 0000D01B 50                      	push rax
 17313 0000D01C 6A01                    	push 1	; arg count
 17314 0000D01E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17315 0000D023 E82AA10000              	call malloc
 17316 0000D028 50                      	push rax
 17317 0000D029 BF00000000              	mov rdi, 8 * 0	; new rib
 17318 0000D02E E81FA10000              	call malloc
 17319 0000D033 50                      	push rax
 17320 0000D034 BF08000000              	mov rdi, 8 * 1	; extended env
 17321 0000D039 E814A10000              	call malloc
 17322 0000D03E 488B7D10                	mov rdi, ENV
 17323 0000D042 BE00000000              	mov rsi, 0
 17324 0000D047 BA01000000              	mov rdx, 1
 17325                                  .L_lambda_simple_env_loop_028d:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 17326 0000D04C 4883FE00                	cmp rsi, 0
 17327 0000D050 7410                    	je .L_lambda_simple_env_end_028d
 17328 0000D052 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17329 0000D056 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17330 0000D05A 48FFC6                  	inc rsi
 17331 0000D05D 48FFC2                  	inc rdx
 17332 0000D060 EBEA                    	jmp .L_lambda_simple_env_loop_028d
 17333                                  .L_lambda_simple_env_end_028d:
 17334 0000D062 5B                      	pop rbx
 17335 0000D063 BE00000000              	mov rsi, 0
 17336                                  .L_lambda_simple_params_loop_028d:	; copy params
 17337 0000D068 4883FE00                	cmp rsi, 0
 17338 0000D06C 740E                    	je .L_lambda_simple_params_end_028d
 17339 0000D06E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17340 0000D073 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17341 0000D077 48FFC6                  	inc rsi
 17342 0000D07A EBEC                    	jmp .L_lambda_simple_params_loop_028d
 17343                                  .L_lambda_simple_params_end_028d:
 17344 0000D07C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 17345 0000D07F 4889C3                  	mov rbx, rax
 17346 0000D082 58                      	pop rax
 17347 0000D083 C60004                  	mov byte [rax], T_closure
 17348 0000D086 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17349 0000D08A 48C74009[97D00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_028d
 17350 0000D092 E938010000              	jmp .L_lambda_simple_end_028d
 17351                                  .L_lambda_simple_code_028d:	; lambda-simple body
 17352 0000D097 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17353 0000D09D 740B                    	je .L_lambda_simple_arity_check_ok_028d
 17354 0000D09F FF742410                	push qword [rsp + 8 * 2]
 17355 0000D0A3 6A01                    	push 1
 17356 0000D0A5 E961A00000              	jmp L_error_incorrect_arity_simple
 17357                                  .L_lambda_simple_arity_check_ok_028d:
 17358 0000D0AA C8000000                	enter 0, 0
 17359                                  	; preparing a non-tail-call
 17360 0000D0AE 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 17361 0000D0B6 803805                  	cmp byte [rax], T_undefined
 17362 0000D0B9 0F84669F0000            	je L_error_fvar_undefined
 17363 0000D0BF 50                      	push rax
 17364 0000D0C0 6A01                    	push 1	; arg count
 17365 0000D0C2 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17366 0000D0C6 803804                  	cmp byte [rax], T_closure
 17367 0000D0C9 0F85DA9F0000            	jne L_error_non_closure
 17368 0000D0CF FF7001                  	push SOB_CLOSURE_ENV(rax)
 17369 0000D0D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17370 0000D0D5 48890425[4A120000]      	mov qword [free_var_67], rax
 17371 0000D0DD 48B8-                   	mov rax, sob_void
 17371 0000D0DF [0000000000000000] 
 17372                                  
 17373                                  	; preparing a non-tail-call
 17374 0000D0E7 488B0425[2C0E0000]      	mov rax, qword [free_var_5]	; free var <=
 17375 0000D0EF 803805                  	cmp byte [rax], T_undefined
 17376 0000D0F2 0F842D9F0000            	je L_error_fvar_undefined
 17377 0000D0F8 50                      	push rax
 17378 0000D0F9 6A01                    	push 1	; arg count
 17379 0000D0FB 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17380 0000D0FF 803804                  	cmp byte [rax], T_closure
 17381 0000D102 0F85A19F0000            	jne L_error_non_closure
 17382 0000D108 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17383 0000D10B FF5009                  	call SOB_CLOSURE_CODE(rax)
 17384 0000D10E 48890425[39120000]      	mov qword [free_var_66], rax
 17385 0000D116 48B8-                   	mov rax, sob_void
 17385 0000D118 [0000000000000000] 
 17386                                  
 17387                                  	; preparing a non-tail-call
 17388 0000D120 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 17389 0000D128 803805                  	cmp byte [rax], T_undefined
 17390 0000D12B 0F84F49E0000            	je L_error_fvar_undefined
 17391 0000D131 50                      	push rax
 17392 0000D132 6A01                    	push 1	; arg count
 17393 0000D134 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17394 0000D138 803804                  	cmp byte [rax], T_closure
 17395 0000D13B 0F85689F0000            	jne L_error_non_closure
 17396 0000D141 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17397 0000D144 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17398 0000D147 48890425[5B120000]      	mov qword [free_var_68], rax
 17399 0000D14F 48B8-                   	mov rax, sob_void
 17399 0000D151 [0000000000000000] 
 17400                                  
 17401                                  	; preparing a non-tail-call
 17402 0000D159 488B0425[4E0E0000]      	mov rax, qword [free_var_7]	; free var >
 17403 0000D161 803805                  	cmp byte [rax], T_undefined
 17404 0000D164 0F84BB9E0000            	je L_error_fvar_undefined
 17405 0000D16A 50                      	push rax
 17406 0000D16B 6A01                    	push 1	; arg count
 17407 0000D16D 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17408 0000D171 803804                  	cmp byte [rax], T_closure
 17409 0000D174 0F852F9F0000            	jne L_error_non_closure
 17410 0000D17A FF7001                  	push SOB_CLOSURE_ENV(rax)
 17411 0000D17D FF5009                  	call SOB_CLOSURE_CODE(rax)
 17412 0000D180 48890425[7D120000]      	mov qword [free_var_70], rax
 17413 0000D188 48B8-                   	mov rax, sob_void
 17413 0000D18A [0000000000000000] 
 17414                                  
 17415                                  	; preparing a non-tail-call
 17416 0000D192 488B0425[5F0E0000]      	mov rax, qword [free_var_8]	; free var >=
 17417 0000D19A 803805                  	cmp byte [rax], T_undefined
 17418 0000D19D 0F84829E0000            	je L_error_fvar_undefined
 17419 0000D1A3 50                      	push rax
 17420 0000D1A4 6A01                    	push 1	; arg count
 17421 0000D1A6 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17422 0000D1AA 803804                  	cmp byte [rax], T_closure
 17423 0000D1AD 0F85F69E0000            	jne L_error_non_closure
 17424 0000D1B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17425 0000D1B6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17426 0000D1B9 48890425[6C120000]      	mov qword [free_var_69], rax
 17427 0000D1C1 48B8-                   	mov rax, sob_void
 17427 0000D1C3 [0000000000000000] 
 17428 0000D1CB C9                      	leave
 17429 0000D1CC C21800                  	ret AND_KILL_FRAME(1)
 17430                                  .L_lambda_simple_end_028d:	; new closure is in rax
 17431 0000D1CF 803804                  	cmp byte [rax], T_closure
 17432 0000D1D2 0F85D19E0000            	jne L_error_non_closure
 17433 0000D1D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17434 0000D1DB FF5009                  	call SOB_CLOSURE_CODE(rax)
 17435                                  
 17436 0000D1DE 4889C7                  	mov rdi, rax
 17437 0000D1E1 E8C1A10000              	call print_sexpr_if_not_void
 17438 0000D1E6 48B8-                   	mov rax, L_constants + 0
 17438 0000D1E8 [0000000000000000] 
 17439 0000D1F0 48890425[35160000]      	mov qword [free_var_126], rax
 17440 0000D1F8 48B8-                   	mov rax, sob_void
 17440 0000D1FA [0000000000000000] 
 17441                                  
 17442 0000D202 4889C7                  	mov rdi, rax
 17443 0000D205 E89DA10000              	call print_sexpr_if_not_void
 17444 0000D20A 48B8-                   	mov rax, L_constants + 0
 17444 0000D20C [0000000000000000] 
 17445 0000D214 48890425[9B160000]      	mov qword [free_var_132], rax
 17446 0000D21C 48B8-                   	mov rax, sob_void
 17446 0000D21E [0000000000000000] 
 17447                                  
 17448 0000D226 4889C7                  	mov rdi, rax
 17449 0000D229 E879A10000              	call print_sexpr_if_not_void
 17450                                  	; preparing a non-tail-call
 17451 0000D22E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17452 0000D233 E81A9F0000              	call malloc
 17453 0000D238 50                      	push rax
 17454 0000D239 BF00000000              	mov rdi, 8 * 0	; new rib
 17455 0000D23E E80F9F0000              	call malloc
 17456 0000D243 50                      	push rax
 17457 0000D244 BF08000000              	mov rdi, 8 * 1	; extended env
 17458 0000D249 E8049F0000              	call malloc
 17459 0000D24E 488B7D10                	mov rdi, ENV
 17460 0000D252 BE00000000              	mov rsi, 0
 17461 0000D257 BA01000000              	mov rdx, 1
 17462                                  .L_lambda_simple_env_loop_028e:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 17463 0000D25C 4883FE00                	cmp rsi, 0
 17464 0000D260 7410                    	je .L_lambda_simple_env_end_028e
 17465 0000D262 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17466 0000D266 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17467 0000D26A 48FFC6                  	inc rsi
 17468 0000D26D 48FFC2                  	inc rdx
 17469 0000D270 EBEA                    	jmp .L_lambda_simple_env_loop_028e
 17470                                  .L_lambda_simple_env_end_028e:
 17471 0000D272 5B                      	pop rbx
 17472 0000D273 BE00000000              	mov rsi, 0
 17473                                  .L_lambda_simple_params_loop_028e:	; copy params
 17474 0000D278 4883FE00                	cmp rsi, 0
 17475 0000D27C 740E                    	je .L_lambda_simple_params_end_028e
 17476 0000D27E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17477 0000D283 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17478 0000D287 48FFC6                  	inc rsi
 17479 0000D28A EBEC                    	jmp .L_lambda_simple_params_loop_028e
 17480                                  .L_lambda_simple_params_end_028e:
 17481 0000D28C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 17482 0000D28F 4889C3                  	mov rbx, rax
 17483 0000D292 58                      	pop rax
 17484 0000D293 C60004                  	mov byte [rax], T_closure
 17485 0000D296 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17486 0000D29A 48C74009[A7D20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_028e
 17487 0000D2A2 E981010000              	jmp .L_lambda_simple_end_028e
 17488                                  .L_lambda_simple_code_028e:	; lambda-simple body
 17489 0000D2A7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17490 0000D2AD 740B                    	je .L_lambda_simple_arity_check_ok_028e
 17491 0000D2AF FF742410                	push qword [rsp + 8 * 2]
 17492 0000D2B3 6A01                    	push 1
 17493 0000D2B5 E9519E0000              	jmp L_error_incorrect_arity_simple
 17494                                  .L_lambda_simple_arity_check_ok_028e:
 17495 0000D2BA C8000000                	enter 0, 0
 17496 0000D2BE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17497 0000D2C3 E88A9E0000              	call malloc
 17498 0000D2C8 50                      	push rax
 17499 0000D2C9 BF08000000              	mov rdi, 8 * 1	; new rib
 17500 0000D2CE E87F9E0000              	call malloc
 17501 0000D2D3 50                      	push rax
 17502 0000D2D4 BF10000000              	mov rdi, 8 * 2	; extended env
 17503 0000D2D9 E8749E0000              	call malloc
 17504 0000D2DE 488B7D10                	mov rdi, ENV
 17505 0000D2E2 BE00000000              	mov rsi, 0
 17506 0000D2E7 BA01000000              	mov rdx, 1
 17507                                  .L_lambda_simple_env_loop_028f:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 17508 0000D2EC 4883FE01                	cmp rsi, 1
 17509 0000D2F0 7410                    	je .L_lambda_simple_env_end_028f
 17510 0000D2F2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17511 0000D2F6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17512 0000D2FA 48FFC6                  	inc rsi
 17513 0000D2FD 48FFC2                  	inc rdx
 17514 0000D300 EBEA                    	jmp .L_lambda_simple_env_loop_028f
 17515                                  .L_lambda_simple_env_end_028f:
 17516 0000D302 5B                      	pop rbx
 17517 0000D303 BE00000000              	mov rsi, 0
 17518                                  .L_lambda_simple_params_loop_028f:	; copy params
 17519 0000D308 4883FE01                	cmp rsi, 1
 17520 0000D30C 740E                    	je .L_lambda_simple_params_end_028f
 17521 0000D30E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17522 0000D313 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17523 0000D317 48FFC6                  	inc rsi
 17524 0000D31A EBEC                    	jmp .L_lambda_simple_params_loop_028f
 17525                                  .L_lambda_simple_params_end_028f:
 17526 0000D31C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 17527 0000D31F 4889C3                  	mov rbx, rax
 17528 0000D322 58                      	pop rax
 17529 0000D323 C60004                  	mov byte [rax], T_closure
 17530 0000D326 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17531 0000D32A 48C74009[37D30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_028f
 17532 0000D332 E9ED000000              	jmp .L_lambda_simple_end_028f
 17533                                  .L_lambda_simple_code_028f:	; lambda-simple body
 17534 0000D337 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17535 0000D33D 740B                    	je .L_lambda_simple_arity_check_ok_028f
 17536 0000D33F FF742410                	push qword [rsp + 8 * 2]
 17537 0000D343 6A01                    	push 1
 17538 0000D345 E9C19D0000              	jmp L_error_incorrect_arity_simple
 17539                                  .L_lambda_simple_arity_check_ok_028f:
 17540 0000D34A C8000000                	enter 0, 0
 17541                                  	; preparing a tail-call
 17542                                  	; preparing a non-tail-call
 17543                                  	; preparing a non-tail-call
 17544 0000D34E 488B4520                	mov rax, PARAM(0)	; param str
 17545 0000D352 50                      	push rax
 17546 0000D353 6A01                    	push 1	; arg count
 17547 0000D355 488B0425[BE150000]      	mov rax, qword [free_var_119]	; free var string->list
 17548 0000D35D 803805                  	cmp byte [rax], T_undefined
 17549 0000D360 0F84BF9C0000            	je L_error_fvar_undefined
 17550 0000D366 803804                  	cmp byte [rax], T_closure
 17551 0000D369 0F853A9D0000            	jne L_error_non_closure
 17552 0000D36F FF7001                  	push SOB_CLOSURE_ENV(rax)
 17553 0000D372 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17554 0000D375 50                      	push rax
 17555 0000D376 488B4510                	mov rax, ENV
 17556 0000D37A 488B00                  	mov rax, qword [rax + 8 * 0]
 17557 0000D37D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char-case-converter
 17558 0000D380 50                      	push rax
 17559 0000D381 6A02                    	push 2	; arg count
 17560 0000D383 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
 17561 0000D38B 803805                  	cmp byte [rax], T_undefined
 17562 0000D38E 0F84919C0000            	je L_error_fvar_undefined
 17563 0000D394 803804                  	cmp byte [rax], T_closure
 17564 0000D397 0F850C9D0000            	jne L_error_non_closure
 17565 0000D39D FF7001                  	push SOB_CLOSURE_ENV(rax)
 17566 0000D3A0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17567 0000D3A3 50                      	push rax
 17568 0000D3A4 6A01                    	push 1	; arg count
 17569 0000D3A6 488B0425[15140000]      	mov rax, qword [free_var_94]	; free var list->string
 17570 0000D3AE 803805                  	cmp byte [rax], T_undefined
 17571 0000D3B1 0F846E9C0000            	je L_error_fvar_undefined
 17572 0000D3B7 803804                  	cmp byte [rax], T_closure
 17573 0000D3BA 0F85E99C0000            	jne L_error_non_closure
 17574 0000D3C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17575 0000D3C3 4C8B4009                	mov r8, qword [rax + 1 + 8]
 17576 0000D3C7 FF7508                  	push qword [rbp + 8]				; push old return address
 17577 0000D3CA FF7500                  	push qword [rbp]					; push old rbp
 17578                                  	;; move stack up ;;
 17579 0000D3CD 488B5D18                	mov rbx, [rbp + 3*8]
 17580 0000D3D1 4889DE                  	mov rsi, rbx						; save old size in rsi
 17581 0000D3D4 4883C303                	add rbx, 3
 17582 0000D3D8 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 17583 0000D3E0 B901000000              	mov rcx, 1
 17584 0000D3E5 4883C104                	add rcx, 4				; num of iterations in rcx
 17585                                  .L_tc_recycle_frame_loop_0370:
 17586 0000D3E9 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 17587 0000D3F1 488B143C                	mov rdx, [rsp + rdi]
 17588 0000D3F5 4889541D00              	mov [rbp + rbx], rdx
 17589 0000D3FA 4883EB08                	sub rbx, 8
 17590 0000D3FE 48FFC9                  	dec rcx
 17591 0000D401 4883F900                	cmp rcx, 0
 17592 0000D405 75E2                    	jne .L_tc_recycle_frame_loop_0370
 17593 0000D407 4889F3                  	mov rbx, rsi
 17594 0000D40A 4883EB01                	sub rbx, 1
 17595 0000D40E 488D1CDD00000000        	lea rbx, [rbx*8]
 17596 0000D416 4801DD                  	add rbp, rbx
 17597 0000D419 4889EC                  	mov rsp, rbp         ; fix stack pointers
 17598 0000D41C 5D                      	pop rbp
 17599 0000D41D 41FFE0                  	jmp r8
 17600 0000D420 C9                      	leave
 17601 0000D421 C21800                  	ret AND_KILL_FRAME(1)
 17602                                  .L_lambda_simple_end_028f:	; new closure is in rax
 17603 0000D424 C9                      	leave
 17604 0000D425 C21800                  	ret AND_KILL_FRAME(1)
 17605                                  .L_lambda_simple_end_028e:	; new closure is in rax
 17606 0000D428 50                      	push rax
 17607 0000D429 6A01                    	push 1	; arg count
 17608 0000D42B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17609 0000D430 E81D9D0000              	call malloc
 17610 0000D435 50                      	push rax
 17611 0000D436 BF00000000              	mov rdi, 8 * 0	; new rib
 17612 0000D43B E8129D0000              	call malloc
 17613 0000D440 50                      	push rax
 17614 0000D441 BF08000000              	mov rdi, 8 * 1	; extended env
 17615 0000D446 E8079D0000              	call malloc
 17616 0000D44B 488B7D10                	mov rdi, ENV
 17617 0000D44F BE00000000              	mov rsi, 0
 17618 0000D454 BA01000000              	mov rdx, 1
 17619                                  .L_lambda_simple_env_loop_0290:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 17620 0000D459 4883FE00                	cmp rsi, 0
 17621 0000D45D 7410                    	je .L_lambda_simple_env_end_0290
 17622 0000D45F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17623 0000D463 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17624 0000D467 48FFC6                  	inc rsi
 17625 0000D46A 48FFC2                  	inc rdx
 17626 0000D46D EBEA                    	jmp .L_lambda_simple_env_loop_0290
 17627                                  .L_lambda_simple_env_end_0290:
 17628 0000D46F 5B                      	pop rbx
 17629 0000D470 BE00000000              	mov rsi, 0
 17630                                  .L_lambda_simple_params_loop_0290:	; copy params
 17631 0000D475 4883FE00                	cmp rsi, 0
 17632 0000D479 740E                    	je .L_lambda_simple_params_end_0290
 17633 0000D47B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17634 0000D480 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17635 0000D484 48FFC6                  	inc rsi
 17636 0000D487 EBEC                    	jmp .L_lambda_simple_params_loop_0290
 17637                                  .L_lambda_simple_params_end_0290:
 17638 0000D489 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 17639 0000D48C 4889C3                  	mov rbx, rax
 17640 0000D48F 58                      	pop rax
 17641 0000D490 C60004                  	mov byte [rax], T_closure
 17642 0000D493 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17643 0000D497 48C74009[A4D40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0290
 17644 0000D49F E98D000000              	jmp .L_lambda_simple_end_0290
 17645                                  .L_lambda_simple_code_0290:	; lambda-simple body
 17646 0000D4A4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17647 0000D4AA 740B                    	je .L_lambda_simple_arity_check_ok_0290
 17648 0000D4AC FF742410                	push qword [rsp + 8 * 2]
 17649 0000D4B0 6A01                    	push 1
 17650 0000D4B2 E9549C0000              	jmp L_error_incorrect_arity_simple
 17651                                  .L_lambda_simple_arity_check_ok_0290:
 17652 0000D4B7 C8000000                	enter 0, 0
 17653                                  	; preparing a non-tail-call
 17654 0000D4BB 488B0425[8E120000]      	mov rax, qword [free_var_71]	; free var char-downcase
 17655 0000D4C3 803805                  	cmp byte [rax], T_undefined
 17656 0000D4C6 0F84599B0000            	je L_error_fvar_undefined
 17657 0000D4CC 50                      	push rax
 17658 0000D4CD 6A01                    	push 1	; arg count
 17659 0000D4CF 488B4520                	mov rax, PARAM(0)	; param make-string-case-converter
 17660 0000D4D3 803804                  	cmp byte [rax], T_closure
 17661 0000D4D6 0F85CD9B0000            	jne L_error_non_closure
 17662 0000D4DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 17663 0000D4DF FF5009                  	call SOB_CLOSURE_CODE(rax)
 17664 0000D4E2 48890425[35160000]      	mov qword [free_var_126], rax
 17665 0000D4EA 48B8-                   	mov rax, sob_void
 17665 0000D4EC [0000000000000000] 
 17666                                  
 17667                                  	; preparing a non-tail-call
 17668 0000D4F4 488B0425[9F120000]      	mov rax, qword [free_var_72]	; free var char-upcase
 17669 0000D4FC 803805                  	cmp byte [rax], T_undefined
 17670 0000D4FF 0F84209B0000            	je L_error_fvar_undefined
 17671 0000D505 50                      	push rax
 17672 0000D506 6A01                    	push 1	; arg count
 17673 0000D508 488B4520                	mov rax, PARAM(0)	; param make-string-case-converter
 17674 0000D50C 803804                  	cmp byte [rax], T_closure
 17675 0000D50F 0F85949B0000            	jne L_error_non_closure
 17676 0000D515 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17677 0000D518 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17678 0000D51B 48890425[9B160000]      	mov qword [free_var_132], rax
 17679 0000D523 48B8-                   	mov rax, sob_void
 17679 0000D525 [0000000000000000] 
 17680 0000D52D C9                      	leave
 17681 0000D52E C21800                  	ret AND_KILL_FRAME(1)
 17682                                  .L_lambda_simple_end_0290:	; new closure is in rax
 17683 0000D531 803804                  	cmp byte [rax], T_closure
 17684 0000D534 0F856F9B0000            	jne L_error_non_closure
 17685 0000D53A FF7001                  	push SOB_CLOSURE_ENV(rax)
 17686 0000D53D FF5009                  	call SOB_CLOSURE_CODE(rax)
 17687                                  
 17688 0000D540 4889C7                  	mov rdi, rax
 17689 0000D543 E85F9E0000              	call print_sexpr_if_not_void
 17690 0000D548 48B8-                   	mov rax, L_constants + 0
 17690 0000D54A [0000000000000000] 
 17691 0000D552 48890425[BD160000]      	mov qword [free_var_134], rax
 17692 0000D55A 48B8-                   	mov rax, sob_void
 17692 0000D55C [0000000000000000] 
 17693                                  
 17694 0000D564 4889C7                  	mov rdi, rax
 17695 0000D567 E83B9E0000              	call print_sexpr_if_not_void
 17696 0000D56C 48B8-                   	mov rax, L_constants + 0
 17696 0000D56E [0000000000000000] 
 17697 0000D576 48890425[AC160000]      	mov qword [free_var_133], rax
 17698 0000D57E 48B8-                   	mov rax, sob_void
 17698 0000D580 [0000000000000000] 
 17699                                  
 17700 0000D588 4889C7                  	mov rdi, rax
 17701 0000D58B E8179E0000              	call print_sexpr_if_not_void
 17702 0000D590 48B8-                   	mov rax, L_constants + 0
 17702 0000D592 [0000000000000000] 
 17703 0000D59A 48890425[CE160000]      	mov qword [free_var_135], rax
 17704 0000D5A2 48B8-                   	mov rax, sob_void
 17704 0000D5A4 [0000000000000000] 
 17705                                  
 17706 0000D5AC 4889C7                  	mov rdi, rax
 17707 0000D5AF E8F39D0000              	call print_sexpr_if_not_void
 17708 0000D5B4 48B8-                   	mov rax, L_constants + 0
 17708 0000D5B6 [0000000000000000] 
 17709 0000D5BE 48890425[DF160000]      	mov qword [free_var_136], rax
 17710 0000D5C6 48B8-                   	mov rax, sob_void
 17710 0000D5C8 [0000000000000000] 
 17711                                  
 17712 0000D5D0 4889C7                  	mov rdi, rax
 17713 0000D5D3 E8CF9D0000              	call print_sexpr_if_not_void
 17714 0000D5D8 48B8-                   	mov rax, L_constants + 0
 17714 0000D5DA [0000000000000000] 
 17715 0000D5E2 48890425[F0160000]      	mov qword [free_var_137], rax
 17716 0000D5EA 48B8-                   	mov rax, sob_void
 17716 0000D5EC [0000000000000000] 
 17717                                  
 17718 0000D5F4 4889C7                  	mov rdi, rax
 17719 0000D5F7 E8AB9D0000              	call print_sexpr_if_not_void
 17720 0000D5FC 48B8-                   	mov rax, L_constants + 0
 17720 0000D5FE [0000000000000000] 
 17721 0000D606 48890425[F1150000]      	mov qword [free_var_122], rax
 17722 0000D60E 48B8-                   	mov rax, sob_void
 17722 0000D610 [0000000000000000] 
 17723                                  
 17724 0000D618 4889C7                  	mov rdi, rax
 17725 0000D61B E8879D0000              	call print_sexpr_if_not_void
 17726 0000D620 48B8-                   	mov rax, L_constants + 0
 17726 0000D622 [0000000000000000] 
 17727 0000D62A 48890425[E0150000]      	mov qword [free_var_121], rax
 17728 0000D632 48B8-                   	mov rax, sob_void
 17728 0000D634 [0000000000000000] 
 17729                                  
 17730 0000D63C 4889C7                  	mov rdi, rax
 17731 0000D63F E8639D0000              	call print_sexpr_if_not_void
 17732 0000D644 48B8-                   	mov rax, L_constants + 0
 17732 0000D646 [0000000000000000] 
 17733 0000D64E 48890425[02160000]      	mov qword [free_var_123], rax
 17734 0000D656 48B8-                   	mov rax, sob_void
 17734 0000D658 [0000000000000000] 
 17735                                  
 17736 0000D660 4889C7                  	mov rdi, rax
 17737 0000D663 E83F9D0000              	call print_sexpr_if_not_void
 17738 0000D668 48B8-                   	mov rax, L_constants + 0
 17738 0000D66A [0000000000000000] 
 17739 0000D672 48890425[13160000]      	mov qword [free_var_124], rax
 17740 0000D67A 48B8-                   	mov rax, sob_void
 17740 0000D67C [0000000000000000] 
 17741                                  
 17742 0000D684 4889C7                  	mov rdi, rax
 17743 0000D687 E81B9D0000              	call print_sexpr_if_not_void
 17744 0000D68C 48B8-                   	mov rax, L_constants + 0
 17744 0000D68E [0000000000000000] 
 17745 0000D696 48890425[24160000]      	mov qword [free_var_125], rax
 17746 0000D69E 48B8-                   	mov rax, sob_void
 17746 0000D6A0 [0000000000000000] 
 17747                                  
 17748 0000D6A8 4889C7                  	mov rdi, rax
 17749 0000D6AB E8F79C0000              	call print_sexpr_if_not_void
 17750                                  	; preparing a non-tail-call
 17751 0000D6B0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17752 0000D6B5 E8989A0000              	call malloc
 17753 0000D6BA 50                      	push rax
 17754 0000D6BB BF00000000              	mov rdi, 8 * 0	; new rib
 17755 0000D6C0 E88D9A0000              	call malloc
 17756 0000D6C5 50                      	push rax
 17757 0000D6C6 BF08000000              	mov rdi, 8 * 1	; extended env
 17758 0000D6CB E8829A0000              	call malloc
 17759 0000D6D0 488B7D10                	mov rdi, ENV
 17760 0000D6D4 BE00000000              	mov rsi, 0
 17761 0000D6D9 BA01000000              	mov rdx, 1
 17762                                  .L_lambda_simple_env_loop_0291:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 17763 0000D6DE 4883FE00                	cmp rsi, 0
 17764 0000D6E2 7410                    	je .L_lambda_simple_env_end_0291
 17765 0000D6E4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17766 0000D6E8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17767 0000D6EC 48FFC6                  	inc rsi
 17768 0000D6EF 48FFC2                  	inc rdx
 17769 0000D6F2 EBEA                    	jmp .L_lambda_simple_env_loop_0291
 17770                                  .L_lambda_simple_env_end_0291:
 17771 0000D6F4 5B                      	pop rbx
 17772 0000D6F5 BE00000000              	mov rsi, 0
 17773                                  .L_lambda_simple_params_loop_0291:	; copy params
 17774 0000D6FA 4883FE00                	cmp rsi, 0
 17775 0000D6FE 740E                    	je .L_lambda_simple_params_end_0291
 17776 0000D700 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17777 0000D705 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17778 0000D709 48FFC6                  	inc rsi
 17779 0000D70C EBEC                    	jmp .L_lambda_simple_params_loop_0291
 17780                                  .L_lambda_simple_params_end_0291:
 17781 0000D70E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 17782 0000D711 4889C3                  	mov rbx, rax
 17783 0000D714 58                      	pop rax
 17784 0000D715 C60004                  	mov byte [rax], T_closure
 17785 0000D718 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17786 0000D71C 48C74009[29D70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0291
 17787 0000D724 E9FE0D0000              	jmp .L_lambda_simple_end_0291
 17788                                  .L_lambda_simple_code_0291:	; lambda-simple body
 17789 0000D729 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17790 0000D72F 740B                    	je .L_lambda_simple_arity_check_ok_0291
 17791 0000D731 FF742410                	push qword [rsp + 8 * 2]
 17792 0000D735 6A02                    	push 2
 17793 0000D737 E9CF990000              	jmp L_error_incorrect_arity_simple
 17794                                  .L_lambda_simple_arity_check_ok_0291:
 17795 0000D73C C8000000                	enter 0, 0
 17796                                  	; preparing a tail-call
 17797 0000D740 48B8-                   	mov rax, L_constants + 1993
 17797 0000D742 [C907000000000000] 
 17798 0000D74A 50                      	push rax
 17799 0000D74B 6A01                    	push 1	; arg count
 17800 0000D74D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17801 0000D752 E8FB990000              	call malloc
 17802 0000D757 50                      	push rax
 17803 0000D758 BF10000000              	mov rdi, 8 * 2	; new rib
 17804 0000D75D E8F0990000              	call malloc
 17805 0000D762 50                      	push rax
 17806 0000D763 BF10000000              	mov rdi, 8 * 2	; extended env
 17807 0000D768 E8E5990000              	call malloc
 17808 0000D76D 488B7D10                	mov rdi, ENV
 17809 0000D771 BE00000000              	mov rsi, 0
 17810 0000D776 BA01000000              	mov rdx, 1
 17811                                  .L_lambda_simple_env_loop_0292:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 17812 0000D77B 4883FE01                	cmp rsi, 1
 17813 0000D77F 7410                    	je .L_lambda_simple_env_end_0292
 17814 0000D781 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17815 0000D785 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17816 0000D789 48FFC6                  	inc rsi
 17817 0000D78C 48FFC2                  	inc rdx
 17818 0000D78F EBEA                    	jmp .L_lambda_simple_env_loop_0292
 17819                                  .L_lambda_simple_env_end_0292:
 17820 0000D791 5B                      	pop rbx
 17821 0000D792 BE00000000              	mov rsi, 0
 17822                                  .L_lambda_simple_params_loop_0292:	; copy params
 17823 0000D797 4883FE02                	cmp rsi, 2
 17824 0000D79B 740E                    	je .L_lambda_simple_params_end_0292
 17825 0000D79D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17826 0000D7A2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17827 0000D7A6 48FFC6                  	inc rsi
 17828 0000D7A9 EBEC                    	jmp .L_lambda_simple_params_loop_0292
 17829                                  .L_lambda_simple_params_end_0292:
 17830 0000D7AB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 17831 0000D7AE 4889C3                  	mov rbx, rax
 17832 0000D7B1 58                      	pop rax
 17833 0000D7B2 C60004                  	mov byte [rax], T_closure
 17834 0000D7B5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17835 0000D7B9 48C74009[C6D70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0292
 17836 0000D7C1 E9F40C0000              	jmp .L_lambda_simple_end_0292
 17837                                  .L_lambda_simple_code_0292:	; lambda-simple body
 17838 0000D7C6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17839 0000D7CC 740B                    	je .L_lambda_simple_arity_check_ok_0292
 17840 0000D7CE FF742410                	push qword [rsp + 8 * 2]
 17841 0000D7D2 6A01                    	push 1
 17842 0000D7D4 E932990000              	jmp L_error_incorrect_arity_simple
 17843                                  .L_lambda_simple_arity_check_ok_0292:
 17844 0000D7D9 C8000000                	enter 0, 0
 17845 0000D7DD BF08000000              	mov rdi, 8
 17846 0000D7E2 E86B990000              	call malloc
 17847 0000D7E7 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
 17848 0000D7EB 488918                  	mov qword[rax], rbx
 17849 0000D7EE 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 17850 0000D7F2 48B8-                   	mov rax, sob_void
 17850 0000D7F4 [0000000000000000] 
 17851                                  
 17852 0000D7FC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17853 0000D801 E84C990000              	call malloc
 17854 0000D806 50                      	push rax
 17855 0000D807 BF08000000              	mov rdi, 8 * 1	; new rib
 17856 0000D80C E841990000              	call malloc
 17857 0000D811 50                      	push rax
 17858 0000D812 BF18000000              	mov rdi, 8 * 3	; extended env
 17859 0000D817 E836990000              	call malloc
 17860 0000D81C 488B7D10                	mov rdi, ENV
 17861 0000D820 BE00000000              	mov rsi, 0
 17862 0000D825 BA01000000              	mov rdx, 1
 17863                                  .L_lambda_simple_env_loop_0293:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 17864 0000D82A 4883FE02                	cmp rsi, 2
 17865 0000D82E 7410                    	je .L_lambda_simple_env_end_0293
 17866 0000D830 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17867 0000D834 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17868 0000D838 48FFC6                  	inc rsi
 17869 0000D83B 48FFC2                  	inc rdx
 17870 0000D83E EBEA                    	jmp .L_lambda_simple_env_loop_0293
 17871                                  .L_lambda_simple_env_end_0293:
 17872 0000D840 5B                      	pop rbx
 17873 0000D841 BE00000000              	mov rsi, 0
 17874                                  .L_lambda_simple_params_loop_0293:	; copy params
 17875 0000D846 4883FE01                	cmp rsi, 1
 17876 0000D84A 740E                    	je .L_lambda_simple_params_end_0293
 17877 0000D84C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17878 0000D851 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17879 0000D855 48FFC6                  	inc rsi
 17880 0000D858 EBEC                    	jmp .L_lambda_simple_params_loop_0293
 17881                                  .L_lambda_simple_params_end_0293:
 17882 0000D85A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 17883 0000D85D 4889C3                  	mov rbx, rax
 17884 0000D860 58                      	pop rax
 17885 0000D861 C60004                  	mov byte [rax], T_closure
 17886 0000D864 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17887 0000D868 48C74009[75D80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0293
 17888 0000D870 E9B7020000              	jmp .L_lambda_simple_end_0293
 17889                                  .L_lambda_simple_code_0293:	; lambda-simple body
 17890 0000D875 48837C241005            	cmp qword [rsp + 8 * 2], 5
 17891 0000D87B 740B                    	je .L_lambda_simple_arity_check_ok_0293
 17892 0000D87D FF742410                	push qword [rsp + 8 * 2]
 17893 0000D881 6A05                    	push 5
 17894 0000D883 E983980000              	jmp L_error_incorrect_arity_simple
 17895                                  .L_lambda_simple_arity_check_ok_0293:
 17896 0000D888 C8000000                	enter 0, 0
 17897                                  	; preparing a non-tail-call
 17898 0000D88C 488B4530                	mov rax, PARAM(2)	; param len1
 17899 0000D890 50                      	push rax
 17900 0000D891 488B4520                	mov rax, PARAM(0)	; param i
 17901 0000D895 50                      	push rax
 17902 0000D896 6A02                    	push 2	; arg count
 17903 0000D898 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 17904 0000D8A0 803805                  	cmp byte [rax], T_undefined
 17905 0000D8A3 0F847C970000            	je L_error_fvar_undefined
 17906 0000D8A9 803804                  	cmp byte [rax], T_closure
 17907 0000D8AC 0F85F7970000            	jne L_error_non_closure
 17908 0000D8B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17909 0000D8B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17910 0000D8B8 483D[02000000]          	cmp rax, sob_boolean_false
 17911 0000D8BE 742E                    	je .L_if_else_01eb
 17912                                  	; preparing a non-tail-call
 17913 0000D8C0 488B4540                	mov rax, PARAM(4)	; param len2
 17914 0000D8C4 50                      	push rax
 17915 0000D8C5 488B4530                	mov rax, PARAM(2)	; param len1
 17916 0000D8C9 50                      	push rax
 17917 0000D8CA 6A02                    	push 2	; arg count
 17918 0000D8CC 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 17919 0000D8D4 803805                  	cmp byte [rax], T_undefined
 17920 0000D8D7 0F8448970000            	je L_error_fvar_undefined
 17921 0000D8DD 803804                  	cmp byte [rax], T_closure
 17922 0000D8E0 0F85C3970000            	jne L_error_non_closure
 17923 0000D8E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17924 0000D8E9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17925 0000D8EC EB0A                    	jmp .L_if_end_01eb
 17926                                  .L_if_else_01eb:
 17927 0000D8EE 48B8-                   	mov rax, L_constants + 2
 17927 0000D8F0 [0200000000000000] 
 17928                                  .L_if_end_01eb:
 17929 0000D8F8 483D[02000000]          	cmp rax, sob_boolean_false
 17930 0000D8FE 0F8524020000            	jne .L_or_end_0031
 17931                                  
 17932                                  	; preparing a non-tail-call
 17933 0000D904 488B4530                	mov rax, PARAM(2)	; param len1
 17934 0000D908 50                      	push rax
 17935 0000D909 488B4520                	mov rax, PARAM(0)	; param i
 17936 0000D90D 50                      	push rax
 17937 0000D90E 6A02                    	push 2	; arg count
 17938 0000D910 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 17939 0000D918 803805                  	cmp byte [rax], T_undefined
 17940 0000D91B 0F8404970000            	je L_error_fvar_undefined
 17941 0000D921 803804                  	cmp byte [rax], T_closure
 17942 0000D924 0F857F970000            	jne L_error_non_closure
 17943 0000D92A FF7001                  	push SOB_CLOSURE_ENV(rax)
 17944 0000D92D FF5009                  	call SOB_CLOSURE_CODE(rax)
 17945 0000D930 483D[02000000]          	cmp rax, sob_boolean_false
 17946 0000D936 0F84DA010000            	je .L_if_else_01ed
 17947                                  	; preparing a non-tail-call
 17948                                  	; preparing a non-tail-call
 17949 0000D93C 488B4520                	mov rax, PARAM(0)	; param i
 17950 0000D940 50                      	push rax
 17951 0000D941 488B4538                	mov rax, PARAM(3)	; param str2
 17952 0000D945 50                      	push rax
 17953 0000D946 6A02                    	push 2	; arg count
 17954 0000D948 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 17955 0000D950 803805                  	cmp byte [rax], T_undefined
 17956 0000D953 0F84CC960000            	je L_error_fvar_undefined
 17957 0000D959 803804                  	cmp byte [rax], T_closure
 17958 0000D95C 0F8547970000            	jne L_error_non_closure
 17959 0000D962 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17960 0000D965 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17961 0000D968 50                      	push rax
 17962                                  	; preparing a non-tail-call
 17963 0000D969 488B4520                	mov rax, PARAM(0)	; param i
 17964 0000D96D 50                      	push rax
 17965 0000D96E 488B4528                	mov rax, PARAM(1)	; param str1
 17966 0000D972 50                      	push rax
 17967 0000D973 6A02                    	push 2	; arg count
 17968 0000D975 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 17969 0000D97D 803805                  	cmp byte [rax], T_undefined
 17970 0000D980 0F849F960000            	je L_error_fvar_undefined
 17971 0000D986 803804                  	cmp byte [rax], T_closure
 17972 0000D989 0F851A970000            	jne L_error_non_closure
 17973 0000D98F FF7001                  	push SOB_CLOSURE_ENV(rax)
 17974 0000D992 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17975 0000D995 50                      	push rax
 17976 0000D996 6A02                    	push 2	; arg count
 17977 0000D998 488B4510                	mov rax, ENV
 17978 0000D99C 488B4008                	mov rax, qword [rax + 8 * 1]
 17979 0000D9A0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char<?
 17980 0000D9A3 803804                  	cmp byte [rax], T_closure
 17981 0000D9A6 0F85FD960000            	jne L_error_non_closure
 17982 0000D9AC FF7001                  	push SOB_CLOSURE_ENV(rax)
 17983 0000D9AF FF5009                  	call SOB_CLOSURE_CODE(rax)
 17984 0000D9B2 483D[02000000]          	cmp rax, sob_boolean_false
 17985 0000D9B8 0F8556010000            	jne .L_or_end_0032
 17986                                  
 17987                                  	; preparing a non-tail-call
 17988                                  	; preparing a non-tail-call
 17989 0000D9BE 488B4520                	mov rax, PARAM(0)	; param i
 17990 0000D9C2 50                      	push rax
 17991 0000D9C3 488B4538                	mov rax, PARAM(3)	; param str2
 17992 0000D9C7 50                      	push rax
 17993 0000D9C8 6A02                    	push 2	; arg count
 17994 0000D9CA 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 17995 0000D9D2 803805                  	cmp byte [rax], T_undefined
 17996 0000D9D5 0F844A960000            	je L_error_fvar_undefined
 17997 0000D9DB 803804                  	cmp byte [rax], T_closure
 17998 0000D9DE 0F85C5960000            	jne L_error_non_closure
 17999 0000D9E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18000 0000D9E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18001 0000D9EA 50                      	push rax
 18002                                  	; preparing a non-tail-call
 18003 0000D9EB 488B4520                	mov rax, PARAM(0)	; param i
 18004 0000D9EF 50                      	push rax
 18005 0000D9F0 488B4528                	mov rax, PARAM(1)	; param str1
 18006 0000D9F4 50                      	push rax
 18007 0000D9F5 6A02                    	push 2	; arg count
 18008 0000D9F7 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 18009 0000D9FF 803805                  	cmp byte [rax], T_undefined
 18010 0000DA02 0F841D960000            	je L_error_fvar_undefined
 18011 0000DA08 803804                  	cmp byte [rax], T_closure
 18012 0000DA0B 0F8598960000            	jne L_error_non_closure
 18013 0000DA11 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18014 0000DA14 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18015 0000DA17 50                      	push rax
 18016 0000DA18 6A02                    	push 2	; arg count
 18017 0000DA1A 488B4510                	mov rax, ENV
 18018 0000DA1E 488B4008                	mov rax, qword [rax + 8 * 1]
 18019 0000DA22 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var char=?
 18020 0000DA26 803804                  	cmp byte [rax], T_closure
 18021 0000DA29 0F857A960000            	jne L_error_non_closure
 18022 0000DA2F FF7001                  	push SOB_CLOSURE_ENV(rax)
 18023 0000DA32 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18024 0000DA35 483D[02000000]          	cmp rax, sob_boolean_false
 18025 0000DA3B 0F84C1000000            	je .L_if_else_01ec
 18026                                  	; preparing a tail-call
 18027 0000DA41 488B4540                	mov rax, PARAM(4)	; param len2
 18028 0000DA45 50                      	push rax
 18029 0000DA46 488B4538                	mov rax, PARAM(3)	; param str2
 18030 0000DA4A 50                      	push rax
 18031 0000DA4B 488B4530                	mov rax, PARAM(2)	; param len1
 18032 0000DA4F 50                      	push rax
 18033 0000DA50 488B4528                	mov rax, PARAM(1)	; param str1
 18034 0000DA54 50                      	push rax
 18035                                  	; preparing a non-tail-call
 18036 0000DA55 48B8-                   	mov rax, L_constants + 2270
 18036 0000DA57 [DE08000000000000] 
 18037 0000DA5F 50                      	push rax
 18038 0000DA60 488B4520                	mov rax, PARAM(0)	; param i
 18039 0000DA64 50                      	push rax
 18040 0000DA65 6A02                    	push 2	; arg count
 18041 0000DA67 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 18042 0000DA6F 803805                  	cmp byte [rax], T_undefined
 18043 0000DA72 0F84AD950000            	je L_error_fvar_undefined
 18044 0000DA78 803804                  	cmp byte [rax], T_closure
 18045 0000DA7B 0F8528960000            	jne L_error_non_closure
 18046 0000DA81 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18047 0000DA84 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18048 0000DA87 50                      	push rax
 18049 0000DA88 6A05                    	push 5	; arg count
 18050 0000DA8A 488B4510                	mov rax, ENV
 18051 0000DA8E 488B00                  	mov rax, qword [rax + 8 * 0]
 18052 0000DA91 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18053 0000DA94 488B00                  	mov rax, qword [rax]
 18054 0000DA97 803804                  	cmp byte [rax], T_closure
 18055 0000DA9A 0F8509960000            	jne L_error_non_closure
 18056 0000DAA0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18057 0000DAA3 4C8B4009                	mov r8, qword [rax + 1 + 8]
 18058 0000DAA7 FF7508                  	push qword [rbp + 8]				; push old return address
 18059 0000DAAA FF7500                  	push qword [rbp]					; push old rbp
 18060                                  	;; move stack up ;;
 18061 0000DAAD 488B5D18                	mov rbx, [rbp + 3*8]
 18062 0000DAB1 4889DE                  	mov rsi, rbx						; save old size in rsi
 18063 0000DAB4 4883C303                	add rbx, 3
 18064 0000DAB8 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 18065 0000DAC0 B905000000              	mov rcx, 5
 18066 0000DAC5 4883C104                	add rcx, 4				; num of iterations in rcx
 18067                                  .L_tc_recycle_frame_loop_0372:
 18068 0000DAC9 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 18069 0000DAD1 488B143C                	mov rdx, [rsp + rdi]
 18070 0000DAD5 4889541D00              	mov [rbp + rbx], rdx
 18071 0000DADA 4883EB08                	sub rbx, 8
 18072 0000DADE 48FFC9                  	dec rcx
 18073 0000DAE1 4883F900                	cmp rcx, 0
 18074 0000DAE5 75E2                    	jne .L_tc_recycle_frame_loop_0372
 18075 0000DAE7 4889F3                  	mov rbx, rsi
 18076 0000DAEA 4883EB05                	sub rbx, 5
 18077 0000DAEE 488D1CDD00000000        	lea rbx, [rbx*8]
 18078 0000DAF6 4801DD                  	add rbp, rbx
 18079 0000DAF9 4889EC                  	mov rsp, rbp         ; fix stack pointers
 18080 0000DAFC 5D                      	pop rbp
 18081 0000DAFD 41FFE0                  	jmp r8
 18082 0000DB00 EB0A                    	jmp .L_if_end_01ec
 18083                                  .L_if_else_01ec:
 18084 0000DB02 48B8-                   	mov rax, L_constants + 2
 18084 0000DB04 [0200000000000000] 
 18085                                  .L_if_end_01ec:
 18086 0000DB0C 483D[02000000]          	cmp rax, sob_boolean_false
 18087 0000DB12 7500                    	jne .L_or_end_0032
 18088                                  .L_or_end_0032:
 18089 0000DB14 EB0A                    	jmp .L_if_end_01ed
 18090                                  .L_if_else_01ed:
 18091 0000DB16 48B8-                   	mov rax, L_constants + 2
 18091 0000DB18 [0200000000000000] 
 18092                                  .L_if_end_01ed:
 18093 0000DB20 483D[02000000]          	cmp rax, sob_boolean_false
 18094 0000DB26 7500                    	jne .L_or_end_0031
 18095                                  .L_or_end_0031:
 18096 0000DB28 C9                      	leave
 18097 0000DB29 C23800                  	ret AND_KILL_FRAME(5)
 18098                                  .L_lambda_simple_end_0293:	; new closure is in rax
 18099 0000DB2C 50                      	push rax
 18100 0000DB2D 488B4520                	mov rax, PARAM(0)	; param run
 18101 0000DB31 8F00                    	pop qword [rax]
 18102 0000DB33 48B8-                   	mov rax, sob_void
 18102 0000DB35 [0000000000000000] 
 18103                                  
 18104                                  	; preparing a tail-call
 18105 0000DB3D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18106 0000DB42 E80B960000              	call malloc
 18107 0000DB47 50                      	push rax
 18108 0000DB48 BF08000000              	mov rdi, 8 * 1	; new rib
 18109 0000DB4D E800960000              	call malloc
 18110 0000DB52 50                      	push rax
 18111 0000DB53 BF18000000              	mov rdi, 8 * 3	; extended env
 18112 0000DB58 E8F5950000              	call malloc
 18113 0000DB5D 488B7D10                	mov rdi, ENV
 18114 0000DB61 BE00000000              	mov rsi, 0
 18115 0000DB66 BA01000000              	mov rdx, 1
 18116                                  .L_lambda_simple_env_loop_0294:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 18117 0000DB6B 4883FE02                	cmp rsi, 2
 18118 0000DB6F 7410                    	je .L_lambda_simple_env_end_0294
 18119 0000DB71 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18120 0000DB75 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18121 0000DB79 48FFC6                  	inc rsi
 18122 0000DB7C 48FFC2                  	inc rdx
 18123 0000DB7F EBEA                    	jmp .L_lambda_simple_env_loop_0294
 18124                                  .L_lambda_simple_env_end_0294:
 18125 0000DB81 5B                      	pop rbx
 18126 0000DB82 BE00000000              	mov rsi, 0
 18127                                  .L_lambda_simple_params_loop_0294:	; copy params
 18128 0000DB87 4883FE01                	cmp rsi, 1
 18129 0000DB8B 740E                    	je .L_lambda_simple_params_end_0294
 18130 0000DB8D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18131 0000DB92 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18132 0000DB96 48FFC6                  	inc rsi
 18133 0000DB99 EBEC                    	jmp .L_lambda_simple_params_loop_0294
 18134                                  .L_lambda_simple_params_end_0294:
 18135 0000DB9B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 18136 0000DB9E 4889C3                  	mov rbx, rax
 18137 0000DBA1 58                      	pop rax
 18138 0000DBA2 C60004                  	mov byte [rax], T_closure
 18139 0000DBA5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18140 0000DBA9 48C74009[B6DB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0294
 18141 0000DBB1 E9F1020000              	jmp .L_lambda_simple_end_0294
 18142                                  .L_lambda_simple_code_0294:	; lambda-simple body
 18143 0000DBB6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18144 0000DBBC 740B                    	je .L_lambda_simple_arity_check_ok_0294
 18145 0000DBBE FF742410                	push qword [rsp + 8 * 2]
 18146 0000DBC2 6A02                    	push 2
 18147 0000DBC4 E942950000              	jmp L_error_incorrect_arity_simple
 18148                                  .L_lambda_simple_arity_check_ok_0294:
 18149 0000DBC9 C8000000                	enter 0, 0
 18150                                  	; preparing a tail-call
 18151                                  	; preparing a non-tail-call
 18152 0000DBCD 488B4528                	mov rax, PARAM(1)	; param str2
 18153 0000DBD1 50                      	push rax
 18154 0000DBD2 6A01                    	push 1	; arg count
 18155 0000DBD4 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 18156 0000DBDC 803805                  	cmp byte [rax], T_undefined
 18157 0000DBDF 0F8440940000            	je L_error_fvar_undefined
 18158 0000DBE5 803804                  	cmp byte [rax], T_closure
 18159 0000DBE8 0F85BB940000            	jne L_error_non_closure
 18160 0000DBEE FF7001                  	push SOB_CLOSURE_ENV(rax)
 18161 0000DBF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18162 0000DBF4 50                      	push rax
 18163                                  	; preparing a non-tail-call
 18164 0000DBF5 488B4520                	mov rax, PARAM(0)	; param str1
 18165 0000DBF9 50                      	push rax
 18166 0000DBFA 6A01                    	push 1	; arg count
 18167 0000DBFC 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 18168 0000DC04 803805                  	cmp byte [rax], T_undefined
 18169 0000DC07 0F8418940000            	je L_error_fvar_undefined
 18170 0000DC0D 803804                  	cmp byte [rax], T_closure
 18171 0000DC10 0F8593940000            	jne L_error_non_closure
 18172 0000DC16 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18173 0000DC19 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18174 0000DC1C 50                      	push rax
 18175 0000DC1D 6A02                    	push 2	; arg count
 18176 0000DC1F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18177 0000DC24 E829950000              	call malloc
 18178 0000DC29 50                      	push rax
 18179 0000DC2A BF10000000              	mov rdi, 8 * 2	; new rib
 18180 0000DC2F E81E950000              	call malloc
 18181 0000DC34 50                      	push rax
 18182 0000DC35 BF20000000              	mov rdi, 8 * 4	; extended env
 18183 0000DC3A E813950000              	call malloc
 18184 0000DC3F 488B7D10                	mov rdi, ENV
 18185 0000DC43 BE00000000              	mov rsi, 0
 18186 0000DC48 BA01000000              	mov rdx, 1
 18187                                  .L_lambda_simple_env_loop_0295:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 18188 0000DC4D 4883FE03                	cmp rsi, 3
 18189 0000DC51 7410                    	je .L_lambda_simple_env_end_0295
 18190 0000DC53 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18191 0000DC57 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18192 0000DC5B 48FFC6                  	inc rsi
 18193 0000DC5E 48FFC2                  	inc rdx
 18194 0000DC61 EBEA                    	jmp .L_lambda_simple_env_loop_0295
 18195                                  .L_lambda_simple_env_end_0295:
 18196 0000DC63 5B                      	pop rbx
 18197 0000DC64 BE00000000              	mov rsi, 0
 18198                                  .L_lambda_simple_params_loop_0295:	; copy params
 18199 0000DC69 4883FE02                	cmp rsi, 2
 18200 0000DC6D 740E                    	je .L_lambda_simple_params_end_0295
 18201 0000DC6F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18202 0000DC74 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18203 0000DC78 48FFC6                  	inc rsi
 18204 0000DC7B EBEC                    	jmp .L_lambda_simple_params_loop_0295
 18205                                  .L_lambda_simple_params_end_0295:
 18206 0000DC7D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 18207 0000DC80 4889C3                  	mov rbx, rax
 18208 0000DC83 58                      	pop rax
 18209 0000DC84 C60004                  	mov byte [rax], T_closure
 18210 0000DC87 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18211 0000DC8B 48C74009[98DC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0295
 18212 0000DC93 E9A2010000              	jmp .L_lambda_simple_end_0295
 18213                                  .L_lambda_simple_code_0295:	; lambda-simple body
 18214 0000DC98 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18215 0000DC9E 740B                    	je .L_lambda_simple_arity_check_ok_0295
 18216 0000DCA0 FF742410                	push qword [rsp + 8 * 2]
 18217 0000DCA4 6A02                    	push 2
 18218 0000DCA6 E960940000              	jmp L_error_incorrect_arity_simple
 18219                                  .L_lambda_simple_arity_check_ok_0295:
 18220 0000DCAB C8000000                	enter 0, 0
 18221                                  	; preparing a non-tail-call
 18222 0000DCAF 488B4528                	mov rax, PARAM(1)	; param len2
 18223 0000DCB3 50                      	push rax
 18224 0000DCB4 488B4520                	mov rax, PARAM(0)	; param len1
 18225 0000DCB8 50                      	push rax
 18226 0000DCB9 6A02                    	push 2	; arg count
 18227 0000DCBB 488B0425[2C0E0000]      	mov rax, qword [free_var_5]	; free var <=
 18228 0000DCC3 803805                  	cmp byte [rax], T_undefined
 18229 0000DCC6 0F8459930000            	je L_error_fvar_undefined
 18230 0000DCCC 803804                  	cmp byte [rax], T_closure
 18231 0000DCCF 0F85D4930000            	jne L_error_non_closure
 18232 0000DCD5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18233 0000DCD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18234 0000DCDB 483D[02000000]          	cmp rax, sob_boolean_false
 18235 0000DCE1 0F84AA000000            	je .L_if_else_01ee
 18236                                  	; preparing a tail-call
 18237 0000DCE7 488B4528                	mov rax, PARAM(1)	; param len2
 18238 0000DCEB 50                      	push rax
 18239 0000DCEC 488B4510                	mov rax, ENV
 18240 0000DCF0 488B00                  	mov rax, qword [rax + 8 * 0]
 18241 0000DCF3 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 18242 0000DCF7 50                      	push rax
 18243 0000DCF8 488B4520                	mov rax, PARAM(0)	; param len1
 18244 0000DCFC 50                      	push rax
 18245 0000DCFD 488B4510                	mov rax, ENV
 18246 0000DD01 488B00                  	mov rax, qword [rax + 8 * 0]
 18247 0000DD04 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 18248 0000DD07 50                      	push rax
 18249 0000DD08 48B8-                   	mov rax, L_constants + 2135
 18249 0000DD0A [5708000000000000] 
 18250 0000DD12 50                      	push rax
 18251 0000DD13 6A05                    	push 5	; arg count
 18252 0000DD15 488B4510                	mov rax, ENV
 18253 0000DD19 488B4008                	mov rax, qword [rax + 8 * 1]
 18254 0000DD1D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18255 0000DD20 488B00                  	mov rax, qword [rax]
 18256 0000DD23 803804                  	cmp byte [rax], T_closure
 18257 0000DD26 0F857D930000            	jne L_error_non_closure
 18258 0000DD2C FF7001                  	push SOB_CLOSURE_ENV(rax)
 18259 0000DD2F 4C8B4009                	mov r8, qword [rax + 1 + 8]
 18260 0000DD33 FF7508                  	push qword [rbp + 8]				; push old return address
 18261 0000DD36 FF7500                  	push qword [rbp]					; push old rbp
 18262                                  	;; move stack up ;;
 18263 0000DD39 488B5D18                	mov rbx, [rbp + 3*8]
 18264 0000DD3D 4889DE                  	mov rsi, rbx						; save old size in rsi
 18265 0000DD40 4883C303                	add rbx, 3
 18266 0000DD44 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 18267 0000DD4C B905000000              	mov rcx, 5
 18268 0000DD51 4883C104                	add rcx, 4				; num of iterations in rcx
 18269                                  .L_tc_recycle_frame_loop_0375:
 18270 0000DD55 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 18271 0000DD5D 488B143C                	mov rdx, [rsp + rdi]
 18272 0000DD61 4889541D00              	mov [rbp + rbx], rdx
 18273 0000DD66 4883EB08                	sub rbx, 8
 18274 0000DD6A 48FFC9                  	dec rcx
 18275 0000DD6D 4883F900                	cmp rcx, 0
 18276 0000DD71 75E2                    	jne .L_tc_recycle_frame_loop_0375
 18277 0000DD73 4889F3                  	mov rbx, rsi
 18278 0000DD76 4883EB05                	sub rbx, 5
 18279 0000DD7A 488D1CDD00000000        	lea rbx, [rbx*8]
 18280 0000DD82 4801DD                  	add rbp, rbx
 18281 0000DD85 4889EC                  	mov rsp, rbp         ; fix stack pointers
 18282 0000DD88 5D                      	pop rbp
 18283 0000DD89 41FFE0                  	jmp r8
 18284 0000DD8C E9A5000000              	jmp .L_if_end_01ee
 18285                                  .L_if_else_01ee:
 18286                                  	; preparing a tail-call
 18287 0000DD91 488B4520                	mov rax, PARAM(0)	; param len1
 18288 0000DD95 50                      	push rax
 18289 0000DD96 488B4510                	mov rax, ENV
 18290 0000DD9A 488B00                  	mov rax, qword [rax + 8 * 0]
 18291 0000DD9D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 18292 0000DDA0 50                      	push rax
 18293 0000DDA1 488B4528                	mov rax, PARAM(1)	; param len2
 18294 0000DDA5 50                      	push rax
 18295 0000DDA6 488B4510                	mov rax, ENV
 18296 0000DDAA 488B00                  	mov rax, qword [rax + 8 * 0]
 18297 0000DDAD 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 18298 0000DDB1 50                      	push rax
 18299 0000DDB2 48B8-                   	mov rax, L_constants + 2135
 18299 0000DDB4 [5708000000000000] 
 18300 0000DDBC 50                      	push rax
 18301 0000DDBD 6A05                    	push 5	; arg count
 18302 0000DDBF 488B4510                	mov rax, ENV
 18303 0000DDC3 488B4008                	mov rax, qword [rax + 8 * 1]
 18304 0000DDC7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18305 0000DDCA 488B00                  	mov rax, qword [rax]
 18306 0000DDCD 803804                  	cmp byte [rax], T_closure
 18307 0000DDD0 0F85D3920000            	jne L_error_non_closure
 18308 0000DDD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18309 0000DDD9 4C8B4009                	mov r8, qword [rax + 1 + 8]
 18310 0000DDDD FF7508                  	push qword [rbp + 8]				; push old return address
 18311 0000DDE0 FF7500                  	push qword [rbp]					; push old rbp
 18312                                  	;; move stack up ;;
 18313 0000DDE3 488B5D18                	mov rbx, [rbp + 3*8]
 18314 0000DDE7 4889DE                  	mov rsi, rbx						; save old size in rsi
 18315 0000DDEA 4883C303                	add rbx, 3
 18316 0000DDEE 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 18317 0000DDF6 B905000000              	mov rcx, 5
 18318 0000DDFB 4883C104                	add rcx, 4				; num of iterations in rcx
 18319                                  .L_tc_recycle_frame_loop_0376:
 18320 0000DDFF 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 18321 0000DE07 488B143C                	mov rdx, [rsp + rdi]
 18322 0000DE0B 4889541D00              	mov [rbp + rbx], rdx
 18323 0000DE10 4883EB08                	sub rbx, 8
 18324 0000DE14 48FFC9                  	dec rcx
 18325 0000DE17 4883F900                	cmp rcx, 0
 18326 0000DE1B 75E2                    	jne .L_tc_recycle_frame_loop_0376
 18327 0000DE1D 4889F3                  	mov rbx, rsi
 18328 0000DE20 4883EB05                	sub rbx, 5
 18329 0000DE24 488D1CDD00000000        	lea rbx, [rbx*8]
 18330 0000DE2C 4801DD                  	add rbp, rbx
 18331 0000DE2F 4889EC                  	mov rsp, rbp         ; fix stack pointers
 18332 0000DE32 5D                      	pop rbp
 18333 0000DE33 41FFE0                  	jmp r8
 18334                                  .L_if_end_01ee:
 18335 0000DE36 C9                      	leave
 18336 0000DE37 C22000                  	ret AND_KILL_FRAME(2)
 18337                                  .L_lambda_simple_end_0295:	; new closure is in rax
 18338 0000DE3A 803804                  	cmp byte [rax], T_closure
 18339 0000DE3D 0F8566920000            	jne L_error_non_closure
 18340 0000DE43 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18341 0000DE46 4C8B4009                	mov r8, qword [rax + 1 + 8]
 18342 0000DE4A FF7508                  	push qword [rbp + 8]				; push old return address
 18343 0000DE4D FF7500                  	push qword [rbp]					; push old rbp
 18344                                  	;; move stack up ;;
 18345 0000DE50 488B5D18                	mov rbx, [rbp + 3*8]
 18346 0000DE54 4889DE                  	mov rsi, rbx						; save old size in rsi
 18347 0000DE57 4883C303                	add rbx, 3
 18348 0000DE5B 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 18349 0000DE63 B902000000              	mov rcx, 2
 18350 0000DE68 4883C104                	add rcx, 4				; num of iterations in rcx
 18351                                  .L_tc_recycle_frame_loop_0374:
 18352 0000DE6C 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 18353 0000DE74 488B143C                	mov rdx, [rsp + rdi]
 18354 0000DE78 4889541D00              	mov [rbp + rbx], rdx
 18355 0000DE7D 4883EB08                	sub rbx, 8
 18356 0000DE81 48FFC9                  	dec rcx
 18357 0000DE84 4883F900                	cmp rcx, 0
 18358 0000DE88 75E2                    	jne .L_tc_recycle_frame_loop_0374
 18359 0000DE8A 4889F3                  	mov rbx, rsi
 18360 0000DE8D 4883EB02                	sub rbx, 2
 18361 0000DE91 488D1CDD00000000        	lea rbx, [rbx*8]
 18362 0000DE99 4801DD                  	add rbp, rbx
 18363 0000DE9C 4889EC                  	mov rsp, rbp         ; fix stack pointers
 18364 0000DE9F 5D                      	pop rbp
 18365 0000DEA0 41FFE0                  	jmp r8
 18366 0000DEA3 C9                      	leave
 18367 0000DEA4 C22000                  	ret AND_KILL_FRAME(2)
 18368                                  .L_lambda_simple_end_0294:	; new closure is in rax
 18369 0000DEA7 50                      	push rax
 18370 0000DEA8 6A01                    	push 1	; arg count
 18371 0000DEAA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18372 0000DEAF E89E920000              	call malloc
 18373 0000DEB4 50                      	push rax
 18374 0000DEB5 BF08000000              	mov rdi, 8 * 1	; new rib
 18375 0000DEBA E893920000              	call malloc
 18376 0000DEBF 50                      	push rax
 18377 0000DEC0 BF18000000              	mov rdi, 8 * 3	; extended env
 18378 0000DEC5 E888920000              	call malloc
 18379 0000DECA 488B7D10                	mov rdi, ENV
 18380 0000DECE BE00000000              	mov rsi, 0
 18381 0000DED3 BA01000000              	mov rdx, 1
 18382                                  .L_lambda_simple_env_loop_0296:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 18383 0000DED8 4883FE02                	cmp rsi, 2
 18384 0000DEDC 7410                    	je .L_lambda_simple_env_end_0296
 18385 0000DEDE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18386 0000DEE2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18387 0000DEE6 48FFC6                  	inc rsi
 18388 0000DEE9 48FFC2                  	inc rdx
 18389 0000DEEC EBEA                    	jmp .L_lambda_simple_env_loop_0296
 18390                                  .L_lambda_simple_env_end_0296:
 18391 0000DEEE 5B                      	pop rbx
 18392 0000DEEF BE00000000              	mov rsi, 0
 18393                                  .L_lambda_simple_params_loop_0296:	; copy params
 18394 0000DEF4 4883FE01                	cmp rsi, 1
 18395 0000DEF8 740E                    	je .L_lambda_simple_params_end_0296
 18396 0000DEFA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18397 0000DEFF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18398 0000DF03 48FFC6                  	inc rsi
 18399 0000DF06 EBEC                    	jmp .L_lambda_simple_params_loop_0296
 18400                                  .L_lambda_simple_params_end_0296:
 18401 0000DF08 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 18402 0000DF0B 4889C3                  	mov rbx, rax
 18403 0000DF0E 58                      	pop rax
 18404 0000DF0F C60004                  	mov byte [rax], T_closure
 18405 0000DF12 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18406 0000DF16 48C74009[23DF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0296
 18407 0000DF1E E92A050000              	jmp .L_lambda_simple_end_0296
 18408                                  .L_lambda_simple_code_0296:	; lambda-simple body
 18409 0000DF23 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18410 0000DF29 740B                    	je .L_lambda_simple_arity_check_ok_0296
 18411 0000DF2B FF742410                	push qword [rsp + 8 * 2]
 18412 0000DF2F 6A01                    	push 1
 18413 0000DF31 E9D5910000              	jmp L_error_incorrect_arity_simple
 18414                                  .L_lambda_simple_arity_check_ok_0296:
 18415 0000DF36 C8000000                	enter 0, 0
 18416                                  	; preparing a tail-call
 18417 0000DF3A 48B8-                   	mov rax, L_constants + 1993
 18417 0000DF3C [C907000000000000] 
 18418 0000DF44 50                      	push rax
 18419 0000DF45 6A01                    	push 1	; arg count
 18420 0000DF47 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18421 0000DF4C E801920000              	call malloc
 18422 0000DF51 50                      	push rax
 18423 0000DF52 BF08000000              	mov rdi, 8 * 1	; new rib
 18424 0000DF57 E8F6910000              	call malloc
 18425 0000DF5C 50                      	push rax
 18426 0000DF5D BF20000000              	mov rdi, 8 * 4	; extended env
 18427 0000DF62 E8EB910000              	call malloc
 18428 0000DF67 488B7D10                	mov rdi, ENV
 18429 0000DF6B BE00000000              	mov rsi, 0
 18430 0000DF70 BA01000000              	mov rdx, 1
 18431                                  .L_lambda_simple_env_loop_0297:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 18432 0000DF75 4883FE03                	cmp rsi, 3
 18433 0000DF79 7410                    	je .L_lambda_simple_env_end_0297
 18434 0000DF7B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18435 0000DF7F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18436 0000DF83 48FFC6                  	inc rsi
 18437 0000DF86 48FFC2                  	inc rdx
 18438 0000DF89 EBEA                    	jmp .L_lambda_simple_env_loop_0297
 18439                                  .L_lambda_simple_env_end_0297:
 18440 0000DF8B 5B                      	pop rbx
 18441 0000DF8C BE00000000              	mov rsi, 0
 18442                                  .L_lambda_simple_params_loop_0297:	; copy params
 18443 0000DF91 4883FE01                	cmp rsi, 1
 18444 0000DF95 740E                    	je .L_lambda_simple_params_end_0297
 18445 0000DF97 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18446 0000DF9C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18447 0000DFA0 48FFC6                  	inc rsi
 18448 0000DFA3 EBEC                    	jmp .L_lambda_simple_params_loop_0297
 18449                                  .L_lambda_simple_params_end_0297:
 18450 0000DFA5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 18451 0000DFA8 4889C3                  	mov rbx, rax
 18452 0000DFAB 58                      	pop rax
 18453 0000DFAC C60004                  	mov byte [rax], T_closure
 18454 0000DFAF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18455 0000DFB3 48C74009[C0DF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0297
 18456 0000DFBB E920040000              	jmp .L_lambda_simple_end_0297
 18457                                  .L_lambda_simple_code_0297:	; lambda-simple body
 18458 0000DFC0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18459 0000DFC6 740B                    	je .L_lambda_simple_arity_check_ok_0297
 18460 0000DFC8 FF742410                	push qword [rsp + 8 * 2]
 18461 0000DFCC 6A01                    	push 1
 18462 0000DFCE E938910000              	jmp L_error_incorrect_arity_simple
 18463                                  .L_lambda_simple_arity_check_ok_0297:
 18464 0000DFD3 C8000000                	enter 0, 0
 18465 0000DFD7 BF08000000              	mov rdi, 8
 18466 0000DFDC E871910000              	call malloc
 18467 0000DFE1 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
 18468 0000DFE5 488918                  	mov qword[rax], rbx
 18469 0000DFE8 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 18470 0000DFEC 48B8-                   	mov rax, sob_void
 18470 0000DFEE [0000000000000000] 
 18471                                  
 18472 0000DFF6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18473 0000DFFB E852910000              	call malloc
 18474 0000E000 50                      	push rax
 18475 0000E001 BF08000000              	mov rdi, 8 * 1	; new rib
 18476 0000E006 E847910000              	call malloc
 18477 0000E00B 50                      	push rax
 18478 0000E00C BF28000000              	mov rdi, 8 * 5	; extended env
 18479 0000E011 E83C910000              	call malloc
 18480 0000E016 488B7D10                	mov rdi, ENV
 18481 0000E01A BE00000000              	mov rsi, 0
 18482 0000E01F BA01000000              	mov rdx, 1
 18483                                  .L_lambda_simple_env_loop_0298:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 18484 0000E024 4883FE04                	cmp rsi, 4
 18485 0000E028 7410                    	je .L_lambda_simple_env_end_0298
 18486 0000E02A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18487 0000E02E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18488 0000E032 48FFC6                  	inc rsi
 18489 0000E035 48FFC2                  	inc rdx
 18490 0000E038 EBEA                    	jmp .L_lambda_simple_env_loop_0298
 18491                                  .L_lambda_simple_env_end_0298:
 18492 0000E03A 5B                      	pop rbx
 18493 0000E03B BE00000000              	mov rsi, 0
 18494                                  .L_lambda_simple_params_loop_0298:	; copy params
 18495 0000E040 4883FE01                	cmp rsi, 1
 18496 0000E044 740E                    	je .L_lambda_simple_params_end_0298
 18497 0000E046 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18498 0000E04B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18499 0000E04F 48FFC6                  	inc rsi
 18500 0000E052 EBEC                    	jmp .L_lambda_simple_params_loop_0298
 18501                                  .L_lambda_simple_params_end_0298:
 18502 0000E054 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 18503 0000E057 4889C3                  	mov rbx, rax
 18504 0000E05A 58                      	pop rax
 18505 0000E05B C60004                  	mov byte [rax], T_closure
 18506 0000E05E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18507 0000E062 48C74009[6FE00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0298
 18508 0000E06A E97F010000              	jmp .L_lambda_simple_end_0298
 18509                                  .L_lambda_simple_code_0298:	; lambda-simple body
 18510 0000E06F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18511 0000E075 740B                    	je .L_lambda_simple_arity_check_ok_0298
 18512 0000E077 FF742410                	push qword [rsp + 8 * 2]
 18513 0000E07B 6A02                    	push 2
 18514 0000E07D E989900000              	jmp L_error_incorrect_arity_simple
 18515                                  .L_lambda_simple_arity_check_ok_0298:
 18516 0000E082 C8000000                	enter 0, 0
 18517                                  	; preparing a non-tail-call
 18518 0000E086 488B4528                	mov rax, PARAM(1)	; param strs
 18519 0000E08A 50                      	push rax
 18520 0000E08B 6A01                    	push 1	; arg count
 18521 0000E08D 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 18522 0000E095 803805                  	cmp byte [rax], T_undefined
 18523 0000E098 0F84878F0000            	je L_error_fvar_undefined
 18524 0000E09E 803804                  	cmp byte [rax], T_closure
 18525 0000E0A1 0F8502900000            	jne L_error_non_closure
 18526 0000E0A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18527 0000E0AA FF5009                  	call SOB_CLOSURE_CODE(rax)
 18528 0000E0AD 483D[02000000]          	cmp rax, sob_boolean_false
 18529 0000E0B3 0F8531010000            	jne .L_or_end_0033
 18530                                  
 18531                                  	; preparing a non-tail-call
 18532                                  	; preparing a non-tail-call
 18533 0000E0B9 488B4528                	mov rax, PARAM(1)	; param strs
 18534 0000E0BD 50                      	push rax
 18535 0000E0BE 6A01                    	push 1	; arg count
 18536 0000E0C0 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 18537 0000E0C8 803805                  	cmp byte [rax], T_undefined
 18538 0000E0CB 0F84548F0000            	je L_error_fvar_undefined
 18539 0000E0D1 803804                  	cmp byte [rax], T_closure
 18540 0000E0D4 0F85CF8F0000            	jne L_error_non_closure
 18541 0000E0DA FF7001                  	push SOB_CLOSURE_ENV(rax)
 18542 0000E0DD FF5009                  	call SOB_CLOSURE_CODE(rax)
 18543 0000E0E0 50                      	push rax
 18544 0000E0E1 488B4520                	mov rax, PARAM(0)	; param str
 18545 0000E0E5 50                      	push rax
 18546 0000E0E6 6A02                    	push 2	; arg count
 18547 0000E0E8 488B4510                	mov rax, ENV
 18548 0000E0EC 488B4008                	mov rax, qword [rax + 8 * 1]
 18549 0000E0F0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string<?
 18550 0000E0F3 803804                  	cmp byte [rax], T_closure
 18551 0000E0F6 0F85AD8F0000            	jne L_error_non_closure
 18552 0000E0FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 18553 0000E0FF FF5009                  	call SOB_CLOSURE_CODE(rax)
 18554 0000E102 483D[02000000]          	cmp rax, sob_boolean_false
 18555 0000E108 0F84CA000000            	je .L_if_else_01ef
 18556                                  	; preparing a tail-call
 18557                                  	; preparing a non-tail-call
 18558 0000E10E 488B4528                	mov rax, PARAM(1)	; param strs
 18559 0000E112 50                      	push rax
 18560 0000E113 6A01                    	push 1	; arg count
 18561 0000E115 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 18562 0000E11D 803805                  	cmp byte [rax], T_undefined
 18563 0000E120 0F84FF8E0000            	je L_error_fvar_undefined
 18564 0000E126 803804                  	cmp byte [rax], T_closure
 18565 0000E129 0F857A8F0000            	jne L_error_non_closure
 18566 0000E12F FF7001                  	push SOB_CLOSURE_ENV(rax)
 18567 0000E132 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18568 0000E135 50                      	push rax
 18569                                  	; preparing a non-tail-call
 18570 0000E136 488B4528                	mov rax, PARAM(1)	; param strs
 18571 0000E13A 50                      	push rax
 18572 0000E13B 6A01                    	push 1	; arg count
 18573 0000E13D 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 18574 0000E145 803805                  	cmp byte [rax], T_undefined
 18575 0000E148 0F84D78E0000            	je L_error_fvar_undefined
 18576 0000E14E 803804                  	cmp byte [rax], T_closure
 18577 0000E151 0F85528F0000            	jne L_error_non_closure
 18578 0000E157 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18579 0000E15A FF5009                  	call SOB_CLOSURE_CODE(rax)
 18580 0000E15D 50                      	push rax
 18581 0000E15E 6A02                    	push 2	; arg count
 18582 0000E160 488B4510                	mov rax, ENV
 18583 0000E164 488B00                  	mov rax, qword [rax + 8 * 0]
 18584 0000E167 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18585 0000E16A 488B00                  	mov rax, qword [rax]
 18586 0000E16D 803804                  	cmp byte [rax], T_closure
 18587 0000E170 0F85338F0000            	jne L_error_non_closure
 18588 0000E176 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18589 0000E179 4C8B4009                	mov r8, qword [rax + 1 + 8]
 18590 0000E17D FF7508                  	push qword [rbp + 8]				; push old return address
 18591 0000E180 FF7500                  	push qword [rbp]					; push old rbp
 18592                                  	;; move stack up ;;
 18593 0000E183 488B5D18                	mov rbx, [rbp + 3*8]
 18594 0000E187 4889DE                  	mov rsi, rbx						; save old size in rsi
 18595 0000E18A 4883C303                	add rbx, 3
 18596 0000E18E 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 18597 0000E196 B902000000              	mov rcx, 2
 18598 0000E19B 4883C104                	add rcx, 4				; num of iterations in rcx
 18599                                  .L_tc_recycle_frame_loop_0378:
 18600 0000E19F 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 18601 0000E1A7 488B143C                	mov rdx, [rsp + rdi]
 18602 0000E1AB 4889541D00              	mov [rbp + rbx], rdx
 18603 0000E1B0 4883EB08                	sub rbx, 8
 18604 0000E1B4 48FFC9                  	dec rcx
 18605 0000E1B7 4883F900                	cmp rcx, 0
 18606 0000E1BB 75E2                    	jne .L_tc_recycle_frame_loop_0378
 18607 0000E1BD 4889F3                  	mov rbx, rsi
 18608 0000E1C0 4883EB02                	sub rbx, 2
 18609 0000E1C4 488D1CDD00000000        	lea rbx, [rbx*8]
 18610 0000E1CC 4801DD                  	add rbp, rbx
 18611 0000E1CF 4889EC                  	mov rsp, rbp         ; fix stack pointers
 18612 0000E1D2 5D                      	pop rbp
 18613 0000E1D3 41FFE0                  	jmp r8
 18614 0000E1D6 EB0A                    	jmp .L_if_end_01ef
 18615                                  .L_if_else_01ef:
 18616 0000E1D8 48B8-                   	mov rax, L_constants + 2
 18616 0000E1DA [0200000000000000] 
 18617                                  .L_if_end_01ef:
 18618 0000E1E2 483D[02000000]          	cmp rax, sob_boolean_false
 18619 0000E1E8 7500                    	jne .L_or_end_0033
 18620                                  .L_or_end_0033:
 18621 0000E1EA C9                      	leave
 18622 0000E1EB C22000                  	ret AND_KILL_FRAME(2)
 18623                                  .L_lambda_simple_end_0298:	; new closure is in rax
 18624 0000E1EE 50                      	push rax
 18625 0000E1EF 488B4520                	mov rax, PARAM(0)	; param run
 18626 0000E1F3 8F00                    	pop qword [rax]
 18627 0000E1F5 48B8-                   	mov rax, sob_void
 18627 0000E1F7 [0000000000000000] 
 18628                                  
 18629 0000E1FF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18630 0000E204 E8498F0000              	call malloc
 18631 0000E209 50                      	push rax
 18632 0000E20A BF08000000              	mov rdi, 8 * 1	; new rib
 18633 0000E20F E83E8F0000              	call malloc
 18634 0000E214 50                      	push rax
 18635 0000E215 BF28000000              	mov rdi, 8 * 5	; extended env
 18636 0000E21A E8338F0000              	call malloc
 18637 0000E21F 488B7D10                	mov rdi, ENV
 18638 0000E223 BE00000000              	mov rsi, 0
 18639 0000E228 BA01000000              	mov rdx, 1
 18640                                  .L_lambda_opt_env_loop_0059:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 18641 0000E22D 4883FE04                	cmp rsi, 4
 18642 0000E231 7410                    	je .L_lambda_opt_env_end_0059
 18643 0000E233 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18644 0000E237 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18645 0000E23B 48FFC6                  	inc rsi
 18646 0000E23E 48FFC2                  	inc rdx
 18647 0000E241 EBEA                    	jmp .L_lambda_opt_env_loop_0059
 18648                                  .L_lambda_opt_env_end_0059:
 18649 0000E243 5B                      	pop rbx
 18650 0000E244 BE00000000              	mov rsi, 0
 18651                                  .L_lambda_opt_params_loop_0059:	; copy params
 18652 0000E249 4883FE01                	cmp rsi, 1
 18653 0000E24D 740E                    	je .L_lambda_opt_params_end_0059
 18654 0000E24F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18655 0000E254 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18656 0000E258 48FFC6                  	inc rsi
 18657 0000E25B EBEC                    	jmp .L_lambda_opt_params_loop_0059
 18658                                  .L_lambda_opt_params_end_0059:
 18659 0000E25D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 18660 0000E260 4889C3                  	mov rbx, rax
 18661 0000E263 58                      	pop rax
 18662 0000E264 C60004                  	mov byte [rax], T_closure
 18663 0000E267 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18664 0000E26B 48C74009[78E20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0059
 18665 0000E273 E964010000              	jmp .L_lambda_opt_end_0059
 18666                                  .L_lambda_opt_code_0059:	; lambda-opt body
 18667 0000E278 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18668 0000E27E 740D                    	je .L_lambda_opt_arity_check_exact_0059
 18669 0000E280 7F48                    	jg .L_lambda_opt_arity_check_more_0059
 18670 0000E282 FF742410                	push qword [rsp + 8 * 2]
 18671 0000E286 6A01                    	push 1
 18672 0000E288 E9928E0000              	jmp L_error_incorrect_arity_opt
 18673                                  .L_lambda_opt_arity_check_exact_0059:
 18674 0000E28D 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update argument count (fixed params + 1 for nil)
 18675 0000E296 41BA04000000            	mov r10, 4	; r10 = total addresses to adjust (fixed params + 3)
 18676 0000E29C FF3424                  	push qword [rsp]	; Save the top stack element
 18677 0000E29F 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
 18678                                  .L_lambda_opt_stack_shrink_loop_0109:
 18679 0000E2A5 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
 18680 0000E2A8 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0109	; Exit loop if all elements processed
 18681 0000E2AA 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
 18682 0000E2AF 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
 18683 0000E2B3 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
 18684 0000E2B8 49FFC3                  	inc r11	; Increment loop index
 18685 0000E2BB EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_0109	; Jump back to loop start
 18686                                  .L_lambda_opt_stack_shrink_loop_exit_0109:
 18687 0000E2BD 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
 18688 0000E2C5 E988000000              	jmp .L_lambda_opt_stack_adjusted_0059
 18689                                  .L_lambda_opt_arity_check_more_0059:
 18690 0000E2CA 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
 18691 0000E2CF 4983E801                	sub r8, 1	; r8 = count of optional params
 18692 0000E2D3 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update the number of params (fixed params + 1 for list opt)
 18693 0000E2DC 41B900000000            	mov r9, 0	; r9 = index of optional argument list
 18694 0000E2E2 4E8D54C418              	lea r10, [rsp + 2 * 8 + 1 * 8 + r8 * 8]	; r10 = address of first optional param
 18695 0000E2E7 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
 18695 0000E2E9 [0100000000000000] 
 18696                                  .L_lambda_opt_stack_shrink_loop_010a:
 18697 0000E2F1 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
 18698 0000E2F4 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_010a	; Exit loop if all optional params are processed
 18699 0000E2F6 BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
 18700 0000E2FB E8528E0000              	call malloc	; Allocate memory for a new pair
 18701 0000E300 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
 18702 0000E304 49F7D9                  	neg r9	; Negate index to access in reverse
 18703 0000E307 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
 18704 0000E30B 49F7D9                  	neg r9	; Negate index back
 18705 0000E30E 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
 18706 0000E312 C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
 18707 0000E315 4989C3                  	mov r11, rax	; Update current pair to the newly created one
 18708 0000E318 49FFC1                  	inc r9	; Increment the index
 18709 0000E31B EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_010a	; Repeat the loop for the next param
 18710                                  .L_lambda_opt_stack_shrink_loop_exit_010a:
 18711 0000E31D 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
 18712 0000E320 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
 18713 0000E324 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
 18714 0000E327 4983C418                	add r12, 24	; Skip fixed params and return address
 18715 0000E32B 41BD04000000            	mov r13, 4	; r13 = loop counter (number of params, old fp, ret addr, lex env)
 18716                                  .L_lambda_opt_stack_shrink_loop_010b:
 18717 0000E331 4983FD00                	cmp r13, 0	; Check if there are more values to copy
 18718 0000E335 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_010b	; Exit loop if all values are copied
 18719 0000E337 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
 18720 0000E33B 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
 18721 0000E33E 49FFCD                  	dec r13	; Decrement the loop counter
 18722 0000E341 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
 18723 0000E345 4983EC08                	sub r12, 8	; Move the source pointer to the next location
 18724 0000E349 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_010b	; Repeat the loop for the next value
 18725                                  .L_lambda_opt_stack_shrink_loop_exit_010b:
 18726 0000E34B 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
 18727 0000E34F 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
 18728                                  .L_lambda_opt_stack_adjusted_0059:
 18729 0000E352 C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
 18730                                  	; preparing a tail-call
 18731 0000E356 488B4528                	mov rax, PARAM(1)	; param strs
 18732 0000E35A 50                      	push rax
 18733 0000E35B 488B4520                	mov rax, PARAM(0)	; param str
 18734 0000E35F 50                      	push rax
 18735 0000E360 6A02                    	push 2	; arg count
 18736 0000E362 488B4510                	mov rax, ENV
 18737 0000E366 488B00                  	mov rax, qword [rax + 8 * 0]
 18738 0000E369 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18739 0000E36C 488B00                  	mov rax, qword [rax]
 18740 0000E36F 803804                  	cmp byte [rax], T_closure
 18741 0000E372 0F85318D0000            	jne L_error_non_closure
 18742 0000E378 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18743 0000E37B 4C8B4009                	mov r8, qword [rax + 1 + 8]
 18744 0000E37F FF7508                  	push qword [rbp + 8]				; push old return address
 18745 0000E382 FF7500                  	push qword [rbp]					; push old rbp
 18746                                  	;; move stack up ;;
 18747 0000E385 488B5D18                	mov rbx, [rbp + 3*8]
 18748 0000E389 4889DE                  	mov rsi, rbx						; save old size in rsi
 18749 0000E38C 4883C303                	add rbx, 3
 18750 0000E390 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 18751 0000E398 B902000000              	mov rcx, 2
 18752 0000E39D 4883C104                	add rcx, 4				; num of iterations in rcx
 18753                                  .L_tc_recycle_frame_loop_0379:
 18754 0000E3A1 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 18755 0000E3A9 488B143C                	mov rdx, [rsp + rdi]
 18756 0000E3AD 4889541D00              	mov [rbp + rbx], rdx
 18757 0000E3B2 4883EB08                	sub rbx, 8
 18758 0000E3B6 48FFC9                  	dec rcx
 18759 0000E3B9 4883F900                	cmp rcx, 0
 18760 0000E3BD 75E2                    	jne .L_tc_recycle_frame_loop_0379
 18761 0000E3BF 4889F3                  	mov rbx, rsi
 18762 0000E3C2 4883EB02                	sub rbx, 2
 18763 0000E3C6 488D1CDD00000000        	lea rbx, [rbx*8]
 18764 0000E3CE 4801DD                  	add rbp, rbx
 18765 0000E3D1 4889EC                  	mov rsp, rbp         ; fix stack pointers
 18766 0000E3D4 5D                      	pop rbp
 18767 0000E3D5 41FFE0                  	jmp r8
 18768 0000E3D8 C9                      	leave	; Restore the previous stack frame
 18769 0000E3D9 C22000                  	ret AND_KILL_FRAME(2)
 18770                                  .L_lambda_opt_end_0059:	; new closure is in rax
 18771 0000E3DC C9                      	leave
 18772 0000E3DD C21800                  	ret AND_KILL_FRAME(1)
 18773                                  .L_lambda_simple_end_0297:	; new closure is in rax
 18774 0000E3E0 803804                  	cmp byte [rax], T_closure
 18775 0000E3E3 0F85C08C0000            	jne L_error_non_closure
 18776 0000E3E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18777 0000E3EC 4C8B4009                	mov r8, qword [rax + 1 + 8]
 18778 0000E3F0 FF7508                  	push qword [rbp + 8]				; push old return address
 18779 0000E3F3 FF7500                  	push qword [rbp]					; push old rbp
 18780                                  	;; move stack up ;;
 18781 0000E3F6 488B5D18                	mov rbx, [rbp + 3*8]
 18782 0000E3FA 4889DE                  	mov rsi, rbx						; save old size in rsi
 18783 0000E3FD 4883C303                	add rbx, 3
 18784 0000E401 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 18785 0000E409 B901000000              	mov rcx, 1
 18786 0000E40E 4883C104                	add rcx, 4				; num of iterations in rcx
 18787                                  .L_tc_recycle_frame_loop_0377:
 18788 0000E412 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 18789 0000E41A 488B143C                	mov rdx, [rsp + rdi]
 18790 0000E41E 4889541D00              	mov [rbp + rbx], rdx
 18791 0000E423 4883EB08                	sub rbx, 8
 18792 0000E427 48FFC9                  	dec rcx
 18793 0000E42A 4883F900                	cmp rcx, 0
 18794 0000E42E 75E2                    	jne .L_tc_recycle_frame_loop_0377
 18795 0000E430 4889F3                  	mov rbx, rsi
 18796 0000E433 4883EB01                	sub rbx, 1
 18797 0000E437 488D1CDD00000000        	lea rbx, [rbx*8]
 18798 0000E43F 4801DD                  	add rbp, rbx
 18799 0000E442 4889EC                  	mov rsp, rbp         ; fix stack pointers
 18800 0000E445 5D                      	pop rbp
 18801 0000E446 41FFE0                  	jmp r8
 18802 0000E449 C9                      	leave
 18803 0000E44A C21800                  	ret AND_KILL_FRAME(1)
 18804                                  .L_lambda_simple_end_0296:	; new closure is in rax
 18805 0000E44D 803804                  	cmp byte [rax], T_closure
 18806 0000E450 0F85538C0000            	jne L_error_non_closure
 18807 0000E456 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18808 0000E459 4C8B4009                	mov r8, qword [rax + 1 + 8]
 18809 0000E45D FF7508                  	push qword [rbp + 8]				; push old return address
 18810 0000E460 FF7500                  	push qword [rbp]					; push old rbp
 18811                                  	;; move stack up ;;
 18812 0000E463 488B5D18                	mov rbx, [rbp + 3*8]
 18813 0000E467 4889DE                  	mov rsi, rbx						; save old size in rsi
 18814 0000E46A 4883C303                	add rbx, 3
 18815 0000E46E 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 18816 0000E476 B901000000              	mov rcx, 1
 18817 0000E47B 4883C104                	add rcx, 4				; num of iterations in rcx
 18818                                  .L_tc_recycle_frame_loop_0373:
 18819 0000E47F 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 18820 0000E487 488B143C                	mov rdx, [rsp + rdi]
 18821 0000E48B 4889541D00              	mov [rbp + rbx], rdx
 18822 0000E490 4883EB08                	sub rbx, 8
 18823 0000E494 48FFC9                  	dec rcx
 18824 0000E497 4883F900                	cmp rcx, 0
 18825 0000E49B 75E2                    	jne .L_tc_recycle_frame_loop_0373
 18826 0000E49D 4889F3                  	mov rbx, rsi
 18827 0000E4A0 4883EB01                	sub rbx, 1
 18828 0000E4A4 488D1CDD00000000        	lea rbx, [rbx*8]
 18829 0000E4AC 4801DD                  	add rbp, rbx
 18830 0000E4AF 4889EC                  	mov rsp, rbp         ; fix stack pointers
 18831 0000E4B2 5D                      	pop rbp
 18832 0000E4B3 41FFE0                  	jmp r8
 18833 0000E4B6 C9                      	leave
 18834 0000E4B7 C21800                  	ret AND_KILL_FRAME(1)
 18835                                  .L_lambda_simple_end_0292:	; new closure is in rax
 18836 0000E4BA 803804                  	cmp byte [rax], T_closure
 18837 0000E4BD 0F85E68B0000            	jne L_error_non_closure
 18838 0000E4C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18839 0000E4C6 4C8B4009                	mov r8, qword [rax + 1 + 8]
 18840 0000E4CA FF7508                  	push qword [rbp + 8]				; push old return address
 18841 0000E4CD FF7500                  	push qword [rbp]					; push old rbp
 18842                                  	;; move stack up ;;
 18843 0000E4D0 488B5D18                	mov rbx, [rbp + 3*8]
 18844 0000E4D4 4889DE                  	mov rsi, rbx						; save old size in rsi
 18845 0000E4D7 4883C303                	add rbx, 3
 18846 0000E4DB 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 18847 0000E4E3 B901000000              	mov rcx, 1
 18848 0000E4E8 4883C104                	add rcx, 4				; num of iterations in rcx
 18849                                  .L_tc_recycle_frame_loop_0371:
 18850 0000E4EC 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 18851 0000E4F4 488B143C                	mov rdx, [rsp + rdi]
 18852 0000E4F8 4889541D00              	mov [rbp + rbx], rdx
 18853 0000E4FD 4883EB08                	sub rbx, 8
 18854 0000E501 48FFC9                  	dec rcx
 18855 0000E504 4883F900                	cmp rcx, 0
 18856 0000E508 75E2                    	jne .L_tc_recycle_frame_loop_0371
 18857 0000E50A 4889F3                  	mov rbx, rsi
 18858 0000E50D 4883EB01                	sub rbx, 1
 18859 0000E511 488D1CDD00000000        	lea rbx, [rbx*8]
 18860 0000E519 4801DD                  	add rbp, rbx
 18861 0000E51C 4889EC                  	mov rsp, rbp         ; fix stack pointers
 18862 0000E51F 5D                      	pop rbp
 18863 0000E520 41FFE0                  	jmp r8
 18864 0000E523 C9                      	leave
 18865 0000E524 C22000                  	ret AND_KILL_FRAME(2)
 18866                                  .L_lambda_simple_end_0291:	; new closure is in rax
 18867 0000E527 50                      	push rax
 18868 0000E528 6A01                    	push 1	; arg count
 18869 0000E52A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18870 0000E52F E81E8C0000              	call malloc
 18871 0000E534 50                      	push rax
 18872 0000E535 BF00000000              	mov rdi, 8 * 0	; new rib
 18873 0000E53A E8138C0000              	call malloc
 18874 0000E53F 50                      	push rax
 18875 0000E540 BF08000000              	mov rdi, 8 * 1	; extended env
 18876 0000E545 E8088C0000              	call malloc
 18877 0000E54A 488B7D10                	mov rdi, ENV
 18878 0000E54E BE00000000              	mov rsi, 0
 18879 0000E553 BA01000000              	mov rdx, 1
 18880                                  .L_lambda_simple_env_loop_0299:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 18881 0000E558 4883FE00                	cmp rsi, 0
 18882 0000E55C 7410                    	je .L_lambda_simple_env_end_0299
 18883 0000E55E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18884 0000E562 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18885 0000E566 48FFC6                  	inc rsi
 18886 0000E569 48FFC2                  	inc rdx
 18887 0000E56C EBEA                    	jmp .L_lambda_simple_env_loop_0299
 18888                                  .L_lambda_simple_env_end_0299:
 18889 0000E56E 5B                      	pop rbx
 18890 0000E56F BE00000000              	mov rsi, 0
 18891                                  .L_lambda_simple_params_loop_0299:	; copy params
 18892 0000E574 4883FE00                	cmp rsi, 0
 18893 0000E578 740E                    	je .L_lambda_simple_params_end_0299
 18894 0000E57A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18895 0000E57F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18896 0000E583 48FFC6                  	inc rsi
 18897 0000E586 EBEC                    	jmp .L_lambda_simple_params_loop_0299
 18898                                  .L_lambda_simple_params_end_0299:
 18899 0000E588 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 18900 0000E58B 4889C3                  	mov rbx, rax
 18901 0000E58E 58                      	pop rax
 18902 0000E58F C60004                  	mov byte [rax], T_closure
 18903 0000E592 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18904 0000E596 48C74009[A3E50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0299
 18905 0000E59E E947010000              	jmp .L_lambda_simple_end_0299
 18906                                  .L_lambda_simple_code_0299:	; lambda-simple body
 18907 0000E5A3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18908 0000E5A9 740B                    	je .L_lambda_simple_arity_check_ok_0299
 18909 0000E5AB FF742410                	push qword [rsp + 8 * 2]
 18910 0000E5AF 6A01                    	push 1
 18911 0000E5B1 E9558B0000              	jmp L_error_incorrect_arity_simple
 18912                                  .L_lambda_simple_arity_check_ok_0299:
 18913 0000E5B6 C8000000                	enter 0, 0
 18914                                  	; preparing a non-tail-call
 18915 0000E5BA 488B0425[D2120000]      	mov rax, qword [free_var_75]	; free var char=?
 18916 0000E5C2 803805                  	cmp byte [rax], T_undefined
 18917 0000E5C5 0F845A8A0000            	je L_error_fvar_undefined
 18918 0000E5CB 50                      	push rax
 18919 0000E5CC 488B0425[C1120000]      	mov rax, qword [free_var_74]	; free var char<?
 18920 0000E5D4 803805                  	cmp byte [rax], T_undefined
 18921 0000E5D7 0F84488A0000            	je L_error_fvar_undefined
 18922 0000E5DD 50                      	push rax
 18923 0000E5DE 6A02                    	push 2	; arg count
 18924 0000E5E0 488B4520                	mov rax, PARAM(0)	; param make-string<?
 18925 0000E5E4 803804                  	cmp byte [rax], T_closure
 18926 0000E5E7 0F85BC8A0000            	jne L_error_non_closure
 18927 0000E5ED FF7001                  	push SOB_CLOSURE_ENV(rax)
 18928 0000E5F0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18929 0000E5F3 48890425[BD160000]      	mov qword [free_var_134], rax
 18930 0000E5FB 48B8-                   	mov rax, sob_void
 18930 0000E5FD [0000000000000000] 
 18931                                  
 18932                                  	; preparing a non-tail-call
 18933 0000E605 488B0425[5B120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 18934 0000E60D 803805                  	cmp byte [rax], T_undefined
 18935 0000E610 0F840F8A0000            	je L_error_fvar_undefined
 18936 0000E616 50                      	push rax
 18937 0000E617 488B0425[4A120000]      	mov rax, qword [free_var_67]	; free var char-ci<?
 18938 0000E61F 803805                  	cmp byte [rax], T_undefined
 18939 0000E622 0F84FD890000            	je L_error_fvar_undefined
 18940 0000E628 50                      	push rax
 18941 0000E629 6A02                    	push 2	; arg count
 18942 0000E62B 488B4520                	mov rax, PARAM(0)	; param make-string<?
 18943 0000E62F 803804                  	cmp byte [rax], T_closure
 18944 0000E632 0F85718A0000            	jne L_error_non_closure
 18945 0000E638 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18946 0000E63B FF5009                  	call SOB_CLOSURE_CODE(rax)
 18947 0000E63E 48890425[F1150000]      	mov qword [free_var_122], rax
 18948 0000E646 48B8-                   	mov rax, sob_void
 18948 0000E648 [0000000000000000] 
 18949                                  
 18950                                  	; preparing a non-tail-call
 18951 0000E650 488B0425[D2120000]      	mov rax, qword [free_var_75]	; free var char=?
 18952 0000E658 803805                  	cmp byte [rax], T_undefined
 18953 0000E65B 0F84C4890000            	je L_error_fvar_undefined
 18954 0000E661 50                      	push rax
 18955 0000E662 488B0425[F4120000]      	mov rax, qword [free_var_77]	; free var char>?
 18956 0000E66A 803805                  	cmp byte [rax], T_undefined
 18957 0000E66D 0F84B2890000            	je L_error_fvar_undefined
 18958 0000E673 50                      	push rax
 18959 0000E674 6A02                    	push 2	; arg count
 18960 0000E676 488B4520                	mov rax, PARAM(0)	; param make-string<?
 18961 0000E67A 803804                  	cmp byte [rax], T_closure
 18962 0000E67D 0F85268A0000            	jne L_error_non_closure
 18963 0000E683 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18964 0000E686 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18965 0000E689 48890425[F0160000]      	mov qword [free_var_137], rax
 18966 0000E691 48B8-                   	mov rax, sob_void
 18966 0000E693 [0000000000000000] 
 18967                                  
 18968                                  	; preparing a non-tail-call
 18969 0000E69B 488B0425[5B120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 18970 0000E6A3 803805                  	cmp byte [rax], T_undefined
 18971 0000E6A6 0F8479890000            	je L_error_fvar_undefined
 18972 0000E6AC 50                      	push rax
 18973 0000E6AD 488B0425[7D120000]      	mov rax, qword [free_var_70]	; free var char-ci>?
 18974 0000E6B5 803805                  	cmp byte [rax], T_undefined
 18975 0000E6B8 0F8467890000            	je L_error_fvar_undefined
 18976 0000E6BE 50                      	push rax
 18977 0000E6BF 6A02                    	push 2	; arg count
 18978 0000E6C1 488B4520                	mov rax, PARAM(0)	; param make-string<?
 18979 0000E6C5 803804                  	cmp byte [rax], T_closure
 18980 0000E6C8 0F85DB890000            	jne L_error_non_closure
 18981 0000E6CE FF7001                  	push SOB_CLOSURE_ENV(rax)
 18982 0000E6D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18983 0000E6D4 48890425[24160000]      	mov qword [free_var_125], rax
 18984 0000E6DC 48B8-                   	mov rax, sob_void
 18984 0000E6DE [0000000000000000] 
 18985 0000E6E6 C9                      	leave
 18986 0000E6E7 C21800                  	ret AND_KILL_FRAME(1)
 18987                                  .L_lambda_simple_end_0299:	; new closure is in rax
 18988 0000E6EA 803804                  	cmp byte [rax], T_closure
 18989 0000E6ED 0F85B6890000            	jne L_error_non_closure
 18990 0000E6F3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18991 0000E6F6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18992                                  
 18993 0000E6F9 4889C7                  	mov rdi, rax
 18994 0000E6FC E8A68C0000              	call print_sexpr_if_not_void
 18995                                  	; preparing a non-tail-call
 18996 0000E701 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18997 0000E706 E8478A0000              	call malloc
 18998 0000E70B 50                      	push rax
 18999 0000E70C BF00000000              	mov rdi, 8 * 0	; new rib
 19000 0000E711 E83C8A0000              	call malloc
 19001 0000E716 50                      	push rax
 19002 0000E717 BF08000000              	mov rdi, 8 * 1	; extended env
 19003 0000E71C E8318A0000              	call malloc
 19004 0000E721 488B7D10                	mov rdi, ENV
 19005 0000E725 BE00000000              	mov rsi, 0
 19006 0000E72A BA01000000              	mov rdx, 1
 19007                                  .L_lambda_simple_env_loop_029a:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 19008 0000E72F 4883FE00                	cmp rsi, 0
 19009 0000E733 7410                    	je .L_lambda_simple_env_end_029a
 19010 0000E735 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19011 0000E739 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19012 0000E73D 48FFC6                  	inc rsi
 19013 0000E740 48FFC2                  	inc rdx
 19014 0000E743 EBEA                    	jmp .L_lambda_simple_env_loop_029a
 19015                                  .L_lambda_simple_env_end_029a:
 19016 0000E745 5B                      	pop rbx
 19017 0000E746 BE00000000              	mov rsi, 0
 19018                                  .L_lambda_simple_params_loop_029a:	; copy params
 19019 0000E74B 4883FE00                	cmp rsi, 0
 19020 0000E74F 740E                    	je .L_lambda_simple_params_end_029a
 19021 0000E751 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19022 0000E756 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19023 0000E75A 48FFC6                  	inc rsi
 19024 0000E75D EBEC                    	jmp .L_lambda_simple_params_loop_029a
 19025                                  .L_lambda_simple_params_end_029a:
 19026 0000E75F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 19027 0000E762 4889C3                  	mov rbx, rax
 19028 0000E765 58                      	pop rax
 19029 0000E766 C60004                  	mov byte [rax], T_closure
 19030 0000E769 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19031 0000E76D 48C74009[7AE70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_029a
 19032 0000E775 E9B60D0000              	jmp .L_lambda_simple_end_029a
 19033                                  .L_lambda_simple_code_029a:	; lambda-simple body
 19034 0000E77A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19035 0000E780 740B                    	je .L_lambda_simple_arity_check_ok_029a
 19036 0000E782 FF742410                	push qword [rsp + 8 * 2]
 19037 0000E786 6A02                    	push 2
 19038 0000E788 E97E890000              	jmp L_error_incorrect_arity_simple
 19039                                  .L_lambda_simple_arity_check_ok_029a:
 19040 0000E78D C8000000                	enter 0, 0
 19041                                  	; preparing a tail-call
 19042 0000E791 48B8-                   	mov rax, L_constants + 1993
 19042 0000E793 [C907000000000000] 
 19043 0000E79B 50                      	push rax
 19044 0000E79C 6A01                    	push 1	; arg count
 19045 0000E79E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19046 0000E7A3 E8AA890000              	call malloc
 19047 0000E7A8 50                      	push rax
 19048 0000E7A9 BF10000000              	mov rdi, 8 * 2	; new rib
 19049 0000E7AE E89F890000              	call malloc
 19050 0000E7B3 50                      	push rax
 19051 0000E7B4 BF10000000              	mov rdi, 8 * 2	; extended env
 19052 0000E7B9 E894890000              	call malloc
 19053 0000E7BE 488B7D10                	mov rdi, ENV
 19054 0000E7C2 BE00000000              	mov rsi, 0
 19055 0000E7C7 BA01000000              	mov rdx, 1
 19056                                  .L_lambda_simple_env_loop_029b:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 19057 0000E7CC 4883FE01                	cmp rsi, 1
 19058 0000E7D0 7410                    	je .L_lambda_simple_env_end_029b
 19059 0000E7D2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19060 0000E7D6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19061 0000E7DA 48FFC6                  	inc rsi
 19062 0000E7DD 48FFC2                  	inc rdx
 19063 0000E7E0 EBEA                    	jmp .L_lambda_simple_env_loop_029b
 19064                                  .L_lambda_simple_env_end_029b:
 19065 0000E7E2 5B                      	pop rbx
 19066 0000E7E3 BE00000000              	mov rsi, 0
 19067                                  .L_lambda_simple_params_loop_029b:	; copy params
 19068 0000E7E8 4883FE02                	cmp rsi, 2
 19069 0000E7EC 740E                    	je .L_lambda_simple_params_end_029b
 19070 0000E7EE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19071 0000E7F3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19072 0000E7F7 48FFC6                  	inc rsi
 19073 0000E7FA EBEC                    	jmp .L_lambda_simple_params_loop_029b
 19074                                  .L_lambda_simple_params_end_029b:
 19075 0000E7FC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 19076 0000E7FF 4889C3                  	mov rbx, rax
 19077 0000E802 58                      	pop rax
 19078 0000E803 C60004                  	mov byte [rax], T_closure
 19079 0000E806 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19080 0000E80A 48C74009[17E80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_029b
 19081 0000E812 E9AC0C0000              	jmp .L_lambda_simple_end_029b
 19082                                  .L_lambda_simple_code_029b:	; lambda-simple body
 19083 0000E817 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19084 0000E81D 740B                    	je .L_lambda_simple_arity_check_ok_029b
 19085 0000E81F FF742410                	push qword [rsp + 8 * 2]
 19086 0000E823 6A01                    	push 1
 19087 0000E825 E9E1880000              	jmp L_error_incorrect_arity_simple
 19088                                  .L_lambda_simple_arity_check_ok_029b:
 19089 0000E82A C8000000                	enter 0, 0
 19090 0000E82E BF08000000              	mov rdi, 8
 19091 0000E833 E81A890000              	call malloc
 19092 0000E838 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
 19093 0000E83C 488918                  	mov qword[rax], rbx
 19094 0000E83F 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 19095 0000E843 48B8-                   	mov rax, sob_void
 19095 0000E845 [0000000000000000] 
 19096                                  
 19097 0000E84D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19098 0000E852 E8FB880000              	call malloc
 19099 0000E857 50                      	push rax
 19100 0000E858 BF08000000              	mov rdi, 8 * 1	; new rib
 19101 0000E85D E8F0880000              	call malloc
 19102 0000E862 50                      	push rax
 19103 0000E863 BF18000000              	mov rdi, 8 * 3	; extended env
 19104 0000E868 E8E5880000              	call malloc
 19105 0000E86D 488B7D10                	mov rdi, ENV
 19106 0000E871 BE00000000              	mov rsi, 0
 19107 0000E876 BA01000000              	mov rdx, 1
 19108                                  .L_lambda_simple_env_loop_029c:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 19109 0000E87B 4883FE02                	cmp rsi, 2
 19110 0000E87F 7410                    	je .L_lambda_simple_env_end_029c
 19111 0000E881 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19112 0000E885 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19113 0000E889 48FFC6                  	inc rsi
 19114 0000E88C 48FFC2                  	inc rdx
 19115 0000E88F EBEA                    	jmp .L_lambda_simple_env_loop_029c
 19116                                  .L_lambda_simple_env_end_029c:
 19117 0000E891 5B                      	pop rbx
 19118 0000E892 BE00000000              	mov rsi, 0
 19119                                  .L_lambda_simple_params_loop_029c:	; copy params
 19120 0000E897 4883FE01                	cmp rsi, 1
 19121 0000E89B 740E                    	je .L_lambda_simple_params_end_029c
 19122 0000E89D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19123 0000E8A2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19124 0000E8A6 48FFC6                  	inc rsi
 19125 0000E8A9 EBEC                    	jmp .L_lambda_simple_params_loop_029c
 19126                                  .L_lambda_simple_params_end_029c:
 19127 0000E8AB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 19128 0000E8AE 4889C3                  	mov rbx, rax
 19129 0000E8B1 58                      	pop rax
 19130 0000E8B2 C60004                  	mov byte [rax], T_closure
 19131 0000E8B5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19132 0000E8B9 48C74009[C6E80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_029c
 19133 0000E8C1 E96F020000              	jmp .L_lambda_simple_end_029c
 19134                                  .L_lambda_simple_code_029c:	; lambda-simple body
 19135 0000E8C6 48837C241005            	cmp qword [rsp + 8 * 2], 5
 19136 0000E8CC 740B                    	je .L_lambda_simple_arity_check_ok_029c
 19137 0000E8CE FF742410                	push qword [rsp + 8 * 2]
 19138 0000E8D2 6A05                    	push 5
 19139 0000E8D4 E932880000              	jmp L_error_incorrect_arity_simple
 19140                                  .L_lambda_simple_arity_check_ok_029c:
 19141 0000E8D9 C8000000                	enter 0, 0
 19142                                  	; preparing a non-tail-call
 19143 0000E8DD 488B4530                	mov rax, PARAM(2)	; param len1
 19144 0000E8E1 50                      	push rax
 19145 0000E8E2 488B4520                	mov rax, PARAM(0)	; param i
 19146 0000E8E6 50                      	push rax
 19147 0000E8E7 6A02                    	push 2	; arg count
 19148 0000E8E9 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 19149 0000E8F1 803805                  	cmp byte [rax], T_undefined
 19150 0000E8F4 0F842B870000            	je L_error_fvar_undefined
 19151 0000E8FA 803804                  	cmp byte [rax], T_closure
 19152 0000E8FD 0F85A6870000            	jne L_error_non_closure
 19153 0000E903 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19154 0000E906 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19155 0000E909 483D[02000000]          	cmp rax, sob_boolean_false
 19156 0000E90F 0F851C020000            	jne .L_or_end_0034
 19157                                  
 19158                                  	; preparing a non-tail-call
 19159                                  	; preparing a non-tail-call
 19160 0000E915 488B4520                	mov rax, PARAM(0)	; param i
 19161 0000E919 50                      	push rax
 19162 0000E91A 488B4538                	mov rax, PARAM(3)	; param str2
 19163 0000E91E 50                      	push rax
 19164 0000E91F 6A02                    	push 2	; arg count
 19165 0000E921 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 19166 0000E929 803805                  	cmp byte [rax], T_undefined
 19167 0000E92C 0F84F3860000            	je L_error_fvar_undefined
 19168 0000E932 803804                  	cmp byte [rax], T_closure
 19169 0000E935 0F856E870000            	jne L_error_non_closure
 19170 0000E93B FF7001                  	push SOB_CLOSURE_ENV(rax)
 19171 0000E93E FF5009                  	call SOB_CLOSURE_CODE(rax)
 19172 0000E941 50                      	push rax
 19173                                  	; preparing a non-tail-call
 19174 0000E942 488B4520                	mov rax, PARAM(0)	; param i
 19175 0000E946 50                      	push rax
 19176 0000E947 488B4528                	mov rax, PARAM(1)	; param str1
 19177 0000E94B 50                      	push rax
 19178 0000E94C 6A02                    	push 2	; arg count
 19179 0000E94E 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 19180 0000E956 803805                  	cmp byte [rax], T_undefined
 19181 0000E959 0F84C6860000            	je L_error_fvar_undefined
 19182 0000E95F 803804                  	cmp byte [rax], T_closure
 19183 0000E962 0F8541870000            	jne L_error_non_closure
 19184 0000E968 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19185 0000E96B FF5009                  	call SOB_CLOSURE_CODE(rax)
 19186 0000E96E 50                      	push rax
 19187 0000E96F 6A02                    	push 2	; arg count
 19188 0000E971 488B4510                	mov rax, ENV
 19189 0000E975 488B4008                	mov rax, qword [rax + 8 * 1]
 19190 0000E979 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char<?
 19191 0000E97C 803804                  	cmp byte [rax], T_closure
 19192 0000E97F 0F8524870000            	jne L_error_non_closure
 19193 0000E985 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19194 0000E988 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19195 0000E98B 483D[02000000]          	cmp rax, sob_boolean_false
 19196 0000E991 0F859A010000            	jne .L_or_end_0034
 19197                                  
 19198                                  	; preparing a non-tail-call
 19199 0000E997 488B4530                	mov rax, PARAM(2)	; param len1
 19200 0000E99B 50                      	push rax
 19201 0000E99C 488B4520                	mov rax, PARAM(0)	; param i
 19202 0000E9A0 50                      	push rax
 19203 0000E9A1 6A02                    	push 2	; arg count
 19204 0000E9A3 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 19205 0000E9AB 803805                  	cmp byte [rax], T_undefined
 19206 0000E9AE 0F8471860000            	je L_error_fvar_undefined
 19207 0000E9B4 803804                  	cmp byte [rax], T_closure
 19208 0000E9B7 0F85EC860000            	jne L_error_non_closure
 19209 0000E9BD FF7001                  	push SOB_CLOSURE_ENV(rax)
 19210 0000E9C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19211 0000E9C3 483D[02000000]          	cmp rax, sob_boolean_false
 19212 0000E9C9 0F8450010000            	je .L_if_else_01f1
 19213                                  	; preparing a non-tail-call
 19214                                  	; preparing a non-tail-call
 19215 0000E9CF 488B4520                	mov rax, PARAM(0)	; param i
 19216 0000E9D3 50                      	push rax
 19217 0000E9D4 488B4538                	mov rax, PARAM(3)	; param str2
 19218 0000E9D8 50                      	push rax
 19219 0000E9D9 6A02                    	push 2	; arg count
 19220 0000E9DB 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 19221 0000E9E3 803805                  	cmp byte [rax], T_undefined
 19222 0000E9E6 0F8439860000            	je L_error_fvar_undefined
 19223 0000E9EC 803804                  	cmp byte [rax], T_closure
 19224 0000E9EF 0F85B4860000            	jne L_error_non_closure
 19225 0000E9F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19226 0000E9F8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19227 0000E9FB 50                      	push rax
 19228                                  	; preparing a non-tail-call
 19229 0000E9FC 488B4520                	mov rax, PARAM(0)	; param i
 19230 0000EA00 50                      	push rax
 19231 0000EA01 488B4528                	mov rax, PARAM(1)	; param str1
 19232 0000EA05 50                      	push rax
 19233 0000EA06 6A02                    	push 2	; arg count
 19234 0000EA08 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 19235 0000EA10 803805                  	cmp byte [rax], T_undefined
 19236 0000EA13 0F840C860000            	je L_error_fvar_undefined
 19237 0000EA19 803804                  	cmp byte [rax], T_closure
 19238 0000EA1C 0F8587860000            	jne L_error_non_closure
 19239 0000EA22 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19240 0000EA25 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19241 0000EA28 50                      	push rax
 19242 0000EA29 6A02                    	push 2	; arg count
 19243 0000EA2B 488B4510                	mov rax, ENV
 19244 0000EA2F 488B4008                	mov rax, qword [rax + 8 * 1]
 19245 0000EA33 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var char=?
 19246 0000EA37 803804                  	cmp byte [rax], T_closure
 19247 0000EA3A 0F8569860000            	jne L_error_non_closure
 19248 0000EA40 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19249 0000EA43 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19250 0000EA46 483D[02000000]          	cmp rax, sob_boolean_false
 19251 0000EA4C 0F84C1000000            	je .L_if_else_01f0
 19252                                  	; preparing a tail-call
 19253 0000EA52 488B4540                	mov rax, PARAM(4)	; param len2
 19254 0000EA56 50                      	push rax
 19255 0000EA57 488B4538                	mov rax, PARAM(3)	; param str2
 19256 0000EA5B 50                      	push rax
 19257 0000EA5C 488B4530                	mov rax, PARAM(2)	; param len1
 19258 0000EA60 50                      	push rax
 19259 0000EA61 488B4528                	mov rax, PARAM(1)	; param str1
 19260 0000EA65 50                      	push rax
 19261                                  	; preparing a non-tail-call
 19262 0000EA66 48B8-                   	mov rax, L_constants + 2270
 19262 0000EA68 [DE08000000000000] 
 19263 0000EA70 50                      	push rax
 19264 0000EA71 488B4520                	mov rax, PARAM(0)	; param i
 19265 0000EA75 50                      	push rax
 19266 0000EA76 6A02                    	push 2	; arg count
 19267 0000EA78 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 19268 0000EA80 803805                  	cmp byte [rax], T_undefined
 19269 0000EA83 0F849C850000            	je L_error_fvar_undefined
 19270 0000EA89 803804                  	cmp byte [rax], T_closure
 19271 0000EA8C 0F8517860000            	jne L_error_non_closure
 19272 0000EA92 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19273 0000EA95 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19274 0000EA98 50                      	push rax
 19275 0000EA99 6A05                    	push 5	; arg count
 19276 0000EA9B 488B4510                	mov rax, ENV
 19277 0000EA9F 488B00                  	mov rax, qword [rax + 8 * 0]
 19278 0000EAA2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19279 0000EAA5 488B00                  	mov rax, qword [rax]
 19280 0000EAA8 803804                  	cmp byte [rax], T_closure
 19281 0000EAAB 0F85F8850000            	jne L_error_non_closure
 19282 0000EAB1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19283 0000EAB4 4C8B4009                	mov r8, qword [rax + 1 + 8]
 19284 0000EAB8 FF7508                  	push qword [rbp + 8]				; push old return address
 19285 0000EABB FF7500                  	push qword [rbp]					; push old rbp
 19286                                  	;; move stack up ;;
 19287 0000EABE 488B5D18                	mov rbx, [rbp + 3*8]
 19288 0000EAC2 4889DE                  	mov rsi, rbx						; save old size in rsi
 19289 0000EAC5 4883C303                	add rbx, 3
 19290 0000EAC9 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 19291 0000EAD1 B905000000              	mov rcx, 5
 19292 0000EAD6 4883C104                	add rcx, 4				; num of iterations in rcx
 19293                                  .L_tc_recycle_frame_loop_037b:
 19294 0000EADA 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 19295 0000EAE2 488B143C                	mov rdx, [rsp + rdi]
 19296 0000EAE6 4889541D00              	mov [rbp + rbx], rdx
 19297 0000EAEB 4883EB08                	sub rbx, 8
 19298 0000EAEF 48FFC9                  	dec rcx
 19299 0000EAF2 4883F900                	cmp rcx, 0
 19300 0000EAF6 75E2                    	jne .L_tc_recycle_frame_loop_037b
 19301 0000EAF8 4889F3                  	mov rbx, rsi
 19302 0000EAFB 4883EB05                	sub rbx, 5
 19303 0000EAFF 488D1CDD00000000        	lea rbx, [rbx*8]
 19304 0000EB07 4801DD                  	add rbp, rbx
 19305 0000EB0A 4889EC                  	mov rsp, rbp         ; fix stack pointers
 19306 0000EB0D 5D                      	pop rbp
 19307 0000EB0E 41FFE0                  	jmp r8
 19308 0000EB11 EB0A                    	jmp .L_if_end_01f0
 19309                                  .L_if_else_01f0:
 19310 0000EB13 48B8-                   	mov rax, L_constants + 2
 19310 0000EB15 [0200000000000000] 
 19311                                  .L_if_end_01f0:
 19312 0000EB1D EB0A                    	jmp .L_if_end_01f1
 19313                                  .L_if_else_01f1:
 19314 0000EB1F 48B8-                   	mov rax, L_constants + 2
 19314 0000EB21 [0200000000000000] 
 19315                                  .L_if_end_01f1:
 19316 0000EB29 483D[02000000]          	cmp rax, sob_boolean_false
 19317 0000EB2F 7500                    	jne .L_or_end_0034
 19318                                  .L_or_end_0034:
 19319 0000EB31 C9                      	leave
 19320 0000EB32 C23800                  	ret AND_KILL_FRAME(5)
 19321                                  .L_lambda_simple_end_029c:	; new closure is in rax
 19322 0000EB35 50                      	push rax
 19323 0000EB36 488B4520                	mov rax, PARAM(0)	; param run
 19324 0000EB3A 8F00                    	pop qword [rax]
 19325 0000EB3C 48B8-                   	mov rax, sob_void
 19325 0000EB3E [0000000000000000] 
 19326                                  
 19327                                  	; preparing a tail-call
 19328 0000EB46 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19329 0000EB4B E802860000              	call malloc
 19330 0000EB50 50                      	push rax
 19331 0000EB51 BF08000000              	mov rdi, 8 * 1	; new rib
 19332 0000EB56 E8F7850000              	call malloc
 19333 0000EB5B 50                      	push rax
 19334 0000EB5C BF18000000              	mov rdi, 8 * 3	; extended env
 19335 0000EB61 E8EC850000              	call malloc
 19336 0000EB66 488B7D10                	mov rdi, ENV
 19337 0000EB6A BE00000000              	mov rsi, 0
 19338 0000EB6F BA01000000              	mov rdx, 1
 19339                                  .L_lambda_simple_env_loop_029d:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 19340 0000EB74 4883FE02                	cmp rsi, 2
 19341 0000EB78 7410                    	je .L_lambda_simple_env_end_029d
 19342 0000EB7A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19343 0000EB7E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19344 0000EB82 48FFC6                  	inc rsi
 19345 0000EB85 48FFC2                  	inc rdx
 19346 0000EB88 EBEA                    	jmp .L_lambda_simple_env_loop_029d
 19347                                  .L_lambda_simple_env_end_029d:
 19348 0000EB8A 5B                      	pop rbx
 19349 0000EB8B BE00000000              	mov rsi, 0
 19350                                  .L_lambda_simple_params_loop_029d:	; copy params
 19351 0000EB90 4883FE01                	cmp rsi, 1
 19352 0000EB94 740E                    	je .L_lambda_simple_params_end_029d
 19353 0000EB96 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19354 0000EB9B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19355 0000EB9F 48FFC6                  	inc rsi
 19356 0000EBA2 EBEC                    	jmp .L_lambda_simple_params_loop_029d
 19357                                  .L_lambda_simple_params_end_029d:
 19358 0000EBA4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 19359 0000EBA7 4889C3                  	mov rbx, rax
 19360 0000EBAA 58                      	pop rax
 19361 0000EBAB C60004                  	mov byte [rax], T_closure
 19362 0000EBAE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19363 0000EBB2 48C74009[BFEB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_029d
 19364 0000EBBA E9F1020000              	jmp .L_lambda_simple_end_029d
 19365                                  .L_lambda_simple_code_029d:	; lambda-simple body
 19366 0000EBBF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19367 0000EBC5 740B                    	je .L_lambda_simple_arity_check_ok_029d
 19368 0000EBC7 FF742410                	push qword [rsp + 8 * 2]
 19369 0000EBCB 6A02                    	push 2
 19370 0000EBCD E939850000              	jmp L_error_incorrect_arity_simple
 19371                                  .L_lambda_simple_arity_check_ok_029d:
 19372 0000EBD2 C8000000                	enter 0, 0
 19373                                  	; preparing a tail-call
 19374                                  	; preparing a non-tail-call
 19375 0000EBD6 488B4528                	mov rax, PARAM(1)	; param str2
 19376 0000EBDA 50                      	push rax
 19377 0000EBDB 6A01                    	push 1	; arg count
 19378 0000EBDD 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 19379 0000EBE5 803805                  	cmp byte [rax], T_undefined
 19380 0000EBE8 0F8437840000            	je L_error_fvar_undefined
 19381 0000EBEE 803804                  	cmp byte [rax], T_closure
 19382 0000EBF1 0F85B2840000            	jne L_error_non_closure
 19383 0000EBF7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19384 0000EBFA FF5009                  	call SOB_CLOSURE_CODE(rax)
 19385 0000EBFD 50                      	push rax
 19386                                  	; preparing a non-tail-call
 19387 0000EBFE 488B4520                	mov rax, PARAM(0)	; param str1
 19388 0000EC02 50                      	push rax
 19389 0000EC03 6A01                    	push 1	; arg count
 19390 0000EC05 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 19391 0000EC0D 803805                  	cmp byte [rax], T_undefined
 19392 0000EC10 0F840F840000            	je L_error_fvar_undefined
 19393 0000EC16 803804                  	cmp byte [rax], T_closure
 19394 0000EC19 0F858A840000            	jne L_error_non_closure
 19395 0000EC1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 19396 0000EC22 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19397 0000EC25 50                      	push rax
 19398 0000EC26 6A02                    	push 2	; arg count
 19399 0000EC28 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19400 0000EC2D E820850000              	call malloc
 19401 0000EC32 50                      	push rax
 19402 0000EC33 BF10000000              	mov rdi, 8 * 2	; new rib
 19403 0000EC38 E815850000              	call malloc
 19404 0000EC3D 50                      	push rax
 19405 0000EC3E BF20000000              	mov rdi, 8 * 4	; extended env
 19406 0000EC43 E80A850000              	call malloc
 19407 0000EC48 488B7D10                	mov rdi, ENV
 19408 0000EC4C BE00000000              	mov rsi, 0
 19409 0000EC51 BA01000000              	mov rdx, 1
 19410                                  .L_lambda_simple_env_loop_029e:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 19411 0000EC56 4883FE03                	cmp rsi, 3
 19412 0000EC5A 7410                    	je .L_lambda_simple_env_end_029e
 19413 0000EC5C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19414 0000EC60 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19415 0000EC64 48FFC6                  	inc rsi
 19416 0000EC67 48FFC2                  	inc rdx
 19417 0000EC6A EBEA                    	jmp .L_lambda_simple_env_loop_029e
 19418                                  .L_lambda_simple_env_end_029e:
 19419 0000EC6C 5B                      	pop rbx
 19420 0000EC6D BE00000000              	mov rsi, 0
 19421                                  .L_lambda_simple_params_loop_029e:	; copy params
 19422 0000EC72 4883FE02                	cmp rsi, 2
 19423 0000EC76 740E                    	je .L_lambda_simple_params_end_029e
 19424 0000EC78 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19425 0000EC7D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19426 0000EC81 48FFC6                  	inc rsi
 19427 0000EC84 EBEC                    	jmp .L_lambda_simple_params_loop_029e
 19428                                  .L_lambda_simple_params_end_029e:
 19429 0000EC86 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 19430 0000EC89 4889C3                  	mov rbx, rax
 19431 0000EC8C 58                      	pop rax
 19432 0000EC8D C60004                  	mov byte [rax], T_closure
 19433 0000EC90 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19434 0000EC94 48C74009[A1EC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_029e
 19435 0000EC9C E9A2010000              	jmp .L_lambda_simple_end_029e
 19436                                  .L_lambda_simple_code_029e:	; lambda-simple body
 19437 0000ECA1 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19438 0000ECA7 740B                    	je .L_lambda_simple_arity_check_ok_029e
 19439 0000ECA9 FF742410                	push qword [rsp + 8 * 2]
 19440 0000ECAD 6A02                    	push 2
 19441 0000ECAF E957840000              	jmp L_error_incorrect_arity_simple
 19442                                  .L_lambda_simple_arity_check_ok_029e:
 19443 0000ECB4 C8000000                	enter 0, 0
 19444                                  	; preparing a non-tail-call
 19445 0000ECB8 488B4528                	mov rax, PARAM(1)	; param len2
 19446 0000ECBC 50                      	push rax
 19447 0000ECBD 488B4520                	mov rax, PARAM(0)	; param len1
 19448 0000ECC1 50                      	push rax
 19449 0000ECC2 6A02                    	push 2	; arg count
 19450 0000ECC4 488B0425[2C0E0000]      	mov rax, qword [free_var_5]	; free var <=
 19451 0000ECCC 803805                  	cmp byte [rax], T_undefined
 19452 0000ECCF 0F8450830000            	je L_error_fvar_undefined
 19453 0000ECD5 803804                  	cmp byte [rax], T_closure
 19454 0000ECD8 0F85CB830000            	jne L_error_non_closure
 19455 0000ECDE FF7001                  	push SOB_CLOSURE_ENV(rax)
 19456 0000ECE1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19457 0000ECE4 483D[02000000]          	cmp rax, sob_boolean_false
 19458 0000ECEA 0F84AA000000            	je .L_if_else_01f2
 19459                                  	; preparing a tail-call
 19460 0000ECF0 488B4528                	mov rax, PARAM(1)	; param len2
 19461 0000ECF4 50                      	push rax
 19462 0000ECF5 488B4510                	mov rax, ENV
 19463 0000ECF9 488B00                  	mov rax, qword [rax + 8 * 0]
 19464 0000ECFC 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 19465 0000ED00 50                      	push rax
 19466 0000ED01 488B4520                	mov rax, PARAM(0)	; param len1
 19467 0000ED05 50                      	push rax
 19468 0000ED06 488B4510                	mov rax, ENV
 19469 0000ED0A 488B00                  	mov rax, qword [rax + 8 * 0]
 19470 0000ED0D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 19471 0000ED10 50                      	push rax
 19472 0000ED11 48B8-                   	mov rax, L_constants + 2135
 19472 0000ED13 [5708000000000000] 
 19473 0000ED1B 50                      	push rax
 19474 0000ED1C 6A05                    	push 5	; arg count
 19475 0000ED1E 488B4510                	mov rax, ENV
 19476 0000ED22 488B4008                	mov rax, qword [rax + 8 * 1]
 19477 0000ED26 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19478 0000ED29 488B00                  	mov rax, qword [rax]
 19479 0000ED2C 803804                  	cmp byte [rax], T_closure
 19480 0000ED2F 0F8574830000            	jne L_error_non_closure
 19481 0000ED35 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19482 0000ED38 4C8B4009                	mov r8, qword [rax + 1 + 8]
 19483 0000ED3C FF7508                  	push qword [rbp + 8]				; push old return address
 19484 0000ED3F FF7500                  	push qword [rbp]					; push old rbp
 19485                                  	;; move stack up ;;
 19486 0000ED42 488B5D18                	mov rbx, [rbp + 3*8]
 19487 0000ED46 4889DE                  	mov rsi, rbx						; save old size in rsi
 19488 0000ED49 4883C303                	add rbx, 3
 19489 0000ED4D 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 19490 0000ED55 B905000000              	mov rcx, 5
 19491 0000ED5A 4883C104                	add rcx, 4				; num of iterations in rcx
 19492                                  .L_tc_recycle_frame_loop_037e:
 19493 0000ED5E 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 19494 0000ED66 488B143C                	mov rdx, [rsp + rdi]
 19495 0000ED6A 4889541D00              	mov [rbp + rbx], rdx
 19496 0000ED6F 4883EB08                	sub rbx, 8
 19497 0000ED73 48FFC9                  	dec rcx
 19498 0000ED76 4883F900                	cmp rcx, 0
 19499 0000ED7A 75E2                    	jne .L_tc_recycle_frame_loop_037e
 19500 0000ED7C 4889F3                  	mov rbx, rsi
 19501 0000ED7F 4883EB05                	sub rbx, 5
 19502 0000ED83 488D1CDD00000000        	lea rbx, [rbx*8]
 19503 0000ED8B 4801DD                  	add rbp, rbx
 19504 0000ED8E 4889EC                  	mov rsp, rbp         ; fix stack pointers
 19505 0000ED91 5D                      	pop rbp
 19506 0000ED92 41FFE0                  	jmp r8
 19507 0000ED95 E9A5000000              	jmp .L_if_end_01f2
 19508                                  .L_if_else_01f2:
 19509                                  	; preparing a tail-call
 19510 0000ED9A 488B4520                	mov rax, PARAM(0)	; param len1
 19511 0000ED9E 50                      	push rax
 19512 0000ED9F 488B4510                	mov rax, ENV
 19513 0000EDA3 488B00                  	mov rax, qword [rax + 8 * 0]
 19514 0000EDA6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 19515 0000EDA9 50                      	push rax
 19516 0000EDAA 488B4528                	mov rax, PARAM(1)	; param len2
 19517 0000EDAE 50                      	push rax
 19518 0000EDAF 488B4510                	mov rax, ENV
 19519 0000EDB3 488B00                  	mov rax, qword [rax + 8 * 0]
 19520 0000EDB6 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 19521 0000EDBA 50                      	push rax
 19522 0000EDBB 48B8-                   	mov rax, L_constants + 2135
 19522 0000EDBD [5708000000000000] 
 19523 0000EDC5 50                      	push rax
 19524 0000EDC6 6A05                    	push 5	; arg count
 19525 0000EDC8 488B4510                	mov rax, ENV
 19526 0000EDCC 488B4008                	mov rax, qword [rax + 8 * 1]
 19527 0000EDD0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19528 0000EDD3 488B00                  	mov rax, qword [rax]
 19529 0000EDD6 803804                  	cmp byte [rax], T_closure
 19530 0000EDD9 0F85CA820000            	jne L_error_non_closure
 19531 0000EDDF FF7001                  	push SOB_CLOSURE_ENV(rax)
 19532 0000EDE2 4C8B4009                	mov r8, qword [rax + 1 + 8]
 19533 0000EDE6 FF7508                  	push qword [rbp + 8]				; push old return address
 19534 0000EDE9 FF7500                  	push qword [rbp]					; push old rbp
 19535                                  	;; move stack up ;;
 19536 0000EDEC 488B5D18                	mov rbx, [rbp + 3*8]
 19537 0000EDF0 4889DE                  	mov rsi, rbx						; save old size in rsi
 19538 0000EDF3 4883C303                	add rbx, 3
 19539 0000EDF7 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 19540 0000EDFF B905000000              	mov rcx, 5
 19541 0000EE04 4883C104                	add rcx, 4				; num of iterations in rcx
 19542                                  .L_tc_recycle_frame_loop_037f:
 19543 0000EE08 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 19544 0000EE10 488B143C                	mov rdx, [rsp + rdi]
 19545 0000EE14 4889541D00              	mov [rbp + rbx], rdx
 19546 0000EE19 4883EB08                	sub rbx, 8
 19547 0000EE1D 48FFC9                  	dec rcx
 19548 0000EE20 4883F900                	cmp rcx, 0
 19549 0000EE24 75E2                    	jne .L_tc_recycle_frame_loop_037f
 19550 0000EE26 4889F3                  	mov rbx, rsi
 19551 0000EE29 4883EB05                	sub rbx, 5
 19552 0000EE2D 488D1CDD00000000        	lea rbx, [rbx*8]
 19553 0000EE35 4801DD                  	add rbp, rbx
 19554 0000EE38 4889EC                  	mov rsp, rbp         ; fix stack pointers
 19555 0000EE3B 5D                      	pop rbp
 19556 0000EE3C 41FFE0                  	jmp r8
 19557                                  .L_if_end_01f2:
 19558 0000EE3F C9                      	leave
 19559 0000EE40 C22000                  	ret AND_KILL_FRAME(2)
 19560                                  .L_lambda_simple_end_029e:	; new closure is in rax
 19561 0000EE43 803804                  	cmp byte [rax], T_closure
 19562 0000EE46 0F855D820000            	jne L_error_non_closure
 19563 0000EE4C FF7001                  	push SOB_CLOSURE_ENV(rax)
 19564 0000EE4F 4C8B4009                	mov r8, qword [rax + 1 + 8]
 19565 0000EE53 FF7508                  	push qword [rbp + 8]				; push old return address
 19566 0000EE56 FF7500                  	push qword [rbp]					; push old rbp
 19567                                  	;; move stack up ;;
 19568 0000EE59 488B5D18                	mov rbx, [rbp + 3*8]
 19569 0000EE5D 4889DE                  	mov rsi, rbx						; save old size in rsi
 19570 0000EE60 4883C303                	add rbx, 3
 19571 0000EE64 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 19572 0000EE6C B902000000              	mov rcx, 2
 19573 0000EE71 4883C104                	add rcx, 4				; num of iterations in rcx
 19574                                  .L_tc_recycle_frame_loop_037d:
 19575 0000EE75 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 19576 0000EE7D 488B143C                	mov rdx, [rsp + rdi]
 19577 0000EE81 4889541D00              	mov [rbp + rbx], rdx
 19578 0000EE86 4883EB08                	sub rbx, 8
 19579 0000EE8A 48FFC9                  	dec rcx
 19580 0000EE8D 4883F900                	cmp rcx, 0
 19581 0000EE91 75E2                    	jne .L_tc_recycle_frame_loop_037d
 19582 0000EE93 4889F3                  	mov rbx, rsi
 19583 0000EE96 4883EB02                	sub rbx, 2
 19584 0000EE9A 488D1CDD00000000        	lea rbx, [rbx*8]
 19585 0000EEA2 4801DD                  	add rbp, rbx
 19586 0000EEA5 4889EC                  	mov rsp, rbp         ; fix stack pointers
 19587 0000EEA8 5D                      	pop rbp
 19588 0000EEA9 41FFE0                  	jmp r8
 19589 0000EEAC C9                      	leave
 19590 0000EEAD C22000                  	ret AND_KILL_FRAME(2)
 19591                                  .L_lambda_simple_end_029d:	; new closure is in rax
 19592 0000EEB0 50                      	push rax
 19593 0000EEB1 6A01                    	push 1	; arg count
 19594 0000EEB3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19595 0000EEB8 E895820000              	call malloc
 19596 0000EEBD 50                      	push rax
 19597 0000EEBE BF08000000              	mov rdi, 8 * 1	; new rib
 19598 0000EEC3 E88A820000              	call malloc
 19599 0000EEC8 50                      	push rax
 19600 0000EEC9 BF18000000              	mov rdi, 8 * 3	; extended env
 19601 0000EECE E87F820000              	call malloc
 19602 0000EED3 488B7D10                	mov rdi, ENV
 19603 0000EED7 BE00000000              	mov rsi, 0
 19604 0000EEDC BA01000000              	mov rdx, 1
 19605                                  .L_lambda_simple_env_loop_029f:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 19606 0000EEE1 4883FE02                	cmp rsi, 2
 19607 0000EEE5 7410                    	je .L_lambda_simple_env_end_029f
 19608 0000EEE7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19609 0000EEEB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19610 0000EEEF 48FFC6                  	inc rsi
 19611 0000EEF2 48FFC2                  	inc rdx
 19612 0000EEF5 EBEA                    	jmp .L_lambda_simple_env_loop_029f
 19613                                  .L_lambda_simple_env_end_029f:
 19614 0000EEF7 5B                      	pop rbx
 19615 0000EEF8 BE00000000              	mov rsi, 0
 19616                                  .L_lambda_simple_params_loop_029f:	; copy params
 19617 0000EEFD 4883FE01                	cmp rsi, 1
 19618 0000EF01 740E                    	je .L_lambda_simple_params_end_029f
 19619 0000EF03 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19620 0000EF08 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19621 0000EF0C 48FFC6                  	inc rsi
 19622 0000EF0F EBEC                    	jmp .L_lambda_simple_params_loop_029f
 19623                                  .L_lambda_simple_params_end_029f:
 19624 0000EF11 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 19625 0000EF14 4889C3                  	mov rbx, rax
 19626 0000EF17 58                      	pop rax
 19627 0000EF18 C60004                  	mov byte [rax], T_closure
 19628 0000EF1B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19629 0000EF1F 48C74009[2CEF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_029f
 19630 0000EF27 E92A050000              	jmp .L_lambda_simple_end_029f
 19631                                  .L_lambda_simple_code_029f:	; lambda-simple body
 19632 0000EF2C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19633 0000EF32 740B                    	je .L_lambda_simple_arity_check_ok_029f
 19634 0000EF34 FF742410                	push qword [rsp + 8 * 2]
 19635 0000EF38 6A01                    	push 1
 19636 0000EF3A E9CC810000              	jmp L_error_incorrect_arity_simple
 19637                                  .L_lambda_simple_arity_check_ok_029f:
 19638 0000EF3F C8000000                	enter 0, 0
 19639                                  	; preparing a tail-call
 19640 0000EF43 48B8-                   	mov rax, L_constants + 1993
 19640 0000EF45 [C907000000000000] 
 19641 0000EF4D 50                      	push rax
 19642 0000EF4E 6A01                    	push 1	; arg count
 19643 0000EF50 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19644 0000EF55 E8F8810000              	call malloc
 19645 0000EF5A 50                      	push rax
 19646 0000EF5B BF08000000              	mov rdi, 8 * 1	; new rib
 19647 0000EF60 E8ED810000              	call malloc
 19648 0000EF65 50                      	push rax
 19649 0000EF66 BF20000000              	mov rdi, 8 * 4	; extended env
 19650 0000EF6B E8E2810000              	call malloc
 19651 0000EF70 488B7D10                	mov rdi, ENV
 19652 0000EF74 BE00000000              	mov rsi, 0
 19653 0000EF79 BA01000000              	mov rdx, 1
 19654                                  .L_lambda_simple_env_loop_02a0:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 19655 0000EF7E 4883FE03                	cmp rsi, 3
 19656 0000EF82 7410                    	je .L_lambda_simple_env_end_02a0
 19657 0000EF84 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19658 0000EF88 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19659 0000EF8C 48FFC6                  	inc rsi
 19660 0000EF8F 48FFC2                  	inc rdx
 19661 0000EF92 EBEA                    	jmp .L_lambda_simple_env_loop_02a0
 19662                                  .L_lambda_simple_env_end_02a0:
 19663 0000EF94 5B                      	pop rbx
 19664 0000EF95 BE00000000              	mov rsi, 0
 19665                                  .L_lambda_simple_params_loop_02a0:	; copy params
 19666 0000EF9A 4883FE01                	cmp rsi, 1
 19667 0000EF9E 740E                    	je .L_lambda_simple_params_end_02a0
 19668 0000EFA0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19669 0000EFA5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19670 0000EFA9 48FFC6                  	inc rsi
 19671 0000EFAC EBEC                    	jmp .L_lambda_simple_params_loop_02a0
 19672                                  .L_lambda_simple_params_end_02a0:
 19673 0000EFAE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 19674 0000EFB1 4889C3                  	mov rbx, rax
 19675 0000EFB4 58                      	pop rax
 19676 0000EFB5 C60004                  	mov byte [rax], T_closure
 19677 0000EFB8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19678 0000EFBC 48C74009[C9EF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02a0
 19679 0000EFC4 E920040000              	jmp .L_lambda_simple_end_02a0
 19680                                  .L_lambda_simple_code_02a0:	; lambda-simple body
 19681 0000EFC9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19682 0000EFCF 740B                    	je .L_lambda_simple_arity_check_ok_02a0
 19683 0000EFD1 FF742410                	push qword [rsp + 8 * 2]
 19684 0000EFD5 6A01                    	push 1
 19685 0000EFD7 E92F810000              	jmp L_error_incorrect_arity_simple
 19686                                  .L_lambda_simple_arity_check_ok_02a0:
 19687 0000EFDC C8000000                	enter 0, 0
 19688 0000EFE0 BF08000000              	mov rdi, 8
 19689 0000EFE5 E868810000              	call malloc
 19690 0000EFEA 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
 19691 0000EFEE 488918                  	mov qword[rax], rbx
 19692 0000EFF1 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 19693 0000EFF5 48B8-                   	mov rax, sob_void
 19693 0000EFF7 [0000000000000000] 
 19694                                  
 19695 0000EFFF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19696 0000F004 E849810000              	call malloc
 19697 0000F009 50                      	push rax
 19698 0000F00A BF08000000              	mov rdi, 8 * 1	; new rib
 19699 0000F00F E83E810000              	call malloc
 19700 0000F014 50                      	push rax
 19701 0000F015 BF28000000              	mov rdi, 8 * 5	; extended env
 19702 0000F01A E833810000              	call malloc
 19703 0000F01F 488B7D10                	mov rdi, ENV
 19704 0000F023 BE00000000              	mov rsi, 0
 19705 0000F028 BA01000000              	mov rdx, 1
 19706                                  .L_lambda_simple_env_loop_02a1:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 19707 0000F02D 4883FE04                	cmp rsi, 4
 19708 0000F031 7410                    	je .L_lambda_simple_env_end_02a1
 19709 0000F033 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19710 0000F037 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19711 0000F03B 48FFC6                  	inc rsi
 19712 0000F03E 48FFC2                  	inc rdx
 19713 0000F041 EBEA                    	jmp .L_lambda_simple_env_loop_02a1
 19714                                  .L_lambda_simple_env_end_02a1:
 19715 0000F043 5B                      	pop rbx
 19716 0000F044 BE00000000              	mov rsi, 0
 19717                                  .L_lambda_simple_params_loop_02a1:	; copy params
 19718 0000F049 4883FE01                	cmp rsi, 1
 19719 0000F04D 740E                    	je .L_lambda_simple_params_end_02a1
 19720 0000F04F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19721 0000F054 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19722 0000F058 48FFC6                  	inc rsi
 19723 0000F05B EBEC                    	jmp .L_lambda_simple_params_loop_02a1
 19724                                  .L_lambda_simple_params_end_02a1:
 19725 0000F05D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 19726 0000F060 4889C3                  	mov rbx, rax
 19727 0000F063 58                      	pop rax
 19728 0000F064 C60004                  	mov byte [rax], T_closure
 19729 0000F067 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19730 0000F06B 48C74009[78F00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02a1
 19731 0000F073 E97F010000              	jmp .L_lambda_simple_end_02a1
 19732                                  .L_lambda_simple_code_02a1:	; lambda-simple body
 19733 0000F078 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19734 0000F07E 740B                    	je .L_lambda_simple_arity_check_ok_02a1
 19735 0000F080 FF742410                	push qword [rsp + 8 * 2]
 19736 0000F084 6A02                    	push 2
 19737 0000F086 E980800000              	jmp L_error_incorrect_arity_simple
 19738                                  .L_lambda_simple_arity_check_ok_02a1:
 19739 0000F08B C8000000                	enter 0, 0
 19740                                  	; preparing a non-tail-call
 19741 0000F08F 488B4528                	mov rax, PARAM(1)	; param strs
 19742 0000F093 50                      	push rax
 19743 0000F094 6A01                    	push 1	; arg count
 19744 0000F096 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 19745 0000F09E 803805                  	cmp byte [rax], T_undefined
 19746 0000F0A1 0F847E7F0000            	je L_error_fvar_undefined
 19747 0000F0A7 803804                  	cmp byte [rax], T_closure
 19748 0000F0AA 0F85F97F0000            	jne L_error_non_closure
 19749 0000F0B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19750 0000F0B3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19751 0000F0B6 483D[02000000]          	cmp rax, sob_boolean_false
 19752 0000F0BC 0F8531010000            	jne .L_or_end_0035
 19753                                  
 19754                                  	; preparing a non-tail-call
 19755                                  	; preparing a non-tail-call
 19756 0000F0C2 488B4528                	mov rax, PARAM(1)	; param strs
 19757 0000F0C6 50                      	push rax
 19758 0000F0C7 6A01                    	push 1	; arg count
 19759 0000F0C9 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 19760 0000F0D1 803805                  	cmp byte [rax], T_undefined
 19761 0000F0D4 0F844B7F0000            	je L_error_fvar_undefined
 19762 0000F0DA 803804                  	cmp byte [rax], T_closure
 19763 0000F0DD 0F85C67F0000            	jne L_error_non_closure
 19764 0000F0E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19765 0000F0E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19766 0000F0E9 50                      	push rax
 19767 0000F0EA 488B4520                	mov rax, PARAM(0)	; param str
 19768 0000F0EE 50                      	push rax
 19769 0000F0EF 6A02                    	push 2	; arg count
 19770 0000F0F1 488B4510                	mov rax, ENV
 19771 0000F0F5 488B4008                	mov rax, qword [rax + 8 * 1]
 19772 0000F0F9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string<=?
 19773 0000F0FC 803804                  	cmp byte [rax], T_closure
 19774 0000F0FF 0F85A47F0000            	jne L_error_non_closure
 19775 0000F105 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19776 0000F108 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19777 0000F10B 483D[02000000]          	cmp rax, sob_boolean_false
 19778 0000F111 0F84CA000000            	je .L_if_else_01f3
 19779                                  	; preparing a tail-call
 19780                                  	; preparing a non-tail-call
 19781 0000F117 488B4528                	mov rax, PARAM(1)	; param strs
 19782 0000F11B 50                      	push rax
 19783 0000F11C 6A01                    	push 1	; arg count
 19784 0000F11E 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 19785 0000F126 803805                  	cmp byte [rax], T_undefined
 19786 0000F129 0F84F67E0000            	je L_error_fvar_undefined
 19787 0000F12F 803804                  	cmp byte [rax], T_closure
 19788 0000F132 0F85717F0000            	jne L_error_non_closure
 19789 0000F138 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19790 0000F13B FF5009                  	call SOB_CLOSURE_CODE(rax)
 19791 0000F13E 50                      	push rax
 19792                                  	; preparing a non-tail-call
 19793 0000F13F 488B4528                	mov rax, PARAM(1)	; param strs
 19794 0000F143 50                      	push rax
 19795 0000F144 6A01                    	push 1	; arg count
 19796 0000F146 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 19797 0000F14E 803805                  	cmp byte [rax], T_undefined
 19798 0000F151 0F84CE7E0000            	je L_error_fvar_undefined
 19799 0000F157 803804                  	cmp byte [rax], T_closure
 19800 0000F15A 0F85497F0000            	jne L_error_non_closure
 19801 0000F160 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19802 0000F163 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19803 0000F166 50                      	push rax
 19804 0000F167 6A02                    	push 2	; arg count
 19805 0000F169 488B4510                	mov rax, ENV
 19806 0000F16D 488B00                  	mov rax, qword [rax + 8 * 0]
 19807 0000F170 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19808 0000F173 488B00                  	mov rax, qword [rax]
 19809 0000F176 803804                  	cmp byte [rax], T_closure
 19810 0000F179 0F852A7F0000            	jne L_error_non_closure
 19811 0000F17F FF7001                  	push SOB_CLOSURE_ENV(rax)
 19812 0000F182 4C8B4009                	mov r8, qword [rax + 1 + 8]
 19813 0000F186 FF7508                  	push qword [rbp + 8]				; push old return address
 19814 0000F189 FF7500                  	push qword [rbp]					; push old rbp
 19815                                  	;; move stack up ;;
 19816 0000F18C 488B5D18                	mov rbx, [rbp + 3*8]
 19817 0000F190 4889DE                  	mov rsi, rbx						; save old size in rsi
 19818 0000F193 4883C303                	add rbx, 3
 19819 0000F197 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 19820 0000F19F B902000000              	mov rcx, 2
 19821 0000F1A4 4883C104                	add rcx, 4				; num of iterations in rcx
 19822                                  .L_tc_recycle_frame_loop_0381:
 19823 0000F1A8 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 19824 0000F1B0 488B143C                	mov rdx, [rsp + rdi]
 19825 0000F1B4 4889541D00              	mov [rbp + rbx], rdx
 19826 0000F1B9 4883EB08                	sub rbx, 8
 19827 0000F1BD 48FFC9                  	dec rcx
 19828 0000F1C0 4883F900                	cmp rcx, 0
 19829 0000F1C4 75E2                    	jne .L_tc_recycle_frame_loop_0381
 19830 0000F1C6 4889F3                  	mov rbx, rsi
 19831 0000F1C9 4883EB02                	sub rbx, 2
 19832 0000F1CD 488D1CDD00000000        	lea rbx, [rbx*8]
 19833 0000F1D5 4801DD                  	add rbp, rbx
 19834 0000F1D8 4889EC                  	mov rsp, rbp         ; fix stack pointers
 19835 0000F1DB 5D                      	pop rbp
 19836 0000F1DC 41FFE0                  	jmp r8
 19837 0000F1DF EB0A                    	jmp .L_if_end_01f3
 19838                                  .L_if_else_01f3:
 19839 0000F1E1 48B8-                   	mov rax, L_constants + 2
 19839 0000F1E3 [0200000000000000] 
 19840                                  .L_if_end_01f3:
 19841 0000F1EB 483D[02000000]          	cmp rax, sob_boolean_false
 19842 0000F1F1 7500                    	jne .L_or_end_0035
 19843                                  .L_or_end_0035:
 19844 0000F1F3 C9                      	leave
 19845 0000F1F4 C22000                  	ret AND_KILL_FRAME(2)
 19846                                  .L_lambda_simple_end_02a1:	; new closure is in rax
 19847 0000F1F7 50                      	push rax
 19848 0000F1F8 488B4520                	mov rax, PARAM(0)	; param run
 19849 0000F1FC 8F00                    	pop qword [rax]
 19850 0000F1FE 48B8-                   	mov rax, sob_void
 19850 0000F200 [0000000000000000] 
 19851                                  
 19852 0000F208 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19853 0000F20D E8407F0000              	call malloc
 19854 0000F212 50                      	push rax
 19855 0000F213 BF08000000              	mov rdi, 8 * 1	; new rib
 19856 0000F218 E8357F0000              	call malloc
 19857 0000F21D 50                      	push rax
 19858 0000F21E BF28000000              	mov rdi, 8 * 5	; extended env
 19859 0000F223 E82A7F0000              	call malloc
 19860 0000F228 488B7D10                	mov rdi, ENV
 19861 0000F22C BE00000000              	mov rsi, 0
 19862 0000F231 BA01000000              	mov rdx, 1
 19863                                  .L_lambda_opt_env_loop_005a:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 19864 0000F236 4883FE04                	cmp rsi, 4
 19865 0000F23A 7410                    	je .L_lambda_opt_env_end_005a
 19866 0000F23C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19867 0000F240 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19868 0000F244 48FFC6                  	inc rsi
 19869 0000F247 48FFC2                  	inc rdx
 19870 0000F24A EBEA                    	jmp .L_lambda_opt_env_loop_005a
 19871                                  .L_lambda_opt_env_end_005a:
 19872 0000F24C 5B                      	pop rbx
 19873 0000F24D BE00000000              	mov rsi, 0
 19874                                  .L_lambda_opt_params_loop_005a:	; copy params
 19875 0000F252 4883FE01                	cmp rsi, 1
 19876 0000F256 740E                    	je .L_lambda_opt_params_end_005a
 19877 0000F258 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19878 0000F25D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19879 0000F261 48FFC6                  	inc rsi
 19880 0000F264 EBEC                    	jmp .L_lambda_opt_params_loop_005a
 19881                                  .L_lambda_opt_params_end_005a:
 19882 0000F266 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 19883 0000F269 4889C3                  	mov rbx, rax
 19884 0000F26C 58                      	pop rax
 19885 0000F26D C60004                  	mov byte [rax], T_closure
 19886 0000F270 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19887 0000F274 48C74009[81F20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_005a
 19888 0000F27C E964010000              	jmp .L_lambda_opt_end_005a
 19889                                  .L_lambda_opt_code_005a:	; lambda-opt body
 19890 0000F281 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19891 0000F287 740D                    	je .L_lambda_opt_arity_check_exact_005a
 19892 0000F289 7F48                    	jg .L_lambda_opt_arity_check_more_005a
 19893 0000F28B FF742410                	push qword [rsp + 8 * 2]
 19894 0000F28F 6A01                    	push 1
 19895 0000F291 E9897E0000              	jmp L_error_incorrect_arity_opt
 19896                                  .L_lambda_opt_arity_check_exact_005a:
 19897 0000F296 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update argument count (fixed params + 1 for nil)
 19898 0000F29F 41BA04000000            	mov r10, 4	; r10 = total addresses to adjust (fixed params + 3)
 19899 0000F2A5 FF3424                  	push qword [rsp]	; Save the top stack element
 19900 0000F2A8 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
 19901                                  .L_lambda_opt_stack_shrink_loop_010c:
 19902 0000F2AE 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
 19903 0000F2B1 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_010c	; Exit loop if all elements processed
 19904 0000F2B3 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
 19905 0000F2B8 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
 19906 0000F2BC 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
 19907 0000F2C1 49FFC3                  	inc r11	; Increment loop index
 19908 0000F2C4 EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_010c	; Jump back to loop start
 19909                                  .L_lambda_opt_stack_shrink_loop_exit_010c:
 19910 0000F2C6 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
 19911 0000F2CE E988000000              	jmp .L_lambda_opt_stack_adjusted_005a
 19912                                  .L_lambda_opt_arity_check_more_005a:
 19913 0000F2D3 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
 19914 0000F2D8 4983E801                	sub r8, 1	; r8 = count of optional params
 19915 0000F2DC 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update the number of params (fixed params + 1 for list opt)
 19916 0000F2E5 41B900000000            	mov r9, 0	; r9 = index of optional argument list
 19917 0000F2EB 4E8D54C418              	lea r10, [rsp + 2 * 8 + 1 * 8 + r8 * 8]	; r10 = address of first optional param
 19918 0000F2F0 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
 19918 0000F2F2 [0100000000000000] 
 19919                                  .L_lambda_opt_stack_shrink_loop_010d:
 19920 0000F2FA 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
 19921 0000F2FD 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_010d	; Exit loop if all optional params are processed
 19922 0000F2FF BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
 19923 0000F304 E8497E0000              	call malloc	; Allocate memory for a new pair
 19924 0000F309 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
 19925 0000F30D 49F7D9                  	neg r9	; Negate index to access in reverse
 19926 0000F310 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
 19927 0000F314 49F7D9                  	neg r9	; Negate index back
 19928 0000F317 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
 19929 0000F31B C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
 19930 0000F31E 4989C3                  	mov r11, rax	; Update current pair to the newly created one
 19931 0000F321 49FFC1                  	inc r9	; Increment the index
 19932 0000F324 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_010d	; Repeat the loop for the next param
 19933                                  .L_lambda_opt_stack_shrink_loop_exit_010d:
 19934 0000F326 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
 19935 0000F329 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
 19936 0000F32D 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
 19937 0000F330 4983C418                	add r12, 24	; Skip fixed params and return address
 19938 0000F334 41BD04000000            	mov r13, 4	; r13 = loop counter (number of params, old fp, ret addr, lex env)
 19939                                  .L_lambda_opt_stack_shrink_loop_010e:
 19940 0000F33A 4983FD00                	cmp r13, 0	; Check if there are more values to copy
 19941 0000F33E 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_010e	; Exit loop if all values are copied
 19942 0000F340 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
 19943 0000F344 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
 19944 0000F347 49FFCD                  	dec r13	; Decrement the loop counter
 19945 0000F34A 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
 19946 0000F34E 4983EC08                	sub r12, 8	; Move the source pointer to the next location
 19947 0000F352 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_010e	; Repeat the loop for the next value
 19948                                  .L_lambda_opt_stack_shrink_loop_exit_010e:
 19949 0000F354 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
 19950 0000F358 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
 19951                                  .L_lambda_opt_stack_adjusted_005a:
 19952 0000F35B C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
 19953                                  	; preparing a tail-call
 19954 0000F35F 488B4528                	mov rax, PARAM(1)	; param strs
 19955 0000F363 50                      	push rax
 19956 0000F364 488B4520                	mov rax, PARAM(0)	; param str
 19957 0000F368 50                      	push rax
 19958 0000F369 6A02                    	push 2	; arg count
 19959 0000F36B 488B4510                	mov rax, ENV
 19960 0000F36F 488B00                  	mov rax, qword [rax + 8 * 0]
 19961 0000F372 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19962 0000F375 488B00                  	mov rax, qword [rax]
 19963 0000F378 803804                  	cmp byte [rax], T_closure
 19964 0000F37B 0F85287D0000            	jne L_error_non_closure
 19965 0000F381 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19966 0000F384 4C8B4009                	mov r8, qword [rax + 1 + 8]
 19967 0000F388 FF7508                  	push qword [rbp + 8]				; push old return address
 19968 0000F38B FF7500                  	push qword [rbp]					; push old rbp
 19969                                  	;; move stack up ;;
 19970 0000F38E 488B5D18                	mov rbx, [rbp + 3*8]
 19971 0000F392 4889DE                  	mov rsi, rbx						; save old size in rsi
 19972 0000F395 4883C303                	add rbx, 3
 19973 0000F399 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 19974 0000F3A1 B902000000              	mov rcx, 2
 19975 0000F3A6 4883C104                	add rcx, 4				; num of iterations in rcx
 19976                                  .L_tc_recycle_frame_loop_0382:
 19977 0000F3AA 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 19978 0000F3B2 488B143C                	mov rdx, [rsp + rdi]
 19979 0000F3B6 4889541D00              	mov [rbp + rbx], rdx
 19980 0000F3BB 4883EB08                	sub rbx, 8
 19981 0000F3BF 48FFC9                  	dec rcx
 19982 0000F3C2 4883F900                	cmp rcx, 0
 19983 0000F3C6 75E2                    	jne .L_tc_recycle_frame_loop_0382
 19984 0000F3C8 4889F3                  	mov rbx, rsi
 19985 0000F3CB 4883EB02                	sub rbx, 2
 19986 0000F3CF 488D1CDD00000000        	lea rbx, [rbx*8]
 19987 0000F3D7 4801DD                  	add rbp, rbx
 19988 0000F3DA 4889EC                  	mov rsp, rbp         ; fix stack pointers
 19989 0000F3DD 5D                      	pop rbp
 19990 0000F3DE 41FFE0                  	jmp r8
 19991 0000F3E1 C9                      	leave	; Restore the previous stack frame
 19992 0000F3E2 C22000                  	ret AND_KILL_FRAME(2)
 19993                                  .L_lambda_opt_end_005a:	; new closure is in rax
 19994 0000F3E5 C9                      	leave
 19995 0000F3E6 C21800                  	ret AND_KILL_FRAME(1)
 19996                                  .L_lambda_simple_end_02a0:	; new closure is in rax
 19997 0000F3E9 803804                  	cmp byte [rax], T_closure
 19998 0000F3EC 0F85B77C0000            	jne L_error_non_closure
 19999 0000F3F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20000 0000F3F5 4C8B4009                	mov r8, qword [rax + 1 + 8]
 20001 0000F3F9 FF7508                  	push qword [rbp + 8]				; push old return address
 20002 0000F3FC FF7500                  	push qword [rbp]					; push old rbp
 20003                                  	;; move stack up ;;
 20004 0000F3FF 488B5D18                	mov rbx, [rbp + 3*8]
 20005 0000F403 4889DE                  	mov rsi, rbx						; save old size in rsi
 20006 0000F406 4883C303                	add rbx, 3
 20007 0000F40A 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 20008 0000F412 B901000000              	mov rcx, 1
 20009 0000F417 4883C104                	add rcx, 4				; num of iterations in rcx
 20010                                  .L_tc_recycle_frame_loop_0380:
 20011 0000F41B 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 20012 0000F423 488B143C                	mov rdx, [rsp + rdi]
 20013 0000F427 4889541D00              	mov [rbp + rbx], rdx
 20014 0000F42C 4883EB08                	sub rbx, 8
 20015 0000F430 48FFC9                  	dec rcx
 20016 0000F433 4883F900                	cmp rcx, 0
 20017 0000F437 75E2                    	jne .L_tc_recycle_frame_loop_0380
 20018 0000F439 4889F3                  	mov rbx, rsi
 20019 0000F43C 4883EB01                	sub rbx, 1
 20020 0000F440 488D1CDD00000000        	lea rbx, [rbx*8]
 20021 0000F448 4801DD                  	add rbp, rbx
 20022 0000F44B 4889EC                  	mov rsp, rbp         ; fix stack pointers
 20023 0000F44E 5D                      	pop rbp
 20024 0000F44F 41FFE0                  	jmp r8
 20025 0000F452 C9                      	leave
 20026 0000F453 C21800                  	ret AND_KILL_FRAME(1)
 20027                                  .L_lambda_simple_end_029f:	; new closure is in rax
 20028 0000F456 803804                  	cmp byte [rax], T_closure
 20029 0000F459 0F854A7C0000            	jne L_error_non_closure
 20030 0000F45F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20031 0000F462 4C8B4009                	mov r8, qword [rax + 1 + 8]
 20032 0000F466 FF7508                  	push qword [rbp + 8]				; push old return address
 20033 0000F469 FF7500                  	push qword [rbp]					; push old rbp
 20034                                  	;; move stack up ;;
 20035 0000F46C 488B5D18                	mov rbx, [rbp + 3*8]
 20036 0000F470 4889DE                  	mov rsi, rbx						; save old size in rsi
 20037 0000F473 4883C303                	add rbx, 3
 20038 0000F477 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 20039 0000F47F B901000000              	mov rcx, 1
 20040 0000F484 4883C104                	add rcx, 4				; num of iterations in rcx
 20041                                  .L_tc_recycle_frame_loop_037c:
 20042 0000F488 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 20043 0000F490 488B143C                	mov rdx, [rsp + rdi]
 20044 0000F494 4889541D00              	mov [rbp + rbx], rdx
 20045 0000F499 4883EB08                	sub rbx, 8
 20046 0000F49D 48FFC9                  	dec rcx
 20047 0000F4A0 4883F900                	cmp rcx, 0
 20048 0000F4A4 75E2                    	jne .L_tc_recycle_frame_loop_037c
 20049 0000F4A6 4889F3                  	mov rbx, rsi
 20050 0000F4A9 4883EB01                	sub rbx, 1
 20051 0000F4AD 488D1CDD00000000        	lea rbx, [rbx*8]
 20052 0000F4B5 4801DD                  	add rbp, rbx
 20053 0000F4B8 4889EC                  	mov rsp, rbp         ; fix stack pointers
 20054 0000F4BB 5D                      	pop rbp
 20055 0000F4BC 41FFE0                  	jmp r8
 20056 0000F4BF C9                      	leave
 20057 0000F4C0 C21800                  	ret AND_KILL_FRAME(1)
 20058                                  .L_lambda_simple_end_029b:	; new closure is in rax
 20059 0000F4C3 803804                  	cmp byte [rax], T_closure
 20060 0000F4C6 0F85DD7B0000            	jne L_error_non_closure
 20061 0000F4CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 20062 0000F4CF 4C8B4009                	mov r8, qword [rax + 1 + 8]
 20063 0000F4D3 FF7508                  	push qword [rbp + 8]				; push old return address
 20064 0000F4D6 FF7500                  	push qword [rbp]					; push old rbp
 20065                                  	;; move stack up ;;
 20066 0000F4D9 488B5D18                	mov rbx, [rbp + 3*8]
 20067 0000F4DD 4889DE                  	mov rsi, rbx						; save old size in rsi
 20068 0000F4E0 4883C303                	add rbx, 3
 20069 0000F4E4 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 20070 0000F4EC B901000000              	mov rcx, 1
 20071 0000F4F1 4883C104                	add rcx, 4				; num of iterations in rcx
 20072                                  .L_tc_recycle_frame_loop_037a:
 20073 0000F4F5 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 20074 0000F4FD 488B143C                	mov rdx, [rsp + rdi]
 20075 0000F501 4889541D00              	mov [rbp + rbx], rdx
 20076 0000F506 4883EB08                	sub rbx, 8
 20077 0000F50A 48FFC9                  	dec rcx
 20078 0000F50D 4883F900                	cmp rcx, 0
 20079 0000F511 75E2                    	jne .L_tc_recycle_frame_loop_037a
 20080 0000F513 4889F3                  	mov rbx, rsi
 20081 0000F516 4883EB01                	sub rbx, 1
 20082 0000F51A 488D1CDD00000000        	lea rbx, [rbx*8]
 20083 0000F522 4801DD                  	add rbp, rbx
 20084 0000F525 4889EC                  	mov rsp, rbp         ; fix stack pointers
 20085 0000F528 5D                      	pop rbp
 20086 0000F529 41FFE0                  	jmp r8
 20087 0000F52C C9                      	leave
 20088 0000F52D C22000                  	ret AND_KILL_FRAME(2)
 20089                                  .L_lambda_simple_end_029a:	; new closure is in rax
 20090 0000F530 50                      	push rax
 20091 0000F531 6A01                    	push 1	; arg count
 20092 0000F533 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20093 0000F538 E8157C0000              	call malloc
 20094 0000F53D 50                      	push rax
 20095 0000F53E BF00000000              	mov rdi, 8 * 0	; new rib
 20096 0000F543 E80A7C0000              	call malloc
 20097 0000F548 50                      	push rax
 20098 0000F549 BF08000000              	mov rdi, 8 * 1	; extended env
 20099 0000F54E E8FF7B0000              	call malloc
 20100 0000F553 488B7D10                	mov rdi, ENV
 20101 0000F557 BE00000000              	mov rsi, 0
 20102 0000F55C BA01000000              	mov rdx, 1
 20103                                  .L_lambda_simple_env_loop_02a2:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 20104 0000F561 4883FE00                	cmp rsi, 0
 20105 0000F565 7410                    	je .L_lambda_simple_env_end_02a2
 20106 0000F567 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20107 0000F56B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20108 0000F56F 48FFC6                  	inc rsi
 20109 0000F572 48FFC2                  	inc rdx
 20110 0000F575 EBEA                    	jmp .L_lambda_simple_env_loop_02a2
 20111                                  .L_lambda_simple_env_end_02a2:
 20112 0000F577 5B                      	pop rbx
 20113 0000F578 BE00000000              	mov rsi, 0
 20114                                  .L_lambda_simple_params_loop_02a2:	; copy params
 20115 0000F57D 4883FE00                	cmp rsi, 0
 20116 0000F581 740E                    	je .L_lambda_simple_params_end_02a2
 20117 0000F583 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20118 0000F588 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20119 0000F58C 48FFC6                  	inc rsi
 20120 0000F58F EBEC                    	jmp .L_lambda_simple_params_loop_02a2
 20121                                  .L_lambda_simple_params_end_02a2:
 20122 0000F591 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 20123 0000F594 4889C3                  	mov rbx, rax
 20124 0000F597 58                      	pop rax
 20125 0000F598 C60004                  	mov byte [rax], T_closure
 20126 0000F59B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20127 0000F59F 48C74009[ACF50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02a2
 20128 0000F5A7 E947010000              	jmp .L_lambda_simple_end_02a2
 20129                                  .L_lambda_simple_code_02a2:	; lambda-simple body
 20130 0000F5AC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20131 0000F5B2 740B                    	je .L_lambda_simple_arity_check_ok_02a2
 20132 0000F5B4 FF742410                	push qword [rsp + 8 * 2]
 20133 0000F5B8 6A01                    	push 1
 20134 0000F5BA E94C7B0000              	jmp L_error_incorrect_arity_simple
 20135                                  .L_lambda_simple_arity_check_ok_02a2:
 20136 0000F5BF C8000000                	enter 0, 0
 20137                                  	; preparing a non-tail-call
 20138 0000F5C3 488B0425[D2120000]      	mov rax, qword [free_var_75]	; free var char=?
 20139 0000F5CB 803805                  	cmp byte [rax], T_undefined
 20140 0000F5CE 0F84517A0000            	je L_error_fvar_undefined
 20141 0000F5D4 50                      	push rax
 20142 0000F5D5 488B0425[C1120000]      	mov rax, qword [free_var_74]	; free var char<?
 20143 0000F5DD 803805                  	cmp byte [rax], T_undefined
 20144 0000F5E0 0F843F7A0000            	je L_error_fvar_undefined
 20145 0000F5E6 50                      	push rax
 20146 0000F5E7 6A02                    	push 2	; arg count
 20147 0000F5E9 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 20148 0000F5ED 803804                  	cmp byte [rax], T_closure
 20149 0000F5F0 0F85B37A0000            	jne L_error_non_closure
 20150 0000F5F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20151 0000F5F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20152 0000F5FC 48890425[AC160000]      	mov qword [free_var_133], rax
 20153 0000F604 48B8-                   	mov rax, sob_void
 20153 0000F606 [0000000000000000] 
 20154                                  
 20155                                  	; preparing a non-tail-call
 20156 0000F60E 488B0425[5B120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 20157 0000F616 803805                  	cmp byte [rax], T_undefined
 20158 0000F619 0F84067A0000            	je L_error_fvar_undefined
 20159 0000F61F 50                      	push rax
 20160 0000F620 488B0425[4A120000]      	mov rax, qword [free_var_67]	; free var char-ci<?
 20161 0000F628 803805                  	cmp byte [rax], T_undefined
 20162 0000F62B 0F84F4790000            	je L_error_fvar_undefined
 20163 0000F631 50                      	push rax
 20164 0000F632 6A02                    	push 2	; arg count
 20165 0000F634 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 20166 0000F638 803804                  	cmp byte [rax], T_closure
 20167 0000F63B 0F85687A0000            	jne L_error_non_closure
 20168 0000F641 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20169 0000F644 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20170 0000F647 48890425[E0150000]      	mov qword [free_var_121], rax
 20171 0000F64F 48B8-                   	mov rax, sob_void
 20171 0000F651 [0000000000000000] 
 20172                                  
 20173                                  	; preparing a non-tail-call
 20174 0000F659 488B0425[D2120000]      	mov rax, qword [free_var_75]	; free var char=?
 20175 0000F661 803805                  	cmp byte [rax], T_undefined
 20176 0000F664 0F84BB790000            	je L_error_fvar_undefined
 20177 0000F66A 50                      	push rax
 20178 0000F66B 488B0425[F4120000]      	mov rax, qword [free_var_77]	; free var char>?
 20179 0000F673 803805                  	cmp byte [rax], T_undefined
 20180 0000F676 0F84A9790000            	je L_error_fvar_undefined
 20181 0000F67C 50                      	push rax
 20182 0000F67D 6A02                    	push 2	; arg count
 20183 0000F67F 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 20184 0000F683 803804                  	cmp byte [rax], T_closure
 20185 0000F686 0F851D7A0000            	jne L_error_non_closure
 20186 0000F68C FF7001                  	push SOB_CLOSURE_ENV(rax)
 20187 0000F68F FF5009                  	call SOB_CLOSURE_CODE(rax)
 20188 0000F692 48890425[DF160000]      	mov qword [free_var_136], rax
 20189 0000F69A 48B8-                   	mov rax, sob_void
 20189 0000F69C [0000000000000000] 
 20190                                  
 20191                                  	; preparing a non-tail-call
 20192 0000F6A4 488B0425[5B120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 20193 0000F6AC 803805                  	cmp byte [rax], T_undefined
 20194 0000F6AF 0F8470790000            	je L_error_fvar_undefined
 20195 0000F6B5 50                      	push rax
 20196 0000F6B6 488B0425[7D120000]      	mov rax, qword [free_var_70]	; free var char-ci>?
 20197 0000F6BE 803805                  	cmp byte [rax], T_undefined
 20198 0000F6C1 0F845E790000            	je L_error_fvar_undefined
 20199 0000F6C7 50                      	push rax
 20200 0000F6C8 6A02                    	push 2	; arg count
 20201 0000F6CA 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 20202 0000F6CE 803804                  	cmp byte [rax], T_closure
 20203 0000F6D1 0F85D2790000            	jne L_error_non_closure
 20204 0000F6D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20205 0000F6DA FF5009                  	call SOB_CLOSURE_CODE(rax)
 20206 0000F6DD 48890425[13160000]      	mov qword [free_var_124], rax
 20207 0000F6E5 48B8-                   	mov rax, sob_void
 20207 0000F6E7 [0000000000000000] 
 20208 0000F6EF C9                      	leave
 20209 0000F6F0 C21800                  	ret AND_KILL_FRAME(1)
 20210                                  .L_lambda_simple_end_02a2:	; new closure is in rax
 20211 0000F6F3 803804                  	cmp byte [rax], T_closure
 20212 0000F6F6 0F85AD790000            	jne L_error_non_closure
 20213 0000F6FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 20214 0000F6FF FF5009                  	call SOB_CLOSURE_CODE(rax)
 20215                                  
 20216 0000F702 4889C7                  	mov rdi, rax
 20217 0000F705 E89D7C0000              	call print_sexpr_if_not_void
 20218                                  	; preparing a non-tail-call
 20219 0000F70A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20220 0000F70F E83E7A0000              	call malloc
 20221 0000F714 50                      	push rax
 20222 0000F715 BF00000000              	mov rdi, 8 * 0	; new rib
 20223 0000F71A E8337A0000              	call malloc
 20224 0000F71F 50                      	push rax
 20225 0000F720 BF08000000              	mov rdi, 8 * 1	; extended env
 20226 0000F725 E8287A0000              	call malloc
 20227 0000F72A 488B7D10                	mov rdi, ENV
 20228 0000F72E BE00000000              	mov rsi, 0
 20229 0000F733 BA01000000              	mov rdx, 1
 20230                                  .L_lambda_simple_env_loop_02a3:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 20231 0000F738 4883FE00                	cmp rsi, 0
 20232 0000F73C 7410                    	je .L_lambda_simple_env_end_02a3
 20233 0000F73E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20234 0000F742 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20235 0000F746 48FFC6                  	inc rsi
 20236 0000F749 48FFC2                  	inc rdx
 20237 0000F74C EBEA                    	jmp .L_lambda_simple_env_loop_02a3
 20238                                  .L_lambda_simple_env_end_02a3:
 20239 0000F74E 5B                      	pop rbx
 20240 0000F74F BE00000000              	mov rsi, 0
 20241                                  .L_lambda_simple_params_loop_02a3:	; copy params
 20242 0000F754 4883FE00                	cmp rsi, 0
 20243 0000F758 740E                    	je .L_lambda_simple_params_end_02a3
 20244 0000F75A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20245 0000F75F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20246 0000F763 48FFC6                  	inc rsi
 20247 0000F766 EBEC                    	jmp .L_lambda_simple_params_loop_02a3
 20248                                  .L_lambda_simple_params_end_02a3:
 20249 0000F768 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 20250 0000F76B 4889C3                  	mov rbx, rax
 20251 0000F76E 58                      	pop rax
 20252 0000F76F C60004                  	mov byte [rax], T_closure
 20253 0000F772 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20254 0000F776 48C74009[83F70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02a3
 20255 0000F77E E98B0C0000              	jmp .L_lambda_simple_end_02a3
 20256                                  .L_lambda_simple_code_02a3:	; lambda-simple body
 20257 0000F783 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20258 0000F789 740B                    	je .L_lambda_simple_arity_check_ok_02a3
 20259 0000F78B FF742410                	push qword [rsp + 8 * 2]
 20260 0000F78F 6A01                    	push 1
 20261 0000F791 E975790000              	jmp L_error_incorrect_arity_simple
 20262                                  .L_lambda_simple_arity_check_ok_02a3:
 20263 0000F796 C8000000                	enter 0, 0
 20264                                  	; preparing a tail-call
 20265 0000F79A 48B8-                   	mov rax, L_constants + 1993
 20265 0000F79C [C907000000000000] 
 20266 0000F7A4 50                      	push rax
 20267 0000F7A5 6A01                    	push 1	; arg count
 20268 0000F7A7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20269 0000F7AC E8A1790000              	call malloc
 20270 0000F7B1 50                      	push rax
 20271 0000F7B2 BF08000000              	mov rdi, 8 * 1	; new rib
 20272 0000F7B7 E896790000              	call malloc
 20273 0000F7BC 50                      	push rax
 20274 0000F7BD BF10000000              	mov rdi, 8 * 2	; extended env
 20275 0000F7C2 E88B790000              	call malloc
 20276 0000F7C7 488B7D10                	mov rdi, ENV
 20277 0000F7CB BE00000000              	mov rsi, 0
 20278 0000F7D0 BA01000000              	mov rdx, 1
 20279                                  .L_lambda_simple_env_loop_02a4:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 20280 0000F7D5 4883FE01                	cmp rsi, 1
 20281 0000F7D9 7410                    	je .L_lambda_simple_env_end_02a4
 20282 0000F7DB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20283 0000F7DF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20284 0000F7E3 48FFC6                  	inc rsi
 20285 0000F7E6 48FFC2                  	inc rdx
 20286 0000F7E9 EBEA                    	jmp .L_lambda_simple_env_loop_02a4
 20287                                  .L_lambda_simple_env_end_02a4:
 20288 0000F7EB 5B                      	pop rbx
 20289 0000F7EC BE00000000              	mov rsi, 0
 20290                                  .L_lambda_simple_params_loop_02a4:	; copy params
 20291 0000F7F1 4883FE01                	cmp rsi, 1
 20292 0000F7F5 740E                    	je .L_lambda_simple_params_end_02a4
 20293 0000F7F7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20294 0000F7FC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20295 0000F800 48FFC6                  	inc rsi
 20296 0000F803 EBEC                    	jmp .L_lambda_simple_params_loop_02a4
 20297                                  .L_lambda_simple_params_end_02a4:
 20298 0000F805 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 20299 0000F808 4889C3                  	mov rbx, rax
 20300 0000F80B 58                      	pop rax
 20301 0000F80C C60004                  	mov byte [rax], T_closure
 20302 0000F80F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20303 0000F813 48C74009[20F80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02a4
 20304 0000F81B E9810B0000              	jmp .L_lambda_simple_end_02a4
 20305                                  .L_lambda_simple_code_02a4:	; lambda-simple body
 20306 0000F820 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20307 0000F826 740B                    	je .L_lambda_simple_arity_check_ok_02a4
 20308 0000F828 FF742410                	push qword [rsp + 8 * 2]
 20309 0000F82C 6A01                    	push 1
 20310 0000F82E E9D8780000              	jmp L_error_incorrect_arity_simple
 20311                                  .L_lambda_simple_arity_check_ok_02a4:
 20312 0000F833 C8000000                	enter 0, 0
 20313 0000F837 BF08000000              	mov rdi, 8
 20314 0000F83C E811790000              	call malloc
 20315 0000F841 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
 20316 0000F845 488918                  	mov qword[rax], rbx
 20317 0000F848 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 20318 0000F84C 48B8-                   	mov rax, sob_void
 20318 0000F84E [0000000000000000] 
 20319                                  
 20320 0000F856 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20321 0000F85B E8F2780000              	call malloc
 20322 0000F860 50                      	push rax
 20323 0000F861 BF08000000              	mov rdi, 8 * 1	; new rib
 20324 0000F866 E8E7780000              	call malloc
 20325 0000F86B 50                      	push rax
 20326 0000F86C BF18000000              	mov rdi, 8 * 3	; extended env
 20327 0000F871 E8DC780000              	call malloc
 20328 0000F876 488B7D10                	mov rdi, ENV
 20329 0000F87A BE00000000              	mov rsi, 0
 20330 0000F87F BA01000000              	mov rdx, 1
 20331                                  .L_lambda_simple_env_loop_02a5:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 20332 0000F884 4883FE02                	cmp rsi, 2
 20333 0000F888 7410                    	je .L_lambda_simple_env_end_02a5
 20334 0000F88A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20335 0000F88E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20336 0000F892 48FFC6                  	inc rsi
 20337 0000F895 48FFC2                  	inc rdx
 20338 0000F898 EBEA                    	jmp .L_lambda_simple_env_loop_02a5
 20339                                  .L_lambda_simple_env_end_02a5:
 20340 0000F89A 5B                      	pop rbx
 20341 0000F89B BE00000000              	mov rsi, 0
 20342                                  .L_lambda_simple_params_loop_02a5:	; copy params
 20343 0000F8A0 4883FE01                	cmp rsi, 1
 20344 0000F8A4 740E                    	je .L_lambda_simple_params_end_02a5
 20345 0000F8A6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20346 0000F8AB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20347 0000F8AF 48FFC6                  	inc rsi
 20348 0000F8B2 EBEC                    	jmp .L_lambda_simple_params_loop_02a5
 20349                                  .L_lambda_simple_params_end_02a5:
 20350 0000F8B4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 20351 0000F8B7 4889C3                  	mov rbx, rax
 20352 0000F8BA 58                      	pop rax
 20353 0000F8BB C60004                  	mov byte [rax], T_closure
 20354 0000F8BE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20355 0000F8C2 48C74009[CFF80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02a5
 20356 0000F8CA E9E7010000              	jmp .L_lambda_simple_end_02a5
 20357                                  .L_lambda_simple_code_02a5:	; lambda-simple body
 20358 0000F8CF 48837C241004            	cmp qword [rsp + 8 * 2], 4
 20359 0000F8D5 740B                    	je .L_lambda_simple_arity_check_ok_02a5
 20360 0000F8D7 FF742410                	push qword [rsp + 8 * 2]
 20361 0000F8DB 6A04                    	push 4
 20362 0000F8DD E929780000              	jmp L_error_incorrect_arity_simple
 20363                                  .L_lambda_simple_arity_check_ok_02a5:
 20364 0000F8E2 C8000000                	enter 0, 0
 20365                                  	; preparing a non-tail-call
 20366 0000F8E6 488B4538                	mov rax, PARAM(3)	; param len
 20367 0000F8EA 50                      	push rax
 20368 0000F8EB 488B4520                	mov rax, PARAM(0)	; param i
 20369 0000F8EF 50                      	push rax
 20370 0000F8F0 6A02                    	push 2	; arg count
 20371 0000F8F2 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 20372 0000F8FA 803805                  	cmp byte [rax], T_undefined
 20373 0000F8FD 0F8422770000            	je L_error_fvar_undefined
 20374 0000F903 803804                  	cmp byte [rax], T_closure
 20375 0000F906 0F859D770000            	jne L_error_non_closure
 20376 0000F90C FF7001                  	push SOB_CLOSURE_ENV(rax)
 20377 0000F90F FF5009                  	call SOB_CLOSURE_CODE(rax)
 20378 0000F912 483D[02000000]          	cmp rax, sob_boolean_false
 20379 0000F918 0F8594010000            	jne .L_or_end_0036
 20380                                  
 20381                                  	; preparing a non-tail-call
 20382 0000F91E 488B4538                	mov rax, PARAM(3)	; param len
 20383 0000F922 50                      	push rax
 20384 0000F923 488B4520                	mov rax, PARAM(0)	; param i
 20385 0000F927 50                      	push rax
 20386 0000F928 6A02                    	push 2	; arg count
 20387 0000F92A 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 20388 0000F932 803805                  	cmp byte [rax], T_undefined
 20389 0000F935 0F84EA760000            	je L_error_fvar_undefined
 20390 0000F93B 803804                  	cmp byte [rax], T_closure
 20391 0000F93E 0F8565770000            	jne L_error_non_closure
 20392 0000F944 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20393 0000F947 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20394 0000F94A 483D[02000000]          	cmp rax, sob_boolean_false
 20395 0000F950 0F844A010000            	je .L_if_else_01f5
 20396                                  	; preparing a non-tail-call
 20397                                  	; preparing a non-tail-call
 20398 0000F956 488B4520                	mov rax, PARAM(0)	; param i
 20399 0000F95A 50                      	push rax
 20400 0000F95B 488B4530                	mov rax, PARAM(2)	; param str2
 20401 0000F95F 50                      	push rax
 20402 0000F960 6A02                    	push 2	; arg count
 20403 0000F962 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 20404 0000F96A 803805                  	cmp byte [rax], T_undefined
 20405 0000F96D 0F84B2760000            	je L_error_fvar_undefined
 20406 0000F973 803804                  	cmp byte [rax], T_closure
 20407 0000F976 0F852D770000            	jne L_error_non_closure
 20408 0000F97C FF7001                  	push SOB_CLOSURE_ENV(rax)
 20409 0000F97F FF5009                  	call SOB_CLOSURE_CODE(rax)
 20410 0000F982 50                      	push rax
 20411                                  	; preparing a non-tail-call
 20412 0000F983 488B4520                	mov rax, PARAM(0)	; param i
 20413 0000F987 50                      	push rax
 20414 0000F988 488B4528                	mov rax, PARAM(1)	; param str1
 20415 0000F98C 50                      	push rax
 20416 0000F98D 6A02                    	push 2	; arg count
 20417 0000F98F 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 20418 0000F997 803805                  	cmp byte [rax], T_undefined
 20419 0000F99A 0F8485760000            	je L_error_fvar_undefined
 20420 0000F9A0 803804                  	cmp byte [rax], T_closure
 20421 0000F9A3 0F8500770000            	jne L_error_non_closure
 20422 0000F9A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20423 0000F9AC FF5009                  	call SOB_CLOSURE_CODE(rax)
 20424 0000F9AF 50                      	push rax
 20425 0000F9B0 6A02                    	push 2	; arg count
 20426 0000F9B2 488B4510                	mov rax, ENV
 20427 0000F9B6 488B4008                	mov rax, qword [rax + 8 * 1]
 20428 0000F9BA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char=?
 20429 0000F9BD 803804                  	cmp byte [rax], T_closure
 20430 0000F9C0 0F85E3760000            	jne L_error_non_closure
 20431 0000F9C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20432 0000F9C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20433 0000F9CC 483D[02000000]          	cmp rax, sob_boolean_false
 20434 0000F9D2 0F84BC000000            	je .L_if_else_01f4
 20435                                  	; preparing a tail-call
 20436 0000F9D8 488B4538                	mov rax, PARAM(3)	; param len
 20437 0000F9DC 50                      	push rax
 20438 0000F9DD 488B4530                	mov rax, PARAM(2)	; param str2
 20439 0000F9E1 50                      	push rax
 20440 0000F9E2 488B4528                	mov rax, PARAM(1)	; param str1
 20441 0000F9E6 50                      	push rax
 20442                                  	; preparing a non-tail-call
 20443 0000F9E7 48B8-                   	mov rax, L_constants + 2270
 20443 0000F9E9 [DE08000000000000] 
 20444 0000F9F1 50                      	push rax
 20445 0000F9F2 488B4520                	mov rax, PARAM(0)	; param i
 20446 0000F9F6 50                      	push rax
 20447 0000F9F7 6A02                    	push 2	; arg count
 20448 0000F9F9 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 20449 0000FA01 803805                  	cmp byte [rax], T_undefined
 20450 0000FA04 0F841B760000            	je L_error_fvar_undefined
 20451 0000FA0A 803804                  	cmp byte [rax], T_closure
 20452 0000FA0D 0F8596760000            	jne L_error_non_closure
 20453 0000FA13 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20454 0000FA16 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20455 0000FA19 50                      	push rax
 20456 0000FA1A 6A04                    	push 4	; arg count
 20457 0000FA1C 488B4510                	mov rax, ENV
 20458 0000FA20 488B00                  	mov rax, qword [rax + 8 * 0]
 20459 0000FA23 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20460 0000FA26 488B00                  	mov rax, qword [rax]
 20461 0000FA29 803804                  	cmp byte [rax], T_closure
 20462 0000FA2C 0F8577760000            	jne L_error_non_closure
 20463 0000FA32 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20464 0000FA35 4C8B4009                	mov r8, qword [rax + 1 + 8]
 20465 0000FA39 FF7508                  	push qword [rbp + 8]				; push old return address
 20466 0000FA3C FF7500                  	push qword [rbp]					; push old rbp
 20467                                  	;; move stack up ;;
 20468 0000FA3F 488B5D18                	mov rbx, [rbp + 3*8]
 20469 0000FA43 4889DE                  	mov rsi, rbx						; save old size in rsi
 20470 0000FA46 4883C303                	add rbx, 3
 20471 0000FA4A 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 20472 0000FA52 B904000000              	mov rcx, 4
 20473 0000FA57 4883C104                	add rcx, 4				; num of iterations in rcx
 20474                                  .L_tc_recycle_frame_loop_0384:
 20475 0000FA5B 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 20476 0000FA63 488B143C                	mov rdx, [rsp + rdi]
 20477 0000FA67 4889541D00              	mov [rbp + rbx], rdx
 20478 0000FA6C 4883EB08                	sub rbx, 8
 20479 0000FA70 48FFC9                  	dec rcx
 20480 0000FA73 4883F900                	cmp rcx, 0
 20481 0000FA77 75E2                    	jne .L_tc_recycle_frame_loop_0384
 20482 0000FA79 4889F3                  	mov rbx, rsi
 20483 0000FA7C 4883EB04                	sub rbx, 4
 20484 0000FA80 488D1CDD00000000        	lea rbx, [rbx*8]
 20485 0000FA88 4801DD                  	add rbp, rbx
 20486 0000FA8B 4889EC                  	mov rsp, rbp         ; fix stack pointers
 20487 0000FA8E 5D                      	pop rbp
 20488 0000FA8F 41FFE0                  	jmp r8
 20489 0000FA92 EB0A                    	jmp .L_if_end_01f4
 20490                                  .L_if_else_01f4:
 20491 0000FA94 48B8-                   	mov rax, L_constants + 2
 20491 0000FA96 [0200000000000000] 
 20492                                  .L_if_end_01f4:
 20493 0000FA9E EB0A                    	jmp .L_if_end_01f5
 20494                                  .L_if_else_01f5:
 20495 0000FAA0 48B8-                   	mov rax, L_constants + 2
 20495 0000FAA2 [0200000000000000] 
 20496                                  .L_if_end_01f5:
 20497 0000FAAA 483D[02000000]          	cmp rax, sob_boolean_false
 20498 0000FAB0 7500                    	jne .L_or_end_0036
 20499                                  .L_or_end_0036:
 20500 0000FAB2 C9                      	leave
 20501 0000FAB3 C23000                  	ret AND_KILL_FRAME(4)
 20502                                  .L_lambda_simple_end_02a5:	; new closure is in rax
 20503 0000FAB6 50                      	push rax
 20504 0000FAB7 488B4520                	mov rax, PARAM(0)	; param run
 20505 0000FABB 8F00                    	pop qword [rax]
 20506 0000FABD 48B8-                   	mov rax, sob_void
 20506 0000FABF [0000000000000000] 
 20507                                  
 20508                                  	; preparing a tail-call
 20509 0000FAC7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20510 0000FACC E881760000              	call malloc
 20511 0000FAD1 50                      	push rax
 20512 0000FAD2 BF08000000              	mov rdi, 8 * 1	; new rib
 20513 0000FAD7 E876760000              	call malloc
 20514 0000FADC 50                      	push rax
 20515 0000FADD BF18000000              	mov rdi, 8 * 3	; extended env
 20516 0000FAE2 E86B760000              	call malloc
 20517 0000FAE7 488B7D10                	mov rdi, ENV
 20518 0000FAEB BE00000000              	mov rsi, 0
 20519 0000FAF0 BA01000000              	mov rdx, 1
 20520                                  .L_lambda_simple_env_loop_02a6:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 20521 0000FAF5 4883FE02                	cmp rsi, 2
 20522 0000FAF9 7410                    	je .L_lambda_simple_env_end_02a6
 20523 0000FAFB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20524 0000FAFF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20525 0000FB03 48FFC6                  	inc rsi
 20526 0000FB06 48FFC2                  	inc rdx
 20527 0000FB09 EBEA                    	jmp .L_lambda_simple_env_loop_02a6
 20528                                  .L_lambda_simple_env_end_02a6:
 20529 0000FB0B 5B                      	pop rbx
 20530 0000FB0C BE00000000              	mov rsi, 0
 20531                                  .L_lambda_simple_params_loop_02a6:	; copy params
 20532 0000FB11 4883FE01                	cmp rsi, 1
 20533 0000FB15 740E                    	je .L_lambda_simple_params_end_02a6
 20534 0000FB17 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20535 0000FB1C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20536 0000FB20 48FFC6                  	inc rsi
 20537 0000FB23 EBEC                    	jmp .L_lambda_simple_params_loop_02a6
 20538                                  .L_lambda_simple_params_end_02a6:
 20539 0000FB25 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 20540 0000FB28 4889C3                  	mov rbx, rax
 20541 0000FB2B 58                      	pop rax
 20542 0000FB2C C60004                  	mov byte [rax], T_closure
 20543 0000FB2F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20544 0000FB33 48C74009[40FB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02a6
 20545 0000FB3B E94E020000              	jmp .L_lambda_simple_end_02a6
 20546                                  .L_lambda_simple_code_02a6:	; lambda-simple body
 20547 0000FB40 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20548 0000FB46 740B                    	je .L_lambda_simple_arity_check_ok_02a6
 20549 0000FB48 FF742410                	push qword [rsp + 8 * 2]
 20550 0000FB4C 6A02                    	push 2
 20551 0000FB4E E9B8750000              	jmp L_error_incorrect_arity_simple
 20552                                  .L_lambda_simple_arity_check_ok_02a6:
 20553 0000FB53 C8000000                	enter 0, 0
 20554                                  	; preparing a tail-call
 20555                                  	; preparing a non-tail-call
 20556 0000FB57 488B4528                	mov rax, PARAM(1)	; param str2
 20557 0000FB5B 50                      	push rax
 20558 0000FB5C 6A01                    	push 1	; arg count
 20559 0000FB5E 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 20560 0000FB66 803805                  	cmp byte [rax], T_undefined
 20561 0000FB69 0F84B6740000            	je L_error_fvar_undefined
 20562 0000FB6F 803804                  	cmp byte [rax], T_closure
 20563 0000FB72 0F8531750000            	jne L_error_non_closure
 20564 0000FB78 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20565 0000FB7B FF5009                  	call SOB_CLOSURE_CODE(rax)
 20566 0000FB7E 50                      	push rax
 20567                                  	; preparing a non-tail-call
 20568 0000FB7F 488B4520                	mov rax, PARAM(0)	; param str1
 20569 0000FB83 50                      	push rax
 20570 0000FB84 6A01                    	push 1	; arg count
 20571 0000FB86 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 20572 0000FB8E 803805                  	cmp byte [rax], T_undefined
 20573 0000FB91 0F848E740000            	je L_error_fvar_undefined
 20574 0000FB97 803804                  	cmp byte [rax], T_closure
 20575 0000FB9A 0F8509750000            	jne L_error_non_closure
 20576 0000FBA0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20577 0000FBA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20578 0000FBA6 50                      	push rax
 20579 0000FBA7 6A02                    	push 2	; arg count
 20580 0000FBA9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20581 0000FBAE E89F750000              	call malloc
 20582 0000FBB3 50                      	push rax
 20583 0000FBB4 BF10000000              	mov rdi, 8 * 2	; new rib
 20584 0000FBB9 E894750000              	call malloc
 20585 0000FBBE 50                      	push rax
 20586 0000FBBF BF20000000              	mov rdi, 8 * 4	; extended env
 20587 0000FBC4 E889750000              	call malloc
 20588 0000FBC9 488B7D10                	mov rdi, ENV
 20589 0000FBCD BE00000000              	mov rsi, 0
 20590 0000FBD2 BA01000000              	mov rdx, 1
 20591                                  .L_lambda_simple_env_loop_02a7:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 20592 0000FBD7 4883FE03                	cmp rsi, 3
 20593 0000FBDB 7410                    	je .L_lambda_simple_env_end_02a7
 20594 0000FBDD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20595 0000FBE1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20596 0000FBE5 48FFC6                  	inc rsi
 20597 0000FBE8 48FFC2                  	inc rdx
 20598 0000FBEB EBEA                    	jmp .L_lambda_simple_env_loop_02a7
 20599                                  .L_lambda_simple_env_end_02a7:
 20600 0000FBED 5B                      	pop rbx
 20601 0000FBEE BE00000000              	mov rsi, 0
 20602                                  .L_lambda_simple_params_loop_02a7:	; copy params
 20603 0000FBF3 4883FE02                	cmp rsi, 2
 20604 0000FBF7 740E                    	je .L_lambda_simple_params_end_02a7
 20605 0000FBF9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20606 0000FBFE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20607 0000FC02 48FFC6                  	inc rsi
 20608 0000FC05 EBEC                    	jmp .L_lambda_simple_params_loop_02a7
 20609                                  .L_lambda_simple_params_end_02a7:
 20610 0000FC07 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 20611 0000FC0A 4889C3                  	mov rbx, rax
 20612 0000FC0D 58                      	pop rax
 20613 0000FC0E C60004                  	mov byte [rax], T_closure
 20614 0000FC11 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20615 0000FC15 48C74009[22FC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02a7
 20616 0000FC1D E9FF000000              	jmp .L_lambda_simple_end_02a7
 20617                                  .L_lambda_simple_code_02a7:	; lambda-simple body
 20618 0000FC22 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20619 0000FC28 740B                    	je .L_lambda_simple_arity_check_ok_02a7
 20620 0000FC2A FF742410                	push qword [rsp + 8 * 2]
 20621 0000FC2E 6A02                    	push 2
 20622 0000FC30 E9D6740000              	jmp L_error_incorrect_arity_simple
 20623                                  .L_lambda_simple_arity_check_ok_02a7:
 20624 0000FC35 C8000000                	enter 0, 0
 20625                                  	; preparing a non-tail-call
 20626 0000FC39 488B4528                	mov rax, PARAM(1)	; param len2
 20627 0000FC3D 50                      	push rax
 20628 0000FC3E 488B4520                	mov rax, PARAM(0)	; param len1
 20629 0000FC42 50                      	push rax
 20630 0000FC43 6A02                    	push 2	; arg count
 20631 0000FC45 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 20632 0000FC4D 803805                  	cmp byte [rax], T_undefined
 20633 0000FC50 0F84CF730000            	je L_error_fvar_undefined
 20634 0000FC56 803804                  	cmp byte [rax], T_closure
 20635 0000FC59 0F854A740000            	jne L_error_non_closure
 20636 0000FC5F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20637 0000FC62 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20638 0000FC65 483D[02000000]          	cmp rax, sob_boolean_false
 20639 0000FC6B 0F84A2000000            	je .L_if_else_01f6
 20640                                  	; preparing a tail-call
 20641 0000FC71 488B4520                	mov rax, PARAM(0)	; param len1
 20642 0000FC75 50                      	push rax
 20643 0000FC76 488B4510                	mov rax, ENV
 20644 0000FC7A 488B00                  	mov rax, qword [rax + 8 * 0]
 20645 0000FC7D 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 20646 0000FC81 50                      	push rax
 20647 0000FC82 488B4510                	mov rax, ENV
 20648 0000FC86 488B00                  	mov rax, qword [rax + 8 * 0]
 20649 0000FC89 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 20650 0000FC8C 50                      	push rax
 20651 0000FC8D 48B8-                   	mov rax, L_constants + 2135
 20651 0000FC8F [5708000000000000] 
 20652 0000FC97 50                      	push rax
 20653 0000FC98 6A04                    	push 4	; arg count
 20654 0000FC9A 488B4510                	mov rax, ENV
 20655 0000FC9E 488B4008                	mov rax, qword [rax + 8 * 1]
 20656 0000FCA2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20657 0000FCA5 488B00                  	mov rax, qword [rax]
 20658 0000FCA8 803804                  	cmp byte [rax], T_closure
 20659 0000FCAB 0F85F8730000            	jne L_error_non_closure
 20660 0000FCB1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20661 0000FCB4 4C8B4009                	mov r8, qword [rax + 1 + 8]
 20662 0000FCB8 FF7508                  	push qword [rbp + 8]				; push old return address
 20663 0000FCBB FF7500                  	push qword [rbp]					; push old rbp
 20664                                  	;; move stack up ;;
 20665 0000FCBE 488B5D18                	mov rbx, [rbp + 3*8]
 20666 0000FCC2 4889DE                  	mov rsi, rbx						; save old size in rsi
 20667 0000FCC5 4883C303                	add rbx, 3
 20668 0000FCC9 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 20669 0000FCD1 B904000000              	mov rcx, 4
 20670 0000FCD6 4883C104                	add rcx, 4				; num of iterations in rcx
 20671                                  .L_tc_recycle_frame_loop_0387:
 20672 0000FCDA 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 20673 0000FCE2 488B143C                	mov rdx, [rsp + rdi]
 20674 0000FCE6 4889541D00              	mov [rbp + rbx], rdx
 20675 0000FCEB 4883EB08                	sub rbx, 8
 20676 0000FCEF 48FFC9                  	dec rcx
 20677 0000FCF2 4883F900                	cmp rcx, 0
 20678 0000FCF6 75E2                    	jne .L_tc_recycle_frame_loop_0387
 20679 0000FCF8 4889F3                  	mov rbx, rsi
 20680 0000FCFB 4883EB04                	sub rbx, 4
 20681 0000FCFF 488D1CDD00000000        	lea rbx, [rbx*8]
 20682 0000FD07 4801DD                  	add rbp, rbx
 20683 0000FD0A 4889EC                  	mov rsp, rbp         ; fix stack pointers
 20684 0000FD0D 5D                      	pop rbp
 20685 0000FD0E 41FFE0                  	jmp r8
 20686 0000FD11 EB0A                    	jmp .L_if_end_01f6
 20687                                  .L_if_else_01f6:
 20688 0000FD13 48B8-                   	mov rax, L_constants + 2
 20688 0000FD15 [0200000000000000] 
 20689                                  .L_if_end_01f6:
 20690 0000FD1D C9                      	leave
 20691 0000FD1E C22000                  	ret AND_KILL_FRAME(2)
 20692                                  .L_lambda_simple_end_02a7:	; new closure is in rax
 20693 0000FD21 803804                  	cmp byte [rax], T_closure
 20694 0000FD24 0F857F730000            	jne L_error_non_closure
 20695 0000FD2A FF7001                  	push SOB_CLOSURE_ENV(rax)
 20696 0000FD2D 4C8B4009                	mov r8, qword [rax + 1 + 8]
 20697 0000FD31 FF7508                  	push qword [rbp + 8]				; push old return address
 20698 0000FD34 FF7500                  	push qword [rbp]					; push old rbp
 20699                                  	;; move stack up ;;
 20700 0000FD37 488B5D18                	mov rbx, [rbp + 3*8]
 20701 0000FD3B 4889DE                  	mov rsi, rbx						; save old size in rsi
 20702 0000FD3E 4883C303                	add rbx, 3
 20703 0000FD42 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 20704 0000FD4A B902000000              	mov rcx, 2
 20705 0000FD4F 4883C104                	add rcx, 4				; num of iterations in rcx
 20706                                  .L_tc_recycle_frame_loop_0386:
 20707 0000FD53 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 20708 0000FD5B 488B143C                	mov rdx, [rsp + rdi]
 20709 0000FD5F 4889541D00              	mov [rbp + rbx], rdx
 20710 0000FD64 4883EB08                	sub rbx, 8
 20711 0000FD68 48FFC9                  	dec rcx
 20712 0000FD6B 4883F900                	cmp rcx, 0
 20713 0000FD6F 75E2                    	jne .L_tc_recycle_frame_loop_0386
 20714 0000FD71 4889F3                  	mov rbx, rsi
 20715 0000FD74 4883EB02                	sub rbx, 2
 20716 0000FD78 488D1CDD00000000        	lea rbx, [rbx*8]
 20717 0000FD80 4801DD                  	add rbp, rbx
 20718 0000FD83 4889EC                  	mov rsp, rbp         ; fix stack pointers
 20719 0000FD86 5D                      	pop rbp
 20720 0000FD87 41FFE0                  	jmp r8
 20721 0000FD8A C9                      	leave
 20722 0000FD8B C22000                  	ret AND_KILL_FRAME(2)
 20723                                  .L_lambda_simple_end_02a6:	; new closure is in rax
 20724 0000FD8E 50                      	push rax
 20725 0000FD8F 6A01                    	push 1	; arg count
 20726 0000FD91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20727 0000FD96 E8B7730000              	call malloc
 20728 0000FD9B 50                      	push rax
 20729 0000FD9C BF08000000              	mov rdi, 8 * 1	; new rib
 20730 0000FDA1 E8AC730000              	call malloc
 20731 0000FDA6 50                      	push rax
 20732 0000FDA7 BF18000000              	mov rdi, 8 * 3	; extended env
 20733 0000FDAC E8A1730000              	call malloc
 20734 0000FDB1 488B7D10                	mov rdi, ENV
 20735 0000FDB5 BE00000000              	mov rsi, 0
 20736 0000FDBA BA01000000              	mov rdx, 1
 20737                                  .L_lambda_simple_env_loop_02a8:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 20738 0000FDBF 4883FE02                	cmp rsi, 2
 20739 0000FDC3 7410                    	je .L_lambda_simple_env_end_02a8
 20740 0000FDC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20741 0000FDC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20742 0000FDCD 48FFC6                  	inc rsi
 20743 0000FDD0 48FFC2                  	inc rdx
 20744 0000FDD3 EBEA                    	jmp .L_lambda_simple_env_loop_02a8
 20745                                  .L_lambda_simple_env_end_02a8:
 20746 0000FDD5 5B                      	pop rbx
 20747 0000FDD6 BE00000000              	mov rsi, 0
 20748                                  .L_lambda_simple_params_loop_02a8:	; copy params
 20749 0000FDDB 4883FE01                	cmp rsi, 1
 20750 0000FDDF 740E                    	je .L_lambda_simple_params_end_02a8
 20751 0000FDE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20752 0000FDE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20753 0000FDEA 48FFC6                  	inc rsi
 20754 0000FDED EBEC                    	jmp .L_lambda_simple_params_loop_02a8
 20755                                  .L_lambda_simple_params_end_02a8:
 20756 0000FDEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 20757 0000FDF2 4889C3                  	mov rbx, rax
 20758 0000FDF5 58                      	pop rax
 20759 0000FDF6 C60004                  	mov byte [rax], T_closure
 20760 0000FDF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20761 0000FDFD 48C74009[0AFE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02a8
 20762 0000FE05 E92A050000              	jmp .L_lambda_simple_end_02a8
 20763                                  .L_lambda_simple_code_02a8:	; lambda-simple body
 20764 0000FE0A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20765 0000FE10 740B                    	je .L_lambda_simple_arity_check_ok_02a8
 20766 0000FE12 FF742410                	push qword [rsp + 8 * 2]
 20767 0000FE16 6A01                    	push 1
 20768 0000FE18 E9EE720000              	jmp L_error_incorrect_arity_simple
 20769                                  .L_lambda_simple_arity_check_ok_02a8:
 20770 0000FE1D C8000000                	enter 0, 0
 20771                                  	; preparing a tail-call
 20772 0000FE21 48B8-                   	mov rax, L_constants + 1993
 20772 0000FE23 [C907000000000000] 
 20773 0000FE2B 50                      	push rax
 20774 0000FE2C 6A01                    	push 1	; arg count
 20775 0000FE2E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20776 0000FE33 E81A730000              	call malloc
 20777 0000FE38 50                      	push rax
 20778 0000FE39 BF08000000              	mov rdi, 8 * 1	; new rib
 20779 0000FE3E E80F730000              	call malloc
 20780 0000FE43 50                      	push rax
 20781 0000FE44 BF20000000              	mov rdi, 8 * 4	; extended env
 20782 0000FE49 E804730000              	call malloc
 20783 0000FE4E 488B7D10                	mov rdi, ENV
 20784 0000FE52 BE00000000              	mov rsi, 0
 20785 0000FE57 BA01000000              	mov rdx, 1
 20786                                  .L_lambda_simple_env_loop_02a9:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 20787 0000FE5C 4883FE03                	cmp rsi, 3
 20788 0000FE60 7410                    	je .L_lambda_simple_env_end_02a9
 20789 0000FE62 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20790 0000FE66 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20791 0000FE6A 48FFC6                  	inc rsi
 20792 0000FE6D 48FFC2                  	inc rdx
 20793 0000FE70 EBEA                    	jmp .L_lambda_simple_env_loop_02a9
 20794                                  .L_lambda_simple_env_end_02a9:
 20795 0000FE72 5B                      	pop rbx
 20796 0000FE73 BE00000000              	mov rsi, 0
 20797                                  .L_lambda_simple_params_loop_02a9:	; copy params
 20798 0000FE78 4883FE01                	cmp rsi, 1
 20799 0000FE7C 740E                    	je .L_lambda_simple_params_end_02a9
 20800 0000FE7E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20801 0000FE83 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20802 0000FE87 48FFC6                  	inc rsi
 20803 0000FE8A EBEC                    	jmp .L_lambda_simple_params_loop_02a9
 20804                                  .L_lambda_simple_params_end_02a9:
 20805 0000FE8C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 20806 0000FE8F 4889C3                  	mov rbx, rax
 20807 0000FE92 58                      	pop rax
 20808 0000FE93 C60004                  	mov byte [rax], T_closure
 20809 0000FE96 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20810 0000FE9A 48C74009[A7FE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02a9
 20811 0000FEA2 E920040000              	jmp .L_lambda_simple_end_02a9
 20812                                  .L_lambda_simple_code_02a9:	; lambda-simple body
 20813 0000FEA7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20814 0000FEAD 740B                    	je .L_lambda_simple_arity_check_ok_02a9
 20815 0000FEAF FF742410                	push qword [rsp + 8 * 2]
 20816 0000FEB3 6A01                    	push 1
 20817 0000FEB5 E951720000              	jmp L_error_incorrect_arity_simple
 20818                                  .L_lambda_simple_arity_check_ok_02a9:
 20819 0000FEBA C8000000                	enter 0, 0
 20820 0000FEBE BF08000000              	mov rdi, 8
 20821 0000FEC3 E88A720000              	call malloc
 20822 0000FEC8 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
 20823 0000FECC 488918                  	mov qword[rax], rbx
 20824 0000FECF 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 20825 0000FED3 48B8-                   	mov rax, sob_void
 20825 0000FED5 [0000000000000000] 
 20826                                  
 20827 0000FEDD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20828 0000FEE2 E86B720000              	call malloc
 20829 0000FEE7 50                      	push rax
 20830 0000FEE8 BF08000000              	mov rdi, 8 * 1	; new rib
 20831 0000FEED E860720000              	call malloc
 20832 0000FEF2 50                      	push rax
 20833 0000FEF3 BF28000000              	mov rdi, 8 * 5	; extended env
 20834 0000FEF8 E855720000              	call malloc
 20835 0000FEFD 488B7D10                	mov rdi, ENV
 20836 0000FF01 BE00000000              	mov rsi, 0
 20837 0000FF06 BA01000000              	mov rdx, 1
 20838                                  .L_lambda_simple_env_loop_02aa:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 20839 0000FF0B 4883FE04                	cmp rsi, 4
 20840 0000FF0F 7410                    	je .L_lambda_simple_env_end_02aa
 20841 0000FF11 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20842 0000FF15 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20843 0000FF19 48FFC6                  	inc rsi
 20844 0000FF1C 48FFC2                  	inc rdx
 20845 0000FF1F EBEA                    	jmp .L_lambda_simple_env_loop_02aa
 20846                                  .L_lambda_simple_env_end_02aa:
 20847 0000FF21 5B                      	pop rbx
 20848 0000FF22 BE00000000              	mov rsi, 0
 20849                                  .L_lambda_simple_params_loop_02aa:	; copy params
 20850 0000FF27 4883FE01                	cmp rsi, 1
 20851 0000FF2B 740E                    	je .L_lambda_simple_params_end_02aa
 20852 0000FF2D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20853 0000FF32 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20854 0000FF36 48FFC6                  	inc rsi
 20855 0000FF39 EBEC                    	jmp .L_lambda_simple_params_loop_02aa
 20856                                  .L_lambda_simple_params_end_02aa:
 20857 0000FF3B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 20858 0000FF3E 4889C3                  	mov rbx, rax
 20859 0000FF41 58                      	pop rax
 20860 0000FF42 C60004                  	mov byte [rax], T_closure
 20861 0000FF45 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20862 0000FF49 48C74009[56FF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02aa
 20863 0000FF51 E97F010000              	jmp .L_lambda_simple_end_02aa
 20864                                  .L_lambda_simple_code_02aa:	; lambda-simple body
 20865 0000FF56 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20866 0000FF5C 740B                    	je .L_lambda_simple_arity_check_ok_02aa
 20867 0000FF5E FF742410                	push qword [rsp + 8 * 2]
 20868 0000FF62 6A02                    	push 2
 20869 0000FF64 E9A2710000              	jmp L_error_incorrect_arity_simple
 20870                                  .L_lambda_simple_arity_check_ok_02aa:
 20871 0000FF69 C8000000                	enter 0, 0
 20872                                  	; preparing a non-tail-call
 20873 0000FF6D 488B4528                	mov rax, PARAM(1)	; param strs
 20874 0000FF71 50                      	push rax
 20875 0000FF72 6A01                    	push 1	; arg count
 20876 0000FF74 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 20877 0000FF7C 803805                  	cmp byte [rax], T_undefined
 20878 0000FF7F 0F84A0700000            	je L_error_fvar_undefined
 20879 0000FF85 803804                  	cmp byte [rax], T_closure
 20880 0000FF88 0F851B710000            	jne L_error_non_closure
 20881 0000FF8E FF7001                  	push SOB_CLOSURE_ENV(rax)
 20882 0000FF91 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20883 0000FF94 483D[02000000]          	cmp rax, sob_boolean_false
 20884 0000FF9A 0F8531010000            	jne .L_or_end_0037
 20885                                  
 20886                                  	; preparing a non-tail-call
 20887                                  	; preparing a non-tail-call
 20888 0000FFA0 488B4528                	mov rax, PARAM(1)	; param strs
 20889 0000FFA4 50                      	push rax
 20890 0000FFA5 6A01                    	push 1	; arg count
 20891 0000FFA7 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 20892 0000FFAF 803805                  	cmp byte [rax], T_undefined
 20893 0000FFB2 0F846D700000            	je L_error_fvar_undefined
 20894 0000FFB8 803804                  	cmp byte [rax], T_closure
 20895 0000FFBB 0F85E8700000            	jne L_error_non_closure
 20896 0000FFC1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20897 0000FFC4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20898 0000FFC7 50                      	push rax
 20899 0000FFC8 488B4520                	mov rax, PARAM(0)	; param str
 20900 0000FFCC 50                      	push rax
 20901 0000FFCD 6A02                    	push 2	; arg count
 20902 0000FFCF 488B4510                	mov rax, ENV
 20903 0000FFD3 488B4008                	mov rax, qword [rax + 8 * 1]
 20904 0000FFD7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string=?
 20905 0000FFDA 803804                  	cmp byte [rax], T_closure
 20906 0000FFDD 0F85C6700000            	jne L_error_non_closure
 20907 0000FFE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20908 0000FFE6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20909 0000FFE9 483D[02000000]          	cmp rax, sob_boolean_false
 20910 0000FFEF 0F84CA000000            	je .L_if_else_01f7
 20911                                  	; preparing a tail-call
 20912                                  	; preparing a non-tail-call
 20913 0000FFF5 488B4528                	mov rax, PARAM(1)	; param strs
 20914 0000FFF9 50                      	push rax
 20915 0000FFFA 6A01                    	push 1	; arg count
 20916 0000FFFC 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 20917 00010004 803805                  	cmp byte [rax], T_undefined
 20918 00010007 0F8418700000            	je L_error_fvar_undefined
 20919 0001000D 803804                  	cmp byte [rax], T_closure
 20920 00010010 0F8593700000            	jne L_error_non_closure
 20921 00010016 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20922 00010019 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20923 0001001C 50                      	push rax
 20924                                  	; preparing a non-tail-call
 20925 0001001D 488B4528                	mov rax, PARAM(1)	; param strs
 20926 00010021 50                      	push rax
 20927 00010022 6A01                    	push 1	; arg count
 20928 00010024 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 20929 0001002C 803805                  	cmp byte [rax], T_undefined
 20930 0001002F 0F84F06F0000            	je L_error_fvar_undefined
 20931 00010035 803804                  	cmp byte [rax], T_closure
 20932 00010038 0F856B700000            	jne L_error_non_closure
 20933 0001003E FF7001                  	push SOB_CLOSURE_ENV(rax)
 20934 00010041 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20935 00010044 50                      	push rax
 20936 00010045 6A02                    	push 2	; arg count
 20937 00010047 488B4510                	mov rax, ENV
 20938 0001004B 488B00                  	mov rax, qword [rax + 8 * 0]
 20939 0001004E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20940 00010051 488B00                  	mov rax, qword [rax]
 20941 00010054 803804                  	cmp byte [rax], T_closure
 20942 00010057 0F854C700000            	jne L_error_non_closure
 20943 0001005D FF7001                  	push SOB_CLOSURE_ENV(rax)
 20944 00010060 4C8B4009                	mov r8, qword [rax + 1 + 8]
 20945 00010064 FF7508                  	push qword [rbp + 8]				; push old return address
 20946 00010067 FF7500                  	push qword [rbp]					; push old rbp
 20947                                  	;; move stack up ;;
 20948 0001006A 488B5D18                	mov rbx, [rbp + 3*8]
 20949 0001006E 4889DE                  	mov rsi, rbx						; save old size in rsi
 20950 00010071 4883C303                	add rbx, 3
 20951 00010075 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 20952 0001007D B902000000              	mov rcx, 2
 20953 00010082 4883C104                	add rcx, 4				; num of iterations in rcx
 20954                                  .L_tc_recycle_frame_loop_0389:
 20955 00010086 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 20956 0001008E 488B143C                	mov rdx, [rsp + rdi]
 20957 00010092 4889541D00              	mov [rbp + rbx], rdx
 20958 00010097 4883EB08                	sub rbx, 8
 20959 0001009B 48FFC9                  	dec rcx
 20960 0001009E 4883F900                	cmp rcx, 0
 20961 000100A2 75E2                    	jne .L_tc_recycle_frame_loop_0389
 20962 000100A4 4889F3                  	mov rbx, rsi
 20963 000100A7 4883EB02                	sub rbx, 2
 20964 000100AB 488D1CDD00000000        	lea rbx, [rbx*8]
 20965 000100B3 4801DD                  	add rbp, rbx
 20966 000100B6 4889EC                  	mov rsp, rbp         ; fix stack pointers
 20967 000100B9 5D                      	pop rbp
 20968 000100BA 41FFE0                  	jmp r8
 20969 000100BD EB0A                    	jmp .L_if_end_01f7
 20970                                  .L_if_else_01f7:
 20971 000100BF 48B8-                   	mov rax, L_constants + 2
 20971 000100C1 [0200000000000000] 
 20972                                  .L_if_end_01f7:
 20973 000100C9 483D[02000000]          	cmp rax, sob_boolean_false
 20974 000100CF 7500                    	jne .L_or_end_0037
 20975                                  .L_or_end_0037:
 20976 000100D1 C9                      	leave
 20977 000100D2 C22000                  	ret AND_KILL_FRAME(2)
 20978                                  .L_lambda_simple_end_02aa:	; new closure is in rax
 20979 000100D5 50                      	push rax
 20980 000100D6 488B4520                	mov rax, PARAM(0)	; param run
 20981 000100DA 8F00                    	pop qword [rax]
 20982 000100DC 48B8-                   	mov rax, sob_void
 20982 000100DE [0000000000000000] 
 20983                                  
 20984 000100E6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20985 000100EB E862700000              	call malloc
 20986 000100F0 50                      	push rax
 20987 000100F1 BF08000000              	mov rdi, 8 * 1	; new rib
 20988 000100F6 E857700000              	call malloc
 20989 000100FB 50                      	push rax
 20990 000100FC BF28000000              	mov rdi, 8 * 5	; extended env
 20991 00010101 E84C700000              	call malloc
 20992 00010106 488B7D10                	mov rdi, ENV
 20993 0001010A BE00000000              	mov rsi, 0
 20994 0001010F BA01000000              	mov rdx, 1
 20995                                  .L_lambda_opt_env_loop_005b:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 20996 00010114 4883FE04                	cmp rsi, 4
 20997 00010118 7410                    	je .L_lambda_opt_env_end_005b
 20998 0001011A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20999 0001011E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21000 00010122 48FFC6                  	inc rsi
 21001 00010125 48FFC2                  	inc rdx
 21002 00010128 EBEA                    	jmp .L_lambda_opt_env_loop_005b
 21003                                  .L_lambda_opt_env_end_005b:
 21004 0001012A 5B                      	pop rbx
 21005 0001012B BE00000000              	mov rsi, 0
 21006                                  .L_lambda_opt_params_loop_005b:	; copy params
 21007 00010130 4883FE01                	cmp rsi, 1
 21008 00010134 740E                    	je .L_lambda_opt_params_end_005b
 21009 00010136 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21010 0001013B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21011 0001013F 48FFC6                  	inc rsi
 21012 00010142 EBEC                    	jmp .L_lambda_opt_params_loop_005b
 21013                                  .L_lambda_opt_params_end_005b:
 21014 00010144 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 21015 00010147 4889C3                  	mov rbx, rax
 21016 0001014A 58                      	pop rax
 21017 0001014B C60004                  	mov byte [rax], T_closure
 21018 0001014E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21019 00010152 48C74009[5F010100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_005b
 21020 0001015A E964010000              	jmp .L_lambda_opt_end_005b
 21021                                  .L_lambda_opt_code_005b:	; lambda-opt body
 21022 0001015F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21023 00010165 740D                    	je .L_lambda_opt_arity_check_exact_005b
 21024 00010167 7F48                    	jg .L_lambda_opt_arity_check_more_005b
 21025 00010169 FF742410                	push qword [rsp + 8 * 2]
 21026 0001016D 6A01                    	push 1
 21027 0001016F E9AB6F0000              	jmp L_error_incorrect_arity_opt
 21028                                  .L_lambda_opt_arity_check_exact_005b:
 21029 00010174 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update argument count (fixed params + 1 for nil)
 21030 0001017D 41BA04000000            	mov r10, 4	; r10 = total addresses to adjust (fixed params + 3)
 21031 00010183 FF3424                  	push qword [rsp]	; Save the top stack element
 21032 00010186 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
 21033                                  .L_lambda_opt_stack_shrink_loop_010f:
 21034 0001018C 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
 21035 0001018F 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_010f	; Exit loop if all elements processed
 21036 00010191 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
 21037 00010196 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
 21038 0001019A 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
 21039 0001019F 49FFC3                  	inc r11	; Increment loop index
 21040 000101A2 EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_010f	; Jump back to loop start
 21041                                  .L_lambda_opt_stack_shrink_loop_exit_010f:
 21042 000101A4 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
 21043 000101AC E988000000              	jmp .L_lambda_opt_stack_adjusted_005b
 21044                                  .L_lambda_opt_arity_check_more_005b:
 21045 000101B1 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
 21046 000101B6 4983E801                	sub r8, 1	; r8 = count of optional params
 21047 000101BA 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update the number of params (fixed params + 1 for list opt)
 21048 000101C3 41B900000000            	mov r9, 0	; r9 = index of optional argument list
 21049 000101C9 4E8D54C418              	lea r10, [rsp + 2 * 8 + 1 * 8 + r8 * 8]	; r10 = address of first optional param
 21050 000101CE 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
 21050 000101D0 [0100000000000000] 
 21051                                  .L_lambda_opt_stack_shrink_loop_0110:
 21052 000101D8 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
 21053 000101DB 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_0110	; Exit loop if all optional params are processed
 21054 000101DD BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
 21055 000101E2 E86B6F0000              	call malloc	; Allocate memory for a new pair
 21056 000101E7 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
 21057 000101EB 49F7D9                  	neg r9	; Negate index to access in reverse
 21058 000101EE 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
 21059 000101F2 49F7D9                  	neg r9	; Negate index back
 21060 000101F5 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
 21061 000101F9 C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
 21062 000101FC 4989C3                  	mov r11, rax	; Update current pair to the newly created one
 21063 000101FF 49FFC1                  	inc r9	; Increment the index
 21064 00010202 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0110	; Repeat the loop for the next param
 21065                                  .L_lambda_opt_stack_shrink_loop_exit_0110:
 21066 00010204 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
 21067 00010207 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
 21068 0001020B 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
 21069 0001020E 4983C418                	add r12, 24	; Skip fixed params and return address
 21070 00010212 41BD04000000            	mov r13, 4	; r13 = loop counter (number of params, old fp, ret addr, lex env)
 21071                                  .L_lambda_opt_stack_shrink_loop_0111:
 21072 00010218 4983FD00                	cmp r13, 0	; Check if there are more values to copy
 21073 0001021C 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0111	; Exit loop if all values are copied
 21074 0001021E 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
 21075 00010222 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
 21076 00010225 49FFCD                  	dec r13	; Decrement the loop counter
 21077 00010228 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
 21078 0001022C 4983EC08                	sub r12, 8	; Move the source pointer to the next location
 21079 00010230 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0111	; Repeat the loop for the next value
 21080                                  .L_lambda_opt_stack_shrink_loop_exit_0111:
 21081 00010232 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
 21082 00010236 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
 21083                                  .L_lambda_opt_stack_adjusted_005b:
 21084 00010239 C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
 21085                                  	; preparing a tail-call
 21086 0001023D 488B4528                	mov rax, PARAM(1)	; param strs
 21087 00010241 50                      	push rax
 21088 00010242 488B4520                	mov rax, PARAM(0)	; param str
 21089 00010246 50                      	push rax
 21090 00010247 6A02                    	push 2	; arg count
 21091 00010249 488B4510                	mov rax, ENV
 21092 0001024D 488B00                  	mov rax, qword [rax + 8 * 0]
 21093 00010250 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21094 00010253 488B00                  	mov rax, qword [rax]
 21095 00010256 803804                  	cmp byte [rax], T_closure
 21096 00010259 0F854A6E0000            	jne L_error_non_closure
 21097 0001025F FF7001                  	push SOB_CLOSURE_ENV(rax)
 21098 00010262 4C8B4009                	mov r8, qword [rax + 1 + 8]
 21099 00010266 FF7508                  	push qword [rbp + 8]				; push old return address
 21100 00010269 FF7500                  	push qword [rbp]					; push old rbp
 21101                                  	;; move stack up ;;
 21102 0001026C 488B5D18                	mov rbx, [rbp + 3*8]
 21103 00010270 4889DE                  	mov rsi, rbx						; save old size in rsi
 21104 00010273 4883C303                	add rbx, 3
 21105 00010277 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 21106 0001027F B902000000              	mov rcx, 2
 21107 00010284 4883C104                	add rcx, 4				; num of iterations in rcx
 21108                                  .L_tc_recycle_frame_loop_038a:
 21109 00010288 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 21110 00010290 488B143C                	mov rdx, [rsp + rdi]
 21111 00010294 4889541D00              	mov [rbp + rbx], rdx
 21112 00010299 4883EB08                	sub rbx, 8
 21113 0001029D 48FFC9                  	dec rcx
 21114 000102A0 4883F900                	cmp rcx, 0
 21115 000102A4 75E2                    	jne .L_tc_recycle_frame_loop_038a
 21116 000102A6 4889F3                  	mov rbx, rsi
 21117 000102A9 4883EB02                	sub rbx, 2
 21118 000102AD 488D1CDD00000000        	lea rbx, [rbx*8]
 21119 000102B5 4801DD                  	add rbp, rbx
 21120 000102B8 4889EC                  	mov rsp, rbp         ; fix stack pointers
 21121 000102BB 5D                      	pop rbp
 21122 000102BC 41FFE0                  	jmp r8
 21123 000102BF C9                      	leave	; Restore the previous stack frame
 21124 000102C0 C22000                  	ret AND_KILL_FRAME(2)
 21125                                  .L_lambda_opt_end_005b:	; new closure is in rax
 21126 000102C3 C9                      	leave
 21127 000102C4 C21800                  	ret AND_KILL_FRAME(1)
 21128                                  .L_lambda_simple_end_02a9:	; new closure is in rax
 21129 000102C7 803804                  	cmp byte [rax], T_closure
 21130 000102CA 0F85D96D0000            	jne L_error_non_closure
 21131 000102D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21132 000102D3 4C8B4009                	mov r8, qword [rax + 1 + 8]
 21133 000102D7 FF7508                  	push qword [rbp + 8]				; push old return address
 21134 000102DA FF7500                  	push qword [rbp]					; push old rbp
 21135                                  	;; move stack up ;;
 21136 000102DD 488B5D18                	mov rbx, [rbp + 3*8]
 21137 000102E1 4889DE                  	mov rsi, rbx						; save old size in rsi
 21138 000102E4 4883C303                	add rbx, 3
 21139 000102E8 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 21140 000102F0 B901000000              	mov rcx, 1
 21141 000102F5 4883C104                	add rcx, 4				; num of iterations in rcx
 21142                                  .L_tc_recycle_frame_loop_0388:
 21143 000102F9 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 21144 00010301 488B143C                	mov rdx, [rsp + rdi]
 21145 00010305 4889541D00              	mov [rbp + rbx], rdx
 21146 0001030A 4883EB08                	sub rbx, 8
 21147 0001030E 48FFC9                  	dec rcx
 21148 00010311 4883F900                	cmp rcx, 0
 21149 00010315 75E2                    	jne .L_tc_recycle_frame_loop_0388
 21150 00010317 4889F3                  	mov rbx, rsi
 21151 0001031A 4883EB01                	sub rbx, 1
 21152 0001031E 488D1CDD00000000        	lea rbx, [rbx*8]
 21153 00010326 4801DD                  	add rbp, rbx
 21154 00010329 4889EC                  	mov rsp, rbp         ; fix stack pointers
 21155 0001032C 5D                      	pop rbp
 21156 0001032D 41FFE0                  	jmp r8
 21157 00010330 C9                      	leave
 21158 00010331 C21800                  	ret AND_KILL_FRAME(1)
 21159                                  .L_lambda_simple_end_02a8:	; new closure is in rax
 21160 00010334 803804                  	cmp byte [rax], T_closure
 21161 00010337 0F856C6D0000            	jne L_error_non_closure
 21162 0001033D FF7001                  	push SOB_CLOSURE_ENV(rax)
 21163 00010340 4C8B4009                	mov r8, qword [rax + 1 + 8]
 21164 00010344 FF7508                  	push qword [rbp + 8]				; push old return address
 21165 00010347 FF7500                  	push qword [rbp]					; push old rbp
 21166                                  	;; move stack up ;;
 21167 0001034A 488B5D18                	mov rbx, [rbp + 3*8]
 21168 0001034E 4889DE                  	mov rsi, rbx						; save old size in rsi
 21169 00010351 4883C303                	add rbx, 3
 21170 00010355 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 21171 0001035D B901000000              	mov rcx, 1
 21172 00010362 4883C104                	add rcx, 4				; num of iterations in rcx
 21173                                  .L_tc_recycle_frame_loop_0385:
 21174 00010366 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 21175 0001036E 488B143C                	mov rdx, [rsp + rdi]
 21176 00010372 4889541D00              	mov [rbp + rbx], rdx
 21177 00010377 4883EB08                	sub rbx, 8
 21178 0001037B 48FFC9                  	dec rcx
 21179 0001037E 4883F900                	cmp rcx, 0
 21180 00010382 75E2                    	jne .L_tc_recycle_frame_loop_0385
 21181 00010384 4889F3                  	mov rbx, rsi
 21182 00010387 4883EB01                	sub rbx, 1
 21183 0001038B 488D1CDD00000000        	lea rbx, [rbx*8]
 21184 00010393 4801DD                  	add rbp, rbx
 21185 00010396 4889EC                  	mov rsp, rbp         ; fix stack pointers
 21186 00010399 5D                      	pop rbp
 21187 0001039A 41FFE0                  	jmp r8
 21188 0001039D C9                      	leave
 21189 0001039E C21800                  	ret AND_KILL_FRAME(1)
 21190                                  .L_lambda_simple_end_02a4:	; new closure is in rax
 21191 000103A1 803804                  	cmp byte [rax], T_closure
 21192 000103A4 0F85FF6C0000            	jne L_error_non_closure
 21193 000103AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 21194 000103AD 4C8B4009                	mov r8, qword [rax + 1 + 8]
 21195 000103B1 FF7508                  	push qword [rbp + 8]				; push old return address
 21196 000103B4 FF7500                  	push qword [rbp]					; push old rbp
 21197                                  	;; move stack up ;;
 21198 000103B7 488B5D18                	mov rbx, [rbp + 3*8]
 21199 000103BB 4889DE                  	mov rsi, rbx						; save old size in rsi
 21200 000103BE 4883C303                	add rbx, 3
 21201 000103C2 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 21202 000103CA B901000000              	mov rcx, 1
 21203 000103CF 4883C104                	add rcx, 4				; num of iterations in rcx
 21204                                  .L_tc_recycle_frame_loop_0383:
 21205 000103D3 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 21206 000103DB 488B143C                	mov rdx, [rsp + rdi]
 21207 000103DF 4889541D00              	mov [rbp + rbx], rdx
 21208 000103E4 4883EB08                	sub rbx, 8
 21209 000103E8 48FFC9                  	dec rcx
 21210 000103EB 4883F900                	cmp rcx, 0
 21211 000103EF 75E2                    	jne .L_tc_recycle_frame_loop_0383
 21212 000103F1 4889F3                  	mov rbx, rsi
 21213 000103F4 4883EB01                	sub rbx, 1
 21214 000103F8 488D1CDD00000000        	lea rbx, [rbx*8]
 21215 00010400 4801DD                  	add rbp, rbx
 21216 00010403 4889EC                  	mov rsp, rbp         ; fix stack pointers
 21217 00010406 5D                      	pop rbp
 21218 00010407 41FFE0                  	jmp r8
 21219 0001040A C9                      	leave
 21220 0001040B C21800                  	ret AND_KILL_FRAME(1)
 21221                                  .L_lambda_simple_end_02a3:	; new closure is in rax
 21222 0001040E 50                      	push rax
 21223 0001040F 6A01                    	push 1	; arg count
 21224 00010411 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21225 00010416 E8376D0000              	call malloc
 21226 0001041B 50                      	push rax
 21227 0001041C BF00000000              	mov rdi, 8 * 0	; new rib
 21228 00010421 E82C6D0000              	call malloc
 21229 00010426 50                      	push rax
 21230 00010427 BF08000000              	mov rdi, 8 * 1	; extended env
 21231 0001042C E8216D0000              	call malloc
 21232 00010431 488B7D10                	mov rdi, ENV
 21233 00010435 BE00000000              	mov rsi, 0
 21234 0001043A BA01000000              	mov rdx, 1
 21235                                  .L_lambda_simple_env_loop_02ab:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 21236 0001043F 4883FE00                	cmp rsi, 0
 21237 00010443 7410                    	je .L_lambda_simple_env_end_02ab
 21238 00010445 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21239 00010449 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21240 0001044D 48FFC6                  	inc rsi
 21241 00010450 48FFC2                  	inc rdx
 21242 00010453 EBEA                    	jmp .L_lambda_simple_env_loop_02ab
 21243                                  .L_lambda_simple_env_end_02ab:
 21244 00010455 5B                      	pop rbx
 21245 00010456 BE00000000              	mov rsi, 0
 21246                                  .L_lambda_simple_params_loop_02ab:	; copy params
 21247 0001045B 4883FE00                	cmp rsi, 0
 21248 0001045F 740E                    	je .L_lambda_simple_params_end_02ab
 21249 00010461 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21250 00010466 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21251 0001046A 48FFC6                  	inc rsi
 21252 0001046D EBEC                    	jmp .L_lambda_simple_params_loop_02ab
 21253                                  .L_lambda_simple_params_end_02ab:
 21254 0001046F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 21255 00010472 4889C3                  	mov rbx, rax
 21256 00010475 58                      	pop rax
 21257 00010476 C60004                  	mov byte [rax], T_closure
 21258 00010479 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21259 0001047D 48C74009[8A040100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02ab
 21260 00010485 E98D000000              	jmp .L_lambda_simple_end_02ab
 21261                                  .L_lambda_simple_code_02ab:	; lambda-simple body
 21262 0001048A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21263 00010490 740B                    	je .L_lambda_simple_arity_check_ok_02ab
 21264 00010492 FF742410                	push qword [rsp + 8 * 2]
 21265 00010496 6A01                    	push 1
 21266 00010498 E96E6C0000              	jmp L_error_incorrect_arity_simple
 21267                                  .L_lambda_simple_arity_check_ok_02ab:
 21268 0001049D C8000000                	enter 0, 0
 21269                                  	; preparing a non-tail-call
 21270 000104A1 488B0425[D2120000]      	mov rax, qword [free_var_75]	; free var char=?
 21271 000104A9 803805                  	cmp byte [rax], T_undefined
 21272 000104AC 0F84736B0000            	je L_error_fvar_undefined
 21273 000104B2 50                      	push rax
 21274 000104B3 6A01                    	push 1	; arg count
 21275 000104B5 488B4520                	mov rax, PARAM(0)	; param make-string=?
 21276 000104B9 803804                  	cmp byte [rax], T_closure
 21277 000104BC 0F85E76B0000            	jne L_error_non_closure
 21278 000104C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21279 000104C5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21280 000104C8 48890425[CE160000]      	mov qword [free_var_135], rax
 21281 000104D0 48B8-                   	mov rax, sob_void
 21281 000104D2 [0000000000000000] 
 21282                                  
 21283                                  	; preparing a non-tail-call
 21284 000104DA 488B0425[5B120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 21285 000104E2 803805                  	cmp byte [rax], T_undefined
 21286 000104E5 0F843A6B0000            	je L_error_fvar_undefined
 21287 000104EB 50                      	push rax
 21288 000104EC 6A01                    	push 1	; arg count
 21289 000104EE 488B4520                	mov rax, PARAM(0)	; param make-string=?
 21290 000104F2 803804                  	cmp byte [rax], T_closure
 21291 000104F5 0F85AE6B0000            	jne L_error_non_closure
 21292 000104FB FF7001                  	push SOB_CLOSURE_ENV(rax)
 21293 000104FE FF5009                  	call SOB_CLOSURE_CODE(rax)
 21294 00010501 48890425[02160000]      	mov qword [free_var_123], rax
 21295 00010509 48B8-                   	mov rax, sob_void
 21295 0001050B [0000000000000000] 
 21296 00010513 C9                      	leave
 21297 00010514 C21800                  	ret AND_KILL_FRAME(1)
 21298                                  .L_lambda_simple_end_02ab:	; new closure is in rax
 21299 00010517 803804                  	cmp byte [rax], T_closure
 21300 0001051A 0F85896B0000            	jne L_error_non_closure
 21301 00010520 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21302 00010523 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21303                                  
 21304 00010526 4889C7                  	mov rdi, rax
 21305 00010529 E8796E0000              	call print_sexpr_if_not_void
 21306 0001052E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21307 00010533 E81A6C0000              	call malloc
 21308 00010538 50                      	push rax
 21309 00010539 BF00000000              	mov rdi, 8 * 0	; new rib
 21310 0001053E E80F6C0000              	call malloc
 21311 00010543 50                      	push rax
 21312 00010544 BF08000000              	mov rdi, 8 * 1	; extended env
 21313 00010549 E8046C0000              	call malloc
 21314 0001054E 488B7D10                	mov rdi, ENV
 21315 00010552 BE00000000              	mov rsi, 0
 21316 00010557 BA01000000              	mov rdx, 1
 21317                                  .L_lambda_simple_env_loop_02ac:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 21318 0001055C 4883FE00                	cmp rsi, 0
 21319 00010560 7410                    	je .L_lambda_simple_env_end_02ac
 21320 00010562 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21321 00010566 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21322 0001056A 48FFC6                  	inc rsi
 21323 0001056D 48FFC2                  	inc rdx
 21324 00010570 EBEA                    	jmp .L_lambda_simple_env_loop_02ac
 21325                                  .L_lambda_simple_env_end_02ac:
 21326 00010572 5B                      	pop rbx
 21327 00010573 BE00000000              	mov rsi, 0
 21328                                  .L_lambda_simple_params_loop_02ac:	; copy params
 21329 00010578 4883FE00                	cmp rsi, 0
 21330 0001057C 740E                    	je .L_lambda_simple_params_end_02ac
 21331 0001057E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21332 00010583 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21333 00010587 48FFC6                  	inc rsi
 21334 0001058A EBEC                    	jmp .L_lambda_simple_params_loop_02ac
 21335                                  .L_lambda_simple_params_end_02ac:
 21336 0001058C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 21337 0001058F 4889C3                  	mov rbx, rax
 21338 00010592 58                      	pop rax
 21339 00010593 C60004                  	mov byte [rax], T_closure
 21340 00010596 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21341 0001059A 48C74009[A7050100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02ac
 21342 000105A2 E939010000              	jmp .L_lambda_simple_end_02ac
 21343                                  .L_lambda_simple_code_02ac:	; lambda-simple body
 21344 000105A7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21345 000105AD 740B                    	je .L_lambda_simple_arity_check_ok_02ac
 21346 000105AF FF742410                	push qword [rsp + 8 * 2]
 21347 000105B3 6A01                    	push 1
 21348 000105B5 E9516B0000              	jmp L_error_incorrect_arity_simple
 21349                                  .L_lambda_simple_arity_check_ok_02ac:
 21350 000105BA C8000000                	enter 0, 0
 21351                                  	; preparing a non-tail-call
 21352 000105BE 488B4520                	mov rax, PARAM(0)	; param e
 21353 000105C2 50                      	push rax
 21354 000105C3 6A01                    	push 1	; arg count
 21355 000105C5 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 21356 000105CD 803805                  	cmp byte [rax], T_undefined
 21357 000105D0 0F844F6A0000            	je L_error_fvar_undefined
 21358 000105D6 803804                  	cmp byte [rax], T_closure
 21359 000105D9 0F85CA6A0000            	jne L_error_non_closure
 21360 000105DF FF7001                  	push SOB_CLOSURE_ENV(rax)
 21361 000105E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21362 000105E5 483D[02000000]          	cmp rax, sob_boolean_false
 21363 000105EB 0F85EB000000            	jne .L_or_end_0038
 21364                                  
 21365                                  	; preparing a non-tail-call
 21366 000105F1 488B4520                	mov rax, PARAM(0)	; param e
 21367 000105F5 50                      	push rax
 21368 000105F6 6A01                    	push 1	; arg count
 21369 000105F8 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
 21370 00010600 803805                  	cmp byte [rax], T_undefined
 21371 00010603 0F841C6A0000            	je L_error_fvar_undefined
 21372 00010609 803804                  	cmp byte [rax], T_closure
 21373 0001060C 0F85976A0000            	jne L_error_non_closure
 21374 00010612 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21375 00010615 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21376 00010618 483D[02000000]          	cmp rax, sob_boolean_false
 21377 0001061E 0F84A6000000            	je .L_if_else_01f8
 21378                                  	; preparing a tail-call
 21379                                  	; preparing a non-tail-call
 21380 00010624 488B4520                	mov rax, PARAM(0)	; param e
 21381 00010628 50                      	push rax
 21382 00010629 6A01                    	push 1	; arg count
 21383 0001062B 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 21384 00010633 803805                  	cmp byte [rax], T_undefined
 21385 00010636 0F84E9690000            	je L_error_fvar_undefined
 21386 0001063C 803804                  	cmp byte [rax], T_closure
 21387 0001063F 0F85646A0000            	jne L_error_non_closure
 21388 00010645 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21389 00010648 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21390 0001064B 50                      	push rax
 21391 0001064C 6A01                    	push 1	; arg count
 21392 0001064E 488B0425[37140000]      	mov rax, qword [free_var_96]	; free var list?
 21393 00010656 803805                  	cmp byte [rax], T_undefined
 21394 00010659 0F84C6690000            	je L_error_fvar_undefined
 21395 0001065F 803804                  	cmp byte [rax], T_closure
 21396 00010662 0F85416A0000            	jne L_error_non_closure
 21397 00010668 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21398 0001066B 4C8B4009                	mov r8, qword [rax + 1 + 8]
 21399 0001066F FF7508                  	push qword [rbp + 8]				; push old return address
 21400 00010672 FF7500                  	push qword [rbp]					; push old rbp
 21401                                  	;; move stack up ;;
 21402 00010675 488B5D18                	mov rbx, [rbp + 3*8]
 21403 00010679 4889DE                  	mov rsi, rbx						; save old size in rsi
 21404 0001067C 4883C303                	add rbx, 3
 21405 00010680 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 21406 00010688 B901000000              	mov rcx, 1
 21407 0001068D 4883C104                	add rcx, 4				; num of iterations in rcx
 21408                                  .L_tc_recycle_frame_loop_038b:
 21409 00010691 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 21410 00010699 488B143C                	mov rdx, [rsp + rdi]
 21411 0001069D 4889541D00              	mov [rbp + rbx], rdx
 21412 000106A2 4883EB08                	sub rbx, 8
 21413 000106A6 48FFC9                  	dec rcx
 21414 000106A9 4883F900                	cmp rcx, 0
 21415 000106AD 75E2                    	jne .L_tc_recycle_frame_loop_038b
 21416 000106AF 4889F3                  	mov rbx, rsi
 21417 000106B2 4883EB01                	sub rbx, 1
 21418 000106B6 488D1CDD00000000        	lea rbx, [rbx*8]
 21419 000106BE 4801DD                  	add rbp, rbx
 21420 000106C1 4889EC                  	mov rsp, rbp         ; fix stack pointers
 21421 000106C4 5D                      	pop rbp
 21422 000106C5 41FFE0                  	jmp r8
 21423 000106C8 EB0A                    	jmp .L_if_end_01f8
 21424                                  .L_if_else_01f8:
 21425 000106CA 48B8-                   	mov rax, L_constants + 2
 21425 000106CC [0200000000000000] 
 21426                                  .L_if_end_01f8:
 21427 000106D4 483D[02000000]          	cmp rax, sob_boolean_false
 21428 000106DA 7500                    	jne .L_or_end_0038
 21429                                  .L_or_end_0038:
 21430 000106DC C9                      	leave
 21431 000106DD C21800                  	ret AND_KILL_FRAME(1)
 21432                                  .L_lambda_simple_end_02ac:	; new closure is in rax
 21433 000106E0 48890425[37140000]      	mov qword [free_var_96], rax
 21434 000106E8 48B8-                   	mov rax, sob_void
 21434 000106EA [0000000000000000] 
 21435                                  
 21436 000106F2 4889C7                  	mov rdi, rax
 21437 000106F5 E8AD6C0000              	call print_sexpr_if_not_void
 21438                                  	; preparing a non-tail-call
 21439 000106FA 488B0425[8C140000]      	mov rax, qword [free_var_101]	; free var make-vector
 21440 00010702 803805                  	cmp byte [rax], T_undefined
 21441 00010705 0F841A690000            	je L_error_fvar_undefined
 21442 0001070B 50                      	push rax
 21443 0001070C 6A01                    	push 1	; arg count
 21444 0001070E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21445 00010713 E83A6A0000              	call malloc
 21446 00010718 50                      	push rax
 21447 00010719 BF00000000              	mov rdi, 8 * 0	; new rib
 21448 0001071E E82F6A0000              	call malloc
 21449 00010723 50                      	push rax
 21450 00010724 BF08000000              	mov rdi, 8 * 1	; extended env
 21451 00010729 E8246A0000              	call malloc
 21452 0001072E 488B7D10                	mov rdi, ENV
 21453 00010732 BE00000000              	mov rsi, 0
 21454 00010737 BA01000000              	mov rdx, 1
 21455                                  .L_lambda_simple_env_loop_02ad:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 21456 0001073C 4883FE00                	cmp rsi, 0
 21457 00010740 7410                    	je .L_lambda_simple_env_end_02ad
 21458 00010742 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21459 00010746 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21460 0001074A 48FFC6                  	inc rsi
 21461 0001074D 48FFC2                  	inc rdx
 21462 00010750 EBEA                    	jmp .L_lambda_simple_env_loop_02ad
 21463                                  .L_lambda_simple_env_end_02ad:
 21464 00010752 5B                      	pop rbx
 21465 00010753 BE00000000              	mov rsi, 0
 21466                                  .L_lambda_simple_params_loop_02ad:	; copy params
 21467 00010758 4883FE00                	cmp rsi, 0
 21468 0001075C 740E                    	je .L_lambda_simple_params_end_02ad
 21469 0001075E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21470 00010763 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21471 00010767 48FFC6                  	inc rsi
 21472 0001076A EBEC                    	jmp .L_lambda_simple_params_loop_02ad
 21473                                  .L_lambda_simple_params_end_02ad:
 21474 0001076C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 21475 0001076F 4889C3                  	mov rbx, rax
 21476 00010772 58                      	pop rax
 21477 00010773 C60004                  	mov byte [rax], T_closure
 21478 00010776 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21479 0001077A 48C74009[87070100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02ad
 21480 00010782 E928040000              	jmp .L_lambda_simple_end_02ad
 21481                                  .L_lambda_simple_code_02ad:	; lambda-simple body
 21482 00010787 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21483 0001078D 740B                    	je .L_lambda_simple_arity_check_ok_02ad
 21484 0001078F FF742410                	push qword [rsp + 8 * 2]
 21485 00010793 6A01                    	push 1
 21486 00010795 E971690000              	jmp L_error_incorrect_arity_simple
 21487                                  .L_lambda_simple_arity_check_ok_02ad:
 21488 0001079A C8000000                	enter 0, 0
 21489 0001079E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21490 000107A3 E8AA690000              	call malloc
 21491 000107A8 50                      	push rax
 21492 000107A9 BF08000000              	mov rdi, 8 * 1	; new rib
 21493 000107AE E89F690000              	call malloc
 21494 000107B3 50                      	push rax
 21495 000107B4 BF10000000              	mov rdi, 8 * 2	; extended env
 21496 000107B9 E894690000              	call malloc
 21497 000107BE 488B7D10                	mov rdi, ENV
 21498 000107C2 BE00000000              	mov rsi, 0
 21499 000107C7 BA01000000              	mov rdx, 1
 21500                                  .L_lambda_opt_env_loop_005c:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 21501 000107CC 4883FE01                	cmp rsi, 1
 21502 000107D0 7410                    	je .L_lambda_opt_env_end_005c
 21503 000107D2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21504 000107D6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21505 000107DA 48FFC6                  	inc rsi
 21506 000107DD 48FFC2                  	inc rdx
 21507 000107E0 EBEA                    	jmp .L_lambda_opt_env_loop_005c
 21508                                  .L_lambda_opt_env_end_005c:
 21509 000107E2 5B                      	pop rbx
 21510 000107E3 BE00000000              	mov rsi, 0
 21511                                  .L_lambda_opt_params_loop_005c:	; copy params
 21512 000107E8 4883FE01                	cmp rsi, 1
 21513 000107EC 740E                    	je .L_lambda_opt_params_end_005c
 21514 000107EE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21515 000107F3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21516 000107F7 48FFC6                  	inc rsi
 21517 000107FA EBEC                    	jmp .L_lambda_opt_params_loop_005c
 21518                                  .L_lambda_opt_params_end_005c:
 21519 000107FC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 21520 000107FF 4889C3                  	mov rbx, rax
 21521 00010802 58                      	pop rax
 21522 00010803 C60004                  	mov byte [rax], T_closure
 21523 00010806 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21524 0001080A 48C74009[17080100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_005c
 21525 00010812 E994030000              	jmp .L_lambda_opt_end_005c
 21526                                  .L_lambda_opt_code_005c:	; lambda-opt body
 21527 00010817 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21528 0001081D 740D                    	je .L_lambda_opt_arity_check_exact_005c
 21529 0001081F 7F48                    	jg .L_lambda_opt_arity_check_more_005c
 21530 00010821 FF742410                	push qword [rsp + 8 * 2]
 21531 00010825 6A01                    	push 1
 21532 00010827 E9F3680000              	jmp L_error_incorrect_arity_opt
 21533                                  .L_lambda_opt_arity_check_exact_005c:
 21534 0001082C 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update argument count (fixed params + 1 for nil)
 21535 00010835 41BA04000000            	mov r10, 4	; r10 = total addresses to adjust (fixed params + 3)
 21536 0001083B FF3424                  	push qword [rsp]	; Save the top stack element
 21537 0001083E 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
 21538                                  .L_lambda_opt_stack_shrink_loop_0112:
 21539 00010844 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
 21540 00010847 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0112	; Exit loop if all elements processed
 21541 00010849 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
 21542 0001084E 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
 21543 00010852 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
 21544 00010857 49FFC3                  	inc r11	; Increment loop index
 21545 0001085A EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_0112	; Jump back to loop start
 21546                                  .L_lambda_opt_stack_shrink_loop_exit_0112:
 21547 0001085C 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
 21548 00010864 E988000000              	jmp .L_lambda_opt_stack_adjusted_005c
 21549                                  .L_lambda_opt_arity_check_more_005c:
 21550 00010869 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
 21551 0001086E 4983E801                	sub r8, 1	; r8 = count of optional params
 21552 00010872 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update the number of params (fixed params + 1 for list opt)
 21553 0001087B 41B900000000            	mov r9, 0	; r9 = index of optional argument list
 21554 00010881 4E8D54C418              	lea r10, [rsp + 2 * 8 + 1 * 8 + r8 * 8]	; r10 = address of first optional param
 21555 00010886 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
 21555 00010888 [0100000000000000] 
 21556                                  .L_lambda_opt_stack_shrink_loop_0113:
 21557 00010890 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
 21558 00010893 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_0113	; Exit loop if all optional params are processed
 21559 00010895 BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
 21560 0001089A E8B3680000              	call malloc	; Allocate memory for a new pair
 21561 0001089F 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
 21562 000108A3 49F7D9                  	neg r9	; Negate index to access in reverse
 21563 000108A6 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
 21564 000108AA 49F7D9                  	neg r9	; Negate index back
 21565 000108AD 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
 21566 000108B1 C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
 21567 000108B4 4989C3                  	mov r11, rax	; Update current pair to the newly created one
 21568 000108B7 49FFC1                  	inc r9	; Increment the index
 21569 000108BA EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0113	; Repeat the loop for the next param
 21570                                  .L_lambda_opt_stack_shrink_loop_exit_0113:
 21571 000108BC 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
 21572 000108BF 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
 21573 000108C3 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
 21574 000108C6 4983C418                	add r12, 24	; Skip fixed params and return address
 21575 000108CA 41BD04000000            	mov r13, 4	; r13 = loop counter (number of params, old fp, ret addr, lex env)
 21576                                  .L_lambda_opt_stack_shrink_loop_0114:
 21577 000108D0 4983FD00                	cmp r13, 0	; Check if there are more values to copy
 21578 000108D4 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0114	; Exit loop if all values are copied
 21579 000108D6 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
 21580 000108DA 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
 21581 000108DD 49FFCD                  	dec r13	; Decrement the loop counter
 21582 000108E0 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
 21583 000108E4 4983EC08                	sub r12, 8	; Move the source pointer to the next location
 21584 000108E8 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0114	; Repeat the loop for the next value
 21585                                  .L_lambda_opt_stack_shrink_loop_exit_0114:
 21586 000108EA 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
 21587 000108EE 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
 21588                                  .L_lambda_opt_stack_adjusted_005c:
 21589 000108F1 C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
 21590                                  	; preparing a tail-call
 21591                                  	; preparing a non-tail-call
 21592 000108F5 488B4528                	mov rax, PARAM(1)	; param xs
 21593 000108F9 50                      	push rax
 21594 000108FA 6A01                    	push 1	; arg count
 21595 000108FC 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 21596 00010904 803805                  	cmp byte [rax], T_undefined
 21597 00010907 0F8418670000            	je L_error_fvar_undefined
 21598 0001090D 803804                  	cmp byte [rax], T_closure
 21599 00010910 0F8593670000            	jne L_error_non_closure
 21600 00010916 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21601 00010919 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21602 0001091C 483D[02000000]          	cmp rax, sob_boolean_false
 21603 00010922 740F                    	je .L_if_else_01fb
 21604 00010924 48B8-                   	mov rax, L_constants + 0
 21604 00010926 [0000000000000000] 
 21605 0001092E E9EE000000              	jmp .L_if_end_01fb
 21606                                  .L_if_else_01fb:
 21607                                  	; preparing a non-tail-call
 21608 00010933 488B4528                	mov rax, PARAM(1)	; param xs
 21609 00010937 50                      	push rax
 21610 00010938 6A01                    	push 1	; arg count
 21611 0001093A 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
 21612 00010942 803805                  	cmp byte [rax], T_undefined
 21613 00010945 0F84DA660000            	je L_error_fvar_undefined
 21614 0001094B 803804                  	cmp byte [rax], T_closure
 21615 0001094E 0F8555670000            	jne L_error_non_closure
 21616 00010954 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21617 00010957 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21618 0001095A 483D[02000000]          	cmp rax, sob_boolean_false
 21619 00010960 744C                    	je .L_if_else_01f9
 21620                                  	; preparing a non-tail-call
 21621                                  	; preparing a non-tail-call
 21622 00010962 488B4528                	mov rax, PARAM(1)	; param xs
 21623 00010966 50                      	push rax
 21624 00010967 6A01                    	push 1	; arg count
 21625 00010969 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 21626 00010971 803805                  	cmp byte [rax], T_undefined
 21627 00010974 0F84AB660000            	je L_error_fvar_undefined
 21628 0001097A 803804                  	cmp byte [rax], T_closure
 21629 0001097D 0F8526670000            	jne L_error_non_closure
 21630 00010983 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21631 00010986 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21632 00010989 50                      	push rax
 21633 0001098A 6A01                    	push 1	; arg count
 21634 0001098C 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 21635 00010994 803805                  	cmp byte [rax], T_undefined
 21636 00010997 0F8488660000            	je L_error_fvar_undefined
 21637 0001099D 803804                  	cmp byte [rax], T_closure
 21638 000109A0 0F8503670000            	jne L_error_non_closure
 21639 000109A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21640 000109A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21641 000109AC EB0A                    	jmp .L_if_end_01f9
 21642                                  .L_if_else_01f9:
 21643 000109AE 48B8-                   	mov rax, L_constants + 2
 21643 000109B0 [0200000000000000] 
 21644                                  .L_if_end_01f9:
 21645 000109B8 483D[02000000]          	cmp rax, sob_boolean_false
 21646 000109BE 7429                    	je .L_if_else_01fa
 21647                                  	; preparing a non-tail-call
 21648 000109C0 488B4528                	mov rax, PARAM(1)	; param xs
 21649 000109C4 50                      	push rax
 21650 000109C5 6A01                    	push 1	; arg count
 21651 000109C7 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 21652 000109CF 803805                  	cmp byte [rax], T_undefined
 21653 000109D2 0F844D660000            	je L_error_fvar_undefined
 21654 000109D8 803804                  	cmp byte [rax], T_closure
 21655 000109DB 0F85C8660000            	jne L_error_non_closure
 21656 000109E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21657 000109E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21658 000109E7 EB38                    	jmp .L_if_end_01fa
 21659                                  .L_if_else_01fa:
 21660                                  	; preparing a non-tail-call
 21661 000109E9 48B8-                   	mov rax, L_constants + 2955
 21661 000109EB [8B0B000000000000] 
 21662 000109F3 50                      	push rax
 21663 000109F4 48B8-                   	mov rax, L_constants + 2946
 21663 000109F6 [820B000000000000] 
 21664 000109FE 50                      	push rax
 21665 000109FF 6A02                    	push 2	; arg count
 21666 00010A01 488B0425[49130000]      	mov rax, qword [free_var_82]	; free var error
 21667 00010A09 803805                  	cmp byte [rax], T_undefined
 21668 00010A0C 0F8413660000            	je L_error_fvar_undefined
 21669 00010A12 803804                  	cmp byte [rax], T_closure
 21670 00010A15 0F858E660000            	jne L_error_non_closure
 21671 00010A1B FF7001                  	push SOB_CLOSURE_ENV(rax)
 21672 00010A1E FF5009                  	call SOB_CLOSURE_CODE(rax)
 21673                                  .L_if_end_01fa:
 21674                                  .L_if_end_01fb:
 21675 00010A21 50                      	push rax
 21676 00010A22 6A01                    	push 1	; arg count
 21677 00010A24 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21678 00010A29 E824670000              	call malloc
 21679 00010A2E 50                      	push rax
 21680 00010A2F BF10000000              	mov rdi, 8 * 2	; new rib
 21681 00010A34 E819670000              	call malloc
 21682 00010A39 50                      	push rax
 21683 00010A3A BF18000000              	mov rdi, 8 * 3	; extended env
 21684 00010A3F E80E670000              	call malloc
 21685 00010A44 488B7D10                	mov rdi, ENV
 21686 00010A48 BE00000000              	mov rsi, 0
 21687 00010A4D BA01000000              	mov rdx, 1
 21688                                  .L_lambda_simple_env_loop_02ae:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 21689 00010A52 4883FE02                	cmp rsi, 2
 21690 00010A56 7410                    	je .L_lambda_simple_env_end_02ae
 21691 00010A58 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21692 00010A5C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21693 00010A60 48FFC6                  	inc rsi
 21694 00010A63 48FFC2                  	inc rdx
 21695 00010A66 EBEA                    	jmp .L_lambda_simple_env_loop_02ae
 21696                                  .L_lambda_simple_env_end_02ae:
 21697 00010A68 5B                      	pop rbx
 21698 00010A69 BE00000000              	mov rsi, 0
 21699                                  .L_lambda_simple_params_loop_02ae:	; copy params
 21700 00010A6E 4883FE02                	cmp rsi, 2
 21701 00010A72 740E                    	je .L_lambda_simple_params_end_02ae
 21702 00010A74 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21703 00010A79 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21704 00010A7D 48FFC6                  	inc rsi
 21705 00010A80 EBEC                    	jmp .L_lambda_simple_params_loop_02ae
 21706                                  .L_lambda_simple_params_end_02ae:
 21707 00010A82 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 21708 00010A85 4889C3                  	mov rbx, rax
 21709 00010A88 58                      	pop rax
 21710 00010A89 C60004                  	mov byte [rax], T_closure
 21711 00010A8C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21712 00010A90 48C74009[9D0A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02ae
 21713 00010A98 E9A1000000              	jmp .L_lambda_simple_end_02ae
 21714                                  .L_lambda_simple_code_02ae:	; lambda-simple body
 21715 00010A9D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21716 00010AA3 740B                    	je .L_lambda_simple_arity_check_ok_02ae
 21717 00010AA5 FF742410                	push qword [rsp + 8 * 2]
 21718 00010AA9 6A01                    	push 1
 21719 00010AAB E95B660000              	jmp L_error_incorrect_arity_simple
 21720                                  .L_lambda_simple_arity_check_ok_02ae:
 21721 00010AB0 C8000000                	enter 0, 0
 21722                                  	; preparing a tail-call
 21723 00010AB4 488B4520                	mov rax, PARAM(0)	; param x
 21724 00010AB8 50                      	push rax
 21725 00010AB9 488B4510                	mov rax, ENV
 21726 00010ABD 488B00                  	mov rax, qword [rax + 8 * 0]
 21727 00010AC0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 21728 00010AC3 50                      	push rax
 21729 00010AC4 6A02                    	push 2	; arg count
 21730 00010AC6 488B4510                	mov rax, ENV
 21731 00010ACA 488B4008                	mov rax, qword [rax + 8 * 1]
 21732 00010ACE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-vector
 21733 00010AD1 803804                  	cmp byte [rax], T_closure
 21734 00010AD4 0F85CF650000            	jne L_error_non_closure
 21735 00010ADA FF7001                  	push SOB_CLOSURE_ENV(rax)
 21736 00010ADD 4C8B4009                	mov r8, qword [rax + 1 + 8]
 21737 00010AE1 FF7508                  	push qword [rbp + 8]				; push old return address
 21738 00010AE4 FF7500                  	push qword [rbp]					; push old rbp
 21739                                  	;; move stack up ;;
 21740 00010AE7 488B5D18                	mov rbx, [rbp + 3*8]
 21741 00010AEB 4889DE                  	mov rsi, rbx						; save old size in rsi
 21742 00010AEE 4883C303                	add rbx, 3
 21743 00010AF2 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 21744 00010AFA B902000000              	mov rcx, 2
 21745 00010AFF 4883C104                	add rcx, 4				; num of iterations in rcx
 21746                                  .L_tc_recycle_frame_loop_038d:
 21747 00010B03 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 21748 00010B0B 488B143C                	mov rdx, [rsp + rdi]
 21749 00010B0F 4889541D00              	mov [rbp + rbx], rdx
 21750 00010B14 4883EB08                	sub rbx, 8
 21751 00010B18 48FFC9                  	dec rcx
 21752 00010B1B 4883F900                	cmp rcx, 0
 21753 00010B1F 75E2                    	jne .L_tc_recycle_frame_loop_038d
 21754 00010B21 4889F3                  	mov rbx, rsi
 21755 00010B24 4883EB02                	sub rbx, 2
 21756 00010B28 488D1CDD00000000        	lea rbx, [rbx*8]
 21757 00010B30 4801DD                  	add rbp, rbx
 21758 00010B33 4889EC                  	mov rsp, rbp         ; fix stack pointers
 21759 00010B36 5D                      	pop rbp
 21760 00010B37 41FFE0                  	jmp r8
 21761 00010B3A C9                      	leave
 21762 00010B3B C21800                  	ret AND_KILL_FRAME(1)
 21763                                  .L_lambda_simple_end_02ae:	; new closure is in rax
 21764 00010B3E 803804                  	cmp byte [rax], T_closure
 21765 00010B41 0F8562650000            	jne L_error_non_closure
 21766 00010B47 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21767 00010B4A 4C8B4009                	mov r8, qword [rax + 1 + 8]
 21768 00010B4E FF7508                  	push qword [rbp + 8]				; push old return address
 21769 00010B51 FF7500                  	push qword [rbp]					; push old rbp
 21770                                  	;; move stack up ;;
 21771 00010B54 488B5D18                	mov rbx, [rbp + 3*8]
 21772 00010B58 4889DE                  	mov rsi, rbx						; save old size in rsi
 21773 00010B5B 4883C303                	add rbx, 3
 21774 00010B5F 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 21775 00010B67 B901000000              	mov rcx, 1
 21776 00010B6C 4883C104                	add rcx, 4				; num of iterations in rcx
 21777                                  .L_tc_recycle_frame_loop_038c:
 21778 00010B70 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 21779 00010B78 488B143C                	mov rdx, [rsp + rdi]
 21780 00010B7C 4889541D00              	mov [rbp + rbx], rdx
 21781 00010B81 4883EB08                	sub rbx, 8
 21782 00010B85 48FFC9                  	dec rcx
 21783 00010B88 4883F900                	cmp rcx, 0
 21784 00010B8C 75E2                    	jne .L_tc_recycle_frame_loop_038c
 21785 00010B8E 4889F3                  	mov rbx, rsi
 21786 00010B91 4883EB01                	sub rbx, 1
 21787 00010B95 488D1CDD00000000        	lea rbx, [rbx*8]
 21788 00010B9D 4801DD                  	add rbp, rbx
 21789 00010BA0 4889EC                  	mov rsp, rbp         ; fix stack pointers
 21790 00010BA3 5D                      	pop rbp
 21791 00010BA4 41FFE0                  	jmp r8
 21792 00010BA7 C9                      	leave	; Restore the previous stack frame
 21793 00010BA8 C22000                  	ret AND_KILL_FRAME(2)
 21794                                  .L_lambda_opt_end_005c:	; new closure is in rax
 21795 00010BAB C9                      	leave
 21796 00010BAC C21800                  	ret AND_KILL_FRAME(1)
 21797                                  .L_lambda_simple_end_02ad:	; new closure is in rax
 21798 00010BAF 803804                  	cmp byte [rax], T_closure
 21799 00010BB2 0F85F1640000            	jne L_error_non_closure
 21800 00010BB8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21801 00010BBB FF5009                  	call SOB_CLOSURE_CODE(rax)
 21802 00010BBE 48890425[8C140000]      	mov qword [free_var_101], rax
 21803 00010BC6 48B8-                   	mov rax, sob_void
 21803 00010BC8 [0000000000000000] 
 21804                                  
 21805 00010BD0 4889C7                  	mov rdi, rax
 21806 00010BD3 E8CF670000              	call print_sexpr_if_not_void
 21807                                  	; preparing a non-tail-call
 21808 00010BD8 488B0425[6A140000]      	mov rax, qword [free_var_99]	; free var make-string
 21809 00010BE0 803805                  	cmp byte [rax], T_undefined
 21810 00010BE3 0F843C640000            	je L_error_fvar_undefined
 21811 00010BE9 50                      	push rax
 21812 00010BEA 6A01                    	push 1	; arg count
 21813 00010BEC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21814 00010BF1 E85C650000              	call malloc
 21815 00010BF6 50                      	push rax
 21816 00010BF7 BF00000000              	mov rdi, 8 * 0	; new rib
 21817 00010BFC E851650000              	call malloc
 21818 00010C01 50                      	push rax
 21819 00010C02 BF08000000              	mov rdi, 8 * 1	; extended env
 21820 00010C07 E846650000              	call malloc
 21821 00010C0C 488B7D10                	mov rdi, ENV
 21822 00010C10 BE00000000              	mov rsi, 0
 21823 00010C15 BA01000000              	mov rdx, 1
 21824                                  .L_lambda_simple_env_loop_02af:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 21825 00010C1A 4883FE00                	cmp rsi, 0
 21826 00010C1E 7410                    	je .L_lambda_simple_env_end_02af
 21827 00010C20 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21828 00010C24 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21829 00010C28 48FFC6                  	inc rsi
 21830 00010C2B 48FFC2                  	inc rdx
 21831 00010C2E EBEA                    	jmp .L_lambda_simple_env_loop_02af
 21832                                  .L_lambda_simple_env_end_02af:
 21833 00010C30 5B                      	pop rbx
 21834 00010C31 BE00000000              	mov rsi, 0
 21835                                  .L_lambda_simple_params_loop_02af:	; copy params
 21836 00010C36 4883FE00                	cmp rsi, 0
 21837 00010C3A 740E                    	je .L_lambda_simple_params_end_02af
 21838 00010C3C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21839 00010C41 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21840 00010C45 48FFC6                  	inc rsi
 21841 00010C48 EBEC                    	jmp .L_lambda_simple_params_loop_02af
 21842                                  .L_lambda_simple_params_end_02af:
 21843 00010C4A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 21844 00010C4D 4889C3                  	mov rbx, rax
 21845 00010C50 58                      	pop rax
 21846 00010C51 C60004                  	mov byte [rax], T_closure
 21847 00010C54 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21848 00010C58 48C74009[650C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02af
 21849 00010C60 E928040000              	jmp .L_lambda_simple_end_02af
 21850                                  .L_lambda_simple_code_02af:	; lambda-simple body
 21851 00010C65 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21852 00010C6B 740B                    	je .L_lambda_simple_arity_check_ok_02af
 21853 00010C6D FF742410                	push qword [rsp + 8 * 2]
 21854 00010C71 6A01                    	push 1
 21855 00010C73 E993640000              	jmp L_error_incorrect_arity_simple
 21856                                  .L_lambda_simple_arity_check_ok_02af:
 21857 00010C78 C8000000                	enter 0, 0
 21858 00010C7C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21859 00010C81 E8CC640000              	call malloc
 21860 00010C86 50                      	push rax
 21861 00010C87 BF08000000              	mov rdi, 8 * 1	; new rib
 21862 00010C8C E8C1640000              	call malloc
 21863 00010C91 50                      	push rax
 21864 00010C92 BF10000000              	mov rdi, 8 * 2	; extended env
 21865 00010C97 E8B6640000              	call malloc
 21866 00010C9C 488B7D10                	mov rdi, ENV
 21867 00010CA0 BE00000000              	mov rsi, 0
 21868 00010CA5 BA01000000              	mov rdx, 1
 21869                                  .L_lambda_opt_env_loop_005d:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 21870 00010CAA 4883FE01                	cmp rsi, 1
 21871 00010CAE 7410                    	je .L_lambda_opt_env_end_005d
 21872 00010CB0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21873 00010CB4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21874 00010CB8 48FFC6                  	inc rsi
 21875 00010CBB 48FFC2                  	inc rdx
 21876 00010CBE EBEA                    	jmp .L_lambda_opt_env_loop_005d
 21877                                  .L_lambda_opt_env_end_005d:
 21878 00010CC0 5B                      	pop rbx
 21879 00010CC1 BE00000000              	mov rsi, 0
 21880                                  .L_lambda_opt_params_loop_005d:	; copy params
 21881 00010CC6 4883FE01                	cmp rsi, 1
 21882 00010CCA 740E                    	je .L_lambda_opt_params_end_005d
 21883 00010CCC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21884 00010CD1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21885 00010CD5 48FFC6                  	inc rsi
 21886 00010CD8 EBEC                    	jmp .L_lambda_opt_params_loop_005d
 21887                                  .L_lambda_opt_params_end_005d:
 21888 00010CDA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 21889 00010CDD 4889C3                  	mov rbx, rax
 21890 00010CE0 58                      	pop rax
 21891 00010CE1 C60004                  	mov byte [rax], T_closure
 21892 00010CE4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21893 00010CE8 48C74009[F50C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_005d
 21894 00010CF0 E994030000              	jmp .L_lambda_opt_end_005d
 21895                                  .L_lambda_opt_code_005d:	; lambda-opt body
 21896 00010CF5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21897 00010CFB 740D                    	je .L_lambda_opt_arity_check_exact_005d
 21898 00010CFD 7F48                    	jg .L_lambda_opt_arity_check_more_005d
 21899 00010CFF FF742410                	push qword [rsp + 8 * 2]
 21900 00010D03 6A01                    	push 1
 21901 00010D05 E915640000              	jmp L_error_incorrect_arity_opt
 21902                                  .L_lambda_opt_arity_check_exact_005d:
 21903 00010D0A 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update argument count (fixed params + 1 for nil)
 21904 00010D13 41BA04000000            	mov r10, 4	; r10 = total addresses to adjust (fixed params + 3)
 21905 00010D19 FF3424                  	push qword [rsp]	; Save the top stack element
 21906 00010D1C 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
 21907                                  .L_lambda_opt_stack_shrink_loop_0115:
 21908 00010D22 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
 21909 00010D25 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0115	; Exit loop if all elements processed
 21910 00010D27 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
 21911 00010D2C 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
 21912 00010D30 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
 21913 00010D35 49FFC3                  	inc r11	; Increment loop index
 21914 00010D38 EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_0115	; Jump back to loop start
 21915                                  .L_lambda_opt_stack_shrink_loop_exit_0115:
 21916 00010D3A 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
 21917 00010D42 E988000000              	jmp .L_lambda_opt_stack_adjusted_005d
 21918                                  .L_lambda_opt_arity_check_more_005d:
 21919 00010D47 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
 21920 00010D4C 4983E801                	sub r8, 1	; r8 = count of optional params
 21921 00010D50 48C744241002000000      	mov qword [rsp + 8 * 2], 2	; Update the number of params (fixed params + 1 for list opt)
 21922 00010D59 41B900000000            	mov r9, 0	; r9 = index of optional argument list
 21923 00010D5F 4E8D54C418              	lea r10, [rsp + 2 * 8 + 1 * 8 + r8 * 8]	; r10 = address of first optional param
 21924 00010D64 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
 21924 00010D66 [0100000000000000] 
 21925                                  .L_lambda_opt_stack_shrink_loop_0116:
 21926 00010D6E 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
 21927 00010D71 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_0116	; Exit loop if all optional params are processed
 21928 00010D73 BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
 21929 00010D78 E8D5630000              	call malloc	; Allocate memory for a new pair
 21930 00010D7D 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
 21931 00010D81 49F7D9                  	neg r9	; Negate index to access in reverse
 21932 00010D84 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
 21933 00010D88 49F7D9                  	neg r9	; Negate index back
 21934 00010D8B 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
 21935 00010D8F C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
 21936 00010D92 4989C3                  	mov r11, rax	; Update current pair to the newly created one
 21937 00010D95 49FFC1                  	inc r9	; Increment the index
 21938 00010D98 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0116	; Repeat the loop for the next param
 21939                                  .L_lambda_opt_stack_shrink_loop_exit_0116:
 21940 00010D9A 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
 21941 00010D9D 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
 21942 00010DA1 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
 21943 00010DA4 4983C418                	add r12, 24	; Skip fixed params and return address
 21944 00010DA8 41BD04000000            	mov r13, 4	; r13 = loop counter (number of params, old fp, ret addr, lex env)
 21945                                  .L_lambda_opt_stack_shrink_loop_0117:
 21946 00010DAE 4983FD00                	cmp r13, 0	; Check if there are more values to copy
 21947 00010DB2 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0117	; Exit loop if all values are copied
 21948 00010DB4 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
 21949 00010DB8 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
 21950 00010DBB 49FFCD                  	dec r13	; Decrement the loop counter
 21951 00010DBE 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
 21952 00010DC2 4983EC08                	sub r12, 8	; Move the source pointer to the next location
 21953 00010DC6 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0117	; Repeat the loop for the next value
 21954                                  .L_lambda_opt_stack_shrink_loop_exit_0117:
 21955 00010DC8 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
 21956 00010DCC 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
 21957                                  .L_lambda_opt_stack_adjusted_005d:
 21958 00010DCF C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
 21959                                  	; preparing a tail-call
 21960                                  	; preparing a non-tail-call
 21961 00010DD3 488B4528                	mov rax, PARAM(1)	; param chs
 21962 00010DD7 50                      	push rax
 21963 00010DD8 6A01                    	push 1	; arg count
 21964 00010DDA 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 21965 00010DE2 803805                  	cmp byte [rax], T_undefined
 21966 00010DE5 0F843A620000            	je L_error_fvar_undefined
 21967 00010DEB 803804                  	cmp byte [rax], T_closure
 21968 00010DEE 0F85B5620000            	jne L_error_non_closure
 21969 00010DF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21970 00010DF7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21971 00010DFA 483D[02000000]          	cmp rax, sob_boolean_false
 21972 00010E00 740F                    	je .L_if_else_01fe
 21973 00010E02 48B8-                   	mov rax, L_constants + 4
 21973 00010E04 [0400000000000000] 
 21974 00010E0C E9EE000000              	jmp .L_if_end_01fe
 21975                                  .L_if_else_01fe:
 21976                                  	; preparing a non-tail-call
 21977 00010E11 488B4528                	mov rax, PARAM(1)	; param chs
 21978 00010E15 50                      	push rax
 21979 00010E16 6A01                    	push 1	; arg count
 21980 00010E18 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
 21981 00010E20 803805                  	cmp byte [rax], T_undefined
 21982 00010E23 0F84FC610000            	je L_error_fvar_undefined
 21983 00010E29 803804                  	cmp byte [rax], T_closure
 21984 00010E2C 0F8577620000            	jne L_error_non_closure
 21985 00010E32 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21986 00010E35 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21987 00010E38 483D[02000000]          	cmp rax, sob_boolean_false
 21988 00010E3E 744C                    	je .L_if_else_01fc
 21989                                  	; preparing a non-tail-call
 21990                                  	; preparing a non-tail-call
 21991 00010E40 488B4528                	mov rax, PARAM(1)	; param chs
 21992 00010E44 50                      	push rax
 21993 00010E45 6A01                    	push 1	; arg count
 21994 00010E47 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 21995 00010E4F 803805                  	cmp byte [rax], T_undefined
 21996 00010E52 0F84CD610000            	je L_error_fvar_undefined
 21997 00010E58 803804                  	cmp byte [rax], T_closure
 21998 00010E5B 0F8548620000            	jne L_error_non_closure
 21999 00010E61 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22000 00010E64 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22001 00010E67 50                      	push rax
 22002 00010E68 6A01                    	push 1	; arg count
 22003 00010E6A 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 22004 00010E72 803805                  	cmp byte [rax], T_undefined
 22005 00010E75 0F84AA610000            	je L_error_fvar_undefined
 22006 00010E7B 803804                  	cmp byte [rax], T_closure
 22007 00010E7E 0F8525620000            	jne L_error_non_closure
 22008 00010E84 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22009 00010E87 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22010 00010E8A EB0A                    	jmp .L_if_end_01fc
 22011                                  .L_if_else_01fc:
 22012 00010E8C 48B8-                   	mov rax, L_constants + 2
 22012 00010E8E [0200000000000000] 
 22013                                  .L_if_end_01fc:
 22014 00010E96 483D[02000000]          	cmp rax, sob_boolean_false
 22015 00010E9C 7429                    	je .L_if_else_01fd
 22016                                  	; preparing a non-tail-call
 22017 00010E9E 488B4528                	mov rax, PARAM(1)	; param chs
 22018 00010EA2 50                      	push rax
 22019 00010EA3 6A01                    	push 1	; arg count
 22020 00010EA5 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 22021 00010EAD 803805                  	cmp byte [rax], T_undefined
 22022 00010EB0 0F846F610000            	je L_error_fvar_undefined
 22023 00010EB6 803804                  	cmp byte [rax], T_closure
 22024 00010EB9 0F85EA610000            	jne L_error_non_closure
 22025 00010EBF FF7001                  	push SOB_CLOSURE_ENV(rax)
 22026 00010EC2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22027 00010EC5 EB38                    	jmp .L_if_end_01fd
 22028                                  .L_if_else_01fd:
 22029                                  	; preparing a non-tail-call
 22030 00010EC7 48B8-                   	mov rax, L_constants + 3016
 22030 00010EC9 [C80B000000000000] 
 22031 00010ED1 50                      	push rax
 22032 00010ED2 48B8-                   	mov rax, L_constants + 3007
 22032 00010ED4 [BF0B000000000000] 
 22033 00010EDC 50                      	push rax
 22034 00010EDD 6A02                    	push 2	; arg count
 22035 00010EDF 488B0425[49130000]      	mov rax, qword [free_var_82]	; free var error
 22036 00010EE7 803805                  	cmp byte [rax], T_undefined
 22037 00010EEA 0F8435610000            	je L_error_fvar_undefined
 22038 00010EF0 803804                  	cmp byte [rax], T_closure
 22039 00010EF3 0F85B0610000            	jne L_error_non_closure
 22040 00010EF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22041 00010EFC FF5009                  	call SOB_CLOSURE_CODE(rax)
 22042                                  .L_if_end_01fd:
 22043                                  .L_if_end_01fe:
 22044 00010EFF 50                      	push rax
 22045 00010F00 6A01                    	push 1	; arg count
 22046 00010F02 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22047 00010F07 E846620000              	call malloc
 22048 00010F0C 50                      	push rax
 22049 00010F0D BF10000000              	mov rdi, 8 * 2	; new rib
 22050 00010F12 E83B620000              	call malloc
 22051 00010F17 50                      	push rax
 22052 00010F18 BF18000000              	mov rdi, 8 * 3	; extended env
 22053 00010F1D E830620000              	call malloc
 22054 00010F22 488B7D10                	mov rdi, ENV
 22055 00010F26 BE00000000              	mov rsi, 0
 22056 00010F2B BA01000000              	mov rdx, 1
 22057                                  .L_lambda_simple_env_loop_02b0:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 22058 00010F30 4883FE02                	cmp rsi, 2
 22059 00010F34 7410                    	je .L_lambda_simple_env_end_02b0
 22060 00010F36 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22061 00010F3A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22062 00010F3E 48FFC6                  	inc rsi
 22063 00010F41 48FFC2                  	inc rdx
 22064 00010F44 EBEA                    	jmp .L_lambda_simple_env_loop_02b0
 22065                                  .L_lambda_simple_env_end_02b0:
 22066 00010F46 5B                      	pop rbx
 22067 00010F47 BE00000000              	mov rsi, 0
 22068                                  .L_lambda_simple_params_loop_02b0:	; copy params
 22069 00010F4C 4883FE02                	cmp rsi, 2
 22070 00010F50 740E                    	je .L_lambda_simple_params_end_02b0
 22071 00010F52 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22072 00010F57 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22073 00010F5B 48FFC6                  	inc rsi
 22074 00010F5E EBEC                    	jmp .L_lambda_simple_params_loop_02b0
 22075                                  .L_lambda_simple_params_end_02b0:
 22076 00010F60 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 22077 00010F63 4889C3                  	mov rbx, rax
 22078 00010F66 58                      	pop rax
 22079 00010F67 C60004                  	mov byte [rax], T_closure
 22080 00010F6A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22081 00010F6E 48C74009[7B0F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02b0
 22082 00010F76 E9A1000000              	jmp .L_lambda_simple_end_02b0
 22083                                  .L_lambda_simple_code_02b0:	; lambda-simple body
 22084 00010F7B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22085 00010F81 740B                    	je .L_lambda_simple_arity_check_ok_02b0
 22086 00010F83 FF742410                	push qword [rsp + 8 * 2]
 22087 00010F87 6A01                    	push 1
 22088 00010F89 E97D610000              	jmp L_error_incorrect_arity_simple
 22089                                  .L_lambda_simple_arity_check_ok_02b0:
 22090 00010F8E C8000000                	enter 0, 0
 22091                                  	; preparing a tail-call
 22092 00010F92 488B4520                	mov rax, PARAM(0)	; param ch
 22093 00010F96 50                      	push rax
 22094 00010F97 488B4510                	mov rax, ENV
 22095 00010F9B 488B00                  	mov rax, qword [rax + 8 * 0]
 22096 00010F9E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 22097 00010FA1 50                      	push rax
 22098 00010FA2 6A02                    	push 2	; arg count
 22099 00010FA4 488B4510                	mov rax, ENV
 22100 00010FA8 488B4008                	mov rax, qword [rax + 8 * 1]
 22101 00010FAC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-string
 22102 00010FAF 803804                  	cmp byte [rax], T_closure
 22103 00010FB2 0F85F1600000            	jne L_error_non_closure
 22104 00010FB8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22105 00010FBB 4C8B4009                	mov r8, qword [rax + 1 + 8]
 22106 00010FBF FF7508                  	push qword [rbp + 8]				; push old return address
 22107 00010FC2 FF7500                  	push qword [rbp]					; push old rbp
 22108                                  	;; move stack up ;;
 22109 00010FC5 488B5D18                	mov rbx, [rbp + 3*8]
 22110 00010FC9 4889DE                  	mov rsi, rbx						; save old size in rsi
 22111 00010FCC 4883C303                	add rbx, 3
 22112 00010FD0 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 22113 00010FD8 B902000000              	mov rcx, 2
 22114 00010FDD 4883C104                	add rcx, 4				; num of iterations in rcx
 22115                                  .L_tc_recycle_frame_loop_038f:
 22116 00010FE1 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 22117 00010FE9 488B143C                	mov rdx, [rsp + rdi]
 22118 00010FED 4889541D00              	mov [rbp + rbx], rdx
 22119 00010FF2 4883EB08                	sub rbx, 8
 22120 00010FF6 48FFC9                  	dec rcx
 22121 00010FF9 4883F900                	cmp rcx, 0
 22122 00010FFD 75E2                    	jne .L_tc_recycle_frame_loop_038f
 22123 00010FFF 4889F3                  	mov rbx, rsi
 22124 00011002 4883EB02                	sub rbx, 2
 22125 00011006 488D1CDD00000000        	lea rbx, [rbx*8]
 22126 0001100E 4801DD                  	add rbp, rbx
 22127 00011011 4889EC                  	mov rsp, rbp         ; fix stack pointers
 22128 00011014 5D                      	pop rbp
 22129 00011015 41FFE0                  	jmp r8
 22130 00011018 C9                      	leave
 22131 00011019 C21800                  	ret AND_KILL_FRAME(1)
 22132                                  .L_lambda_simple_end_02b0:	; new closure is in rax
 22133 0001101C 803804                  	cmp byte [rax], T_closure
 22134 0001101F 0F8584600000            	jne L_error_non_closure
 22135 00011025 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22136 00011028 4C8B4009                	mov r8, qword [rax + 1 + 8]
 22137 0001102C FF7508                  	push qword [rbp + 8]				; push old return address
 22138 0001102F FF7500                  	push qword [rbp]					; push old rbp
 22139                                  	;; move stack up ;;
 22140 00011032 488B5D18                	mov rbx, [rbp + 3*8]
 22141 00011036 4889DE                  	mov rsi, rbx						; save old size in rsi
 22142 00011039 4883C303                	add rbx, 3
 22143 0001103D 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 22144 00011045 B901000000              	mov rcx, 1
 22145 0001104A 4883C104                	add rcx, 4				; num of iterations in rcx
 22146                                  .L_tc_recycle_frame_loop_038e:
 22147 0001104E 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 22148 00011056 488B143C                	mov rdx, [rsp + rdi]
 22149 0001105A 4889541D00              	mov [rbp + rbx], rdx
 22150 0001105F 4883EB08                	sub rbx, 8
 22151 00011063 48FFC9                  	dec rcx
 22152 00011066 4883F900                	cmp rcx, 0
 22153 0001106A 75E2                    	jne .L_tc_recycle_frame_loop_038e
 22154 0001106C 4889F3                  	mov rbx, rsi
 22155 0001106F 4883EB01                	sub rbx, 1
 22156 00011073 488D1CDD00000000        	lea rbx, [rbx*8]
 22157 0001107B 4801DD                  	add rbp, rbx
 22158 0001107E 4889EC                  	mov rsp, rbp         ; fix stack pointers
 22159 00011081 5D                      	pop rbp
 22160 00011082 41FFE0                  	jmp r8
 22161 00011085 C9                      	leave	; Restore the previous stack frame
 22162 00011086 C22000                  	ret AND_KILL_FRAME(2)
 22163                                  .L_lambda_opt_end_005d:	; new closure is in rax
 22164 00011089 C9                      	leave
 22165 0001108A C21800                  	ret AND_KILL_FRAME(1)
 22166                                  .L_lambda_simple_end_02af:	; new closure is in rax
 22167 0001108D 803804                  	cmp byte [rax], T_closure
 22168 00011090 0F8513600000            	jne L_error_non_closure
 22169 00011096 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22170 00011099 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22171 0001109C 48890425[6A140000]      	mov qword [free_var_99], rax
 22172 000110A4 48B8-                   	mov rax, sob_void
 22172 000110A6 [0000000000000000] 
 22173                                  
 22174 000110AE 4889C7                  	mov rdi, rax
 22175 000110B1 E8F1620000              	call print_sexpr_if_not_void
 22176                                  	; preparing a non-tail-call
 22177 000110B6 48B8-                   	mov rax, L_constants + 1993
 22177 000110B8 [C907000000000000] 
 22178 000110C0 50                      	push rax
 22179 000110C1 6A01                    	push 1	; arg count
 22180 000110C3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22181 000110C8 E885600000              	call malloc
 22182 000110CD 50                      	push rax
 22183 000110CE BF00000000              	mov rdi, 8 * 0	; new rib
 22184 000110D3 E87A600000              	call malloc
 22185 000110D8 50                      	push rax
 22186 000110D9 BF08000000              	mov rdi, 8 * 1	; extended env
 22187 000110DE E86F600000              	call malloc
 22188 000110E3 488B7D10                	mov rdi, ENV
 22189 000110E7 BE00000000              	mov rsi, 0
 22190 000110EC BA01000000              	mov rdx, 1
 22191                                  .L_lambda_simple_env_loop_02b1:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 22192 000110F1 4883FE00                	cmp rsi, 0
 22193 000110F5 7410                    	je .L_lambda_simple_env_end_02b1
 22194 000110F7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22195 000110FB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22196 000110FF 48FFC6                  	inc rsi
 22197 00011102 48FFC2                  	inc rdx
 22198 00011105 EBEA                    	jmp .L_lambda_simple_env_loop_02b1
 22199                                  .L_lambda_simple_env_end_02b1:
 22200 00011107 5B                      	pop rbx
 22201 00011108 BE00000000              	mov rsi, 0
 22202                                  .L_lambda_simple_params_loop_02b1:	; copy params
 22203 0001110D 4883FE00                	cmp rsi, 0
 22204 00011111 740E                    	je .L_lambda_simple_params_end_02b1
 22205 00011113 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22206 00011118 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22207 0001111C 48FFC6                  	inc rsi
 22208 0001111F EBEC                    	jmp .L_lambda_simple_params_loop_02b1
 22209                                  .L_lambda_simple_params_end_02b1:
 22210 00011121 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 22211 00011124 4889C3                  	mov rbx, rax
 22212 00011127 58                      	pop rax
 22213 00011128 C60004                  	mov byte [rax], T_closure
 22214 0001112B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22215 0001112F 48C74009[3C110100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02b1
 22216 00011137 E99D040000              	jmp .L_lambda_simple_end_02b1
 22217                                  .L_lambda_simple_code_02b1:	; lambda-simple body
 22218 0001113C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22219 00011142 740B                    	je .L_lambda_simple_arity_check_ok_02b1
 22220 00011144 FF742410                	push qword [rsp + 8 * 2]
 22221 00011148 6A01                    	push 1
 22222 0001114A E9BC5F0000              	jmp L_error_incorrect_arity_simple
 22223                                  .L_lambda_simple_arity_check_ok_02b1:
 22224 0001114F C8000000                	enter 0, 0
 22225 00011153 BF08000000              	mov rdi, 8
 22226 00011158 E8F55F0000              	call malloc
 22227 0001115D 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
 22228 00011161 488918                  	mov qword[rax], rbx
 22229 00011164 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 22230 00011168 48B8-                   	mov rax, sob_void
 22230 0001116A [0000000000000000] 
 22231                                  
 22232 00011172 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22233 00011177 E8D65F0000              	call malloc
 22234 0001117C 50                      	push rax
 22235 0001117D BF08000000              	mov rdi, 8 * 1	; new rib
 22236 00011182 E8CB5F0000              	call malloc
 22237 00011187 50                      	push rax
 22238 00011188 BF10000000              	mov rdi, 8 * 2	; extended env
 22239 0001118D E8C05F0000              	call malloc
 22240 00011192 488B7D10                	mov rdi, ENV
 22241 00011196 BE00000000              	mov rsi, 0
 22242 0001119B BA01000000              	mov rdx, 1
 22243                                  .L_lambda_simple_env_loop_02b2:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 22244 000111A0 4883FE01                	cmp rsi, 1
 22245 000111A4 7410                    	je .L_lambda_simple_env_end_02b2
 22246 000111A6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22247 000111AA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22248 000111AE 48FFC6                  	inc rsi
 22249 000111B1 48FFC2                  	inc rdx
 22250 000111B4 EBEA                    	jmp .L_lambda_simple_env_loop_02b2
 22251                                  .L_lambda_simple_env_end_02b2:
 22252 000111B6 5B                      	pop rbx
 22253 000111B7 BE00000000              	mov rsi, 0
 22254                                  .L_lambda_simple_params_loop_02b2:	; copy params
 22255 000111BC 4883FE01                	cmp rsi, 1
 22256 000111C0 740E                    	je .L_lambda_simple_params_end_02b2
 22257 000111C2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22258 000111C7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22259 000111CB 48FFC6                  	inc rsi
 22260 000111CE EBEC                    	jmp .L_lambda_simple_params_loop_02b2
 22261                                  .L_lambda_simple_params_end_02b2:
 22262 000111D0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 22263 000111D3 4889C3                  	mov rbx, rax
 22264 000111D6 58                      	pop rax
 22265 000111D7 C60004                  	mov byte [rax], T_closure
 22266 000111DA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22267 000111DE 48C74009[EB110100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02b2
 22268 000111E6 E9BD020000              	jmp .L_lambda_simple_end_02b2
 22269                                  .L_lambda_simple_code_02b2:	; lambda-simple body
 22270 000111EB 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22271 000111F1 740B                    	je .L_lambda_simple_arity_check_ok_02b2
 22272 000111F3 FF742410                	push qword [rsp + 8 * 2]
 22273 000111F7 6A02                    	push 2
 22274 000111F9 E90D5F0000              	jmp L_error_incorrect_arity_simple
 22275                                  .L_lambda_simple_arity_check_ok_02b2:
 22276 000111FE C8000000                	enter 0, 0
 22277                                  	; preparing a non-tail-call
 22278 00011202 488B4520                	mov rax, PARAM(0)	; param s
 22279 00011206 50                      	push rax
 22280 00011207 6A01                    	push 1	; arg count
 22281 00011209 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 22282 00011211 803805                  	cmp byte [rax], T_undefined
 22283 00011214 0F840B5E0000            	je L_error_fvar_undefined
 22284 0001121A 803804                  	cmp byte [rax], T_closure
 22285 0001121D 0F85865E0000            	jne L_error_non_closure
 22286 00011223 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22287 00011226 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22288 00011229 483D[02000000]          	cmp rax, sob_boolean_false
 22289 0001122F 0F8491000000            	je .L_if_else_01ff
 22290                                  	; preparing a tail-call
 22291 00011235 48B8-                   	mov rax, L_constants + 0
 22291 00011237 [0000000000000000] 
 22292 0001123F 50                      	push rax
 22293 00011240 488B4528                	mov rax, PARAM(1)	; param i
 22294 00011244 50                      	push rax
 22295 00011245 6A02                    	push 2	; arg count
 22296 00011247 488B0425[8C140000]      	mov rax, qword [free_var_101]	; free var make-vector
 22297 0001124F 803805                  	cmp byte [rax], T_undefined
 22298 00011252 0F84CD5D0000            	je L_error_fvar_undefined
 22299 00011258 803804                  	cmp byte [rax], T_closure
 22300 0001125B 0F85485E0000            	jne L_error_non_closure
 22301 00011261 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22302 00011264 4C8B4009                	mov r8, qword [rax + 1 + 8]
 22303 00011268 FF7508                  	push qword [rbp + 8]				; push old return address
 22304 0001126B FF7500                  	push qword [rbp]					; push old rbp
 22305                                  	;; move stack up ;;
 22306 0001126E 488B5D18                	mov rbx, [rbp + 3*8]
 22307 00011272 4889DE                  	mov rsi, rbx						; save old size in rsi
 22308 00011275 4883C303                	add rbx, 3
 22309 00011279 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 22310 00011281 B902000000              	mov rcx, 2
 22311 00011286 4883C104                	add rcx, 4				; num of iterations in rcx
 22312                                  .L_tc_recycle_frame_loop_0390:
 22313 0001128A 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 22314 00011292 488B143C                	mov rdx, [rsp + rdi]
 22315 00011296 4889541D00              	mov [rbp + rbx], rdx
 22316 0001129B 4883EB08                	sub rbx, 8
 22317 0001129F 48FFC9                  	dec rcx
 22318 000112A2 4883F900                	cmp rcx, 0
 22319 000112A6 75E2                    	jne .L_tc_recycle_frame_loop_0390
 22320 000112A8 4889F3                  	mov rbx, rsi
 22321 000112AB 4883EB02                	sub rbx, 2
 22322 000112AF 488D1CDD00000000        	lea rbx, [rbx*8]
 22323 000112B7 4801DD                  	add rbp, rbx
 22324 000112BA 4889EC                  	mov rsp, rbp         ; fix stack pointers
 22325 000112BD 5D                      	pop rbp
 22326 000112BE 41FFE0                  	jmp r8
 22327 000112C1 E9DE010000              	jmp .L_if_end_01ff
 22328                                  .L_if_else_01ff:
 22329                                  	; preparing a tail-call
 22330                                  	; preparing a non-tail-call
 22331                                  	; preparing a non-tail-call
 22332 000112C6 48B8-                   	mov rax, L_constants + 2270
 22332 000112C8 [DE08000000000000] 
 22333 000112D0 50                      	push rax
 22334 000112D1 488B4528                	mov rax, PARAM(1)	; param i
 22335 000112D5 50                      	push rax
 22336 000112D6 6A02                    	push 2	; arg count
 22337 000112D8 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 22338 000112E0 803805                  	cmp byte [rax], T_undefined
 22339 000112E3 0F843C5D0000            	je L_error_fvar_undefined
 22340 000112E9 803804                  	cmp byte [rax], T_closure
 22341 000112EC 0F85B75D0000            	jne L_error_non_closure
 22342 000112F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22343 000112F5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22344 000112F8 50                      	push rax
 22345                                  	; preparing a non-tail-call
 22346 000112F9 488B4520                	mov rax, PARAM(0)	; param s
 22347 000112FD 50                      	push rax
 22348 000112FE 6A01                    	push 1	; arg count
 22349 00011300 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 22350 00011308 803805                  	cmp byte [rax], T_undefined
 22351 0001130B 0F84145D0000            	je L_error_fvar_undefined
 22352 00011311 803804                  	cmp byte [rax], T_closure
 22353 00011314 0F858F5D0000            	jne L_error_non_closure
 22354 0001131A FF7001                  	push SOB_CLOSURE_ENV(rax)
 22355 0001131D FF5009                  	call SOB_CLOSURE_CODE(rax)
 22356 00011320 50                      	push rax
 22357 00011321 6A02                    	push 2	; arg count
 22358 00011323 488B4510                	mov rax, ENV
 22359 00011327 488B00                  	mov rax, qword [rax + 8 * 0]
 22360 0001132A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22361 0001132D 488B00                  	mov rax, qword [rax]
 22362 00011330 803804                  	cmp byte [rax], T_closure
 22363 00011333 0F85705D0000            	jne L_error_non_closure
 22364 00011339 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22365 0001133C FF5009                  	call SOB_CLOSURE_CODE(rax)
 22366 0001133F 50                      	push rax
 22367 00011340 6A01                    	push 1	; arg count
 22368 00011342 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22369 00011347 E8065E0000              	call malloc
 22370 0001134C 50                      	push rax
 22371 0001134D BF10000000              	mov rdi, 8 * 2	; new rib
 22372 00011352 E8FB5D0000              	call malloc
 22373 00011357 50                      	push rax
 22374 00011358 BF18000000              	mov rdi, 8 * 3	; extended env
 22375 0001135D E8F05D0000              	call malloc
 22376 00011362 488B7D10                	mov rdi, ENV
 22377 00011366 BE00000000              	mov rsi, 0
 22378 0001136B BA01000000              	mov rdx, 1
 22379                                  .L_lambda_simple_env_loop_02b3:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 22380 00011370 4883FE02                	cmp rsi, 2
 22381 00011374 7410                    	je .L_lambda_simple_env_end_02b3
 22382 00011376 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22383 0001137A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22384 0001137E 48FFC6                  	inc rsi
 22385 00011381 48FFC2                  	inc rdx
 22386 00011384 EBEA                    	jmp .L_lambda_simple_env_loop_02b3
 22387                                  .L_lambda_simple_env_end_02b3:
 22388 00011386 5B                      	pop rbx
 22389 00011387 BE00000000              	mov rsi, 0
 22390                                  .L_lambda_simple_params_loop_02b3:	; copy params
 22391 0001138C 4883FE02                	cmp rsi, 2
 22392 00011390 740E                    	je .L_lambda_simple_params_end_02b3
 22393 00011392 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22394 00011397 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22395 0001139B 48FFC6                  	inc rsi
 22396 0001139E EBEC                    	jmp .L_lambda_simple_params_loop_02b3
 22397                                  .L_lambda_simple_params_end_02b3:
 22398 000113A0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 22399 000113A3 4889C3                  	mov rbx, rax
 22400 000113A6 58                      	pop rax
 22401 000113A7 C60004                  	mov byte [rax], T_closure
 22402 000113AA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22403 000113AE 48C74009[BB130100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02b3
 22404 000113B6 E980000000              	jmp .L_lambda_simple_end_02b3
 22405                                  .L_lambda_simple_code_02b3:	; lambda-simple body
 22406 000113BB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22407 000113C1 740B                    	je .L_lambda_simple_arity_check_ok_02b3
 22408 000113C3 FF742410                	push qword [rsp + 8 * 2]
 22409 000113C7 6A01                    	push 1
 22410 000113C9 E93D5D0000              	jmp L_error_incorrect_arity_simple
 22411                                  .L_lambda_simple_arity_check_ok_02b3:
 22412 000113CE C8000000                	enter 0, 0
 22413                                  	; preparing a non-tail-call
 22414                                  	; preparing a non-tail-call
 22415 000113D2 488B4510                	mov rax, ENV
 22416 000113D6 488B00                  	mov rax, qword [rax + 8 * 0]
 22417 000113D9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var s
 22418 000113DC 50                      	push rax
 22419 000113DD 6A01                    	push 1	; arg count
 22420 000113DF 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 22421 000113E7 803805                  	cmp byte [rax], T_undefined
 22422 000113EA 0F84355C0000            	je L_error_fvar_undefined
 22423 000113F0 803804                  	cmp byte [rax], T_closure
 22424 000113F3 0F85B05C0000            	jne L_error_non_closure
 22425 000113F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22426 000113FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 22427 000113FF 50                      	push rax
 22428 00011400 488B4510                	mov rax, ENV
 22429 00011404 488B00                  	mov rax, qword [rax + 8 * 0]
 22430 00011407 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 22431 0001140B 50                      	push rax
 22432 0001140C 488B4520                	mov rax, PARAM(0)	; param v
 22433 00011410 50                      	push rax
 22434 00011411 6A03                    	push 3	; arg count
 22435 00011413 488B0425[9A170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 22436 0001141B 803805                  	cmp byte [rax], T_undefined
 22437 0001141E 0F84015C0000            	je L_error_fvar_undefined
 22438 00011424 803804                  	cmp byte [rax], T_closure
 22439 00011427 0F857C5C0000            	jne L_error_non_closure
 22440 0001142D FF7001                  	push SOB_CLOSURE_ENV(rax)
 22441 00011430 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22442                                  
 22443 00011433 488B4520                	mov rax, PARAM(0)	; param v
 22444 00011437 C9                      	leave
 22445 00011438 C21800                  	ret AND_KILL_FRAME(1)
 22446                                  .L_lambda_simple_end_02b3:	; new closure is in rax
 22447 0001143B 803804                  	cmp byte [rax], T_closure
 22448 0001143E 0F85655C0000            	jne L_error_non_closure
 22449 00011444 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22450 00011447 4C8B4009                	mov r8, qword [rax + 1 + 8]
 22451 0001144B FF7508                  	push qword [rbp + 8]				; push old return address
 22452 0001144E FF7500                  	push qword [rbp]					; push old rbp
 22453                                  	;; move stack up ;;
 22454 00011451 488B5D18                	mov rbx, [rbp + 3*8]
 22455 00011455 4889DE                  	mov rsi, rbx						; save old size in rsi
 22456 00011458 4883C303                	add rbx, 3
 22457 0001145C 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 22458 00011464 B901000000              	mov rcx, 1
 22459 00011469 4883C104                	add rcx, 4				; num of iterations in rcx
 22460                                  .L_tc_recycle_frame_loop_0391:
 22461 0001146D 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 22462 00011475 488B143C                	mov rdx, [rsp + rdi]
 22463 00011479 4889541D00              	mov [rbp + rbx], rdx
 22464 0001147E 4883EB08                	sub rbx, 8
 22465 00011482 48FFC9                  	dec rcx
 22466 00011485 4883F900                	cmp rcx, 0
 22467 00011489 75E2                    	jne .L_tc_recycle_frame_loop_0391
 22468 0001148B 4889F3                  	mov rbx, rsi
 22469 0001148E 4883EB01                	sub rbx, 1
 22470 00011492 488D1CDD00000000        	lea rbx, [rbx*8]
 22471 0001149A 4801DD                  	add rbp, rbx
 22472 0001149D 4889EC                  	mov rsp, rbp         ; fix stack pointers
 22473 000114A0 5D                      	pop rbp
 22474 000114A1 41FFE0                  	jmp r8
 22475                                  .L_if_end_01ff:
 22476 000114A4 C9                      	leave
 22477 000114A5 C22000                  	ret AND_KILL_FRAME(2)
 22478                                  .L_lambda_simple_end_02b2:	; new closure is in rax
 22479 000114A8 50                      	push rax
 22480 000114A9 488B4520                	mov rax, PARAM(0)	; param run
 22481 000114AD 8F00                    	pop qword [rax]
 22482 000114AF 48B8-                   	mov rax, sob_void
 22482 000114B1 [0000000000000000] 
 22483                                  
 22484 000114B9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22485 000114BE E88F5C0000              	call malloc
 22486 000114C3 50                      	push rax
 22487 000114C4 BF08000000              	mov rdi, 8 * 1	; new rib
 22488 000114C9 E8845C0000              	call malloc
 22489 000114CE 50                      	push rax
 22490 000114CF BF10000000              	mov rdi, 8 * 2	; extended env
 22491 000114D4 E8795C0000              	call malloc
 22492 000114D9 488B7D10                	mov rdi, ENV
 22493 000114DD BE00000000              	mov rsi, 0
 22494 000114E2 BA01000000              	mov rdx, 1
 22495                                  .L_lambda_simple_env_loop_02b4:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 22496 000114E7 4883FE01                	cmp rsi, 1
 22497 000114EB 7410                    	je .L_lambda_simple_env_end_02b4
 22498 000114ED 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22499 000114F1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22500 000114F5 48FFC6                  	inc rsi
 22501 000114F8 48FFC2                  	inc rdx
 22502 000114FB EBEA                    	jmp .L_lambda_simple_env_loop_02b4
 22503                                  .L_lambda_simple_env_end_02b4:
 22504 000114FD 5B                      	pop rbx
 22505 000114FE BE00000000              	mov rsi, 0
 22506                                  .L_lambda_simple_params_loop_02b4:	; copy params
 22507 00011503 4883FE01                	cmp rsi, 1
 22508 00011507 740E                    	je .L_lambda_simple_params_end_02b4
 22509 00011509 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22510 0001150E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22511 00011512 48FFC6                  	inc rsi
 22512 00011515 EBEC                    	jmp .L_lambda_simple_params_loop_02b4
 22513                                  .L_lambda_simple_params_end_02b4:
 22514 00011517 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 22515 0001151A 4889C3                  	mov rbx, rax
 22516 0001151D 58                      	pop rax
 22517 0001151E C60004                  	mov byte [rax], T_closure
 22518 00011521 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22519 00011525 48C74009[32150100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02b4
 22520 0001152D E9A3000000              	jmp .L_lambda_simple_end_02b4
 22521                                  .L_lambda_simple_code_02b4:	; lambda-simple body
 22522 00011532 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22523 00011538 740B                    	je .L_lambda_simple_arity_check_ok_02b4
 22524 0001153A FF742410                	push qword [rsp + 8 * 2]
 22525 0001153E 6A01                    	push 1
 22526 00011540 E9C65B0000              	jmp L_error_incorrect_arity_simple
 22527                                  .L_lambda_simple_arity_check_ok_02b4:
 22528 00011545 C8000000                	enter 0, 0
 22529                                  	; preparing a tail-call
 22530 00011549 48B8-                   	mov rax, L_constants + 2135
 22530 0001154B [5708000000000000] 
 22531 00011553 50                      	push rax
 22532 00011554 488B4520                	mov rax, PARAM(0)	; param s
 22533 00011558 50                      	push rax
 22534 00011559 6A02                    	push 2	; arg count
 22535 0001155B 488B4510                	mov rax, ENV
 22536 0001155F 488B00                  	mov rax, qword [rax + 8 * 0]
 22537 00011562 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22538 00011565 488B00                  	mov rax, qword [rax]
 22539 00011568 803804                  	cmp byte [rax], T_closure
 22540 0001156B 0F85385B0000            	jne L_error_non_closure
 22541 00011571 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22542 00011574 4C8B4009                	mov r8, qword [rax + 1 + 8]
 22543 00011578 FF7508                  	push qword [rbp + 8]				; push old return address
 22544 0001157B FF7500                  	push qword [rbp]					; push old rbp
 22545                                  	;; move stack up ;;
 22546 0001157E 488B5D18                	mov rbx, [rbp + 3*8]
 22547 00011582 4889DE                  	mov rsi, rbx						; save old size in rsi
 22548 00011585 4883C303                	add rbx, 3
 22549 00011589 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 22550 00011591 B902000000              	mov rcx, 2
 22551 00011596 4883C104                	add rcx, 4				; num of iterations in rcx
 22552                                  .L_tc_recycle_frame_loop_0392:
 22553 0001159A 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 22554 000115A2 488B143C                	mov rdx, [rsp + rdi]
 22555 000115A6 4889541D00              	mov [rbp + rbx], rdx
 22556 000115AB 4883EB08                	sub rbx, 8
 22557 000115AF 48FFC9                  	dec rcx
 22558 000115B2 4883F900                	cmp rcx, 0
 22559 000115B6 75E2                    	jne .L_tc_recycle_frame_loop_0392
 22560 000115B8 4889F3                  	mov rbx, rsi
 22561 000115BB 4883EB02                	sub rbx, 2
 22562 000115BF 488D1CDD00000000        	lea rbx, [rbx*8]
 22563 000115C7 4801DD                  	add rbp, rbx
 22564 000115CA 4889EC                  	mov rsp, rbp         ; fix stack pointers
 22565 000115CD 5D                      	pop rbp
 22566 000115CE 41FFE0                  	jmp r8
 22567 000115D1 C9                      	leave
 22568 000115D2 C21800                  	ret AND_KILL_FRAME(1)
 22569                                  .L_lambda_simple_end_02b4:	; new closure is in rax
 22570 000115D5 C9                      	leave
 22571 000115D6 C21800                  	ret AND_KILL_FRAME(1)
 22572                                  .L_lambda_simple_end_02b1:	; new closure is in rax
 22573 000115D9 803804                  	cmp byte [rax], T_closure
 22574 000115DC 0F85C75A0000            	jne L_error_non_closure
 22575 000115E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22576 000115E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22577 000115E8 48890425[26140000]      	mov qword [free_var_95], rax
 22578 000115F0 48B8-                   	mov rax, sob_void
 22578 000115F2 [0000000000000000] 
 22579                                  
 22580 000115FA 4889C7                  	mov rdi, rax
 22581 000115FD E8A55D0000              	call print_sexpr_if_not_void
 22582                                  	; preparing a non-tail-call
 22583 00011602 48B8-                   	mov rax, L_constants + 1993
 22583 00011604 [C907000000000000] 
 22584 0001160C 50                      	push rax
 22585 0001160D 6A01                    	push 1	; arg count
 22586 0001160F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22587 00011614 E8395B0000              	call malloc
 22588 00011619 50                      	push rax
 22589 0001161A BF00000000              	mov rdi, 8 * 0	; new rib
 22590 0001161F E82E5B0000              	call malloc
 22591 00011624 50                      	push rax
 22592 00011625 BF08000000              	mov rdi, 8 * 1	; extended env
 22593 0001162A E8235B0000              	call malloc
 22594 0001162F 488B7D10                	mov rdi, ENV
 22595 00011633 BE00000000              	mov rsi, 0
 22596 00011638 BA01000000              	mov rdx, 1
 22597                                  .L_lambda_simple_env_loop_02b5:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 22598 0001163D 4883FE00                	cmp rsi, 0
 22599 00011641 7410                    	je .L_lambda_simple_env_end_02b5
 22600 00011643 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22601 00011647 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22602 0001164B 48FFC6                  	inc rsi
 22603 0001164E 48FFC2                  	inc rdx
 22604 00011651 EBEA                    	jmp .L_lambda_simple_env_loop_02b5
 22605                                  .L_lambda_simple_env_end_02b5:
 22606 00011653 5B                      	pop rbx
 22607 00011654 BE00000000              	mov rsi, 0
 22608                                  .L_lambda_simple_params_loop_02b5:	; copy params
 22609 00011659 4883FE00                	cmp rsi, 0
 22610 0001165D 740E                    	je .L_lambda_simple_params_end_02b5
 22611 0001165F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22612 00011664 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22613 00011668 48FFC6                  	inc rsi
 22614 0001166B EBEC                    	jmp .L_lambda_simple_params_loop_02b5
 22615                                  .L_lambda_simple_params_end_02b5:
 22616 0001166D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 22617 00011670 4889C3                  	mov rbx, rax
 22618 00011673 58                      	pop rax
 22619 00011674 C60004                  	mov byte [rax], T_closure
 22620 00011677 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22621 0001167B 48C74009[88160100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02b5
 22622 00011683 E99D040000              	jmp .L_lambda_simple_end_02b5
 22623                                  .L_lambda_simple_code_02b5:	; lambda-simple body
 22624 00011688 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22625 0001168E 740B                    	je .L_lambda_simple_arity_check_ok_02b5
 22626 00011690 FF742410                	push qword [rsp + 8 * 2]
 22627 00011694 6A01                    	push 1
 22628 00011696 E9705A0000              	jmp L_error_incorrect_arity_simple
 22629                                  .L_lambda_simple_arity_check_ok_02b5:
 22630 0001169B C8000000                	enter 0, 0
 22631 0001169F BF08000000              	mov rdi, 8
 22632 000116A4 E8A95A0000              	call malloc
 22633 000116A9 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
 22634 000116AD 488918                  	mov qword[rax], rbx
 22635 000116B0 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 22636 000116B4 48B8-                   	mov rax, sob_void
 22636 000116B6 [0000000000000000] 
 22637                                  
 22638 000116BE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22639 000116C3 E88A5A0000              	call malloc
 22640 000116C8 50                      	push rax
 22641 000116C9 BF08000000              	mov rdi, 8 * 1	; new rib
 22642 000116CE E87F5A0000              	call malloc
 22643 000116D3 50                      	push rax
 22644 000116D4 BF10000000              	mov rdi, 8 * 2	; extended env
 22645 000116D9 E8745A0000              	call malloc
 22646 000116DE 488B7D10                	mov rdi, ENV
 22647 000116E2 BE00000000              	mov rsi, 0
 22648 000116E7 BA01000000              	mov rdx, 1
 22649                                  .L_lambda_simple_env_loop_02b6:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 22650 000116EC 4883FE01                	cmp rsi, 1
 22651 000116F0 7410                    	je .L_lambda_simple_env_end_02b6
 22652 000116F2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22653 000116F6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22654 000116FA 48FFC6                  	inc rsi
 22655 000116FD 48FFC2                  	inc rdx
 22656 00011700 EBEA                    	jmp .L_lambda_simple_env_loop_02b6
 22657                                  .L_lambda_simple_env_end_02b6:
 22658 00011702 5B                      	pop rbx
 22659 00011703 BE00000000              	mov rsi, 0
 22660                                  .L_lambda_simple_params_loop_02b6:	; copy params
 22661 00011708 4883FE01                	cmp rsi, 1
 22662 0001170C 740E                    	je .L_lambda_simple_params_end_02b6
 22663 0001170E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22664 00011713 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22665 00011717 48FFC6                  	inc rsi
 22666 0001171A EBEC                    	jmp .L_lambda_simple_params_loop_02b6
 22667                                  .L_lambda_simple_params_end_02b6:
 22668 0001171C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 22669 0001171F 4889C3                  	mov rbx, rax
 22670 00011722 58                      	pop rax
 22671 00011723 C60004                  	mov byte [rax], T_closure
 22672 00011726 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22673 0001172A 48C74009[37170100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02b6
 22674 00011732 E9BD020000              	jmp .L_lambda_simple_end_02b6
 22675                                  .L_lambda_simple_code_02b6:	; lambda-simple body
 22676 00011737 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22677 0001173D 740B                    	je .L_lambda_simple_arity_check_ok_02b6
 22678 0001173F FF742410                	push qword [rsp + 8 * 2]
 22679 00011743 6A02                    	push 2
 22680 00011745 E9C1590000              	jmp L_error_incorrect_arity_simple
 22681                                  .L_lambda_simple_arity_check_ok_02b6:
 22682 0001174A C8000000                	enter 0, 0
 22683                                  	; preparing a non-tail-call
 22684 0001174E 488B4520                	mov rax, PARAM(0)	; param s
 22685 00011752 50                      	push rax
 22686 00011753 6A01                    	push 1	; arg count
 22687 00011755 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 22688 0001175D 803805                  	cmp byte [rax], T_undefined
 22689 00011760 0F84BF580000            	je L_error_fvar_undefined
 22690 00011766 803804                  	cmp byte [rax], T_closure
 22691 00011769 0F853A590000            	jne L_error_non_closure
 22692 0001176F FF7001                  	push SOB_CLOSURE_ENV(rax)
 22693 00011772 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22694 00011775 483D[02000000]          	cmp rax, sob_boolean_false
 22695 0001177B 0F8491000000            	je .L_if_else_0200
 22696                                  	; preparing a tail-call
 22697 00011781 48B8-                   	mov rax, L_constants + 4
 22697 00011783 [0400000000000000] 
 22698 0001178B 50                      	push rax
 22699 0001178C 488B4528                	mov rax, PARAM(1)	; param i
 22700 00011790 50                      	push rax
 22701 00011791 6A02                    	push 2	; arg count
 22702 00011793 488B0425[6A140000]      	mov rax, qword [free_var_99]	; free var make-string
 22703 0001179B 803805                  	cmp byte [rax], T_undefined
 22704 0001179E 0F8481580000            	je L_error_fvar_undefined
 22705 000117A4 803804                  	cmp byte [rax], T_closure
 22706 000117A7 0F85FC580000            	jne L_error_non_closure
 22707 000117AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 22708 000117B0 4C8B4009                	mov r8, qword [rax + 1 + 8]
 22709 000117B4 FF7508                  	push qword [rbp + 8]				; push old return address
 22710 000117B7 FF7500                  	push qword [rbp]					; push old rbp
 22711                                  	;; move stack up ;;
 22712 000117BA 488B5D18                	mov rbx, [rbp + 3*8]
 22713 000117BE 4889DE                  	mov rsi, rbx						; save old size in rsi
 22714 000117C1 4883C303                	add rbx, 3
 22715 000117C5 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 22716 000117CD B902000000              	mov rcx, 2
 22717 000117D2 4883C104                	add rcx, 4				; num of iterations in rcx
 22718                                  .L_tc_recycle_frame_loop_0393:
 22719 000117D6 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 22720 000117DE 488B143C                	mov rdx, [rsp + rdi]
 22721 000117E2 4889541D00              	mov [rbp + rbx], rdx
 22722 000117E7 4883EB08                	sub rbx, 8
 22723 000117EB 48FFC9                  	dec rcx
 22724 000117EE 4883F900                	cmp rcx, 0
 22725 000117F2 75E2                    	jne .L_tc_recycle_frame_loop_0393
 22726 000117F4 4889F3                  	mov rbx, rsi
 22727 000117F7 4883EB02                	sub rbx, 2
 22728 000117FB 488D1CDD00000000        	lea rbx, [rbx*8]
 22729 00011803 4801DD                  	add rbp, rbx
 22730 00011806 4889EC                  	mov rsp, rbp         ; fix stack pointers
 22731 00011809 5D                      	pop rbp
 22732 0001180A 41FFE0                  	jmp r8
 22733 0001180D E9DE010000              	jmp .L_if_end_0200
 22734                                  .L_if_else_0200:
 22735                                  	; preparing a tail-call
 22736                                  	; preparing a non-tail-call
 22737                                  	; preparing a non-tail-call
 22738 00011812 48B8-                   	mov rax, L_constants + 2270
 22738 00011814 [DE08000000000000] 
 22739 0001181C 50                      	push rax
 22740 0001181D 488B4528                	mov rax, PARAM(1)	; param i
 22741 00011821 50                      	push rax
 22742 00011822 6A02                    	push 2	; arg count
 22743 00011824 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 22744 0001182C 803805                  	cmp byte [rax], T_undefined
 22745 0001182F 0F84F0570000            	je L_error_fvar_undefined
 22746 00011835 803804                  	cmp byte [rax], T_closure
 22747 00011838 0F856B580000            	jne L_error_non_closure
 22748 0001183E FF7001                  	push SOB_CLOSURE_ENV(rax)
 22749 00011841 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22750 00011844 50                      	push rax
 22751                                  	; preparing a non-tail-call
 22752 00011845 488B4520                	mov rax, PARAM(0)	; param s
 22753 00011849 50                      	push rax
 22754 0001184A 6A01                    	push 1	; arg count
 22755 0001184C 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 22756 00011854 803805                  	cmp byte [rax], T_undefined
 22757 00011857 0F84C8570000            	je L_error_fvar_undefined
 22758 0001185D 803804                  	cmp byte [rax], T_closure
 22759 00011860 0F8543580000            	jne L_error_non_closure
 22760 00011866 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22761 00011869 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22762 0001186C 50                      	push rax
 22763 0001186D 6A02                    	push 2	; arg count
 22764 0001186F 488B4510                	mov rax, ENV
 22765 00011873 488B00                  	mov rax, qword [rax + 8 * 0]
 22766 00011876 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22767 00011879 488B00                  	mov rax, qword [rax]
 22768 0001187C 803804                  	cmp byte [rax], T_closure
 22769 0001187F 0F8524580000            	jne L_error_non_closure
 22770 00011885 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22771 00011888 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22772 0001188B 50                      	push rax
 22773 0001188C 6A01                    	push 1	; arg count
 22774 0001188E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22775 00011893 E8BA580000              	call malloc
 22776 00011898 50                      	push rax
 22777 00011899 BF10000000              	mov rdi, 8 * 2	; new rib
 22778 0001189E E8AF580000              	call malloc
 22779 000118A3 50                      	push rax
 22780 000118A4 BF18000000              	mov rdi, 8 * 3	; extended env
 22781 000118A9 E8A4580000              	call malloc
 22782 000118AE 488B7D10                	mov rdi, ENV
 22783 000118B2 BE00000000              	mov rsi, 0
 22784 000118B7 BA01000000              	mov rdx, 1
 22785                                  .L_lambda_simple_env_loop_02b7:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 22786 000118BC 4883FE02                	cmp rsi, 2
 22787 000118C0 7410                    	je .L_lambda_simple_env_end_02b7
 22788 000118C2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22789 000118C6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22790 000118CA 48FFC6                  	inc rsi
 22791 000118CD 48FFC2                  	inc rdx
 22792 000118D0 EBEA                    	jmp .L_lambda_simple_env_loop_02b7
 22793                                  .L_lambda_simple_env_end_02b7:
 22794 000118D2 5B                      	pop rbx
 22795 000118D3 BE00000000              	mov rsi, 0
 22796                                  .L_lambda_simple_params_loop_02b7:	; copy params
 22797 000118D8 4883FE02                	cmp rsi, 2
 22798 000118DC 740E                    	je .L_lambda_simple_params_end_02b7
 22799 000118DE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22800 000118E3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22801 000118E7 48FFC6                  	inc rsi
 22802 000118EA EBEC                    	jmp .L_lambda_simple_params_loop_02b7
 22803                                  .L_lambda_simple_params_end_02b7:
 22804 000118EC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 22805 000118EF 4889C3                  	mov rbx, rax
 22806 000118F2 58                      	pop rax
 22807 000118F3 C60004                  	mov byte [rax], T_closure
 22808 000118F6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22809 000118FA 48C74009[07190100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02b7
 22810 00011902 E980000000              	jmp .L_lambda_simple_end_02b7
 22811                                  .L_lambda_simple_code_02b7:	; lambda-simple body
 22812 00011907 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22813 0001190D 740B                    	je .L_lambda_simple_arity_check_ok_02b7
 22814 0001190F FF742410                	push qword [rsp + 8 * 2]
 22815 00011913 6A01                    	push 1
 22816 00011915 E9F1570000              	jmp L_error_incorrect_arity_simple
 22817                                  .L_lambda_simple_arity_check_ok_02b7:
 22818 0001191A C8000000                	enter 0, 0
 22819                                  	; preparing a non-tail-call
 22820                                  	; preparing a non-tail-call
 22821 0001191E 488B4510                	mov rax, ENV
 22822 00011922 488B00                  	mov rax, qword [rax + 8 * 0]
 22823 00011925 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var s
 22824 00011928 50                      	push rax
 22825 00011929 6A01                    	push 1	; arg count
 22826 0001192B 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 22827 00011933 803805                  	cmp byte [rax], T_undefined
 22828 00011936 0F84E9560000            	je L_error_fvar_undefined
 22829 0001193C 803804                  	cmp byte [rax], T_closure
 22830 0001193F 0F8564570000            	jne L_error_non_closure
 22831 00011945 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22832 00011948 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22833 0001194B 50                      	push rax
 22834 0001194C 488B4510                	mov rax, ENV
 22835 00011950 488B00                  	mov rax, qword [rax + 8 * 0]
 22836 00011953 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 22837 00011957 50                      	push rax
 22838 00011958 488B4520                	mov rax, PARAM(0)	; param str
 22839 0001195C 50                      	push rax
 22840 0001195D 6A03                    	push 3	; arg count
 22841 0001195F 488B0425[8A160000]      	mov rax, qword [free_var_131]	; free var string-set!
 22842 00011967 803805                  	cmp byte [rax], T_undefined
 22843 0001196A 0F84B5560000            	je L_error_fvar_undefined
 22844 00011970 803804                  	cmp byte [rax], T_closure
 22845 00011973 0F8530570000            	jne L_error_non_closure
 22846 00011979 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22847 0001197C FF5009                  	call SOB_CLOSURE_CODE(rax)
 22848                                  
 22849 0001197F 488B4520                	mov rax, PARAM(0)	; param str
 22850 00011983 C9                      	leave
 22851 00011984 C21800                  	ret AND_KILL_FRAME(1)
 22852                                  .L_lambda_simple_end_02b7:	; new closure is in rax
 22853 00011987 803804                  	cmp byte [rax], T_closure
 22854 0001198A 0F8519570000            	jne L_error_non_closure
 22855 00011990 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22856 00011993 4C8B4009                	mov r8, qword [rax + 1 + 8]
 22857 00011997 FF7508                  	push qword [rbp + 8]				; push old return address
 22858 0001199A FF7500                  	push qword [rbp]					; push old rbp
 22859                                  	;; move stack up ;;
 22860 0001199D 488B5D18                	mov rbx, [rbp + 3*8]
 22861 000119A1 4889DE                  	mov rsi, rbx						; save old size in rsi
 22862 000119A4 4883C303                	add rbx, 3
 22863 000119A8 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 22864 000119B0 B901000000              	mov rcx, 1
 22865 000119B5 4883C104                	add rcx, 4				; num of iterations in rcx
 22866                                  .L_tc_recycle_frame_loop_0394:
 22867 000119B9 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 22868 000119C1 488B143C                	mov rdx, [rsp + rdi]
 22869 000119C5 4889541D00              	mov [rbp + rbx], rdx
 22870 000119CA 4883EB08                	sub rbx, 8
 22871 000119CE 48FFC9                  	dec rcx
 22872 000119D1 4883F900                	cmp rcx, 0
 22873 000119D5 75E2                    	jne .L_tc_recycle_frame_loop_0394
 22874 000119D7 4889F3                  	mov rbx, rsi
 22875 000119DA 4883EB01                	sub rbx, 1
 22876 000119DE 488D1CDD00000000        	lea rbx, [rbx*8]
 22877 000119E6 4801DD                  	add rbp, rbx
 22878 000119E9 4889EC                  	mov rsp, rbp         ; fix stack pointers
 22879 000119EC 5D                      	pop rbp
 22880 000119ED 41FFE0                  	jmp r8
 22881                                  .L_if_end_0200:
 22882 000119F0 C9                      	leave
 22883 000119F1 C22000                  	ret AND_KILL_FRAME(2)
 22884                                  .L_lambda_simple_end_02b6:	; new closure is in rax
 22885 000119F4 50                      	push rax
 22886 000119F5 488B4520                	mov rax, PARAM(0)	; param run
 22887 000119F9 8F00                    	pop qword [rax]
 22888 000119FB 48B8-                   	mov rax, sob_void
 22888 000119FD [0000000000000000] 
 22889                                  
 22890 00011A05 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22891 00011A0A E843570000              	call malloc
 22892 00011A0F 50                      	push rax
 22893 00011A10 BF08000000              	mov rdi, 8 * 1	; new rib
 22894 00011A15 E838570000              	call malloc
 22895 00011A1A 50                      	push rax
 22896 00011A1B BF10000000              	mov rdi, 8 * 2	; extended env
 22897 00011A20 E82D570000              	call malloc
 22898 00011A25 488B7D10                	mov rdi, ENV
 22899 00011A29 BE00000000              	mov rsi, 0
 22900 00011A2E BA01000000              	mov rdx, 1
 22901                                  .L_lambda_simple_env_loop_02b8:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 22902 00011A33 4883FE01                	cmp rsi, 1
 22903 00011A37 7410                    	je .L_lambda_simple_env_end_02b8
 22904 00011A39 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22905 00011A3D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22906 00011A41 48FFC6                  	inc rsi
 22907 00011A44 48FFC2                  	inc rdx
 22908 00011A47 EBEA                    	jmp .L_lambda_simple_env_loop_02b8
 22909                                  .L_lambda_simple_env_end_02b8:
 22910 00011A49 5B                      	pop rbx
 22911 00011A4A BE00000000              	mov rsi, 0
 22912                                  .L_lambda_simple_params_loop_02b8:	; copy params
 22913 00011A4F 4883FE01                	cmp rsi, 1
 22914 00011A53 740E                    	je .L_lambda_simple_params_end_02b8
 22915 00011A55 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22916 00011A5A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22917 00011A5E 48FFC6                  	inc rsi
 22918 00011A61 EBEC                    	jmp .L_lambda_simple_params_loop_02b8
 22919                                  .L_lambda_simple_params_end_02b8:
 22920 00011A63 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 22921 00011A66 4889C3                  	mov rbx, rax
 22922 00011A69 58                      	pop rax
 22923 00011A6A C60004                  	mov byte [rax], T_closure
 22924 00011A6D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22925 00011A71 48C74009[7E1A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02b8
 22926 00011A79 E9A3000000              	jmp .L_lambda_simple_end_02b8
 22927                                  .L_lambda_simple_code_02b8:	; lambda-simple body
 22928 00011A7E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22929 00011A84 740B                    	je .L_lambda_simple_arity_check_ok_02b8
 22930 00011A86 FF742410                	push qword [rsp + 8 * 2]
 22931 00011A8A 6A01                    	push 1
 22932 00011A8C E97A560000              	jmp L_error_incorrect_arity_simple
 22933                                  .L_lambda_simple_arity_check_ok_02b8:
 22934 00011A91 C8000000                	enter 0, 0
 22935                                  	; preparing a tail-call
 22936 00011A95 48B8-                   	mov rax, L_constants + 2135
 22936 00011A97 [5708000000000000] 
 22937 00011A9F 50                      	push rax
 22938 00011AA0 488B4520                	mov rax, PARAM(0)	; param s
 22939 00011AA4 50                      	push rax
 22940 00011AA5 6A02                    	push 2	; arg count
 22941 00011AA7 488B4510                	mov rax, ENV
 22942 00011AAB 488B00                  	mov rax, qword [rax + 8 * 0]
 22943 00011AAE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22944 00011AB1 488B00                  	mov rax, qword [rax]
 22945 00011AB4 803804                  	cmp byte [rax], T_closure
 22946 00011AB7 0F85EC550000            	jne L_error_non_closure
 22947 00011ABD FF7001                  	push SOB_CLOSURE_ENV(rax)
 22948 00011AC0 4C8B4009                	mov r8, qword [rax + 1 + 8]
 22949 00011AC4 FF7508                  	push qword [rbp + 8]				; push old return address
 22950 00011AC7 FF7500                  	push qword [rbp]					; push old rbp
 22951                                  	;; move stack up ;;
 22952 00011ACA 488B5D18                	mov rbx, [rbp + 3*8]
 22953 00011ACE 4889DE                  	mov rsi, rbx						; save old size in rsi
 22954 00011AD1 4883C303                	add rbx, 3
 22955 00011AD5 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 22956 00011ADD B902000000              	mov rcx, 2
 22957 00011AE2 4883C104                	add rcx, 4				; num of iterations in rcx
 22958                                  .L_tc_recycle_frame_loop_0395:
 22959 00011AE6 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 22960 00011AEE 488B143C                	mov rdx, [rsp + rdi]
 22961 00011AF2 4889541D00              	mov [rbp + rbx], rdx
 22962 00011AF7 4883EB08                	sub rbx, 8
 22963 00011AFB 48FFC9                  	dec rcx
 22964 00011AFE 4883F900                	cmp rcx, 0
 22965 00011B02 75E2                    	jne .L_tc_recycle_frame_loop_0395
 22966 00011B04 4889F3                  	mov rbx, rsi
 22967 00011B07 4883EB02                	sub rbx, 2
 22968 00011B0B 488D1CDD00000000        	lea rbx, [rbx*8]
 22969 00011B13 4801DD                  	add rbp, rbx
 22970 00011B16 4889EC                  	mov rsp, rbp         ; fix stack pointers
 22971 00011B19 5D                      	pop rbp
 22972 00011B1A 41FFE0                  	jmp r8
 22973 00011B1D C9                      	leave
 22974 00011B1E C21800                  	ret AND_KILL_FRAME(1)
 22975                                  .L_lambda_simple_end_02b8:	; new closure is in rax
 22976 00011B21 C9                      	leave
 22977 00011B22 C21800                  	ret AND_KILL_FRAME(1)
 22978                                  .L_lambda_simple_end_02b5:	; new closure is in rax
 22979 00011B25 803804                  	cmp byte [rax], T_closure
 22980 00011B28 0F857B550000            	jne L_error_non_closure
 22981 00011B2E FF7001                  	push SOB_CLOSURE_ENV(rax)
 22982 00011B31 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22983 00011B34 48890425[15140000]      	mov qword [free_var_94], rax
 22984 00011B3C 48B8-                   	mov rax, sob_void
 22984 00011B3E [0000000000000000] 
 22985                                  
 22986 00011B46 4889C7                  	mov rdi, rax
 22987 00011B49 E859580000              	call print_sexpr_if_not_void
 22988 00011B4E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22989 00011B53 E8FA550000              	call malloc
 22990 00011B58 50                      	push rax
 22991 00011B59 BF00000000              	mov rdi, 8 * 0	; new rib
 22992 00011B5E E8EF550000              	call malloc
 22993 00011B63 50                      	push rax
 22994 00011B64 BF08000000              	mov rdi, 8 * 1	; extended env
 22995 00011B69 E8E4550000              	call malloc
 22996 00011B6E 488B7D10                	mov rdi, ENV
 22997 00011B72 BE00000000              	mov rsi, 0
 22998 00011B77 BA01000000              	mov rdx, 1
 22999                                  .L_lambda_opt_env_loop_005e:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 23000 00011B7C 4883FE00                	cmp rsi, 0
 23001 00011B80 7410                    	je .L_lambda_opt_env_end_005e
 23002 00011B82 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23003 00011B86 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23004 00011B8A 48FFC6                  	inc rsi
 23005 00011B8D 48FFC2                  	inc rdx
 23006 00011B90 EBEA                    	jmp .L_lambda_opt_env_loop_005e
 23007                                  .L_lambda_opt_env_end_005e:
 23008 00011B92 5B                      	pop rbx
 23009 00011B93 BE00000000              	mov rsi, 0
 23010                                  .L_lambda_opt_params_loop_005e:	; copy params
 23011 00011B98 4883FE00                	cmp rsi, 0
 23012 00011B9C 740E                    	je .L_lambda_opt_params_end_005e
 23013 00011B9E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23014 00011BA3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23015 00011BA7 48FFC6                  	inc rsi
 23016 00011BAA EBEC                    	jmp .L_lambda_opt_params_loop_005e
 23017                                  .L_lambda_opt_params_end_005e:
 23018 00011BAC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 23019 00011BAF 4889C3                  	mov rbx, rax
 23020 00011BB2 58                      	pop rax
 23021 00011BB3 C60004                  	mov byte [rax], T_closure
 23022 00011BB6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23023 00011BBA 48C74009[C71B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_005e
 23024 00011BC2 E963010000              	jmp .L_lambda_opt_end_005e
 23025                                  .L_lambda_opt_code_005e:	; lambda-opt body
 23026 00011BC7 48837C241000            	cmp qword [rsp + 8 * 2], 0
 23027 00011BCD 740D                    	je .L_lambda_opt_arity_check_exact_005e
 23028 00011BCF 7F48                    	jg .L_lambda_opt_arity_check_more_005e
 23029 00011BD1 FF742410                	push qword [rsp + 8 * 2]
 23030 00011BD5 6A00                    	push 0
 23031 00011BD7 E943550000              	jmp L_error_incorrect_arity_opt
 23032                                  .L_lambda_opt_arity_check_exact_005e:
 23033 00011BDC 48C744241001000000      	mov qword [rsp + 8 * 2], 1	; Update argument count (fixed params + 1 for nil)
 23034 00011BE5 41BA03000000            	mov r10, 3	; r10 = total addresses to adjust (fixed params + 3)
 23035 00011BEB FF3424                  	push qword [rsp]	; Save the top stack element
 23036 00011BEE 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
 23037                                  .L_lambda_opt_stack_shrink_loop_0118:
 23038 00011BF4 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
 23039 00011BF7 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0118	; Exit loop if all elements processed
 23040 00011BF9 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
 23041 00011BFE 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
 23042 00011C02 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
 23043 00011C07 49FFC3                  	inc r11	; Increment loop index
 23044 00011C0A EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_0118	; Jump back to loop start
 23045                                  .L_lambda_opt_stack_shrink_loop_exit_0118:
 23046 00011C0C 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
 23047 00011C14 E988000000              	jmp .L_lambda_opt_stack_adjusted_005e
 23048                                  .L_lambda_opt_arity_check_more_005e:
 23049 00011C19 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
 23050 00011C1E 4983E800                	sub r8, 0	; r8 = count of optional params
 23051 00011C22 48C744241001000000      	mov qword [rsp + 8 * 2], 1	; Update the number of params (fixed params + 1 for list opt)
 23052 00011C2B 41B900000000            	mov r9, 0	; r9 = index of optional argument list
 23053 00011C31 4E8D54C410              	lea r10, [rsp + 2 * 8 + 0 * 8 + r8 * 8]	; r10 = address of first optional param
 23054 00011C36 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
 23054 00011C38 [0100000000000000] 
 23055                                  .L_lambda_opt_stack_shrink_loop_0119:
 23056 00011C40 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
 23057 00011C43 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_0119	; Exit loop if all optional params are processed
 23058 00011C45 BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
 23059 00011C4A E803550000              	call malloc	; Allocate memory for a new pair
 23060 00011C4F 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
 23061 00011C53 49F7D9                  	neg r9	; Negate index to access in reverse
 23062 00011C56 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
 23063 00011C5A 49F7D9                  	neg r9	; Negate index back
 23064 00011C5D 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
 23065 00011C61 C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
 23066 00011C64 4989C3                  	mov r11, rax	; Update current pair to the newly created one
 23067 00011C67 49FFC1                  	inc r9	; Increment the index
 23068 00011C6A EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0119	; Repeat the loop for the next param
 23069                                  .L_lambda_opt_stack_shrink_loop_exit_0119:
 23070 00011C6C 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
 23071 00011C6F 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
 23072 00011C73 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
 23073 00011C76 4983C410                	add r12, 16	; Skip fixed params and return address
 23074 00011C7A 41BD03000000            	mov r13, 3	; r13 = loop counter (number of params, old fp, ret addr, lex env)
 23075                                  .L_lambda_opt_stack_shrink_loop_011a:
 23076 00011C80 4983FD00                	cmp r13, 0	; Check if there are more values to copy
 23077 00011C84 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_011a	; Exit loop if all values are copied
 23078 00011C86 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
 23079 00011C8A 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
 23080 00011C8D 49FFCD                  	dec r13	; Decrement the loop counter
 23081 00011C90 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
 23082 00011C94 4983EC08                	sub r12, 8	; Move the source pointer to the next location
 23083 00011C98 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_011a	; Repeat the loop for the next value
 23084                                  .L_lambda_opt_stack_shrink_loop_exit_011a:
 23085 00011C9A 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
 23086 00011C9E 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
 23087                                  .L_lambda_opt_stack_adjusted_005e:
 23088 00011CA1 C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
 23089                                  	; preparing a tail-call
 23090 00011CA5 488B4520                	mov rax, PARAM(0)	; param s
 23091 00011CA9 50                      	push rax
 23092 00011CAA 6A01                    	push 1	; arg count
 23093 00011CAC 488B0425[26140000]      	mov rax, qword [free_var_95]	; free var list->vector
 23094 00011CB4 803805                  	cmp byte [rax], T_undefined
 23095 00011CB7 0F8468530000            	je L_error_fvar_undefined
 23096 00011CBD 803804                  	cmp byte [rax], T_closure
 23097 00011CC0 0F85E3530000            	jne L_error_non_closure
 23098 00011CC6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23099 00011CC9 4C8B4009                	mov r8, qword [rax + 1 + 8]
 23100 00011CCD FF7508                  	push qword [rbp + 8]				; push old return address
 23101 00011CD0 FF7500                  	push qword [rbp]					; push old rbp
 23102                                  	;; move stack up ;;
 23103 00011CD3 488B5D18                	mov rbx, [rbp + 3*8]
 23104 00011CD7 4889DE                  	mov rsi, rbx						; save old size in rsi
 23105 00011CDA 4883C303                	add rbx, 3
 23106 00011CDE 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 23107 00011CE6 B901000000              	mov rcx, 1
 23108 00011CEB 4883C104                	add rcx, 4				; num of iterations in rcx
 23109                                  .L_tc_recycle_frame_loop_0396:
 23110 00011CEF 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 23111 00011CF7 488B143C                	mov rdx, [rsp + rdi]
 23112 00011CFB 4889541D00              	mov [rbp + rbx], rdx
 23113 00011D00 4883EB08                	sub rbx, 8
 23114 00011D04 48FFC9                  	dec rcx
 23115 00011D07 4883F900                	cmp rcx, 0
 23116 00011D0B 75E2                    	jne .L_tc_recycle_frame_loop_0396
 23117 00011D0D 4889F3                  	mov rbx, rsi
 23118 00011D10 4883EB01                	sub rbx, 1
 23119 00011D14 488D1CDD00000000        	lea rbx, [rbx*8]
 23120 00011D1C 4801DD                  	add rbp, rbx
 23121 00011D1F 4889EC                  	mov rsp, rbp         ; fix stack pointers
 23122 00011D22 5D                      	pop rbp
 23123 00011D23 41FFE0                  	jmp r8
 23124 00011D26 C9                      	leave	; Restore the previous stack frame
 23125 00011D27 C21800                  	ret AND_KILL_FRAME(1)
 23126                                  .L_lambda_opt_end_005e:	; new closure is in rax
 23127 00011D2A 48890425[23170000]      	mov qword [free_var_140], rax
 23128 00011D32 48B8-                   	mov rax, sob_void
 23128 00011D34 [0000000000000000] 
 23129                                  
 23130 00011D3C 4889C7                  	mov rdi, rax
 23131 00011D3F E863560000              	call print_sexpr_if_not_void
 23132                                  	; preparing a non-tail-call
 23133 00011D44 48B8-                   	mov rax, L_constants + 1993
 23133 00011D46 [C907000000000000] 
 23134 00011D4E 50                      	push rax
 23135 00011D4F 6A01                    	push 1	; arg count
 23136 00011D51 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23137 00011D56 E8F7530000              	call malloc
 23138 00011D5B 50                      	push rax
 23139 00011D5C BF00000000              	mov rdi, 8 * 0	; new rib
 23140 00011D61 E8EC530000              	call malloc
 23141 00011D66 50                      	push rax
 23142 00011D67 BF08000000              	mov rdi, 8 * 1	; extended env
 23143 00011D6C E8E1530000              	call malloc
 23144 00011D71 488B7D10                	mov rdi, ENV
 23145 00011D75 BE00000000              	mov rsi, 0
 23146 00011D7A BA01000000              	mov rdx, 1
 23147                                  .L_lambda_simple_env_loop_02b9:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 23148 00011D7F 4883FE00                	cmp rsi, 0
 23149 00011D83 7410                    	je .L_lambda_simple_env_end_02b9
 23150 00011D85 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23151 00011D89 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23152 00011D8D 48FFC6                  	inc rsi
 23153 00011D90 48FFC2                  	inc rdx
 23154 00011D93 EBEA                    	jmp .L_lambda_simple_env_loop_02b9
 23155                                  .L_lambda_simple_env_end_02b9:
 23156 00011D95 5B                      	pop rbx
 23157 00011D96 BE00000000              	mov rsi, 0
 23158                                  .L_lambda_simple_params_loop_02b9:	; copy params
 23159 00011D9B 4883FE00                	cmp rsi, 0
 23160 00011D9F 740E                    	je .L_lambda_simple_params_end_02b9
 23161 00011DA1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23162 00011DA6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23163 00011DAA 48FFC6                  	inc rsi
 23164 00011DAD EBEC                    	jmp .L_lambda_simple_params_loop_02b9
 23165                                  .L_lambda_simple_params_end_02b9:
 23166 00011DAF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 23167 00011DB2 4889C3                  	mov rbx, rax
 23168 00011DB5 58                      	pop rax
 23169 00011DB6 C60004                  	mov byte [rax], T_closure
 23170 00011DB9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23171 00011DBD 48C74009[CA1D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02b9
 23172 00011DC5 E96C030000              	jmp .L_lambda_simple_end_02b9
 23173                                  .L_lambda_simple_code_02b9:	; lambda-simple body
 23174 00011DCA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23175 00011DD0 740B                    	je .L_lambda_simple_arity_check_ok_02b9
 23176 00011DD2 FF742410                	push qword [rsp + 8 * 2]
 23177 00011DD6 6A01                    	push 1
 23178 00011DD8 E92E530000              	jmp L_error_incorrect_arity_simple
 23179                                  .L_lambda_simple_arity_check_ok_02b9:
 23180 00011DDD C8000000                	enter 0, 0
 23181 00011DE1 BF08000000              	mov rdi, 8
 23182 00011DE6 E867530000              	call malloc
 23183 00011DEB 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
 23184 00011DEF 488918                  	mov qword[rax], rbx
 23185 00011DF2 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 23186 00011DF6 48B8-                   	mov rax, sob_void
 23186 00011DF8 [0000000000000000] 
 23187                                  
 23188 00011E00 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23189 00011E05 E848530000              	call malloc
 23190 00011E0A 50                      	push rax
 23191 00011E0B BF08000000              	mov rdi, 8 * 1	; new rib
 23192 00011E10 E83D530000              	call malloc
 23193 00011E15 50                      	push rax
 23194 00011E16 BF10000000              	mov rdi, 8 * 2	; extended env
 23195 00011E1B E832530000              	call malloc
 23196 00011E20 488B7D10                	mov rdi, ENV
 23197 00011E24 BE00000000              	mov rsi, 0
 23198 00011E29 BA01000000              	mov rdx, 1
 23199                                  .L_lambda_simple_env_loop_02ba:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 23200 00011E2E 4883FE01                	cmp rsi, 1
 23201 00011E32 7410                    	je .L_lambda_simple_env_end_02ba
 23202 00011E34 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23203 00011E38 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23204 00011E3C 48FFC6                  	inc rsi
 23205 00011E3F 48FFC2                  	inc rdx
 23206 00011E42 EBEA                    	jmp .L_lambda_simple_env_loop_02ba
 23207                                  .L_lambda_simple_env_end_02ba:
 23208 00011E44 5B                      	pop rbx
 23209 00011E45 BE00000000              	mov rsi, 0
 23210                                  .L_lambda_simple_params_loop_02ba:	; copy params
 23211 00011E4A 4883FE01                	cmp rsi, 1
 23212 00011E4E 740E                    	je .L_lambda_simple_params_end_02ba
 23213 00011E50 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23214 00011E55 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23215 00011E59 48FFC6                  	inc rsi
 23216 00011E5C EBEC                    	jmp .L_lambda_simple_params_loop_02ba
 23217                                  .L_lambda_simple_params_end_02ba:
 23218 00011E5E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 23219 00011E61 4889C3                  	mov rbx, rax
 23220 00011E64 58                      	pop rax
 23221 00011E65 C60004                  	mov byte [rax], T_closure
 23222 00011E68 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23223 00011E6C 48C74009[791E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02ba
 23224 00011E74 E964010000              	jmp .L_lambda_simple_end_02ba
 23225                                  .L_lambda_simple_code_02ba:	; lambda-simple body
 23226 00011E79 48837C241003            	cmp qword [rsp + 8 * 2], 3
 23227 00011E7F 740B                    	je .L_lambda_simple_arity_check_ok_02ba
 23228 00011E81 FF742410                	push qword [rsp + 8 * 2]
 23229 00011E85 6A03                    	push 3
 23230 00011E87 E97F520000              	jmp L_error_incorrect_arity_simple
 23231                                  .L_lambda_simple_arity_check_ok_02ba:
 23232 00011E8C C8000000                	enter 0, 0
 23233                                  	; preparing a non-tail-call
 23234 00011E90 488B4530                	mov rax, PARAM(2)	; param n
 23235 00011E94 50                      	push rax
 23236 00011E95 488B4528                	mov rax, PARAM(1)	; param i
 23237 00011E99 50                      	push rax
 23238 00011E9A 6A02                    	push 2	; arg count
 23239 00011E9C 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 23240 00011EA4 803805                  	cmp byte [rax], T_undefined
 23241 00011EA7 0F8478510000            	je L_error_fvar_undefined
 23242 00011EAD 803804                  	cmp byte [rax], T_closure
 23243 00011EB0 0F85F3510000            	jne L_error_non_closure
 23244 00011EB6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23245 00011EB9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23246 00011EBC 483D[02000000]          	cmp rax, sob_boolean_false
 23247 00011EC2 0F8407010000            	je .L_if_else_0201
 23248                                  	; preparing a tail-call
 23249                                  	; preparing a non-tail-call
 23250 00011EC8 488B4530                	mov rax, PARAM(2)	; param n
 23251 00011ECC 50                      	push rax
 23252                                  	; preparing a non-tail-call
 23253 00011ECD 48B8-                   	mov rax, L_constants + 2270
 23253 00011ECF [DE08000000000000] 
 23254 00011ED7 50                      	push rax
 23255 00011ED8 488B4528                	mov rax, PARAM(1)	; param i
 23256 00011EDC 50                      	push rax
 23257 00011EDD 6A02                    	push 2	; arg count
 23258 00011EDF 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 23259 00011EE7 803805                  	cmp byte [rax], T_undefined
 23260 00011EEA 0F8435510000            	je L_error_fvar_undefined
 23261 00011EF0 803804                  	cmp byte [rax], T_closure
 23262 00011EF3 0F85B0510000            	jne L_error_non_closure
 23263 00011EF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23264 00011EFC FF5009                  	call SOB_CLOSURE_CODE(rax)
 23265 00011EFF 50                      	push rax
 23266 00011F00 488B4520                	mov rax, PARAM(0)	; param str
 23267 00011F04 50                      	push rax
 23268 00011F05 6A03                    	push 3	; arg count
 23269 00011F07 488B4510                	mov rax, ENV
 23270 00011F0B 488B00                  	mov rax, qword [rax + 8 * 0]
 23271 00011F0E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23272 00011F11 488B00                  	mov rax, qword [rax]
 23273 00011F14 803804                  	cmp byte [rax], T_closure
 23274 00011F17 0F858C510000            	jne L_error_non_closure
 23275 00011F1D FF7001                  	push SOB_CLOSURE_ENV(rax)
 23276 00011F20 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23277 00011F23 50                      	push rax
 23278                                  	; preparing a non-tail-call
 23279 00011F24 488B4528                	mov rax, PARAM(1)	; param i
 23280 00011F28 50                      	push rax
 23281 00011F29 488B4520                	mov rax, PARAM(0)	; param str
 23282 00011F2D 50                      	push rax
 23283 00011F2E 6A02                    	push 2	; arg count
 23284 00011F30 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 23285 00011F38 803805                  	cmp byte [rax], T_undefined
 23286 00011F3B 0F84E4500000            	je L_error_fvar_undefined
 23287 00011F41 803804                  	cmp byte [rax], T_closure
 23288 00011F44 0F855F510000            	jne L_error_non_closure
 23289 00011F4A FF7001                  	push SOB_CLOSURE_ENV(rax)
 23290 00011F4D FF5009                  	call SOB_CLOSURE_CODE(rax)
 23291 00011F50 50                      	push rax
 23292 00011F51 6A02                    	push 2	; arg count
 23293 00011F53 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
 23294 00011F5B 803805                  	cmp byte [rax], T_undefined
 23295 00011F5E 0F84C1500000            	je L_error_fvar_undefined
 23296 00011F64 803804                  	cmp byte [rax], T_closure
 23297 00011F67 0F853C510000            	jne L_error_non_closure
 23298 00011F6D FF7001                  	push SOB_CLOSURE_ENV(rax)
 23299 00011F70 4C8B4009                	mov r8, qword [rax + 1 + 8]
 23300 00011F74 FF7508                  	push qword [rbp + 8]				; push old return address
 23301 00011F77 FF7500                  	push qword [rbp]					; push old rbp
 23302                                  	;; move stack up ;;
 23303 00011F7A 488B5D18                	mov rbx, [rbp + 3*8]
 23304 00011F7E 4889DE                  	mov rsi, rbx						; save old size in rsi
 23305 00011F81 4883C303                	add rbx, 3
 23306 00011F85 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 23307 00011F8D B902000000              	mov rcx, 2
 23308 00011F92 4883C104                	add rcx, 4				; num of iterations in rcx
 23309                                  .L_tc_recycle_frame_loop_0397:
 23310 00011F96 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 23311 00011F9E 488B143C                	mov rdx, [rsp + rdi]
 23312 00011FA2 4889541D00              	mov [rbp + rbx], rdx
 23313 00011FA7 4883EB08                	sub rbx, 8
 23314 00011FAB 48FFC9                  	dec rcx
 23315 00011FAE 4883F900                	cmp rcx, 0
 23316 00011FB2 75E2                    	jne .L_tc_recycle_frame_loop_0397
 23317 00011FB4 4889F3                  	mov rbx, rsi
 23318 00011FB7 4883EB02                	sub rbx, 2
 23319 00011FBB 488D1CDD00000000        	lea rbx, [rbx*8]
 23320 00011FC3 4801DD                  	add rbp, rbx
 23321 00011FC6 4889EC                  	mov rsp, rbp         ; fix stack pointers
 23322 00011FC9 5D                      	pop rbp
 23323 00011FCA 41FFE0                  	jmp r8
 23324 00011FCD EB0A                    	jmp .L_if_end_0201
 23325                                  .L_if_else_0201:
 23326 00011FCF 48B8-                   	mov rax, L_constants + 1
 23326 00011FD1 [0100000000000000] 
 23327                                  .L_if_end_0201:
 23328 00011FD9 C9                      	leave
 23329 00011FDA C22800                  	ret AND_KILL_FRAME(3)
 23330                                  .L_lambda_simple_end_02ba:	; new closure is in rax
 23331 00011FDD 50                      	push rax
 23332 00011FDE 488B4520                	mov rax, PARAM(0)	; param run
 23333 00011FE2 8F00                    	pop qword [rax]
 23334 00011FE4 48B8-                   	mov rax, sob_void
 23334 00011FE6 [0000000000000000] 
 23335                                  
 23336 00011FEE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23337 00011FF3 E85A510000              	call malloc
 23338 00011FF8 50                      	push rax
 23339 00011FF9 BF08000000              	mov rdi, 8 * 1	; new rib
 23340 00011FFE E84F510000              	call malloc
 23341 00012003 50                      	push rax
 23342 00012004 BF10000000              	mov rdi, 8 * 2	; extended env
 23343 00012009 E844510000              	call malloc
 23344 0001200E 488B7D10                	mov rdi, ENV
 23345 00012012 BE00000000              	mov rsi, 0
 23346 00012017 BA01000000              	mov rdx, 1
 23347                                  .L_lambda_simple_env_loop_02bb:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 23348 0001201C 4883FE01                	cmp rsi, 1
 23349 00012020 7410                    	je .L_lambda_simple_env_end_02bb
 23350 00012022 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23351 00012026 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23352 0001202A 48FFC6                  	inc rsi
 23353 0001202D 48FFC2                  	inc rdx
 23354 00012030 EBEA                    	jmp .L_lambda_simple_env_loop_02bb
 23355                                  .L_lambda_simple_env_end_02bb:
 23356 00012032 5B                      	pop rbx
 23357 00012033 BE00000000              	mov rsi, 0
 23358                                  .L_lambda_simple_params_loop_02bb:	; copy params
 23359 00012038 4883FE01                	cmp rsi, 1
 23360 0001203C 740E                    	je .L_lambda_simple_params_end_02bb
 23361 0001203E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23362 00012043 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23363 00012047 48FFC6                  	inc rsi
 23364 0001204A EBEC                    	jmp .L_lambda_simple_params_loop_02bb
 23365                                  .L_lambda_simple_params_end_02bb:
 23366 0001204C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 23367 0001204F 4889C3                  	mov rbx, rax
 23368 00012052 58                      	pop rax
 23369 00012053 C60004                  	mov byte [rax], T_closure
 23370 00012056 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23371 0001205A 48C74009[67200100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02bb
 23372 00012062 E9CB000000              	jmp .L_lambda_simple_end_02bb
 23373                                  .L_lambda_simple_code_02bb:	; lambda-simple body
 23374 00012067 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23375 0001206D 740B                    	je .L_lambda_simple_arity_check_ok_02bb
 23376 0001206F FF742410                	push qword [rsp + 8 * 2]
 23377 00012073 6A01                    	push 1
 23378 00012075 E991500000              	jmp L_error_incorrect_arity_simple
 23379                                  .L_lambda_simple_arity_check_ok_02bb:
 23380 0001207A C8000000                	enter 0, 0
 23381                                  	; preparing a tail-call
 23382                                  	; preparing a non-tail-call
 23383 0001207E 488B4520                	mov rax, PARAM(0)	; param str
 23384 00012082 50                      	push rax
 23385 00012083 6A01                    	push 1	; arg count
 23386 00012085 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 23387 0001208D 803805                  	cmp byte [rax], T_undefined
 23388 00012090 0F848F4F0000            	je L_error_fvar_undefined
 23389 00012096 803804                  	cmp byte [rax], T_closure
 23390 00012099 0F850A500000            	jne L_error_non_closure
 23391 0001209F FF7001                  	push SOB_CLOSURE_ENV(rax)
 23392 000120A2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23393 000120A5 50                      	push rax
 23394 000120A6 48B8-                   	mov rax, L_constants + 2135
 23394 000120A8 [5708000000000000] 
 23395 000120B0 50                      	push rax
 23396 000120B1 488B4520                	mov rax, PARAM(0)	; param str
 23397 000120B5 50                      	push rax
 23398 000120B6 6A03                    	push 3	; arg count
 23399 000120B8 488B4510                	mov rax, ENV
 23400 000120BC 488B00                  	mov rax, qword [rax + 8 * 0]
 23401 000120BF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23402 000120C2 488B00                  	mov rax, qword [rax]
 23403 000120C5 803804                  	cmp byte [rax], T_closure
 23404 000120C8 0F85DB4F0000            	jne L_error_non_closure
 23405 000120CE FF7001                  	push SOB_CLOSURE_ENV(rax)
 23406 000120D1 4C8B4009                	mov r8, qword [rax + 1 + 8]
 23407 000120D5 FF7508                  	push qword [rbp + 8]				; push old return address
 23408 000120D8 FF7500                  	push qword [rbp]					; push old rbp
 23409                                  	;; move stack up ;;
 23410 000120DB 488B5D18                	mov rbx, [rbp + 3*8]
 23411 000120DF 4889DE                  	mov rsi, rbx						; save old size in rsi
 23412 000120E2 4883C303                	add rbx, 3
 23413 000120E6 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 23414 000120EE B903000000              	mov rcx, 3
 23415 000120F3 4883C104                	add rcx, 4				; num of iterations in rcx
 23416                                  .L_tc_recycle_frame_loop_0398:
 23417 000120F7 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 23418 000120FF 488B143C                	mov rdx, [rsp + rdi]
 23419 00012103 4889541D00              	mov [rbp + rbx], rdx
 23420 00012108 4883EB08                	sub rbx, 8
 23421 0001210C 48FFC9                  	dec rcx
 23422 0001210F 4883F900                	cmp rcx, 0
 23423 00012113 75E2                    	jne .L_tc_recycle_frame_loop_0398
 23424 00012115 4889F3                  	mov rbx, rsi
 23425 00012118 4883EB03                	sub rbx, 3
 23426 0001211C 488D1CDD00000000        	lea rbx, [rbx*8]
 23427 00012124 4801DD                  	add rbp, rbx
 23428 00012127 4889EC                  	mov rsp, rbp         ; fix stack pointers
 23429 0001212A 5D                      	pop rbp
 23430 0001212B 41FFE0                  	jmp r8
 23431 0001212E C9                      	leave
 23432 0001212F C21800                  	ret AND_KILL_FRAME(1)
 23433                                  .L_lambda_simple_end_02bb:	; new closure is in rax
 23434 00012132 C9                      	leave
 23435 00012133 C21800                  	ret AND_KILL_FRAME(1)
 23436                                  .L_lambda_simple_end_02b9:	; new closure is in rax
 23437 00012136 803804                  	cmp byte [rax], T_closure
 23438 00012139 0F856A4F0000            	jne L_error_non_closure
 23439 0001213F FF7001                  	push SOB_CLOSURE_ENV(rax)
 23440 00012142 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23441 00012145 48890425[BE150000]      	mov qword [free_var_119], rax
 23442 0001214D 48B8-                   	mov rax, sob_void
 23442 0001214F [0000000000000000] 
 23443                                  
 23444 00012157 4889C7                  	mov rdi, rax
 23445 0001215A E848520000              	call print_sexpr_if_not_void
 23446                                  	; preparing a non-tail-call
 23447 0001215F 48B8-                   	mov rax, L_constants + 1993
 23447 00012161 [C907000000000000] 
 23448 00012169 50                      	push rax
 23449 0001216A 6A01                    	push 1	; arg count
 23450 0001216C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23451 00012171 E8DC4F0000              	call malloc
 23452 00012176 50                      	push rax
 23453 00012177 BF00000000              	mov rdi, 8 * 0	; new rib
 23454 0001217C E8D14F0000              	call malloc
 23455 00012181 50                      	push rax
 23456 00012182 BF08000000              	mov rdi, 8 * 1	; extended env
 23457 00012187 E8C64F0000              	call malloc
 23458 0001218C 488B7D10                	mov rdi, ENV
 23459 00012190 BE00000000              	mov rsi, 0
 23460 00012195 BA01000000              	mov rdx, 1
 23461                                  .L_lambda_simple_env_loop_02bc:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 23462 0001219A 4883FE00                	cmp rsi, 0
 23463 0001219E 7410                    	je .L_lambda_simple_env_end_02bc
 23464 000121A0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23465 000121A4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23466 000121A8 48FFC6                  	inc rsi
 23467 000121AB 48FFC2                  	inc rdx
 23468 000121AE EBEA                    	jmp .L_lambda_simple_env_loop_02bc
 23469                                  .L_lambda_simple_env_end_02bc:
 23470 000121B0 5B                      	pop rbx
 23471 000121B1 BE00000000              	mov rsi, 0
 23472                                  .L_lambda_simple_params_loop_02bc:	; copy params
 23473 000121B6 4883FE00                	cmp rsi, 0
 23474 000121BA 740E                    	je .L_lambda_simple_params_end_02bc
 23475 000121BC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23476 000121C1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23477 000121C5 48FFC6                  	inc rsi
 23478 000121C8 EBEC                    	jmp .L_lambda_simple_params_loop_02bc
 23479                                  .L_lambda_simple_params_end_02bc:
 23480 000121CA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 23481 000121CD 4889C3                  	mov rbx, rax
 23482 000121D0 58                      	pop rax
 23483 000121D1 C60004                  	mov byte [rax], T_closure
 23484 000121D4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23485 000121D8 48C74009[E5210100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02bc
 23486 000121E0 E96C030000              	jmp .L_lambda_simple_end_02bc
 23487                                  .L_lambda_simple_code_02bc:	; lambda-simple body
 23488 000121E5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23489 000121EB 740B                    	je .L_lambda_simple_arity_check_ok_02bc
 23490 000121ED FF742410                	push qword [rsp + 8 * 2]
 23491 000121F1 6A01                    	push 1
 23492 000121F3 E9134F0000              	jmp L_error_incorrect_arity_simple
 23493                                  .L_lambda_simple_arity_check_ok_02bc:
 23494 000121F8 C8000000                	enter 0, 0
 23495 000121FC BF08000000              	mov rdi, 8
 23496 00012201 E84C4F0000              	call malloc
 23497 00012206 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
 23498 0001220A 488918                  	mov qword[rax], rbx
 23499 0001220D 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 23500 00012211 48B8-                   	mov rax, sob_void
 23500 00012213 [0000000000000000] 
 23501                                  
 23502 0001221B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23503 00012220 E82D4F0000              	call malloc
 23504 00012225 50                      	push rax
 23505 00012226 BF08000000              	mov rdi, 8 * 1	; new rib
 23506 0001222B E8224F0000              	call malloc
 23507 00012230 50                      	push rax
 23508 00012231 BF10000000              	mov rdi, 8 * 2	; extended env
 23509 00012236 E8174F0000              	call malloc
 23510 0001223B 488B7D10                	mov rdi, ENV
 23511 0001223F BE00000000              	mov rsi, 0
 23512 00012244 BA01000000              	mov rdx, 1
 23513                                  .L_lambda_simple_env_loop_02bd:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 23514 00012249 4883FE01                	cmp rsi, 1
 23515 0001224D 7410                    	je .L_lambda_simple_env_end_02bd
 23516 0001224F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23517 00012253 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23518 00012257 48FFC6                  	inc rsi
 23519 0001225A 48FFC2                  	inc rdx
 23520 0001225D EBEA                    	jmp .L_lambda_simple_env_loop_02bd
 23521                                  .L_lambda_simple_env_end_02bd:
 23522 0001225F 5B                      	pop rbx
 23523 00012260 BE00000000              	mov rsi, 0
 23524                                  .L_lambda_simple_params_loop_02bd:	; copy params
 23525 00012265 4883FE01                	cmp rsi, 1
 23526 00012269 740E                    	je .L_lambda_simple_params_end_02bd
 23527 0001226B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23528 00012270 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23529 00012274 48FFC6                  	inc rsi
 23530 00012277 EBEC                    	jmp .L_lambda_simple_params_loop_02bd
 23531                                  .L_lambda_simple_params_end_02bd:
 23532 00012279 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 23533 0001227C 4889C3                  	mov rbx, rax
 23534 0001227F 58                      	pop rax
 23535 00012280 C60004                  	mov byte [rax], T_closure
 23536 00012283 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23537 00012287 48C74009[94220100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02bd
 23538 0001228F E964010000              	jmp .L_lambda_simple_end_02bd
 23539                                  .L_lambda_simple_code_02bd:	; lambda-simple body
 23540 00012294 48837C241003            	cmp qword [rsp + 8 * 2], 3
 23541 0001229A 740B                    	je .L_lambda_simple_arity_check_ok_02bd
 23542 0001229C FF742410                	push qword [rsp + 8 * 2]
 23543 000122A0 6A03                    	push 3
 23544 000122A2 E9644E0000              	jmp L_error_incorrect_arity_simple
 23545                                  .L_lambda_simple_arity_check_ok_02bd:
 23546 000122A7 C8000000                	enter 0, 0
 23547                                  	; preparing a non-tail-call
 23548 000122AB 488B4530                	mov rax, PARAM(2)	; param n
 23549 000122AF 50                      	push rax
 23550 000122B0 488B4528                	mov rax, PARAM(1)	; param i
 23551 000122B4 50                      	push rax
 23552 000122B5 6A02                    	push 2	; arg count
 23553 000122B7 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 23554 000122BF 803805                  	cmp byte [rax], T_undefined
 23555 000122C2 0F845D4D0000            	je L_error_fvar_undefined
 23556 000122C8 803804                  	cmp byte [rax], T_closure
 23557 000122CB 0F85D84D0000            	jne L_error_non_closure
 23558 000122D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23559 000122D4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23560 000122D7 483D[02000000]          	cmp rax, sob_boolean_false
 23561 000122DD 0F8407010000            	je .L_if_else_0202
 23562                                  	; preparing a tail-call
 23563                                  	; preparing a non-tail-call
 23564 000122E3 488B4530                	mov rax, PARAM(2)	; param n
 23565 000122E7 50                      	push rax
 23566                                  	; preparing a non-tail-call
 23567 000122E8 48B8-                   	mov rax, L_constants + 2270
 23567 000122EA [DE08000000000000] 
 23568 000122F2 50                      	push rax
 23569 000122F3 488B4528                	mov rax, PARAM(1)	; param i
 23570 000122F7 50                      	push rax
 23571 000122F8 6A02                    	push 2	; arg count
 23572 000122FA 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 23573 00012302 803805                  	cmp byte [rax], T_undefined
 23574 00012305 0F841A4D0000            	je L_error_fvar_undefined
 23575 0001230B 803804                  	cmp byte [rax], T_closure
 23576 0001230E 0F85954D0000            	jne L_error_non_closure
 23577 00012314 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23578 00012317 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23579 0001231A 50                      	push rax
 23580 0001231B 488B4520                	mov rax, PARAM(0)	; param v
 23581 0001231F 50                      	push rax
 23582 00012320 6A03                    	push 3	; arg count
 23583 00012322 488B4510                	mov rax, ENV
 23584 00012326 488B00                  	mov rax, qword [rax + 8 * 0]
 23585 00012329 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23586 0001232C 488B00                  	mov rax, qword [rax]
 23587 0001232F 803804                  	cmp byte [rax], T_closure
 23588 00012332 0F85714D0000            	jne L_error_non_closure
 23589 00012338 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23590 0001233B FF5009                  	call SOB_CLOSURE_CODE(rax)
 23591 0001233E 50                      	push rax
 23592                                  	; preparing a non-tail-call
 23593 0001233F 488B4528                	mov rax, PARAM(1)	; param i
 23594 00012343 50                      	push rax
 23595 00012344 488B4520                	mov rax, PARAM(0)	; param v
 23596 00012348 50                      	push rax
 23597 00012349 6A02                    	push 2	; arg count
 23598 0001234B 488B0425[67170000]      	mov rax, qword [free_var_144]	; free var vector-ref
 23599 00012353 803805                  	cmp byte [rax], T_undefined
 23600 00012356 0F84C94C0000            	je L_error_fvar_undefined
 23601 0001235C 803804                  	cmp byte [rax], T_closure
 23602 0001235F 0F85444D0000            	jne L_error_non_closure
 23603 00012365 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23604 00012368 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23605 0001236B 50                      	push rax
 23606 0001236C 6A02                    	push 2	; arg count
 23607 0001236E 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
 23608 00012376 803805                  	cmp byte [rax], T_undefined
 23609 00012379 0F84A64C0000            	je L_error_fvar_undefined
 23610 0001237F 803804                  	cmp byte [rax], T_closure
 23611 00012382 0F85214D0000            	jne L_error_non_closure
 23612 00012388 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23613 0001238B 4C8B4009                	mov r8, qword [rax + 1 + 8]
 23614 0001238F FF7508                  	push qword [rbp + 8]				; push old return address
 23615 00012392 FF7500                  	push qword [rbp]					; push old rbp
 23616                                  	;; move stack up ;;
 23617 00012395 488B5D18                	mov rbx, [rbp + 3*8]
 23618 00012399 4889DE                  	mov rsi, rbx						; save old size in rsi
 23619 0001239C 4883C303                	add rbx, 3
 23620 000123A0 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 23621 000123A8 B902000000              	mov rcx, 2
 23622 000123AD 4883C104                	add rcx, 4				; num of iterations in rcx
 23623                                  .L_tc_recycle_frame_loop_0399:
 23624 000123B1 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 23625 000123B9 488B143C                	mov rdx, [rsp + rdi]
 23626 000123BD 4889541D00              	mov [rbp + rbx], rdx
 23627 000123C2 4883EB08                	sub rbx, 8
 23628 000123C6 48FFC9                  	dec rcx
 23629 000123C9 4883F900                	cmp rcx, 0
 23630 000123CD 75E2                    	jne .L_tc_recycle_frame_loop_0399
 23631 000123CF 4889F3                  	mov rbx, rsi
 23632 000123D2 4883EB02                	sub rbx, 2
 23633 000123D6 488D1CDD00000000        	lea rbx, [rbx*8]
 23634 000123DE 4801DD                  	add rbp, rbx
 23635 000123E1 4889EC                  	mov rsp, rbp         ; fix stack pointers
 23636 000123E4 5D                      	pop rbp
 23637 000123E5 41FFE0                  	jmp r8
 23638 000123E8 EB0A                    	jmp .L_if_end_0202
 23639                                  .L_if_else_0202:
 23640 000123EA 48B8-                   	mov rax, L_constants + 1
 23640 000123EC [0100000000000000] 
 23641                                  .L_if_end_0202:
 23642 000123F4 C9                      	leave
 23643 000123F5 C22800                  	ret AND_KILL_FRAME(3)
 23644                                  .L_lambda_simple_end_02bd:	; new closure is in rax
 23645 000123F8 50                      	push rax
 23646 000123F9 488B4520                	mov rax, PARAM(0)	; param run
 23647 000123FD 8F00                    	pop qword [rax]
 23648 000123FF 48B8-                   	mov rax, sob_void
 23648 00012401 [0000000000000000] 
 23649                                  
 23650 00012409 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23651 0001240E E83F4D0000              	call malloc
 23652 00012413 50                      	push rax
 23653 00012414 BF08000000              	mov rdi, 8 * 1	; new rib
 23654 00012419 E8344D0000              	call malloc
 23655 0001241E 50                      	push rax
 23656 0001241F BF10000000              	mov rdi, 8 * 2	; extended env
 23657 00012424 E8294D0000              	call malloc
 23658 00012429 488B7D10                	mov rdi, ENV
 23659 0001242D BE00000000              	mov rsi, 0
 23660 00012432 BA01000000              	mov rdx, 1
 23661                                  .L_lambda_simple_env_loop_02be:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 23662 00012437 4883FE01                	cmp rsi, 1
 23663 0001243B 7410                    	je .L_lambda_simple_env_end_02be
 23664 0001243D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23665 00012441 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23666 00012445 48FFC6                  	inc rsi
 23667 00012448 48FFC2                  	inc rdx
 23668 0001244B EBEA                    	jmp .L_lambda_simple_env_loop_02be
 23669                                  .L_lambda_simple_env_end_02be:
 23670 0001244D 5B                      	pop rbx
 23671 0001244E BE00000000              	mov rsi, 0
 23672                                  .L_lambda_simple_params_loop_02be:	; copy params
 23673 00012453 4883FE01                	cmp rsi, 1
 23674 00012457 740E                    	je .L_lambda_simple_params_end_02be
 23675 00012459 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23676 0001245E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23677 00012462 48FFC6                  	inc rsi
 23678 00012465 EBEC                    	jmp .L_lambda_simple_params_loop_02be
 23679                                  .L_lambda_simple_params_end_02be:
 23680 00012467 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 23681 0001246A 4889C3                  	mov rbx, rax
 23682 0001246D 58                      	pop rax
 23683 0001246E C60004                  	mov byte [rax], T_closure
 23684 00012471 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23685 00012475 48C74009[82240100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02be
 23686 0001247D E9CB000000              	jmp .L_lambda_simple_end_02be
 23687                                  .L_lambda_simple_code_02be:	; lambda-simple body
 23688 00012482 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23689 00012488 740B                    	je .L_lambda_simple_arity_check_ok_02be
 23690 0001248A FF742410                	push qword [rsp + 8 * 2]
 23691 0001248E 6A01                    	push 1
 23692 00012490 E9764C0000              	jmp L_error_incorrect_arity_simple
 23693                                  .L_lambda_simple_arity_check_ok_02be:
 23694 00012495 C8000000                	enter 0, 0
 23695                                  	; preparing a tail-call
 23696                                  	; preparing a non-tail-call
 23697 00012499 488B4520                	mov rax, PARAM(0)	; param v
 23698 0001249D 50                      	push rax
 23699 0001249E 6A01                    	push 1	; arg count
 23700 000124A0 488B0425[56170000]      	mov rax, qword [free_var_143]	; free var vector-length
 23701 000124A8 803805                  	cmp byte [rax], T_undefined
 23702 000124AB 0F84744B0000            	je L_error_fvar_undefined
 23703 000124B1 803804                  	cmp byte [rax], T_closure
 23704 000124B4 0F85EF4B0000            	jne L_error_non_closure
 23705 000124BA FF7001                  	push SOB_CLOSURE_ENV(rax)
 23706 000124BD FF5009                  	call SOB_CLOSURE_CODE(rax)
 23707 000124C0 50                      	push rax
 23708 000124C1 48B8-                   	mov rax, L_constants + 2135
 23708 000124C3 [5708000000000000] 
 23709 000124CB 50                      	push rax
 23710 000124CC 488B4520                	mov rax, PARAM(0)	; param v
 23711 000124D0 50                      	push rax
 23712 000124D1 6A03                    	push 3	; arg count
 23713 000124D3 488B4510                	mov rax, ENV
 23714 000124D7 488B00                  	mov rax, qword [rax + 8 * 0]
 23715 000124DA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23716 000124DD 488B00                  	mov rax, qword [rax]
 23717 000124E0 803804                  	cmp byte [rax], T_closure
 23718 000124E3 0F85C04B0000            	jne L_error_non_closure
 23719 000124E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23720 000124EC 4C8B4009                	mov r8, qword [rax + 1 + 8]
 23721 000124F0 FF7508                  	push qword [rbp + 8]				; push old return address
 23722 000124F3 FF7500                  	push qword [rbp]					; push old rbp
 23723                                  	;; move stack up ;;
 23724 000124F6 488B5D18                	mov rbx, [rbp + 3*8]
 23725 000124FA 4889DE                  	mov rsi, rbx						; save old size in rsi
 23726 000124FD 4883C303                	add rbx, 3
 23727 00012501 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 23728 00012509 B903000000              	mov rcx, 3
 23729 0001250E 4883C104                	add rcx, 4				; num of iterations in rcx
 23730                                  .L_tc_recycle_frame_loop_039a:
 23731 00012512 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 23732 0001251A 488B143C                	mov rdx, [rsp + rdi]
 23733 0001251E 4889541D00              	mov [rbp + rbx], rdx
 23734 00012523 4883EB08                	sub rbx, 8
 23735 00012527 48FFC9                  	dec rcx
 23736 0001252A 4883F900                	cmp rcx, 0
 23737 0001252E 75E2                    	jne .L_tc_recycle_frame_loop_039a
 23738 00012530 4889F3                  	mov rbx, rsi
 23739 00012533 4883EB03                	sub rbx, 3
 23740 00012537 488D1CDD00000000        	lea rbx, [rbx*8]
 23741 0001253F 4801DD                  	add rbp, rbx
 23742 00012542 4889EC                  	mov rsp, rbp         ; fix stack pointers
 23743 00012545 5D                      	pop rbp
 23744 00012546 41FFE0                  	jmp r8
 23745 00012549 C9                      	leave
 23746 0001254A C21800                  	ret AND_KILL_FRAME(1)
 23747                                  .L_lambda_simple_end_02be:	; new closure is in rax
 23748 0001254D C9                      	leave
 23749 0001254E C21800                  	ret AND_KILL_FRAME(1)
 23750                                  .L_lambda_simple_end_02bc:	; new closure is in rax
 23751 00012551 803804                  	cmp byte [rax], T_closure
 23752 00012554 0F854F4B0000            	jne L_error_non_closure
 23753 0001255A FF7001                  	push SOB_CLOSURE_ENV(rax)
 23754 0001255D FF5009                  	call SOB_CLOSURE_CODE(rax)
 23755 00012560 48890425[34170000]      	mov qword [free_var_141], rax
 23756 00012568 48B8-                   	mov rax, sob_void
 23756 0001256A [0000000000000000] 
 23757                                  
 23758 00012572 4889C7                  	mov rdi, rax
 23759 00012575 E82D4E0000              	call print_sexpr_if_not_void
 23760 0001257A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23761 0001257F E8CE4B0000              	call malloc
 23762 00012584 50                      	push rax
 23763 00012585 BF00000000              	mov rdi, 8 * 0	; new rib
 23764 0001258A E8C34B0000              	call malloc
 23765 0001258F 50                      	push rax
 23766 00012590 BF08000000              	mov rdi, 8 * 1	; extended env
 23767 00012595 E8B84B0000              	call malloc
 23768 0001259A 488B7D10                	mov rdi, ENV
 23769 0001259E BE00000000              	mov rsi, 0
 23770 000125A3 BA01000000              	mov rdx, 1
 23771                                  .L_lambda_simple_env_loop_02bf:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 23772 000125A8 4883FE00                	cmp rsi, 0
 23773 000125AC 7410                    	je .L_lambda_simple_env_end_02bf
 23774 000125AE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23775 000125B2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23776 000125B6 48FFC6                  	inc rsi
 23777 000125B9 48FFC2                  	inc rdx
 23778 000125BC EBEA                    	jmp .L_lambda_simple_env_loop_02bf
 23779                                  .L_lambda_simple_env_end_02bf:
 23780 000125BE 5B                      	pop rbx
 23781 000125BF BE00000000              	mov rsi, 0
 23782                                  .L_lambda_simple_params_loop_02bf:	; copy params
 23783 000125C4 4883FE00                	cmp rsi, 0
 23784 000125C8 740E                    	je .L_lambda_simple_params_end_02bf
 23785 000125CA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23786 000125CF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23787 000125D3 48FFC6                  	inc rsi
 23788 000125D6 EBEC                    	jmp .L_lambda_simple_params_loop_02bf
 23789                                  .L_lambda_simple_params_end_02bf:
 23790 000125D8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 23791 000125DB 4889C3                  	mov rbx, rax
 23792 000125DE 58                      	pop rax
 23793 000125DF C60004                  	mov byte [rax], T_closure
 23794 000125E2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23795 000125E6 48C74009[F3250100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02bf
 23796 000125EE E9BF000000              	jmp .L_lambda_simple_end_02bf
 23797                                  .L_lambda_simple_code_02bf:	; lambda-simple body
 23798 000125F3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23799 000125F9 740B                    	je .L_lambda_simple_arity_check_ok_02bf
 23800 000125FB FF742410                	push qword [rsp + 8 * 2]
 23801 000125FF 6A01                    	push 1
 23802 00012601 E9054B0000              	jmp L_error_incorrect_arity_simple
 23803                                  .L_lambda_simple_arity_check_ok_02bf:
 23804 00012606 C8000000                	enter 0, 0
 23805                                  	; preparing a tail-call
 23806 0001260A 488B4520                	mov rax, PARAM(0)	; param n
 23807 0001260E 50                      	push rax
 23808                                  	; preparing a non-tail-call
 23809 0001260F 6A00                    	push 0	; arg count
 23810 00012611 488B0425[12170000]      	mov rax, qword [free_var_139]	; free var trng
 23811 00012619 803805                  	cmp byte [rax], T_undefined
 23812 0001261C 0F84034A0000            	je L_error_fvar_undefined
 23813 00012622 803804                  	cmp byte [rax], T_closure
 23814 00012625 0F857E4A0000            	jne L_error_non_closure
 23815 0001262B FF7001                  	push SOB_CLOSURE_ENV(rax)
 23816 0001262E FF5009                  	call SOB_CLOSURE_CODE(rax)
 23817 00012631 50                      	push rax
 23818 00012632 6A02                    	push 2	; arg count
 23819 00012634 488B0425[9C150000]      	mov rax, qword [free_var_117]	; free var remainder
 23820 0001263C 803805                  	cmp byte [rax], T_undefined
 23821 0001263F 0F84E0490000            	je L_error_fvar_undefined
 23822 00012645 803804                  	cmp byte [rax], T_closure
 23823 00012648 0F855B4A0000            	jne L_error_non_closure
 23824 0001264E FF7001                  	push SOB_CLOSURE_ENV(rax)
 23825 00012651 4C8B4009                	mov r8, qword [rax + 1 + 8]
 23826 00012655 FF7508                  	push qword [rbp + 8]				; push old return address
 23827 00012658 FF7500                  	push qword [rbp]					; push old rbp
 23828                                  	;; move stack up ;;
 23829 0001265B 488B5D18                	mov rbx, [rbp + 3*8]
 23830 0001265F 4889DE                  	mov rsi, rbx						; save old size in rsi
 23831 00012662 4883C303                	add rbx, 3
 23832 00012666 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 23833 0001266E B902000000              	mov rcx, 2
 23834 00012673 4883C104                	add rcx, 4				; num of iterations in rcx
 23835                                  .L_tc_recycle_frame_loop_039b:
 23836 00012677 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 23837 0001267F 488B143C                	mov rdx, [rsp + rdi]
 23838 00012683 4889541D00              	mov [rbp + rbx], rdx
 23839 00012688 4883EB08                	sub rbx, 8
 23840 0001268C 48FFC9                  	dec rcx
 23841 0001268F 4883F900                	cmp rcx, 0
 23842 00012693 75E2                    	jne .L_tc_recycle_frame_loop_039b
 23843 00012695 4889F3                  	mov rbx, rsi
 23844 00012698 4883EB02                	sub rbx, 2
 23845 0001269C 488D1CDD00000000        	lea rbx, [rbx*8]
 23846 000126A4 4801DD                  	add rbp, rbx
 23847 000126A7 4889EC                  	mov rsp, rbp         ; fix stack pointers
 23848 000126AA 5D                      	pop rbp
 23849 000126AB 41FFE0                  	jmp r8
 23850 000126AE C9                      	leave
 23851 000126AF C21800                  	ret AND_KILL_FRAME(1)
 23852                                  .L_lambda_simple_end_02bf:	; new closure is in rax
 23853 000126B2 48890425[58150000]      	mov qword [free_var_113], rax
 23854 000126BA 48B8-                   	mov rax, sob_void
 23854 000126BC [0000000000000000] 
 23855                                  
 23856 000126C4 4889C7                  	mov rdi, rax
 23857 000126C7 E8DB4C0000              	call print_sexpr_if_not_void
 23858 000126CC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23859 000126D1 E87C4A0000              	call malloc
 23860 000126D6 50                      	push rax
 23861 000126D7 BF00000000              	mov rdi, 8 * 0	; new rib
 23862 000126DC E8714A0000              	call malloc
 23863 000126E1 50                      	push rax
 23864 000126E2 BF08000000              	mov rdi, 8 * 1	; extended env
 23865 000126E7 E8664A0000              	call malloc
 23866 000126EC 488B7D10                	mov rdi, ENV
 23867 000126F0 BE00000000              	mov rsi, 0
 23868 000126F5 BA01000000              	mov rdx, 1
 23869                                  .L_lambda_simple_env_loop_02c0:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 23870 000126FA 4883FE00                	cmp rsi, 0
 23871 000126FE 7410                    	je .L_lambda_simple_env_end_02c0
 23872 00012700 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23873 00012704 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23874 00012708 48FFC6                  	inc rsi
 23875 0001270B 48FFC2                  	inc rdx
 23876 0001270E EBEA                    	jmp .L_lambda_simple_env_loop_02c0
 23877                                  .L_lambda_simple_env_end_02c0:
 23878 00012710 5B                      	pop rbx
 23879 00012711 BE00000000              	mov rsi, 0
 23880                                  .L_lambda_simple_params_loop_02c0:	; copy params
 23881 00012716 4883FE00                	cmp rsi, 0
 23882 0001271A 740E                    	je .L_lambda_simple_params_end_02c0
 23883 0001271C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23884 00012721 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23885 00012725 48FFC6                  	inc rsi
 23886 00012728 EBEC                    	jmp .L_lambda_simple_params_loop_02c0
 23887                                  .L_lambda_simple_params_end_02c0:
 23888 0001272A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 23889 0001272D 4889C3                  	mov rbx, rax
 23890 00012730 58                      	pop rax
 23891 00012731 C60004                  	mov byte [rax], T_closure
 23892 00012734 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23893 00012738 48C74009[45270100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02c0
 23894 00012740 E9A7000000              	jmp .L_lambda_simple_end_02c0
 23895                                  .L_lambda_simple_code_02c0:	; lambda-simple body
 23896 00012745 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23897 0001274B 740B                    	je .L_lambda_simple_arity_check_ok_02c0
 23898 0001274D FF742410                	push qword [rsp + 8 * 2]
 23899 00012751 6A01                    	push 1
 23900 00012753 E9B3490000              	jmp L_error_incorrect_arity_simple
 23901                                  .L_lambda_simple_arity_check_ok_02c0:
 23902 00012758 C8000000                	enter 0, 0
 23903                                  	; preparing a tail-call
 23904 0001275C 488B4520                	mov rax, PARAM(0)	; param x
 23905 00012760 50                      	push rax
 23906 00012761 48B8-                   	mov rax, L_constants + 2135
 23906 00012763 [5708000000000000] 
 23907 0001276B 50                      	push rax
 23908 0001276C 6A02                    	push 2	; arg count
 23909 0001276E 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 23910 00012776 803805                  	cmp byte [rax], T_undefined
 23911 00012779 0F84A6480000            	je L_error_fvar_undefined
 23912 0001277F 803804                  	cmp byte [rax], T_closure
 23913 00012782 0F8521490000            	jne L_error_non_closure
 23914 00012788 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23915 0001278B 4C8B4009                	mov r8, qword [rax + 1 + 8]
 23916 0001278F FF7508                  	push qword [rbp + 8]				; push old return address
 23917 00012792 FF7500                  	push qword [rbp]					; push old rbp
 23918                                  	;; move stack up ;;
 23919 00012795 488B5D18                	mov rbx, [rbp + 3*8]
 23920 00012799 4889DE                  	mov rsi, rbx						; save old size in rsi
 23921 0001279C 4883C303                	add rbx, 3
 23922 000127A0 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 23923 000127A8 B902000000              	mov rcx, 2
 23924 000127AD 4883C104                	add rcx, 4				; num of iterations in rcx
 23925                                  .L_tc_recycle_frame_loop_039c:
 23926 000127B1 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 23927 000127B9 488B143C                	mov rdx, [rsp + rdi]
 23928 000127BD 4889541D00              	mov [rbp + rbx], rdx
 23929 000127C2 4883EB08                	sub rbx, 8
 23930 000127C6 48FFC9                  	dec rcx
 23931 000127C9 4883F900                	cmp rcx, 0
 23932 000127CD 75E2                    	jne .L_tc_recycle_frame_loop_039c
 23933 000127CF 4889F3                  	mov rbx, rsi
 23934 000127D2 4883EB02                	sub rbx, 2
 23935 000127D6 488D1CDD00000000        	lea rbx, [rbx*8]
 23936 000127DE 4801DD                  	add rbp, rbx
 23937 000127E1 4889EC                  	mov rsp, rbp         ; fix stack pointers
 23938 000127E4 5D                      	pop rbp
 23939 000127E5 41FFE0                  	jmp r8
 23940 000127E8 C9                      	leave
 23941 000127E9 C21800                  	ret AND_KILL_FRAME(1)
 23942                                  .L_lambda_simple_end_02c0:	; new closure is in rax
 23943 000127EC 48890425[47150000]      	mov qword [free_var_112], rax
 23944 000127F4 48B8-                   	mov rax, sob_void
 23944 000127F6 [0000000000000000] 
 23945                                  
 23946 000127FE 4889C7                  	mov rdi, rax
 23947 00012801 E8A14B0000              	call print_sexpr_if_not_void
 23948 00012806 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23949 0001280B E842490000              	call malloc
 23950 00012810 50                      	push rax
 23951 00012811 BF00000000              	mov rdi, 8 * 0	; new rib
 23952 00012816 E837490000              	call malloc
 23953 0001281B 50                      	push rax
 23954 0001281C BF08000000              	mov rdi, 8 * 1	; extended env
 23955 00012821 E82C490000              	call malloc
 23956 00012826 488B7D10                	mov rdi, ENV
 23957 0001282A BE00000000              	mov rsi, 0
 23958 0001282F BA01000000              	mov rdx, 1
 23959                                  .L_lambda_simple_env_loop_02c1:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 23960 00012834 4883FE00                	cmp rsi, 0
 23961 00012838 7410                    	je .L_lambda_simple_env_end_02c1
 23962 0001283A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23963 0001283E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23964 00012842 48FFC6                  	inc rsi
 23965 00012845 48FFC2                  	inc rdx
 23966 00012848 EBEA                    	jmp .L_lambda_simple_env_loop_02c1
 23967                                  .L_lambda_simple_env_end_02c1:
 23968 0001284A 5B                      	pop rbx
 23969 0001284B BE00000000              	mov rsi, 0
 23970                                  .L_lambda_simple_params_loop_02c1:	; copy params
 23971 00012850 4883FE00                	cmp rsi, 0
 23972 00012854 740E                    	je .L_lambda_simple_params_end_02c1
 23973 00012856 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23974 0001285B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23975 0001285F 48FFC6                  	inc rsi
 23976 00012862 EBEC                    	jmp .L_lambda_simple_params_loop_02c1
 23977                                  .L_lambda_simple_params_end_02c1:
 23978 00012864 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 23979 00012867 4889C3                  	mov rbx, rax
 23980 0001286A 58                      	pop rax
 23981 0001286B C60004                  	mov byte [rax], T_closure
 23982 0001286E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23983 00012872 48C74009[7F280100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02c1
 23984 0001287A E9A7000000              	jmp .L_lambda_simple_end_02c1
 23985                                  .L_lambda_simple_code_02c1:	; lambda-simple body
 23986 0001287F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23987 00012885 740B                    	je .L_lambda_simple_arity_check_ok_02c1
 23988 00012887 FF742410                	push qword [rsp + 8 * 2]
 23989 0001288B 6A01                    	push 1
 23990 0001288D E979480000              	jmp L_error_incorrect_arity_simple
 23991                                  .L_lambda_simple_arity_check_ok_02c1:
 23992 00012892 C8000000                	enter 0, 0
 23993                                  	; preparing a tail-call
 23994 00012896 48B8-                   	mov rax, L_constants + 2135
 23994 00012898 [5708000000000000] 
 23995 000128A0 50                      	push rax
 23996 000128A1 488B4520                	mov rax, PARAM(0)	; param x
 23997 000128A5 50                      	push rax
 23998 000128A6 6A02                    	push 2	; arg count
 23999 000128A8 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 24000 000128B0 803805                  	cmp byte [rax], T_undefined
 24001 000128B3 0F846C470000            	je L_error_fvar_undefined
 24002 000128B9 803804                  	cmp byte [rax], T_closure
 24003 000128BC 0F85E7470000            	jne L_error_non_closure
 24004 000128C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24005 000128C5 4C8B4009                	mov r8, qword [rax + 1 + 8]
 24006 000128C9 FF7508                  	push qword [rbp + 8]				; push old return address
 24007 000128CC FF7500                  	push qword [rbp]					; push old rbp
 24008                                  	;; move stack up ;;
 24009 000128CF 488B5D18                	mov rbx, [rbp + 3*8]
 24010 000128D3 4889DE                  	mov rsi, rbx						; save old size in rsi
 24011 000128D6 4883C303                	add rbx, 3
 24012 000128DA 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 24013 000128E2 B902000000              	mov rcx, 2
 24014 000128E7 4883C104                	add rcx, 4				; num of iterations in rcx
 24015                                  .L_tc_recycle_frame_loop_039d:
 24016 000128EB 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 24017 000128F3 488B143C                	mov rdx, [rsp + rdi]
 24018 000128F7 4889541D00              	mov [rbp + rbx], rdx
 24019 000128FC 4883EB08                	sub rbx, 8
 24020 00012900 48FFC9                  	dec rcx
 24021 00012903 4883F900                	cmp rcx, 0
 24022 00012907 75E2                    	jne .L_tc_recycle_frame_loop_039d
 24023 00012909 4889F3                  	mov rbx, rsi
 24024 0001290C 4883EB02                	sub rbx, 2
 24025 00012910 488D1CDD00000000        	lea rbx, [rbx*8]
 24026 00012918 4801DD                  	add rbp, rbx
 24027 0001291B 4889EC                  	mov rsp, rbp         ; fix stack pointers
 24028 0001291E 5D                      	pop rbp
 24029 0001291F 41FFE0                  	jmp r8
 24030 00012922 C9                      	leave
 24031 00012923 C21800                  	ret AND_KILL_FRAME(1)
 24032                                  .L_lambda_simple_end_02c1:	; new closure is in rax
 24033 00012926 48890425[BF140000]      	mov qword [free_var_104], rax
 24034 0001292E 48B8-                   	mov rax, sob_void
 24034 00012930 [0000000000000000] 
 24035                                  
 24036 00012938 4889C7                  	mov rdi, rax
 24037 0001293B E8674A0000              	call print_sexpr_if_not_void
 24038 00012940 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24039 00012945 E808480000              	call malloc
 24040 0001294A 50                      	push rax
 24041 0001294B BF00000000              	mov rdi, 8 * 0	; new rib
 24042 00012950 E8FD470000              	call malloc
 24043 00012955 50                      	push rax
 24044 00012956 BF08000000              	mov rdi, 8 * 1	; extended env
 24045 0001295B E8F2470000              	call malloc
 24046 00012960 488B7D10                	mov rdi, ENV
 24047 00012964 BE00000000              	mov rsi, 0
 24048 00012969 BA01000000              	mov rdx, 1
 24049                                  .L_lambda_simple_env_loop_02c2:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 24050 0001296E 4883FE00                	cmp rsi, 0
 24051 00012972 7410                    	je .L_lambda_simple_env_end_02c2
 24052 00012974 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24053 00012978 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24054 0001297C 48FFC6                  	inc rsi
 24055 0001297F 48FFC2                  	inc rdx
 24056 00012982 EBEA                    	jmp .L_lambda_simple_env_loop_02c2
 24057                                  .L_lambda_simple_env_end_02c2:
 24058 00012984 5B                      	pop rbx
 24059 00012985 BE00000000              	mov rsi, 0
 24060                                  .L_lambda_simple_params_loop_02c2:	; copy params
 24061 0001298A 4883FE00                	cmp rsi, 0
 24062 0001298E 740E                    	je .L_lambda_simple_params_end_02c2
 24063 00012990 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24064 00012995 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24065 00012999 48FFC6                  	inc rsi
 24066 0001299C EBEC                    	jmp .L_lambda_simple_params_loop_02c2
 24067                                  .L_lambda_simple_params_end_02c2:
 24068 0001299E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 24069 000129A1 4889C3                  	mov rbx, rax
 24070 000129A4 58                      	pop rax
 24071 000129A5 C60004                  	mov byte [rax], T_closure
 24072 000129A8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24073 000129AC 48C74009[B9290100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02c2
 24074 000129B4 E9CA000000              	jmp .L_lambda_simple_end_02c2
 24075                                  .L_lambda_simple_code_02c2:	; lambda-simple body
 24076 000129B9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24077 000129BF 740B                    	je .L_lambda_simple_arity_check_ok_02c2
 24078 000129C1 FF742410                	push qword [rsp + 8 * 2]
 24079 000129C5 6A01                    	push 1
 24080 000129C7 E93F470000              	jmp L_error_incorrect_arity_simple
 24081                                  .L_lambda_simple_arity_check_ok_02c2:
 24082 000129CC C8000000                	enter 0, 0
 24083                                  	; preparing a tail-call
 24084                                  	; preparing a non-tail-call
 24085 000129D0 48B8-                   	mov rax, L_constants + 3190
 24085 000129D2 [760C000000000000] 
 24086 000129DA 50                      	push rax
 24087 000129DB 488B4520                	mov rax, PARAM(0)	; param n
 24088 000129DF 50                      	push rax
 24089 000129E0 6A02                    	push 2	; arg count
 24090 000129E2 488B0425[9C150000]      	mov rax, qword [free_var_117]	; free var remainder
 24091 000129EA 803805                  	cmp byte [rax], T_undefined
 24092 000129ED 0F8432460000            	je L_error_fvar_undefined
 24093 000129F3 803804                  	cmp byte [rax], T_closure
 24094 000129F6 0F85AD460000            	jne L_error_non_closure
 24095 000129FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 24096 000129FF FF5009                  	call SOB_CLOSURE_CODE(rax)
 24097 00012A02 50                      	push rax
 24098 00012A03 6A01                    	push 1	; arg count
 24099 00012A05 488B0425[DE170000]      	mov rax, qword [free_var_151]	; free var zero?
 24100 00012A0D 803805                  	cmp byte [rax], T_undefined
 24101 00012A10 0F840F460000            	je L_error_fvar_undefined
 24102 00012A16 803804                  	cmp byte [rax], T_closure
 24103 00012A19 0F858A460000            	jne L_error_non_closure
 24104 00012A1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 24105 00012A22 4C8B4009                	mov r8, qword [rax + 1 + 8]
 24106 00012A26 FF7508                  	push qword [rbp + 8]				; push old return address
 24107 00012A29 FF7500                  	push qword [rbp]					; push old rbp
 24108                                  	;; move stack up ;;
 24109 00012A2C 488B5D18                	mov rbx, [rbp + 3*8]
 24110 00012A30 4889DE                  	mov rsi, rbx						; save old size in rsi
 24111 00012A33 4883C303                	add rbx, 3
 24112 00012A37 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 24113 00012A3F B901000000              	mov rcx, 1
 24114 00012A44 4883C104                	add rcx, 4				; num of iterations in rcx
 24115                                  .L_tc_recycle_frame_loop_039e:
 24116 00012A48 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 24117 00012A50 488B143C                	mov rdx, [rsp + rdi]
 24118 00012A54 4889541D00              	mov [rbp + rbx], rdx
 24119 00012A59 4883EB08                	sub rbx, 8
 24120 00012A5D 48FFC9                  	dec rcx
 24121 00012A60 4883F900                	cmp rcx, 0
 24122 00012A64 75E2                    	jne .L_tc_recycle_frame_loop_039e
 24123 00012A66 4889F3                  	mov rbx, rsi
 24124 00012A69 4883EB01                	sub rbx, 1
 24125 00012A6D 488D1CDD00000000        	lea rbx, [rbx*8]
 24126 00012A75 4801DD                  	add rbp, rbx
 24127 00012A78 4889EC                  	mov rsp, rbp         ; fix stack pointers
 24128 00012A7B 5D                      	pop rbp
 24129 00012A7C 41FFE0                  	jmp r8
 24130 00012A7F C9                      	leave
 24131 00012A80 C21800                  	ret AND_KILL_FRAME(1)
 24132                                  .L_lambda_simple_end_02c2:	; new closure is in rax
 24133 00012A83 48890425[5A130000]      	mov qword [free_var_83], rax
 24134 00012A8B 48B8-                   	mov rax, sob_void
 24134 00012A8D [0000000000000000] 
 24135                                  
 24136 00012A95 4889C7                  	mov rdi, rax
 24137 00012A98 E80A490000              	call print_sexpr_if_not_void
 24138 00012A9D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24139 00012AA2 E8AB460000              	call malloc
 24140 00012AA7 50                      	push rax
 24141 00012AA8 BF00000000              	mov rdi, 8 * 0	; new rib
 24142 00012AAD E8A0460000              	call malloc
 24143 00012AB2 50                      	push rax
 24144 00012AB3 BF08000000              	mov rdi, 8 * 1	; extended env
 24145 00012AB8 E895460000              	call malloc
 24146 00012ABD 488B7D10                	mov rdi, ENV
 24147 00012AC1 BE00000000              	mov rsi, 0
 24148 00012AC6 BA01000000              	mov rdx, 1
 24149                                  .L_lambda_simple_env_loop_02c3:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 24150 00012ACB 4883FE00                	cmp rsi, 0
 24151 00012ACF 7410                    	je .L_lambda_simple_env_end_02c3
 24152 00012AD1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24153 00012AD5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24154 00012AD9 48FFC6                  	inc rsi
 24155 00012ADC 48FFC2                  	inc rdx
 24156 00012ADF EBEA                    	jmp .L_lambda_simple_env_loop_02c3
 24157                                  .L_lambda_simple_env_end_02c3:
 24158 00012AE1 5B                      	pop rbx
 24159 00012AE2 BE00000000              	mov rsi, 0
 24160                                  .L_lambda_simple_params_loop_02c3:	; copy params
 24161 00012AE7 4883FE00                	cmp rsi, 0
 24162 00012AEB 740E                    	je .L_lambda_simple_params_end_02c3
 24163 00012AED 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24164 00012AF2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24165 00012AF6 48FFC6                  	inc rsi
 24166 00012AF9 EBEC                    	jmp .L_lambda_simple_params_loop_02c3
 24167                                  .L_lambda_simple_params_end_02c3:
 24168 00012AFB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 24169 00012AFE 4889C3                  	mov rbx, rax
 24170 00012B01 58                      	pop rax
 24171 00012B02 C60004                  	mov byte [rax], T_closure
 24172 00012B05 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24173 00012B09 48C74009[162B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02c3
 24174 00012B11 E9BF000000              	jmp .L_lambda_simple_end_02c3
 24175                                  .L_lambda_simple_code_02c3:	; lambda-simple body
 24176 00012B16 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24177 00012B1C 740B                    	je .L_lambda_simple_arity_check_ok_02c3
 24178 00012B1E FF742410                	push qword [rsp + 8 * 2]
 24179 00012B22 6A01                    	push 1
 24180 00012B24 E9E2450000              	jmp L_error_incorrect_arity_simple
 24181                                  .L_lambda_simple_arity_check_ok_02c3:
 24182 00012B29 C8000000                	enter 0, 0
 24183                                  	; preparing a tail-call
 24184                                  	; preparing a non-tail-call
 24185 00012B2D 488B4520                	mov rax, PARAM(0)	; param n
 24186 00012B31 50                      	push rax
 24187 00012B32 6A01                    	push 1	; arg count
 24188 00012B34 488B0425[5A130000]      	mov rax, qword [free_var_83]	; free var even?
 24189 00012B3C 803805                  	cmp byte [rax], T_undefined
 24190 00012B3F 0F84E0440000            	je L_error_fvar_undefined
 24191 00012B45 803804                  	cmp byte [rax], T_closure
 24192 00012B48 0F855B450000            	jne L_error_non_closure
 24193 00012B4E FF7001                  	push SOB_CLOSURE_ENV(rax)
 24194 00012B51 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24195 00012B54 50                      	push rax
 24196 00012B55 6A01                    	push 1	; arg count
 24197 00012B57 488B0425[E1140000]      	mov rax, qword [free_var_106]	; free var not
 24198 00012B5F 803805                  	cmp byte [rax], T_undefined
 24199 00012B62 0F84BD440000            	je L_error_fvar_undefined
 24200 00012B68 803804                  	cmp byte [rax], T_closure
 24201 00012B6B 0F8538450000            	jne L_error_non_closure
 24202 00012B71 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24203 00012B74 4C8B4009                	mov r8, qword [rax + 1 + 8]
 24204 00012B78 FF7508                  	push qword [rbp + 8]				; push old return address
 24205 00012B7B FF7500                  	push qword [rbp]					; push old rbp
 24206                                  	;; move stack up ;;
 24207 00012B7E 488B5D18                	mov rbx, [rbp + 3*8]
 24208 00012B82 4889DE                  	mov rsi, rbx						; save old size in rsi
 24209 00012B85 4883C303                	add rbx, 3
 24210 00012B89 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 24211 00012B91 B901000000              	mov rcx, 1
 24212 00012B96 4883C104                	add rcx, 4				; num of iterations in rcx
 24213                                  .L_tc_recycle_frame_loop_039f:
 24214 00012B9A 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 24215 00012BA2 488B143C                	mov rdx, [rsp + rdi]
 24216 00012BA6 4889541D00              	mov [rbp + rbx], rdx
 24217 00012BAB 4883EB08                	sub rbx, 8
 24218 00012BAF 48FFC9                  	dec rcx
 24219 00012BB2 4883F900                	cmp rcx, 0
 24220 00012BB6 75E2                    	jne .L_tc_recycle_frame_loop_039f
 24221 00012BB8 4889F3                  	mov rbx, rsi
 24222 00012BBB 4883EB01                	sub rbx, 1
 24223 00012BBF 488D1CDD00000000        	lea rbx, [rbx*8]
 24224 00012BC7 4801DD                  	add rbp, rbx
 24225 00012BCA 4889EC                  	mov rsp, rbp         ; fix stack pointers
 24226 00012BCD 5D                      	pop rbp
 24227 00012BCE 41FFE0                  	jmp r8
 24228 00012BD1 C9                      	leave
 24229 00012BD2 C21800                  	ret AND_KILL_FRAME(1)
 24230                                  .L_lambda_simple_end_02c3:	; new closure is in rax
 24231 00012BD5 48890425[14150000]      	mov qword [free_var_109], rax
 24232 00012BDD 48B8-                   	mov rax, sob_void
 24232 00012BDF [0000000000000000] 
 24233                                  
 24234 00012BE7 4889C7                  	mov rdi, rax
 24235 00012BEA E8B8470000              	call print_sexpr_if_not_void
 24236 00012BEF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24237 00012BF4 E859450000              	call malloc
 24238 00012BF9 50                      	push rax
 24239 00012BFA BF00000000              	mov rdi, 8 * 0	; new rib
 24240 00012BFF E84E450000              	call malloc
 24241 00012C04 50                      	push rax
 24242 00012C05 BF08000000              	mov rdi, 8 * 1	; extended env
 24243 00012C0A E843450000              	call malloc
 24244 00012C0F 488B7D10                	mov rdi, ENV
 24245 00012C13 BE00000000              	mov rsi, 0
 24246 00012C18 BA01000000              	mov rdx, 1
 24247                                  .L_lambda_simple_env_loop_02c4:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 24248 00012C1D 4883FE00                	cmp rsi, 0
 24249 00012C21 7410                    	je .L_lambda_simple_env_end_02c4
 24250 00012C23 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24251 00012C27 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24252 00012C2B 48FFC6                  	inc rsi
 24253 00012C2E 48FFC2                  	inc rdx
 24254 00012C31 EBEA                    	jmp .L_lambda_simple_env_loop_02c4
 24255                                  .L_lambda_simple_env_end_02c4:
 24256 00012C33 5B                      	pop rbx
 24257 00012C34 BE00000000              	mov rsi, 0
 24258                                  .L_lambda_simple_params_loop_02c4:	; copy params
 24259 00012C39 4883FE00                	cmp rsi, 0
 24260 00012C3D 740E                    	je .L_lambda_simple_params_end_02c4
 24261 00012C3F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24262 00012C44 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24263 00012C48 48FFC6                  	inc rsi
 24264 00012C4B EBEC                    	jmp .L_lambda_simple_params_loop_02c4
 24265                                  .L_lambda_simple_params_end_02c4:
 24266 00012C4D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 24267 00012C50 4889C3                  	mov rbx, rax
 24268 00012C53 58                      	pop rax
 24269 00012C54 C60004                  	mov byte [rax], T_closure
 24270 00012C57 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24271 00012C5B 48C74009[682C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02c4
 24272 00012C63 E9D5000000              	jmp .L_lambda_simple_end_02c4
 24273                                  .L_lambda_simple_code_02c4:	; lambda-simple body
 24274 00012C68 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24275 00012C6E 740B                    	je .L_lambda_simple_arity_check_ok_02c4
 24276 00012C70 FF742410                	push qword [rsp + 8 * 2]
 24277 00012C74 6A01                    	push 1
 24278 00012C76 E990440000              	jmp L_error_incorrect_arity_simple
 24279                                  .L_lambda_simple_arity_check_ok_02c4:
 24280 00012C7B C8000000                	enter 0, 0
 24281                                  	; preparing a non-tail-call
 24282 00012C7F 488B4520                	mov rax, PARAM(0)	; param x
 24283 00012C83 50                      	push rax
 24284 00012C84 6A01                    	push 1	; arg count
 24285 00012C86 488B0425[BF140000]      	mov rax, qword [free_var_104]	; free var negative?
 24286 00012C8E 803805                  	cmp byte [rax], T_undefined
 24287 00012C91 0F848E430000            	je L_error_fvar_undefined
 24288 00012C97 803804                  	cmp byte [rax], T_closure
 24289 00012C9A 0F8509440000            	jne L_error_non_closure
 24290 00012CA0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24291 00012CA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24292 00012CA6 483D[02000000]          	cmp rax, sob_boolean_false
 24293 00012CAC 0F8483000000            	je .L_if_else_0203
 24294                                  	; preparing a tail-call
 24295 00012CB2 488B4520                	mov rax, PARAM(0)	; param x
 24296 00012CB6 50                      	push rax
 24297 00012CB7 6A01                    	push 1	; arg count
 24298 00012CB9 488B0425[F90D0000]      	mov rax, qword [free_var_2]	; free var -
 24299 00012CC1 803805                  	cmp byte [rax], T_undefined
 24300 00012CC4 0F845B430000            	je L_error_fvar_undefined
 24301 00012CCA 803804                  	cmp byte [rax], T_closure
 24302 00012CCD 0F85D6430000            	jne L_error_non_closure
 24303 00012CD3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24304 00012CD6 4C8B4009                	mov r8, qword [rax + 1 + 8]
 24305 00012CDA FF7508                  	push qword [rbp + 8]				; push old return address
 24306 00012CDD FF7500                  	push qword [rbp]					; push old rbp
 24307                                  	;; move stack up ;;
 24308 00012CE0 488B5D18                	mov rbx, [rbp + 3*8]
 24309 00012CE4 4889DE                  	mov rsi, rbx						; save old size in rsi
 24310 00012CE7 4883C303                	add rbx, 3
 24311 00012CEB 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 24312 00012CF3 B901000000              	mov rcx, 1
 24313 00012CF8 4883C104                	add rcx, 4				; num of iterations in rcx
 24314                                  .L_tc_recycle_frame_loop_03a0:
 24315 00012CFC 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 24316 00012D04 488B143C                	mov rdx, [rsp + rdi]
 24317 00012D08 4889541D00              	mov [rbp + rbx], rdx
 24318 00012D0D 4883EB08                	sub rbx, 8
 24319 00012D11 48FFC9                  	dec rcx
 24320 00012D14 4883F900                	cmp rcx, 0
 24321 00012D18 75E2                    	jne .L_tc_recycle_frame_loop_03a0
 24322 00012D1A 4889F3                  	mov rbx, rsi
 24323 00012D1D 4883EB01                	sub rbx, 1
 24324 00012D21 488D1CDD00000000        	lea rbx, [rbx*8]
 24325 00012D29 4801DD                  	add rbp, rbx
 24326 00012D2C 4889EC                  	mov rsp, rbp         ; fix stack pointers
 24327 00012D2F 5D                      	pop rbp
 24328 00012D30 41FFE0                  	jmp r8
 24329 00012D33 EB04                    	jmp .L_if_end_0203
 24330                                  .L_if_else_0203:
 24331 00012D35 488B4520                	mov rax, PARAM(0)	; param x
 24332                                  .L_if_end_0203:
 24333 00012D39 C9                      	leave
 24334 00012D3A C21800                  	ret AND_KILL_FRAME(1)
 24335                                  .L_lambda_simple_end_02c4:	; new closure is in rax
 24336 00012D3D 48890425[D50F0000]      	mov qword [free_var_30], rax
 24337 00012D45 48B8-                   	mov rax, sob_void
 24337 00012D47 [0000000000000000] 
 24338                                  
 24339 00012D4F 4889C7                  	mov rdi, rax
 24340 00012D52 E850460000              	call print_sexpr_if_not_void
 24341 00012D57 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24342 00012D5C E8F1430000              	call malloc
 24343 00012D61 50                      	push rax
 24344 00012D62 BF00000000              	mov rdi, 8 * 0	; new rib
 24345 00012D67 E8E6430000              	call malloc
 24346 00012D6C 50                      	push rax
 24347 00012D6D BF08000000              	mov rdi, 8 * 1	; extended env
 24348 00012D72 E8DB430000              	call malloc
 24349 00012D77 488B7D10                	mov rdi, ENV
 24350 00012D7B BE00000000              	mov rsi, 0
 24351 00012D80 BA01000000              	mov rdx, 1
 24352                                  .L_lambda_simple_env_loop_02c5:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 24353 00012D85 4883FE00                	cmp rsi, 0
 24354 00012D89 7410                    	je .L_lambda_simple_env_end_02c5
 24355 00012D8B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24356 00012D8F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24357 00012D93 48FFC6                  	inc rsi
 24358 00012D96 48FFC2                  	inc rdx
 24359 00012D99 EBEA                    	jmp .L_lambda_simple_env_loop_02c5
 24360                                  .L_lambda_simple_env_end_02c5:
 24361 00012D9B 5B                      	pop rbx
 24362 00012D9C BE00000000              	mov rsi, 0
 24363                                  .L_lambda_simple_params_loop_02c5:	; copy params
 24364 00012DA1 4883FE00                	cmp rsi, 0
 24365 00012DA5 740E                    	je .L_lambda_simple_params_end_02c5
 24366 00012DA7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24367 00012DAC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24368 00012DB0 48FFC6                  	inc rsi
 24369 00012DB3 EBEC                    	jmp .L_lambda_simple_params_loop_02c5
 24370                                  .L_lambda_simple_params_end_02c5:
 24371 00012DB5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 24372 00012DB8 4889C3                  	mov rbx, rax
 24373 00012DBB 58                      	pop rax
 24374 00012DBC C60004                  	mov byte [rax], T_closure
 24375 00012DBF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24376 00012DC3 48C74009[D02D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02c5
 24377 00012DCB E9A8070000              	jmp .L_lambda_simple_end_02c5
 24378                                  .L_lambda_simple_code_02c5:	; lambda-simple body
 24379 00012DD0 48837C241002            	cmp qword [rsp + 8 * 2], 2
 24380 00012DD6 740B                    	je .L_lambda_simple_arity_check_ok_02c5
 24381 00012DD8 FF742410                	push qword [rsp + 8 * 2]
 24382 00012DDC 6A02                    	push 2
 24383 00012DDE E928430000              	jmp L_error_incorrect_arity_simple
 24384                                  .L_lambda_simple_arity_check_ok_02c5:
 24385 00012DE3 C8000000                	enter 0, 0
 24386                                  	; preparing a non-tail-call
 24387 00012DE7 488B4520                	mov rax, PARAM(0)	; param e1
 24388 00012DEB 50                      	push rax
 24389 00012DEC 6A01                    	push 1	; arg count
 24390 00012DEE 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
 24391 00012DF6 803805                  	cmp byte [rax], T_undefined
 24392 00012DF9 0F8426420000            	je L_error_fvar_undefined
 24393 00012DFF 803804                  	cmp byte [rax], T_closure
 24394 00012E02 0F85A1420000            	jne L_error_non_closure
 24395 00012E08 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24396 00012E0B FF5009                  	call SOB_CLOSURE_CODE(rax)
 24397 00012E0E 483D[02000000]          	cmp rax, sob_boolean_false
 24398 00012E14 7429                    	je .L_if_else_0204
 24399                                  	; preparing a non-tail-call
 24400 00012E16 488B4528                	mov rax, PARAM(1)	; param e2
 24401 00012E1A 50                      	push rax
 24402 00012E1B 6A01                    	push 1	; arg count
 24403 00012E1D 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
 24404 00012E25 803805                  	cmp byte [rax], T_undefined
 24405 00012E28 0F84F7410000            	je L_error_fvar_undefined
 24406 00012E2E 803804                  	cmp byte [rax], T_closure
 24407 00012E31 0F8572420000            	jne L_error_non_closure
 24408 00012E37 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24409 00012E3A FF5009                  	call SOB_CLOSURE_CODE(rax)
 24410 00012E3D EB0A                    	jmp .L_if_end_0204
 24411                                  .L_if_else_0204:
 24412 00012E3F 48B8-                   	mov rax, L_constants + 2
 24412 00012E41 [0200000000000000] 
 24413                                  .L_if_end_0204:
 24414 00012E49 483D[02000000]          	cmp rax, sob_boolean_false
 24415 00012E4F 0F845B010000            	je .L_if_else_0210
 24416                                  	; preparing a non-tail-call
 24417                                  	; preparing a non-tail-call
 24418 00012E55 488B4528                	mov rax, PARAM(1)	; param e2
 24419 00012E59 50                      	push rax
 24420 00012E5A 6A01                    	push 1	; arg count
 24421 00012E5C 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 24422 00012E64 803805                  	cmp byte [rax], T_undefined
 24423 00012E67 0F84B8410000            	je L_error_fvar_undefined
 24424 00012E6D 803804                  	cmp byte [rax], T_closure
 24425 00012E70 0F8533420000            	jne L_error_non_closure
 24426 00012E76 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24427 00012E79 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24428 00012E7C 50                      	push rax
 24429                                  	; preparing a non-tail-call
 24430 00012E7D 488B4520                	mov rax, PARAM(0)	; param e1
 24431 00012E81 50                      	push rax
 24432 00012E82 6A01                    	push 1	; arg count
 24433 00012E84 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 24434 00012E8C 803805                  	cmp byte [rax], T_undefined
 24435 00012E8F 0F8490410000            	je L_error_fvar_undefined
 24436 00012E95 803804                  	cmp byte [rax], T_closure
 24437 00012E98 0F850B420000            	jne L_error_non_closure
 24438 00012E9E FF7001                  	push SOB_CLOSURE_ENV(rax)
 24439 00012EA1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24440 00012EA4 50                      	push rax
 24441 00012EA5 6A02                    	push 2	; arg count
 24442 00012EA7 488B0425[38130000]      	mov rax, qword [free_var_81]	; free var equal?
 24443 00012EAF 803805                  	cmp byte [rax], T_undefined
 24444 00012EB2 0F846D410000            	je L_error_fvar_undefined
 24445 00012EB8 803804                  	cmp byte [rax], T_closure
 24446 00012EBB 0F85E8410000            	jne L_error_non_closure
 24447 00012EC1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24448 00012EC4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24449 00012EC7 483D[02000000]          	cmp rax, sob_boolean_false
 24450 00012ECD 0F84CE000000            	je .L_if_else_0205
 24451                                  	; preparing a tail-call
 24452                                  	; preparing a non-tail-call
 24453 00012ED3 488B4528                	mov rax, PARAM(1)	; param e2
 24454 00012ED7 50                      	push rax
 24455 00012ED8 6A01                    	push 1	; arg count
 24456 00012EDA 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 24457 00012EE2 803805                  	cmp byte [rax], T_undefined
 24458 00012EE5 0F843A410000            	je L_error_fvar_undefined
 24459 00012EEB 803804                  	cmp byte [rax], T_closure
 24460 00012EEE 0F85B5410000            	jne L_error_non_closure
 24461 00012EF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24462 00012EF7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24463 00012EFA 50                      	push rax
 24464                                  	; preparing a non-tail-call
 24465 00012EFB 488B4520                	mov rax, PARAM(0)	; param e1
 24466 00012EFF 50                      	push rax
 24467 00012F00 6A01                    	push 1	; arg count
 24468 00012F02 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 24469 00012F0A 803805                  	cmp byte [rax], T_undefined
 24470 00012F0D 0F8412410000            	je L_error_fvar_undefined
 24471 00012F13 803804                  	cmp byte [rax], T_closure
 24472 00012F16 0F858D410000            	jne L_error_non_closure
 24473 00012F1C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24474 00012F1F FF5009                  	call SOB_CLOSURE_CODE(rax)
 24475 00012F22 50                      	push rax
 24476 00012F23 6A02                    	push 2	; arg count
 24477 00012F25 488B0425[38130000]      	mov rax, qword [free_var_81]	; free var equal?
 24478 00012F2D 803805                  	cmp byte [rax], T_undefined
 24479 00012F30 0F84EF400000            	je L_error_fvar_undefined
 24480 00012F36 803804                  	cmp byte [rax], T_closure
 24481 00012F39 0F856A410000            	jne L_error_non_closure
 24482 00012F3F FF7001                  	push SOB_CLOSURE_ENV(rax)
 24483 00012F42 4C8B4009                	mov r8, qword [rax + 1 + 8]
 24484 00012F46 FF7508                  	push qword [rbp + 8]				; push old return address
 24485 00012F49 FF7500                  	push qword [rbp]					; push old rbp
 24486                                  	;; move stack up ;;
 24487 00012F4C 488B5D18                	mov rbx, [rbp + 3*8]
 24488 00012F50 4889DE                  	mov rsi, rbx						; save old size in rsi
 24489 00012F53 4883C303                	add rbx, 3
 24490 00012F57 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 24491 00012F5F B902000000              	mov rcx, 2
 24492 00012F64 4883C104                	add rcx, 4				; num of iterations in rcx
 24493                                  .L_tc_recycle_frame_loop_03a1:
 24494 00012F68 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 24495 00012F70 488B143C                	mov rdx, [rsp + rdi]
 24496 00012F74 4889541D00              	mov [rbp + rbx], rdx
 24497 00012F79 4883EB08                	sub rbx, 8
 24498 00012F7D 48FFC9                  	dec rcx
 24499 00012F80 4883F900                	cmp rcx, 0
 24500 00012F84 75E2                    	jne .L_tc_recycle_frame_loop_03a1
 24501 00012F86 4889F3                  	mov rbx, rsi
 24502 00012F89 4883EB02                	sub rbx, 2
 24503 00012F8D 488D1CDD00000000        	lea rbx, [rbx*8]
 24504 00012F95 4801DD                  	add rbp, rbx
 24505 00012F98 4889EC                  	mov rsp, rbp         ; fix stack pointers
 24506 00012F9B 5D                      	pop rbp
 24507 00012F9C 41FFE0                  	jmp r8
 24508 00012F9F EB0A                    	jmp .L_if_end_0205
 24509                                  .L_if_else_0205:
 24510 00012FA1 48B8-                   	mov rax, L_constants + 2
 24510 00012FA3 [0200000000000000] 
 24511                                  .L_if_end_0205:
 24512 00012FAB E9C4050000              	jmp .L_if_end_0210
 24513                                  .L_if_else_0210:
 24514                                  	; preparing a non-tail-call
 24515 00012FB0 488B4520                	mov rax, PARAM(0)	; param e1
 24516 00012FB4 50                      	push rax
 24517 00012FB5 6A01                    	push 1	; arg count
 24518 00012FB7 488B0425[AB170000]      	mov rax, qword [free_var_148]	; free var vector?
 24519 00012FBF 803805                  	cmp byte [rax], T_undefined
 24520 00012FC2 0F845D400000            	je L_error_fvar_undefined
 24521 00012FC8 803804                  	cmp byte [rax], T_closure
 24522 00012FCB 0F85D8400000            	jne L_error_non_closure
 24523 00012FD1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24524 00012FD4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24525 00012FD7 483D[02000000]          	cmp rax, sob_boolean_false
 24526 00012FDD 0F84AF000000            	je .L_if_else_0207
 24527                                  	; preparing a non-tail-call
 24528 00012FE3 488B4528                	mov rax, PARAM(1)	; param e2
 24529 00012FE7 50                      	push rax
 24530 00012FE8 6A01                    	push 1	; arg count
 24531 00012FEA 488B0425[AB170000]      	mov rax, qword [free_var_148]	; free var vector?
 24532 00012FF2 803805                  	cmp byte [rax], T_undefined
 24533 00012FF5 0F842A400000            	je L_error_fvar_undefined
 24534 00012FFB 803804                  	cmp byte [rax], T_closure
 24535 00012FFE 0F85A5400000            	jne L_error_non_closure
 24536 00013004 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24537 00013007 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24538 0001300A 483D[02000000]          	cmp rax, sob_boolean_false
 24539 00013010 7474                    	je .L_if_else_0206
 24540                                  	; preparing a non-tail-call
 24541                                  	; preparing a non-tail-call
 24542 00013012 488B4528                	mov rax, PARAM(1)	; param e2
 24543 00013016 50                      	push rax
 24544 00013017 6A01                    	push 1	; arg count
 24545 00013019 488B0425[56170000]      	mov rax, qword [free_var_143]	; free var vector-length
 24546 00013021 803805                  	cmp byte [rax], T_undefined
 24547 00013024 0F84FB3F0000            	je L_error_fvar_undefined
 24548 0001302A 803804                  	cmp byte [rax], T_closure
 24549 0001302D 0F8576400000            	jne L_error_non_closure
 24550 00013033 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24551 00013036 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24552 00013039 50                      	push rax
 24553                                  	; preparing a non-tail-call
 24554 0001303A 488B4520                	mov rax, PARAM(0)	; param e1
 24555 0001303E 50                      	push rax
 24556 0001303F 6A01                    	push 1	; arg count
 24557 00013041 488B0425[56170000]      	mov rax, qword [free_var_143]	; free var vector-length
 24558 00013049 803805                  	cmp byte [rax], T_undefined
 24559 0001304C 0F84D33F0000            	je L_error_fvar_undefined
 24560 00013052 803804                  	cmp byte [rax], T_closure
 24561 00013055 0F854E400000            	jne L_error_non_closure
 24562 0001305B FF7001                  	push SOB_CLOSURE_ENV(rax)
 24563 0001305E FF5009                  	call SOB_CLOSURE_CODE(rax)
 24564 00013061 50                      	push rax
 24565 00013062 6A02                    	push 2	; arg count
 24566 00013064 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 24567 0001306C 803805                  	cmp byte [rax], T_undefined
 24568 0001306F 0F84B03F0000            	je L_error_fvar_undefined
 24569 00013075 803804                  	cmp byte [rax], T_closure
 24570 00013078 0F852B400000            	jne L_error_non_closure
 24571 0001307E FF7001                  	push SOB_CLOSURE_ENV(rax)
 24572 00013081 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24573 00013084 EB0A                    	jmp .L_if_end_0206
 24574                                  .L_if_else_0206:
 24575 00013086 48B8-                   	mov rax, L_constants + 2
 24575 00013088 [0200000000000000] 
 24576                                  .L_if_end_0206:
 24577 00013090 EB0A                    	jmp .L_if_end_0207
 24578                                  .L_if_else_0207:
 24579 00013092 48B8-                   	mov rax, L_constants + 2
 24579 00013094 [0200000000000000] 
 24580                                  .L_if_end_0207:
 24581 0001309C 483D[02000000]          	cmp rax, sob_boolean_false
 24582 000130A2 0F84D1000000            	je .L_if_else_020f
 24583                                  	; preparing a tail-call
 24584                                  	; preparing a non-tail-call
 24585 000130A8 488B4528                	mov rax, PARAM(1)	; param e2
 24586 000130AC 50                      	push rax
 24587 000130AD 6A01                    	push 1	; arg count
 24588 000130AF 488B0425[34170000]      	mov rax, qword [free_var_141]	; free var vector->list
 24589 000130B7 803805                  	cmp byte [rax], T_undefined
 24590 000130BA 0F84653F0000            	je L_error_fvar_undefined
 24591 000130C0 803804                  	cmp byte [rax], T_closure
 24592 000130C3 0F85E03F0000            	jne L_error_non_closure
 24593 000130C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24594 000130CC FF5009                  	call SOB_CLOSURE_CODE(rax)
 24595 000130CF 50                      	push rax
 24596                                  	; preparing a non-tail-call
 24597 000130D0 488B4520                	mov rax, PARAM(0)	; param e1
 24598 000130D4 50                      	push rax
 24599 000130D5 6A01                    	push 1	; arg count
 24600 000130D7 488B0425[34170000]      	mov rax, qword [free_var_141]	; free var vector->list
 24601 000130DF 803805                  	cmp byte [rax], T_undefined
 24602 000130E2 0F843D3F0000            	je L_error_fvar_undefined
 24603 000130E8 803804                  	cmp byte [rax], T_closure
 24604 000130EB 0F85B83F0000            	jne L_error_non_closure
 24605 000130F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24606 000130F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24607 000130F7 50                      	push rax
 24608 000130F8 6A02                    	push 2	; arg count
 24609 000130FA 488B0425[38130000]      	mov rax, qword [free_var_81]	; free var equal?
 24610 00013102 803805                  	cmp byte [rax], T_undefined
 24611 00013105 0F841A3F0000            	je L_error_fvar_undefined
 24612 0001310B 803804                  	cmp byte [rax], T_closure
 24613 0001310E 0F85953F0000            	jne L_error_non_closure
 24614 00013114 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24615 00013117 4C8B4009                	mov r8, qword [rax + 1 + 8]
 24616 0001311B FF7508                  	push qword [rbp + 8]				; push old return address
 24617 0001311E FF7500                  	push qword [rbp]					; push old rbp
 24618                                  	;; move stack up ;;
 24619 00013121 488B5D18                	mov rbx, [rbp + 3*8]
 24620 00013125 4889DE                  	mov rsi, rbx						; save old size in rsi
 24621 00013128 4883C303                	add rbx, 3
 24622 0001312C 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 24623 00013134 B902000000              	mov rcx, 2
 24624 00013139 4883C104                	add rcx, 4				; num of iterations in rcx
 24625                                  .L_tc_recycle_frame_loop_03a2:
 24626 0001313D 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 24627 00013145 488B143C                	mov rdx, [rsp + rdi]
 24628 00013149 4889541D00              	mov [rbp + rbx], rdx
 24629 0001314E 4883EB08                	sub rbx, 8
 24630 00013152 48FFC9                  	dec rcx
 24631 00013155 4883F900                	cmp rcx, 0
 24632 00013159 75E2                    	jne .L_tc_recycle_frame_loop_03a2
 24633 0001315B 4889F3                  	mov rbx, rsi
 24634 0001315E 4883EB02                	sub rbx, 2
 24635 00013162 488D1CDD00000000        	lea rbx, [rbx*8]
 24636 0001316A 4801DD                  	add rbp, rbx
 24637 0001316D 4889EC                  	mov rsp, rbp         ; fix stack pointers
 24638 00013170 5D                      	pop rbp
 24639 00013171 41FFE0                  	jmp r8
 24640 00013174 E9FB030000              	jmp .L_if_end_020f
 24641                                  .L_if_else_020f:
 24642                                  	; preparing a non-tail-call
 24643 00013179 488B4520                	mov rax, PARAM(0)	; param e1
 24644 0001317D 50                      	push rax
 24645 0001317E 6A01                    	push 1	; arg count
 24646 00013180 488B0425[01170000]      	mov rax, qword [free_var_138]	; free var string?
 24647 00013188 803805                  	cmp byte [rax], T_undefined
 24648 0001318B 0F84943E0000            	je L_error_fvar_undefined
 24649 00013191 803804                  	cmp byte [rax], T_closure
 24650 00013194 0F850F3F0000            	jne L_error_non_closure
 24651 0001319A FF7001                  	push SOB_CLOSURE_ENV(rax)
 24652 0001319D FF5009                  	call SOB_CLOSURE_CODE(rax)
 24653 000131A0 483D[02000000]          	cmp rax, sob_boolean_false
 24654 000131A6 0F84AF000000            	je .L_if_else_0209
 24655                                  	; preparing a non-tail-call
 24656 000131AC 488B4528                	mov rax, PARAM(1)	; param e2
 24657 000131B0 50                      	push rax
 24658 000131B1 6A01                    	push 1	; arg count
 24659 000131B3 488B0425[01170000]      	mov rax, qword [free_var_138]	; free var string?
 24660 000131BB 803805                  	cmp byte [rax], T_undefined
 24661 000131BE 0F84613E0000            	je L_error_fvar_undefined
 24662 000131C4 803804                  	cmp byte [rax], T_closure
 24663 000131C7 0F85DC3E0000            	jne L_error_non_closure
 24664 000131CD FF7001                  	push SOB_CLOSURE_ENV(rax)
 24665 000131D0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24666 000131D3 483D[02000000]          	cmp rax, sob_boolean_false
 24667 000131D9 7474                    	je .L_if_else_0208
 24668                                  	; preparing a non-tail-call
 24669                                  	; preparing a non-tail-call
 24670 000131DB 488B4528                	mov rax, PARAM(1)	; param e2
 24671 000131DF 50                      	push rax
 24672 000131E0 6A01                    	push 1	; arg count
 24673 000131E2 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 24674 000131EA 803805                  	cmp byte [rax], T_undefined
 24675 000131ED 0F84323E0000            	je L_error_fvar_undefined
 24676 000131F3 803804                  	cmp byte [rax], T_closure
 24677 000131F6 0F85AD3E0000            	jne L_error_non_closure
 24678 000131FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 24679 000131FF FF5009                  	call SOB_CLOSURE_CODE(rax)
 24680 00013202 50                      	push rax
 24681                                  	; preparing a non-tail-call
 24682 00013203 488B4520                	mov rax, PARAM(0)	; param e1
 24683 00013207 50                      	push rax
 24684 00013208 6A01                    	push 1	; arg count
 24685 0001320A 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 24686 00013212 803805                  	cmp byte [rax], T_undefined
 24687 00013215 0F840A3E0000            	je L_error_fvar_undefined
 24688 0001321B 803804                  	cmp byte [rax], T_closure
 24689 0001321E 0F85853E0000            	jne L_error_non_closure
 24690 00013224 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24691 00013227 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24692 0001322A 50                      	push rax
 24693 0001322B 6A02                    	push 2	; arg count
 24694 0001322D 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 24695 00013235 803805                  	cmp byte [rax], T_undefined
 24696 00013238 0F84E73D0000            	je L_error_fvar_undefined
 24697 0001323E 803804                  	cmp byte [rax], T_closure
 24698 00013241 0F85623E0000            	jne L_error_non_closure
 24699 00013247 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24700 0001324A FF5009                  	call SOB_CLOSURE_CODE(rax)
 24701 0001324D EB0A                    	jmp .L_if_end_0208
 24702                                  .L_if_else_0208:
 24703 0001324F 48B8-                   	mov rax, L_constants + 2
 24703 00013251 [0200000000000000] 
 24704                                  .L_if_end_0208:
 24705 00013259 EB0A                    	jmp .L_if_end_0209
 24706                                  .L_if_else_0209:
 24707 0001325B 48B8-                   	mov rax, L_constants + 2
 24707 0001325D [0200000000000000] 
 24708                                  .L_if_end_0209:
 24709 00013265 483D[02000000]          	cmp rax, sob_boolean_false
 24710 0001326B 0F848B000000            	je .L_if_else_020e
 24711                                  	; preparing a tail-call
 24712 00013271 488B4528                	mov rax, PARAM(1)	; param e2
 24713 00013275 50                      	push rax
 24714 00013276 488B4520                	mov rax, PARAM(0)	; param e1
 24715 0001327A 50                      	push rax
 24716 0001327B 6A02                    	push 2	; arg count
 24717 0001327D 488B0425[CE160000]      	mov rax, qword [free_var_135]	; free var string=?
 24718 00013285 803805                  	cmp byte [rax], T_undefined
 24719 00013288 0F84973D0000            	je L_error_fvar_undefined
 24720 0001328E 803804                  	cmp byte [rax], T_closure
 24721 00013291 0F85123E0000            	jne L_error_non_closure
 24722 00013297 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24723 0001329A 4C8B4009                	mov r8, qword [rax + 1 + 8]
 24724 0001329E FF7508                  	push qword [rbp + 8]				; push old return address
 24725 000132A1 FF7500                  	push qword [rbp]					; push old rbp
 24726                                  	;; move stack up ;;
 24727 000132A4 488B5D18                	mov rbx, [rbp + 3*8]
 24728 000132A8 4889DE                  	mov rsi, rbx						; save old size in rsi
 24729 000132AB 4883C303                	add rbx, 3
 24730 000132AF 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 24731 000132B7 B902000000              	mov rcx, 2
 24732 000132BC 4883C104                	add rcx, 4				; num of iterations in rcx
 24733                                  .L_tc_recycle_frame_loop_03a3:
 24734 000132C0 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 24735 000132C8 488B143C                	mov rdx, [rsp + rdi]
 24736 000132CC 4889541D00              	mov [rbp + rbx], rdx
 24737 000132D1 4883EB08                	sub rbx, 8
 24738 000132D5 48FFC9                  	dec rcx
 24739 000132D8 4883F900                	cmp rcx, 0
 24740 000132DC 75E2                    	jne .L_tc_recycle_frame_loop_03a3
 24741 000132DE 4889F3                  	mov rbx, rsi
 24742 000132E1 4883EB02                	sub rbx, 2
 24743 000132E5 488D1CDD00000000        	lea rbx, [rbx*8]
 24744 000132ED 4801DD                  	add rbp, rbx
 24745 000132F0 4889EC                  	mov rsp, rbp         ; fix stack pointers
 24746 000132F3 5D                      	pop rbp
 24747 000132F4 41FFE0                  	jmp r8
 24748 000132F7 E978020000              	jmp .L_if_end_020e
 24749                                  .L_if_else_020e:
 24750                                  	; preparing a non-tail-call
 24751 000132FC 488B4520                	mov rax, PARAM(0)	; param e1
 24752 00013300 50                      	push rax
 24753 00013301 6A01                    	push 1	; arg count
 24754 00013303 488B0425[03150000]      	mov rax, qword [free_var_108]	; free var number?
 24755 0001330B 803805                  	cmp byte [rax], T_undefined
 24756 0001330E 0F84113D0000            	je L_error_fvar_undefined
 24757 00013314 803804                  	cmp byte [rax], T_closure
 24758 00013317 0F858C3D0000            	jne L_error_non_closure
 24759 0001331D FF7001                  	push SOB_CLOSURE_ENV(rax)
 24760 00013320 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24761 00013323 483D[02000000]          	cmp rax, sob_boolean_false
 24762 00013329 7429                    	je .L_if_else_020a
 24763                                  	; preparing a non-tail-call
 24764 0001332B 488B4528                	mov rax, PARAM(1)	; param e2
 24765 0001332F 50                      	push rax
 24766 00013330 6A01                    	push 1	; arg count
 24767 00013332 488B0425[03150000]      	mov rax, qword [free_var_108]	; free var number?
 24768 0001333A 803805                  	cmp byte [rax], T_undefined
 24769 0001333D 0F84E23C0000            	je L_error_fvar_undefined
 24770 00013343 803804                  	cmp byte [rax], T_closure
 24771 00013346 0F855D3D0000            	jne L_error_non_closure
 24772 0001334C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24773 0001334F FF5009                  	call SOB_CLOSURE_CODE(rax)
 24774 00013352 EB0A                    	jmp .L_if_end_020a
 24775                                  .L_if_else_020a:
 24776 00013354 48B8-                   	mov rax, L_constants + 2
 24776 00013356 [0200000000000000] 
 24777                                  .L_if_end_020a:
 24778 0001335E 483D[02000000]          	cmp rax, sob_boolean_false
 24779 00013364 0F848B000000            	je .L_if_else_020d
 24780                                  	; preparing a tail-call
 24781 0001336A 488B4528                	mov rax, PARAM(1)	; param e2
 24782 0001336E 50                      	push rax
 24783 0001336F 488B4520                	mov rax, PARAM(0)	; param e1
 24784 00013373 50                      	push rax
 24785 00013374 6A02                    	push 2	; arg count
 24786 00013376 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 24787 0001337E 803805                  	cmp byte [rax], T_undefined
 24788 00013381 0F849E3C0000            	je L_error_fvar_undefined
 24789 00013387 803804                  	cmp byte [rax], T_closure
 24790 0001338A 0F85193D0000            	jne L_error_non_closure
 24791 00013390 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24792 00013393 4C8B4009                	mov r8, qword [rax + 1 + 8]
 24793 00013397 FF7508                  	push qword [rbp + 8]				; push old return address
 24794 0001339A FF7500                  	push qword [rbp]					; push old rbp
 24795                                  	;; move stack up ;;
 24796 0001339D 488B5D18                	mov rbx, [rbp + 3*8]
 24797 000133A1 4889DE                  	mov rsi, rbx						; save old size in rsi
 24798 000133A4 4883C303                	add rbx, 3
 24799 000133A8 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 24800 000133B0 B902000000              	mov rcx, 2
 24801 000133B5 4883C104                	add rcx, 4				; num of iterations in rcx
 24802                                  .L_tc_recycle_frame_loop_03a4:
 24803 000133B9 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 24804 000133C1 488B143C                	mov rdx, [rsp + rdi]
 24805 000133C5 4889541D00              	mov [rbp + rbx], rdx
 24806 000133CA 4883EB08                	sub rbx, 8
 24807 000133CE 48FFC9                  	dec rcx
 24808 000133D1 4883F900                	cmp rcx, 0
 24809 000133D5 75E2                    	jne .L_tc_recycle_frame_loop_03a4
 24810 000133D7 4889F3                  	mov rbx, rsi
 24811 000133DA 4883EB02                	sub rbx, 2
 24812 000133DE 488D1CDD00000000        	lea rbx, [rbx*8]
 24813 000133E6 4801DD                  	add rbp, rbx
 24814 000133E9 4889EC                  	mov rsp, rbp         ; fix stack pointers
 24815 000133EC 5D                      	pop rbp
 24816 000133ED 41FFE0                  	jmp r8
 24817 000133F0 E97F010000              	jmp .L_if_end_020d
 24818                                  .L_if_else_020d:
 24819                                  	; preparing a non-tail-call
 24820 000133F5 488B4520                	mov rax, PARAM(0)	; param e1
 24821 000133F9 50                      	push rax
 24822 000133FA 6A01                    	push 1	; arg count
 24823 000133FC 488B0425[05130000]      	mov rax, qword [free_var_78]	; free var char?
 24824 00013404 803805                  	cmp byte [rax], T_undefined
 24825 00013407 0F84183C0000            	je L_error_fvar_undefined
 24826 0001340D 803804                  	cmp byte [rax], T_closure
 24827 00013410 0F85933C0000            	jne L_error_non_closure
 24828 00013416 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24829 00013419 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24830 0001341C 483D[02000000]          	cmp rax, sob_boolean_false
 24831 00013422 7429                    	je .L_if_else_020b
 24832                                  	; preparing a non-tail-call
 24833 00013424 488B4528                	mov rax, PARAM(1)	; param e2
 24834 00013428 50                      	push rax
 24835 00013429 6A01                    	push 1	; arg count
 24836 0001342B 488B0425[05130000]      	mov rax, qword [free_var_78]	; free var char?
 24837 00013433 803805                  	cmp byte [rax], T_undefined
 24838 00013436 0F84E93B0000            	je L_error_fvar_undefined
 24839 0001343C 803804                  	cmp byte [rax], T_closure
 24840 0001343F 0F85643C0000            	jne L_error_non_closure
 24841 00013445 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24842 00013448 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24843 0001344B EB0A                    	jmp .L_if_end_020b
 24844                                  .L_if_else_020b:
 24845 0001344D 48B8-                   	mov rax, L_constants + 2
 24845 0001344F [0200000000000000] 
 24846                                  .L_if_end_020b:
 24847 00013457 483D[02000000]          	cmp rax, sob_boolean_false
 24848 0001345D 0F848B000000            	je .L_if_else_020c
 24849                                  	; preparing a tail-call
 24850 00013463 488B4528                	mov rax, PARAM(1)	; param e2
 24851 00013467 50                      	push rax
 24852 00013468 488B4520                	mov rax, PARAM(0)	; param e1
 24853 0001346C 50                      	push rax
 24854 0001346D 6A02                    	push 2	; arg count
 24855 0001346F 488B0425[D2120000]      	mov rax, qword [free_var_75]	; free var char=?
 24856 00013477 803805                  	cmp byte [rax], T_undefined
 24857 0001347A 0F84A53B0000            	je L_error_fvar_undefined
 24858 00013480 803804                  	cmp byte [rax], T_closure
 24859 00013483 0F85203C0000            	jne L_error_non_closure
 24860 00013489 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24861 0001348C 4C8B4009                	mov r8, qword [rax + 1 + 8]
 24862 00013490 FF7508                  	push qword [rbp + 8]				; push old return address
 24863 00013493 FF7500                  	push qword [rbp]					; push old rbp
 24864                                  	;; move stack up ;;
 24865 00013496 488B5D18                	mov rbx, [rbp + 3*8]
 24866 0001349A 4889DE                  	mov rsi, rbx						; save old size in rsi
 24867 0001349D 4883C303                	add rbx, 3
 24868 000134A1 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 24869 000134A9 B902000000              	mov rcx, 2
 24870 000134AE 4883C104                	add rcx, 4				; num of iterations in rcx
 24871                                  .L_tc_recycle_frame_loop_03a5:
 24872 000134B2 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 24873 000134BA 488B143C                	mov rdx, [rsp + rdi]
 24874 000134BE 4889541D00              	mov [rbp + rbx], rdx
 24875 000134C3 4883EB08                	sub rbx, 8
 24876 000134C7 48FFC9                  	dec rcx
 24877 000134CA 4883F900                	cmp rcx, 0
 24878 000134CE 75E2                    	jne .L_tc_recycle_frame_loop_03a5
 24879 000134D0 4889F3                  	mov rbx, rsi
 24880 000134D3 4883EB02                	sub rbx, 2
 24881 000134D7 488D1CDD00000000        	lea rbx, [rbx*8]
 24882 000134DF 4801DD                  	add rbp, rbx
 24883 000134E2 4889EC                  	mov rsp, rbp         ; fix stack pointers
 24884 000134E5 5D                      	pop rbp
 24885 000134E6 41FFE0                  	jmp r8
 24886 000134E9 E986000000              	jmp .L_if_end_020c
 24887                                  .L_if_else_020c:
 24888                                  	; preparing a tail-call
 24889 000134EE 488B4528                	mov rax, PARAM(1)	; param e2
 24890 000134F2 50                      	push rax
 24891 000134F3 488B4520                	mov rax, PARAM(0)	; param e1
 24892 000134F7 50                      	push rax
 24893 000134F8 6A02                    	push 2	; arg count
 24894 000134FA 488B0425[27130000]      	mov rax, qword [free_var_80]	; free var eq?
 24895 00013502 803805                  	cmp byte [rax], T_undefined
 24896 00013505 0F841A3B0000            	je L_error_fvar_undefined
 24897 0001350B 803804                  	cmp byte [rax], T_closure
 24898 0001350E 0F85953B0000            	jne L_error_non_closure
 24899 00013514 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24900 00013517 4C8B4009                	mov r8, qword [rax + 1 + 8]
 24901 0001351B FF7508                  	push qword [rbp + 8]				; push old return address
 24902 0001351E FF7500                  	push qword [rbp]					; push old rbp
 24903                                  	;; move stack up ;;
 24904 00013521 488B5D18                	mov rbx, [rbp + 3*8]
 24905 00013525 4889DE                  	mov rsi, rbx						; save old size in rsi
 24906 00013528 4883C303                	add rbx, 3
 24907 0001352C 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 24908 00013534 B902000000              	mov rcx, 2
 24909 00013539 4883C104                	add rcx, 4				; num of iterations in rcx
 24910                                  .L_tc_recycle_frame_loop_03a6:
 24911 0001353D 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 24912 00013545 488B143C                	mov rdx, [rsp + rdi]
 24913 00013549 4889541D00              	mov [rbp + rbx], rdx
 24914 0001354E 4883EB08                	sub rbx, 8
 24915 00013552 48FFC9                  	dec rcx
 24916 00013555 4883F900                	cmp rcx, 0
 24917 00013559 75E2                    	jne .L_tc_recycle_frame_loop_03a6
 24918 0001355B 4889F3                  	mov rbx, rsi
 24919 0001355E 4883EB02                	sub rbx, 2
 24920 00013562 488D1CDD00000000        	lea rbx, [rbx*8]
 24921 0001356A 4801DD                  	add rbp, rbx
 24922 0001356D 4889EC                  	mov rsp, rbp         ; fix stack pointers
 24923 00013570 5D                      	pop rbp
 24924 00013571 41FFE0                  	jmp r8
 24925                                  .L_if_end_020c:
 24926                                  .L_if_end_020d:
 24927                                  .L_if_end_020e:
 24928                                  .L_if_end_020f:
 24929                                  .L_if_end_0210:
 24930 00013574 C9                      	leave
 24931 00013575 C22000                  	ret AND_KILL_FRAME(2)
 24932                                  .L_lambda_simple_end_02c5:	; new closure is in rax
 24933 00013578 48890425[38130000]      	mov qword [free_var_81], rax
 24934 00013580 48B8-                   	mov rax, sob_void
 24934 00013582 [0000000000000000] 
 24935                                  
 24936 0001358A 4889C7                  	mov rdi, rax
 24937 0001358D E8153E0000              	call print_sexpr_if_not_void
 24938 00013592 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24939 00013597 E8B63B0000              	call malloc
 24940 0001359C 50                      	push rax
 24941 0001359D BF00000000              	mov rdi, 8 * 0	; new rib
 24942 000135A2 E8AB3B0000              	call malloc
 24943 000135A7 50                      	push rax
 24944 000135A8 BF08000000              	mov rdi, 8 * 1	; extended env
 24945 000135AD E8A03B0000              	call malloc
 24946 000135B2 488B7D10                	mov rdi, ENV
 24947 000135B6 BE00000000              	mov rsi, 0
 24948 000135BB BA01000000              	mov rdx, 1
 24949                                  .L_lambda_simple_env_loop_02c6:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 24950 000135C0 4883FE00                	cmp rsi, 0
 24951 000135C4 7410                    	je .L_lambda_simple_env_end_02c6
 24952 000135C6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24953 000135CA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24954 000135CE 48FFC6                  	inc rsi
 24955 000135D1 48FFC2                  	inc rdx
 24956 000135D4 EBEA                    	jmp .L_lambda_simple_env_loop_02c6
 24957                                  .L_lambda_simple_env_end_02c6:
 24958 000135D6 5B                      	pop rbx
 24959 000135D7 BE00000000              	mov rsi, 0
 24960                                  .L_lambda_simple_params_loop_02c6:	; copy params
 24961 000135DC 4883FE00                	cmp rsi, 0
 24962 000135E0 740E                    	je .L_lambda_simple_params_end_02c6
 24963 000135E2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24964 000135E7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24965 000135EB 48FFC6                  	inc rsi
 24966 000135EE EBEC                    	jmp .L_lambda_simple_params_loop_02c6
 24967                                  .L_lambda_simple_params_end_02c6:
 24968 000135F0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 24969 000135F3 4889C3                  	mov rbx, rax
 24970 000135F6 58                      	pop rax
 24971 000135F7 C60004                  	mov byte [rax], T_closure
 24972 000135FA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24973 000135FE 48C74009[0B360100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02c6
 24974 00013606 E9E3010000              	jmp .L_lambda_simple_end_02c6
 24975                                  .L_lambda_simple_code_02c6:	; lambda-simple body
 24976 0001360B 48837C241002            	cmp qword [rsp + 8 * 2], 2
 24977 00013611 740B                    	je .L_lambda_simple_arity_check_ok_02c6
 24978 00013613 FF742410                	push qword [rsp + 8 * 2]
 24979 00013617 6A02                    	push 2
 24980 00013619 E9ED3A0000              	jmp L_error_incorrect_arity_simple
 24981                                  .L_lambda_simple_arity_check_ok_02c6:
 24982 0001361E C8000000                	enter 0, 0
 24983                                  	; preparing a non-tail-call
 24984 00013622 488B4528                	mov rax, PARAM(1)	; param s
 24985 00013626 50                      	push rax
 24986 00013627 6A01                    	push 1	; arg count
 24987 00013629 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 24988 00013631 803805                  	cmp byte [rax], T_undefined
 24989 00013634 0F84EB390000            	je L_error_fvar_undefined
 24990 0001363A 803804                  	cmp byte [rax], T_closure
 24991 0001363D 0F85663A0000            	jne L_error_non_closure
 24992 00013643 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24993 00013646 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24994 00013649 483D[02000000]          	cmp rax, sob_boolean_false
 24995 0001364F 740F                    	je .L_if_else_0212
 24996 00013651 48B8-                   	mov rax, L_constants + 2
 24996 00013653 [0200000000000000] 
 24997 0001365B E98A010000              	jmp .L_if_end_0212
 24998                                  .L_if_else_0212:
 24999                                  	; preparing a non-tail-call
 25000 00013660 488B4520                	mov rax, PARAM(0)	; param a
 25001 00013664 50                      	push rax
 25002                                  	; preparing a non-tail-call
 25003 00013665 488B4528                	mov rax, PARAM(1)	; param s
 25004 00013669 50                      	push rax
 25005 0001366A 6A01                    	push 1	; arg count
 25006 0001366C 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
 25007 00013674 803805                  	cmp byte [rax], T_undefined
 25008 00013677 0F84A8390000            	je L_error_fvar_undefined
 25009 0001367D 803804                  	cmp byte [rax], T_closure
 25010 00013680 0F85233A0000            	jne L_error_non_closure
 25011 00013686 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25012 00013689 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25013 0001368C 50                      	push rax
 25014 0001368D 6A02                    	push 2	; arg count
 25015 0001368F 488B0425[27130000]      	mov rax, qword [free_var_80]	; free var eq?
 25016 00013697 803805                  	cmp byte [rax], T_undefined
 25017 0001369A 0F8485390000            	je L_error_fvar_undefined
 25018 000136A0 803804                  	cmp byte [rax], T_closure
 25019 000136A3 0F85003A0000            	jne L_error_non_closure
 25020 000136A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25021 000136AC FF5009                  	call SOB_CLOSURE_CODE(rax)
 25022 000136AF 483D[02000000]          	cmp rax, sob_boolean_false
 25023 000136B5 0F8486000000            	je .L_if_else_0211
 25024                                  	; preparing a tail-call
 25025 000136BB 488B4528                	mov rax, PARAM(1)	; param s
 25026 000136BF 50                      	push rax
 25027 000136C0 6A01                    	push 1	; arg count
 25028 000136C2 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 25029 000136CA 803805                  	cmp byte [rax], T_undefined
 25030 000136CD 0F8452390000            	je L_error_fvar_undefined
 25031 000136D3 803804                  	cmp byte [rax], T_closure
 25032 000136D6 0F85CD390000            	jne L_error_non_closure
 25033 000136DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 25034 000136DF 4C8B4009                	mov r8, qword [rax + 1 + 8]
 25035 000136E3 FF7508                  	push qword [rbp + 8]				; push old return address
 25036 000136E6 FF7500                  	push qword [rbp]					; push old rbp
 25037                                  	;; move stack up ;;
 25038 000136E9 488B5D18                	mov rbx, [rbp + 3*8]
 25039 000136ED 4889DE                  	mov rsi, rbx						; save old size in rsi
 25040 000136F0 4883C303                	add rbx, 3
 25041 000136F4 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 25042 000136FC B901000000              	mov rcx, 1
 25043 00013701 4883C104                	add rcx, 4				; num of iterations in rcx
 25044                                  .L_tc_recycle_frame_loop_03a7:
 25045 00013705 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 25046 0001370D 488B143C                	mov rdx, [rsp + rdi]
 25047 00013711 4889541D00              	mov [rbp + rbx], rdx
 25048 00013716 4883EB08                	sub rbx, 8
 25049 0001371A 48FFC9                  	dec rcx
 25050 0001371D 4883F900                	cmp rcx, 0
 25051 00013721 75E2                    	jne .L_tc_recycle_frame_loop_03a7
 25052 00013723 4889F3                  	mov rbx, rsi
 25053 00013726 4883EB01                	sub rbx, 1
 25054 0001372A 488D1CDD00000000        	lea rbx, [rbx*8]
 25055 00013732 4801DD                  	add rbp, rbx
 25056 00013735 4889EC                  	mov rsp, rbp         ; fix stack pointers
 25057 00013738 5D                      	pop rbp
 25058 00013739 41FFE0                  	jmp r8
 25059 0001373C E9A9000000              	jmp .L_if_end_0211
 25060                                  .L_if_else_0211:
 25061                                  	; preparing a tail-call
 25062                                  	; preparing a non-tail-call
 25063 00013741 488B4528                	mov rax, PARAM(1)	; param s
 25064 00013745 50                      	push rax
 25065 00013746 6A01                    	push 1	; arg count
 25066 00013748 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 25067 00013750 803805                  	cmp byte [rax], T_undefined
 25068 00013753 0F84CC380000            	je L_error_fvar_undefined
 25069 00013759 803804                  	cmp byte [rax], T_closure
 25070 0001375C 0F8547390000            	jne L_error_non_closure
 25071 00013762 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25072 00013765 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25073 00013768 50                      	push rax
 25074 00013769 488B4520                	mov rax, PARAM(0)	; param a
 25075 0001376D 50                      	push rax
 25076 0001376E 6A02                    	push 2	; arg count
 25077 00013770 488B0425[19100000]      	mov rax, qword [free_var_34]	; free var assoc
 25078 00013778 803805                  	cmp byte [rax], T_undefined
 25079 0001377B 0F84A4380000            	je L_error_fvar_undefined
 25080 00013781 803804                  	cmp byte [rax], T_closure
 25081 00013784 0F851F390000            	jne L_error_non_closure
 25082 0001378A FF7001                  	push SOB_CLOSURE_ENV(rax)
 25083 0001378D 4C8B4009                	mov r8, qword [rax + 1 + 8]
 25084 00013791 FF7508                  	push qword [rbp + 8]				; push old return address
 25085 00013794 FF7500                  	push qword [rbp]					; push old rbp
 25086                                  	;; move stack up ;;
 25087 00013797 488B5D18                	mov rbx, [rbp + 3*8]
 25088 0001379B 4889DE                  	mov rsi, rbx						; save old size in rsi
 25089 0001379E 4883C303                	add rbx, 3
 25090 000137A2 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 25091 000137AA B902000000              	mov rcx, 2
 25092 000137AF 4883C104                	add rcx, 4				; num of iterations in rcx
 25093                                  .L_tc_recycle_frame_loop_03a8:
 25094 000137B3 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 25095 000137BB 488B143C                	mov rdx, [rsp + rdi]
 25096 000137BF 4889541D00              	mov [rbp + rbx], rdx
 25097 000137C4 4883EB08                	sub rbx, 8
 25098 000137C8 48FFC9                  	dec rcx
 25099 000137CB 4883F900                	cmp rcx, 0
 25100 000137CF 75E2                    	jne .L_tc_recycle_frame_loop_03a8
 25101 000137D1 4889F3                  	mov rbx, rsi
 25102 000137D4 4883EB02                	sub rbx, 2
 25103 000137D8 488D1CDD00000000        	lea rbx, [rbx*8]
 25104 000137E0 4801DD                  	add rbp, rbx
 25105 000137E3 4889EC                  	mov rsp, rbp         ; fix stack pointers
 25106 000137E6 5D                      	pop rbp
 25107 000137E7 41FFE0                  	jmp r8
 25108                                  .L_if_end_0211:
 25109                                  .L_if_end_0212:
 25110 000137EA C9                      	leave
 25111 000137EB C22000                  	ret AND_KILL_FRAME(2)
 25112                                  .L_lambda_simple_end_02c6:	; new closure is in rax
 25113 000137EE 48890425[19100000]      	mov qword [free_var_34], rax
 25114 000137F6 48B8-                   	mov rax, sob_void
 25114 000137F8 [0000000000000000] 
 25115                                  
 25116 00013800 4889C7                  	mov rdi, rax
 25117 00013803 E89F3B0000              	call print_sexpr_if_not_void
 25118                                  	; preparing a non-tail-call
 25119 00013808 48B8-                   	mov rax, L_constants + 1993
 25119 0001380A [C907000000000000] 
 25120 00013812 50                      	push rax
 25121 00013813 48B8-                   	mov rax, L_constants + 1993
 25121 00013815 [C907000000000000] 
 25122 0001381D 50                      	push rax
 25123 0001381E 6A02                    	push 2	; arg count
 25124 00013820 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25125 00013825 E828390000              	call malloc
 25126 0001382A 50                      	push rax
 25127 0001382B BF00000000              	mov rdi, 8 * 0	; new rib
 25128 00013830 E81D390000              	call malloc
 25129 00013835 50                      	push rax
 25130 00013836 BF08000000              	mov rdi, 8 * 1	; extended env
 25131 0001383B E812390000              	call malloc
 25132 00013840 488B7D10                	mov rdi, ENV
 25133 00013844 BE00000000              	mov rsi, 0
 25134 00013849 BA01000000              	mov rdx, 1
 25135                                  .L_lambda_simple_env_loop_02c7:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 25136 0001384E 4883FE00                	cmp rsi, 0
 25137 00013852 7410                    	je .L_lambda_simple_env_end_02c7
 25138 00013854 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25139 00013858 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25140 0001385C 48FFC6                  	inc rsi
 25141 0001385F 48FFC2                  	inc rdx
 25142 00013862 EBEA                    	jmp .L_lambda_simple_env_loop_02c7
 25143                                  .L_lambda_simple_env_end_02c7:
 25144 00013864 5B                      	pop rbx
 25145 00013865 BE00000000              	mov rsi, 0
 25146                                  .L_lambda_simple_params_loop_02c7:	; copy params
 25147 0001386A 4883FE00                	cmp rsi, 0
 25148 0001386E 740E                    	je .L_lambda_simple_params_end_02c7
 25149 00013870 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25150 00013875 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25151 00013879 48FFC6                  	inc rsi
 25152 0001387C EBEC                    	jmp .L_lambda_simple_params_loop_02c7
 25153                                  .L_lambda_simple_params_end_02c7:
 25154 0001387E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 25155 00013881 4889C3                  	mov rbx, rax
 25156 00013884 58                      	pop rax
 25157 00013885 C60004                  	mov byte [rax], T_closure
 25158 00013888 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25159 0001388C 48C74009[99380100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02c7
 25160 00013894 E934080000              	jmp .L_lambda_simple_end_02c7
 25161                                  .L_lambda_simple_code_02c7:	; lambda-simple body
 25162 00013899 48837C241002            	cmp qword [rsp + 8 * 2], 2
 25163 0001389F 740B                    	je .L_lambda_simple_arity_check_ok_02c7
 25164 000138A1 FF742410                	push qword [rsp + 8 * 2]
 25165 000138A5 6A02                    	push 2
 25166 000138A7 E95F380000              	jmp L_error_incorrect_arity_simple
 25167                                  .L_lambda_simple_arity_check_ok_02c7:
 25168 000138AC C8000000                	enter 0, 0
 25169 000138B0 BF08000000              	mov rdi, 8
 25170 000138B5 E898380000              	call malloc
 25171 000138BA 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
 25172 000138BE 488918                  	mov qword[rax], rbx
 25173 000138C1 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 25174 000138C5 48B8-                   	mov rax, sob_void
 25174 000138C7 [0000000000000000] 
 25175                                  
 25176 000138CF BF08000000              	mov rdi, 8
 25177 000138D4 E879380000              	call malloc
 25178 000138D9 488B5D28                	mov rbx, qword [rbp + 8 * (4 + 1)]
 25179 000138DD 488918                  	mov qword[rax], rbx
 25180 000138E0 48894528                	mov qword [rbp + 8 * (4 + 1)], rax
 25181 000138E4 48B8-                   	mov rax, sob_void
 25181 000138E6 [0000000000000000] 
 25182                                  
 25183 000138EE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25184 000138F3 E85A380000              	call malloc
 25185 000138F8 50                      	push rax
 25186 000138F9 BF10000000              	mov rdi, 8 * 2	; new rib
 25187 000138FE E84F380000              	call malloc
 25188 00013903 50                      	push rax
 25189 00013904 BF10000000              	mov rdi, 8 * 2	; extended env
 25190 00013909 E844380000              	call malloc
 25191 0001390E 488B7D10                	mov rdi, ENV
 25192 00013912 BE00000000              	mov rsi, 0
 25193 00013917 BA01000000              	mov rdx, 1
 25194                                  .L_lambda_simple_env_loop_02c8:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 25195 0001391C 4883FE01                	cmp rsi, 1
 25196 00013920 7410                    	je .L_lambda_simple_env_end_02c8
 25197 00013922 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25198 00013926 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25199 0001392A 48FFC6                  	inc rsi
 25200 0001392D 48FFC2                  	inc rdx
 25201 00013930 EBEA                    	jmp .L_lambda_simple_env_loop_02c8
 25202                                  .L_lambda_simple_env_end_02c8:
 25203 00013932 5B                      	pop rbx
 25204 00013933 BE00000000              	mov rsi, 0
 25205                                  .L_lambda_simple_params_loop_02c8:	; copy params
 25206 00013938 4883FE02                	cmp rsi, 2
 25207 0001393C 740E                    	je .L_lambda_simple_params_end_02c8
 25208 0001393E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25209 00013943 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25210 00013947 48FFC6                  	inc rsi
 25211 0001394A EBEC                    	jmp .L_lambda_simple_params_loop_02c8
 25212                                  .L_lambda_simple_params_end_02c8:
 25213 0001394C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 25214 0001394F 4889C3                  	mov rbx, rax
 25215 00013952 58                      	pop rax
 25216 00013953 C60004                  	mov byte [rax], T_closure
 25217 00013956 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25218 0001395A 48C74009[67390100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02c8
 25219 00013962 E9B2020000              	jmp .L_lambda_simple_end_02c8
 25220                                  .L_lambda_simple_code_02c8:	; lambda-simple body
 25221 00013967 48837C241003            	cmp qword [rsp + 8 * 2], 3
 25222 0001396D 740B                    	je .L_lambda_simple_arity_check_ok_02c8
 25223 0001396F FF742410                	push qword [rsp + 8 * 2]
 25224 00013973 6A03                    	push 3
 25225 00013975 E991370000              	jmp L_error_incorrect_arity_simple
 25226                                  .L_lambda_simple_arity_check_ok_02c8:
 25227 0001397A C8000000                	enter 0, 0
 25228                                  	; preparing a non-tail-call
 25229 0001397E 488B4530                	mov rax, PARAM(2)	; param s
 25230 00013982 50                      	push rax
 25231 00013983 6A01                    	push 1	; arg count
 25232 00013985 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 25233 0001398D 803805                  	cmp byte [rax], T_undefined
 25234 00013990 0F848F360000            	je L_error_fvar_undefined
 25235 00013996 803804                  	cmp byte [rax], T_closure
 25236 00013999 0F850A370000            	jne L_error_non_closure
 25237 0001399F FF7001                  	push SOB_CLOSURE_ENV(rax)
 25238 000139A2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25239 000139A5 483D[02000000]          	cmp rax, sob_boolean_false
 25240 000139AB 7409                    	je .L_if_else_0213
 25241 000139AD 488B4520                	mov rax, PARAM(0)	; param target
 25242 000139B1 E95F020000              	jmp .L_if_end_0213
 25243                                  .L_if_else_0213:
 25244                                  	; preparing a tail-call
 25245                                  	; preparing a non-tail-call
 25246                                  	; preparing a non-tail-call
 25247                                  	; preparing a non-tail-call
 25248 000139B6 488B4530                	mov rax, PARAM(2)	; param s
 25249 000139BA 50                      	push rax
 25250 000139BB 6A01                    	push 1	; arg count
 25251 000139BD 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 25252 000139C5 803805                  	cmp byte [rax], T_undefined
 25253 000139C8 0F8457360000            	je L_error_fvar_undefined
 25254 000139CE 803804                  	cmp byte [rax], T_closure
 25255 000139D1 0F85D2360000            	jne L_error_non_closure
 25256 000139D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25257 000139DA FF5009                  	call SOB_CLOSURE_CODE(rax)
 25258 000139DD 50                      	push rax
 25259 000139DE 6A01                    	push 1	; arg count
 25260 000139E0 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 25261 000139E8 803805                  	cmp byte [rax], T_undefined
 25262 000139EB 0F8434360000            	je L_error_fvar_undefined
 25263 000139F1 803804                  	cmp byte [rax], T_closure
 25264 000139F4 0F85AF360000            	jne L_error_non_closure
 25265 000139FA FF7001                  	push SOB_CLOSURE_ENV(rax)
 25266 000139FD FF5009                  	call SOB_CLOSURE_CODE(rax)
 25267 00013A00 50                      	push rax
 25268 00013A01 48B8-                   	mov rax, L_constants + 2135
 25268 00013A03 [5708000000000000] 
 25269 00013A0B 50                      	push rax
 25270                                  	; preparing a non-tail-call
 25271 00013A0C 488B4530                	mov rax, PARAM(2)	; param s
 25272 00013A10 50                      	push rax
 25273 00013A11 6A01                    	push 1	; arg count
 25274 00013A13 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 25275 00013A1B 803805                  	cmp byte [rax], T_undefined
 25276 00013A1E 0F8401360000            	je L_error_fvar_undefined
 25277 00013A24 803804                  	cmp byte [rax], T_closure
 25278 00013A27 0F857C360000            	jne L_error_non_closure
 25279 00013A2D FF7001                  	push SOB_CLOSURE_ENV(rax)
 25280 00013A30 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25281 00013A33 50                      	push rax
 25282 00013A34 488B4528                	mov rax, PARAM(1)	; param i
 25283 00013A38 50                      	push rax
 25284 00013A39 488B4520                	mov rax, PARAM(0)	; param target
 25285 00013A3D 50                      	push rax
 25286 00013A3E 6A05                    	push 5	; arg count
 25287 00013A40 488B4510                	mov rax, ENV
 25288 00013A44 488B00                  	mov rax, qword [rax + 8 * 0]
 25289 00013A47 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 25290 00013A4B 488B00                  	mov rax, qword [rax]
 25291 00013A4E 803804                  	cmp byte [rax], T_closure
 25292 00013A51 0F8552360000            	jne L_error_non_closure
 25293 00013A57 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25294 00013A5A FF5009                  	call SOB_CLOSURE_CODE(rax)
 25295 00013A5D 50                      	push rax
 25296 00013A5E 6A01                    	push 1	; arg count
 25297 00013A60 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25298 00013A65 E8E8360000              	call malloc
 25299 00013A6A 50                      	push rax
 25300 00013A6B BF18000000              	mov rdi, 8 * 3	; new rib
 25301 00013A70 E8DD360000              	call malloc
 25302 00013A75 50                      	push rax
 25303 00013A76 BF18000000              	mov rdi, 8 * 3	; extended env
 25304 00013A7B E8D2360000              	call malloc
 25305 00013A80 488B7D10                	mov rdi, ENV
 25306 00013A84 BE00000000              	mov rsi, 0
 25307 00013A89 BA01000000              	mov rdx, 1
 25308                                  .L_lambda_simple_env_loop_02c9:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 25309 00013A8E 4883FE02                	cmp rsi, 2
 25310 00013A92 7410                    	je .L_lambda_simple_env_end_02c9
 25311 00013A94 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25312 00013A98 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25313 00013A9C 48FFC6                  	inc rsi
 25314 00013A9F 48FFC2                  	inc rdx
 25315 00013AA2 EBEA                    	jmp .L_lambda_simple_env_loop_02c9
 25316                                  .L_lambda_simple_env_end_02c9:
 25317 00013AA4 5B                      	pop rbx
 25318 00013AA5 BE00000000              	mov rsi, 0
 25319                                  .L_lambda_simple_params_loop_02c9:	; copy params
 25320 00013AAA 4883FE03                	cmp rsi, 3
 25321 00013AAE 740E                    	je .L_lambda_simple_params_end_02c9
 25322 00013AB0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25323 00013AB5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25324 00013AB9 48FFC6                  	inc rsi
 25325 00013ABC EBEC                    	jmp .L_lambda_simple_params_loop_02c9
 25326                                  .L_lambda_simple_params_end_02c9:
 25327 00013ABE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 25328 00013AC1 4889C3                  	mov rbx, rax
 25329 00013AC4 58                      	pop rax
 25330 00013AC5 C60004                  	mov byte [rax], T_closure
 25331 00013AC8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25332 00013ACC 48C74009[D93A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02c9
 25333 00013AD4 E9D3000000              	jmp .L_lambda_simple_end_02c9
 25334                                  .L_lambda_simple_code_02c9:	; lambda-simple body
 25335 00013AD9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25336 00013ADF 740B                    	je .L_lambda_simple_arity_check_ok_02c9
 25337 00013AE1 FF742410                	push qword [rsp + 8 * 2]
 25338 00013AE5 6A01                    	push 1
 25339 00013AE7 E91F360000              	jmp L_error_incorrect_arity_simple
 25340                                  .L_lambda_simple_arity_check_ok_02c9:
 25341 00013AEC C8000000                	enter 0, 0
 25342                                  	; preparing a tail-call
 25343                                  	; preparing a non-tail-call
 25344 00013AF0 488B4510                	mov rax, ENV
 25345 00013AF4 488B00                  	mov rax, qword [rax + 8 * 0]
 25346 00013AF7 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var s
 25347 00013AFB 50                      	push rax
 25348 00013AFC 6A01                    	push 1	; arg count
 25349 00013AFE 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 25350 00013B06 803805                  	cmp byte [rax], T_undefined
 25351 00013B09 0F8416350000            	je L_error_fvar_undefined
 25352 00013B0F 803804                  	cmp byte [rax], T_closure
 25353 00013B12 0F8591350000            	jne L_error_non_closure
 25354 00013B18 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25355 00013B1B FF5009                  	call SOB_CLOSURE_CODE(rax)
 25356 00013B1E 50                      	push rax
 25357 00013B1F 488B4520                	mov rax, PARAM(0)	; param i
 25358 00013B23 50                      	push rax
 25359 00013B24 488B4510                	mov rax, ENV
 25360 00013B28 488B00                  	mov rax, qword [rax + 8 * 0]
 25361 00013B2B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var target
 25362 00013B2E 50                      	push rax
 25363 00013B2F 6A03                    	push 3	; arg count
 25364 00013B31 488B4510                	mov rax, ENV
 25365 00013B35 488B4008                	mov rax, qword [rax + 8 * 1]
 25366 00013B39 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25367 00013B3C 488B00                  	mov rax, qword [rax]
 25368 00013B3F 803804                  	cmp byte [rax], T_closure
 25369 00013B42 0F8561350000            	jne L_error_non_closure
 25370 00013B48 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25371 00013B4B 4C8B4009                	mov r8, qword [rax + 1 + 8]
 25372 00013B4F FF7508                  	push qword [rbp + 8]				; push old return address
 25373 00013B52 FF7500                  	push qword [rbp]					; push old rbp
 25374                                  	;; move stack up ;;
 25375 00013B55 488B5D18                	mov rbx, [rbp + 3*8]
 25376 00013B59 4889DE                  	mov rsi, rbx						; save old size in rsi
 25377 00013B5C 4883C303                	add rbx, 3
 25378 00013B60 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 25379 00013B68 B903000000              	mov rcx, 3
 25380 00013B6D 4883C104                	add rcx, 4				; num of iterations in rcx
 25381                                  .L_tc_recycle_frame_loop_03aa:
 25382 00013B71 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 25383 00013B79 488B143C                	mov rdx, [rsp + rdi]
 25384 00013B7D 4889541D00              	mov [rbp + rbx], rdx
 25385 00013B82 4883EB08                	sub rbx, 8
 25386 00013B86 48FFC9                  	dec rcx
 25387 00013B89 4883F900                	cmp rcx, 0
 25388 00013B8D 75E2                    	jne .L_tc_recycle_frame_loop_03aa
 25389 00013B8F 4889F3                  	mov rbx, rsi
 25390 00013B92 4883EB03                	sub rbx, 3
 25391 00013B96 488D1CDD00000000        	lea rbx, [rbx*8]
 25392 00013B9E 4801DD                  	add rbp, rbx
 25393 00013BA1 4889EC                  	mov rsp, rbp         ; fix stack pointers
 25394 00013BA4 5D                      	pop rbp
 25395 00013BA5 41FFE0                  	jmp r8
 25396 00013BA8 C9                      	leave
 25397 00013BA9 C21800                  	ret AND_KILL_FRAME(1)
 25398                                  .L_lambda_simple_end_02c9:	; new closure is in rax
 25399 00013BAC 803804                  	cmp byte [rax], T_closure
 25400 00013BAF 0F85F4340000            	jne L_error_non_closure
 25401 00013BB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25402 00013BB8 4C8B4009                	mov r8, qword [rax + 1 + 8]
 25403 00013BBC FF7508                  	push qword [rbp + 8]				; push old return address
 25404 00013BBF FF7500                  	push qword [rbp]					; push old rbp
 25405                                  	;; move stack up ;;
 25406 00013BC2 488B5D18                	mov rbx, [rbp + 3*8]
 25407 00013BC6 4889DE                  	mov rsi, rbx						; save old size in rsi
 25408 00013BC9 4883C303                	add rbx, 3
 25409 00013BCD 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 25410 00013BD5 B901000000              	mov rcx, 1
 25411 00013BDA 4883C104                	add rcx, 4				; num of iterations in rcx
 25412                                  .L_tc_recycle_frame_loop_03a9:
 25413 00013BDE 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 25414 00013BE6 488B143C                	mov rdx, [rsp + rdi]
 25415 00013BEA 4889541D00              	mov [rbp + rbx], rdx
 25416 00013BEF 4883EB08                	sub rbx, 8
 25417 00013BF3 48FFC9                  	dec rcx
 25418 00013BF6 4883F900                	cmp rcx, 0
 25419 00013BFA 75E2                    	jne .L_tc_recycle_frame_loop_03a9
 25420 00013BFC 4889F3                  	mov rbx, rsi
 25421 00013BFF 4883EB01                	sub rbx, 1
 25422 00013C03 488D1CDD00000000        	lea rbx, [rbx*8]
 25423 00013C0B 4801DD                  	add rbp, rbx
 25424 00013C0E 4889EC                  	mov rsp, rbp         ; fix stack pointers
 25425 00013C11 5D                      	pop rbp
 25426 00013C12 41FFE0                  	jmp r8
 25427                                  .L_if_end_0213:
 25428 00013C15 C9                      	leave
 25429 00013C16 C22800                  	ret AND_KILL_FRAME(3)
 25430                                  .L_lambda_simple_end_02c8:	; new closure is in rax
 25431 00013C19 50                      	push rax
 25432 00013C1A 488B4520                	mov rax, PARAM(0)	; param run
 25433 00013C1E 8F00                    	pop qword [rax]
 25434 00013C20 48B8-                   	mov rax, sob_void
 25434 00013C22 [0000000000000000] 
 25435                                  
 25436 00013C2A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25437 00013C2F E81E350000              	call malloc
 25438 00013C34 50                      	push rax
 25439 00013C35 BF10000000              	mov rdi, 8 * 2	; new rib
 25440 00013C3A E813350000              	call malloc
 25441 00013C3F 50                      	push rax
 25442 00013C40 BF10000000              	mov rdi, 8 * 2	; extended env
 25443 00013C45 E808350000              	call malloc
 25444 00013C4A 488B7D10                	mov rdi, ENV
 25445 00013C4E BE00000000              	mov rsi, 0
 25446 00013C53 BA01000000              	mov rdx, 1
 25447                                  .L_lambda_simple_env_loop_02ca:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 25448 00013C58 4883FE01                	cmp rsi, 1
 25449 00013C5C 7410                    	je .L_lambda_simple_env_end_02ca
 25450 00013C5E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25451 00013C62 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25452 00013C66 48FFC6                  	inc rsi
 25453 00013C69 48FFC2                  	inc rdx
 25454 00013C6C EBEA                    	jmp .L_lambda_simple_env_loop_02ca
 25455                                  .L_lambda_simple_env_end_02ca:
 25456 00013C6E 5B                      	pop rbx
 25457 00013C6F BE00000000              	mov rsi, 0
 25458                                  .L_lambda_simple_params_loop_02ca:	; copy params
 25459 00013C74 4883FE02                	cmp rsi, 2
 25460 00013C78 740E                    	je .L_lambda_simple_params_end_02ca
 25461 00013C7A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25462 00013C7F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25463 00013C83 48FFC6                  	inc rsi
 25464 00013C86 EBEC                    	jmp .L_lambda_simple_params_loop_02ca
 25465                                  .L_lambda_simple_params_end_02ca:
 25466 00013C88 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 25467 00013C8B 4889C3                  	mov rbx, rax
 25468 00013C8E 58                      	pop rax
 25469 00013C8F C60004                  	mov byte [rax], T_closure
 25470 00013C92 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25471 00013C96 48C74009[A33C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02ca
 25472 00013C9E E9A0010000              	jmp .L_lambda_simple_end_02ca
 25473                                  .L_lambda_simple_code_02ca:	; lambda-simple body
 25474 00013CA3 48837C241005            	cmp qword [rsp + 8 * 2], 5
 25475 00013CA9 740B                    	je .L_lambda_simple_arity_check_ok_02ca
 25476 00013CAB FF742410                	push qword [rsp + 8 * 2]
 25477 00013CAF 6A05                    	push 5
 25478 00013CB1 E955340000              	jmp L_error_incorrect_arity_simple
 25479                                  .L_lambda_simple_arity_check_ok_02ca:
 25480 00013CB6 C8000000                	enter 0, 0
 25481                                  	; preparing a non-tail-call
 25482 00013CBA 488B4540                	mov rax, PARAM(4)	; param limit
 25483 00013CBE 50                      	push rax
 25484 00013CBF 488B4538                	mov rax, PARAM(3)	; param j
 25485 00013CC3 50                      	push rax
 25486 00013CC4 6A02                    	push 2	; arg count
 25487 00013CC6 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 25488 00013CCE 803805                  	cmp byte [rax], T_undefined
 25489 00013CD1 0F844E330000            	je L_error_fvar_undefined
 25490 00013CD7 803804                  	cmp byte [rax], T_closure
 25491 00013CDA 0F85C9330000            	jne L_error_non_closure
 25492 00013CE0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25493 00013CE3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25494 00013CE6 483D[02000000]          	cmp rax, sob_boolean_false
 25495 00013CEC 0F8449010000            	je .L_if_else_0214
 25496                                  	; preparing a non-tail-call
 25497                                  	; preparing a non-tail-call
 25498 00013CF2 488B4538                	mov rax, PARAM(3)	; param j
 25499 00013CF6 50                      	push rax
 25500 00013CF7 488B4530                	mov rax, PARAM(2)	; param str
 25501 00013CFB 50                      	push rax
 25502 00013CFC 6A02                    	push 2	; arg count
 25503 00013CFE 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 25504 00013D06 803805                  	cmp byte [rax], T_undefined
 25505 00013D09 0F8416330000            	je L_error_fvar_undefined
 25506 00013D0F 803804                  	cmp byte [rax], T_closure
 25507 00013D12 0F8591330000            	jne L_error_non_closure
 25508 00013D18 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25509 00013D1B FF5009                  	call SOB_CLOSURE_CODE(rax)
 25510 00013D1E 50                      	push rax
 25511 00013D1F 488B4528                	mov rax, PARAM(1)	; param i
 25512 00013D23 50                      	push rax
 25513 00013D24 488B4520                	mov rax, PARAM(0)	; param target
 25514 00013D28 50                      	push rax
 25515 00013D29 6A03                    	push 3	; arg count
 25516 00013D2B 488B0425[8A160000]      	mov rax, qword [free_var_131]	; free var string-set!
 25517 00013D33 803805                  	cmp byte [rax], T_undefined
 25518 00013D36 0F84E9320000            	je L_error_fvar_undefined
 25519 00013D3C 803804                  	cmp byte [rax], T_closure
 25520 00013D3F 0F8564330000            	jne L_error_non_closure
 25521 00013D45 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25522 00013D48 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25523                                  
 25524                                  	; preparing a tail-call
 25525 00013D4B 488B4540                	mov rax, PARAM(4)	; param limit
 25526 00013D4F 50                      	push rax
 25527                                  	; preparing a non-tail-call
 25528 00013D50 48B8-                   	mov rax, L_constants + 2270
 25528 00013D52 [DE08000000000000] 
 25529 00013D5A 50                      	push rax
 25530 00013D5B 488B4538                	mov rax, PARAM(3)	; param j
 25531 00013D5F 50                      	push rax
 25532 00013D60 6A02                    	push 2	; arg count
 25533 00013D62 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 25534 00013D6A 803805                  	cmp byte [rax], T_undefined
 25535 00013D6D 0F84B2320000            	je L_error_fvar_undefined
 25536 00013D73 803804                  	cmp byte [rax], T_closure
 25537 00013D76 0F852D330000            	jne L_error_non_closure
 25538 00013D7C FF7001                  	push SOB_CLOSURE_ENV(rax)
 25539 00013D7F FF5009                  	call SOB_CLOSURE_CODE(rax)
 25540 00013D82 50                      	push rax
 25541 00013D83 488B4530                	mov rax, PARAM(2)	; param str
 25542 00013D87 50                      	push rax
 25543                                  	; preparing a non-tail-call
 25544 00013D88 48B8-                   	mov rax, L_constants + 2270
 25544 00013D8A [DE08000000000000] 
 25545 00013D92 50                      	push rax
 25546 00013D93 488B4528                	mov rax, PARAM(1)	; param i
 25547 00013D97 50                      	push rax
 25548 00013D98 6A02                    	push 2	; arg count
 25549 00013D9A 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 25550 00013DA2 803805                  	cmp byte [rax], T_undefined
 25551 00013DA5 0F847A320000            	je L_error_fvar_undefined
 25552 00013DAB 803804                  	cmp byte [rax], T_closure
 25553 00013DAE 0F85F5320000            	jne L_error_non_closure
 25554 00013DB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25555 00013DB7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25556 00013DBA 50                      	push rax
 25557 00013DBB 488B4520                	mov rax, PARAM(0)	; param target
 25558 00013DBF 50                      	push rax
 25559 00013DC0 6A05                    	push 5	; arg count
 25560 00013DC2 488B4510                	mov rax, ENV
 25561 00013DC6 488B00                  	mov rax, qword [rax + 8 * 0]
 25562 00013DC9 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 25563 00013DCD 488B00                  	mov rax, qword [rax]
 25564 00013DD0 803804                  	cmp byte [rax], T_closure
 25565 00013DD3 0F85D0320000            	jne L_error_non_closure
 25566 00013DD9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25567 00013DDC 4C8B4009                	mov r8, qword [rax + 1 + 8]
 25568 00013DE0 FF7508                  	push qword [rbp + 8]				; push old return address
 25569 00013DE3 FF7500                  	push qword [rbp]					; push old rbp
 25570                                  	;; move stack up ;;
 25571 00013DE6 488B5D18                	mov rbx, [rbp + 3*8]
 25572 00013DEA 4889DE                  	mov rsi, rbx						; save old size in rsi
 25573 00013DED 4883C303                	add rbx, 3
 25574 00013DF1 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 25575 00013DF9 B905000000              	mov rcx, 5
 25576 00013DFE 4883C104                	add rcx, 4				; num of iterations in rcx
 25577                                  .L_tc_recycle_frame_loop_03ab:
 25578 00013E02 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 25579 00013E0A 488B143C                	mov rdx, [rsp + rdi]
 25580 00013E0E 4889541D00              	mov [rbp + rbx], rdx
 25581 00013E13 4883EB08                	sub rbx, 8
 25582 00013E17 48FFC9                  	dec rcx
 25583 00013E1A 4883F900                	cmp rcx, 0
 25584 00013E1E 75E2                    	jne .L_tc_recycle_frame_loop_03ab
 25585 00013E20 4889F3                  	mov rbx, rsi
 25586 00013E23 4883EB05                	sub rbx, 5
 25587 00013E27 488D1CDD00000000        	lea rbx, [rbx*8]
 25588 00013E2F 4801DD                  	add rbp, rbx
 25589 00013E32 4889EC                  	mov rsp, rbp         ; fix stack pointers
 25590 00013E35 5D                      	pop rbp
 25591 00013E36 41FFE0                  	jmp r8
 25592 00013E39 EB04                    	jmp .L_if_end_0214
 25593                                  .L_if_else_0214:
 25594 00013E3B 488B4528                	mov rax, PARAM(1)	; param i
 25595                                  .L_if_end_0214:
 25596 00013E3F C9                      	leave
 25597 00013E40 C23800                  	ret AND_KILL_FRAME(5)
 25598                                  .L_lambda_simple_end_02ca:	; new closure is in rax
 25599 00013E43 50                      	push rax
 25600 00013E44 488B4528                	mov rax, PARAM(1)	; param add
 25601 00013E48 8F00                    	pop qword [rax]
 25602 00013E4A 48B8-                   	mov rax, sob_void
 25602 00013E4C [0000000000000000] 
 25603                                  
 25604 00013E54 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25605 00013E59 E8F4320000              	call malloc
 25606 00013E5E 50                      	push rax
 25607 00013E5F BF10000000              	mov rdi, 8 * 2	; new rib
 25608 00013E64 E8E9320000              	call malloc
 25609 00013E69 50                      	push rax
 25610 00013E6A BF10000000              	mov rdi, 8 * 2	; extended env
 25611 00013E6F E8DE320000              	call malloc
 25612 00013E74 488B7D10                	mov rdi, ENV
 25613 00013E78 BE00000000              	mov rsi, 0
 25614 00013E7D BA01000000              	mov rdx, 1
 25615                                  .L_lambda_opt_env_loop_005f:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 25616 00013E82 4883FE01                	cmp rsi, 1
 25617 00013E86 7410                    	je .L_lambda_opt_env_end_005f
 25618 00013E88 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25619 00013E8C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25620 00013E90 48FFC6                  	inc rsi
 25621 00013E93 48FFC2                  	inc rdx
 25622 00013E96 EBEA                    	jmp .L_lambda_opt_env_loop_005f
 25623                                  .L_lambda_opt_env_end_005f:
 25624 00013E98 5B                      	pop rbx
 25625 00013E99 BE00000000              	mov rsi, 0
 25626                                  .L_lambda_opt_params_loop_005f:	; copy params
 25627 00013E9E 4883FE02                	cmp rsi, 2
 25628 00013EA2 740E                    	je .L_lambda_opt_params_end_005f
 25629 00013EA4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25630 00013EA9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25631 00013EAD 48FFC6                  	inc rsi
 25632 00013EB0 EBEC                    	jmp .L_lambda_opt_params_loop_005f
 25633                                  .L_lambda_opt_params_end_005f:
 25634 00013EB2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 25635 00013EB5 4889C3                  	mov rbx, rax
 25636 00013EB8 58                      	pop rax
 25637 00013EB9 C60004                  	mov byte [rax], T_closure
 25638 00013EBC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25639 00013EC0 48C74009[CD3E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_005f
 25640 00013EC8 E9FC010000              	jmp .L_lambda_opt_end_005f
 25641                                  .L_lambda_opt_code_005f:	; lambda-opt body
 25642 00013ECD 48837C241000            	cmp qword [rsp + 8 * 2], 0
 25643 00013ED3 740D                    	je .L_lambda_opt_arity_check_exact_005f
 25644 00013ED5 7F48                    	jg .L_lambda_opt_arity_check_more_005f
 25645 00013ED7 FF742410                	push qword [rsp + 8 * 2]
 25646 00013EDB 6A00                    	push 0
 25647 00013EDD E93D320000              	jmp L_error_incorrect_arity_opt
 25648                                  .L_lambda_opt_arity_check_exact_005f:
 25649 00013EE2 48C744241001000000      	mov qword [rsp + 8 * 2], 1	; Update argument count (fixed params + 1 for nil)
 25650 00013EEB 41BA03000000            	mov r10, 3	; r10 = total addresses to adjust (fixed params + 3)
 25651 00013EF1 FF3424                  	push qword [rsp]	; Save the top stack element
 25652 00013EF4 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
 25653                                  .L_lambda_opt_stack_shrink_loop_011b:
 25654 00013EFA 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
 25655 00013EFD 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_011b	; Exit loop if all elements processed
 25656 00013EFF 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
 25657 00013F04 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
 25658 00013F08 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
 25659 00013F0D 49FFC3                  	inc r11	; Increment loop index
 25660 00013F10 EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_011b	; Jump back to loop start
 25661                                  .L_lambda_opt_stack_shrink_loop_exit_011b:
 25662 00013F12 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
 25663 00013F1A E988000000              	jmp .L_lambda_opt_stack_adjusted_005f
 25664                                  .L_lambda_opt_arity_check_more_005f:
 25665 00013F1F 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
 25666 00013F24 4983E800                	sub r8, 0	; r8 = count of optional params
 25667 00013F28 48C744241001000000      	mov qword [rsp + 8 * 2], 1	; Update the number of params (fixed params + 1 for list opt)
 25668 00013F31 41B900000000            	mov r9, 0	; r9 = index of optional argument list
 25669 00013F37 4E8D54C410              	lea r10, [rsp + 2 * 8 + 0 * 8 + r8 * 8]	; r10 = address of first optional param
 25670 00013F3C 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
 25670 00013F3E [0100000000000000] 
 25671                                  .L_lambda_opt_stack_shrink_loop_011c:
 25672 00013F46 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
 25673 00013F49 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_011c	; Exit loop if all optional params are processed
 25674 00013F4B BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
 25675 00013F50 E8FD310000              	call malloc	; Allocate memory for a new pair
 25676 00013F55 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
 25677 00013F59 49F7D9                  	neg r9	; Negate index to access in reverse
 25678 00013F5C 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
 25679 00013F60 49F7D9                  	neg r9	; Negate index back
 25680 00013F63 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
 25681 00013F67 C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
 25682 00013F6A 4989C3                  	mov r11, rax	; Update current pair to the newly created one
 25683 00013F6D 49FFC1                  	inc r9	; Increment the index
 25684 00013F70 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_011c	; Repeat the loop for the next param
 25685                                  .L_lambda_opt_stack_shrink_loop_exit_011c:
 25686 00013F72 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
 25687 00013F75 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
 25688 00013F79 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
 25689 00013F7C 4983C410                	add r12, 16	; Skip fixed params and return address
 25690 00013F80 41BD03000000            	mov r13, 3	; r13 = loop counter (number of params, old fp, ret addr, lex env)
 25691                                  .L_lambda_opt_stack_shrink_loop_011d:
 25692 00013F86 4983FD00                	cmp r13, 0	; Check if there are more values to copy
 25693 00013F8A 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_011d	; Exit loop if all values are copied
 25694 00013F8C 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
 25695 00013F90 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
 25696 00013F93 49FFCD                  	dec r13	; Decrement the loop counter
 25697 00013F96 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
 25698 00013F9A 4983EC08                	sub r12, 8	; Move the source pointer to the next location
 25699 00013F9E EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_011d	; Repeat the loop for the next value
 25700                                  .L_lambda_opt_stack_shrink_loop_exit_011d:
 25701 00013FA0 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
 25702 00013FA4 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
 25703                                  .L_lambda_opt_stack_adjusted_005f:
 25704 00013FA7 C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
 25705                                  	; preparing a tail-call
 25706 00013FAB 488B4520                	mov rax, PARAM(0)	; param strings
 25707 00013FAF 50                      	push rax
 25708 00013FB0 48B8-                   	mov rax, L_constants + 2135
 25708 00013FB2 [5708000000000000] 
 25709 00013FBA 50                      	push rax
 25710                                  	; preparing a non-tail-call
 25711                                  	; preparing a non-tail-call
 25712                                  	; preparing a non-tail-call
 25713 00013FBB 488B4520                	mov rax, PARAM(0)	; param strings
 25714 00013FBF 50                      	push rax
 25715 00013FC0 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 25716 00013FC8 803805                  	cmp byte [rax], T_undefined
 25717 00013FCB 0F8454300000            	je L_error_fvar_undefined
 25718 00013FD1 50                      	push rax
 25719 00013FD2 6A02                    	push 2	; arg count
 25720 00013FD4 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
 25721 00013FDC 803805                  	cmp byte [rax], T_undefined
 25722 00013FDF 0F8440300000            	je L_error_fvar_undefined
 25723 00013FE5 803804                  	cmp byte [rax], T_closure
 25724 00013FE8 0F85BB300000            	jne L_error_non_closure
 25725 00013FEE FF7001                  	push SOB_CLOSURE_ENV(rax)
 25726 00013FF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25727 00013FF4 50                      	push rax
 25728 00013FF5 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 25729 00013FFD 803805                  	cmp byte [rax], T_undefined
 25730 00014000 0F841F300000            	je L_error_fvar_undefined
 25731 00014006 50                      	push rax
 25732 00014007 6A02                    	push 2	; arg count
 25733 00014009 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
 25734 00014011 803805                  	cmp byte [rax], T_undefined
 25735 00014014 0F840B300000            	je L_error_fvar_undefined
 25736 0001401A 803804                  	cmp byte [rax], T_closure
 25737 0001401D 0F8586300000            	jne L_error_non_closure
 25738 00014023 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25739 00014026 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25740 00014029 50                      	push rax
 25741 0001402A 6A01                    	push 1	; arg count
 25742 0001402C 488B0425[6A140000]      	mov rax, qword [free_var_99]	; free var make-string
 25743 00014034 803805                  	cmp byte [rax], T_undefined
 25744 00014037 0F84E82F0000            	je L_error_fvar_undefined
 25745 0001403D 803804                  	cmp byte [rax], T_closure
 25746 00014040 0F8563300000            	jne L_error_non_closure
 25747 00014046 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25748 00014049 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25749 0001404C 50                      	push rax
 25750 0001404D 6A03                    	push 3	; arg count
 25751 0001404F 488B4510                	mov rax, ENV
 25752 00014053 488B00                  	mov rax, qword [rax + 8 * 0]
 25753 00014056 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25754 00014059 488B00                  	mov rax, qword [rax]
 25755 0001405C 803804                  	cmp byte [rax], T_closure
 25756 0001405F 0F8544300000            	jne L_error_non_closure
 25757 00014065 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25758 00014068 4C8B4009                	mov r8, qword [rax + 1 + 8]
 25759 0001406C FF7508                  	push qword [rbp + 8]				; push old return address
 25760 0001406F FF7500                  	push qword [rbp]					; push old rbp
 25761                                  	;; move stack up ;;
 25762 00014072 488B5D18                	mov rbx, [rbp + 3*8]
 25763 00014076 4889DE                  	mov rsi, rbx						; save old size in rsi
 25764 00014079 4883C303                	add rbx, 3
 25765 0001407D 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 25766 00014085 B903000000              	mov rcx, 3
 25767 0001408A 4883C104                	add rcx, 4				; num of iterations in rcx
 25768                                  .L_tc_recycle_frame_loop_03ac:
 25769 0001408E 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 25770 00014096 488B143C                	mov rdx, [rsp + rdi]
 25771 0001409A 4889541D00              	mov [rbp + rbx], rdx
 25772 0001409F 4883EB08                	sub rbx, 8
 25773 000140A3 48FFC9                  	dec rcx
 25774 000140A6 4883F900                	cmp rcx, 0
 25775 000140AA 75E2                    	jne .L_tc_recycle_frame_loop_03ac
 25776 000140AC 4889F3                  	mov rbx, rsi
 25777 000140AF 4883EB03                	sub rbx, 3
 25778 000140B3 488D1CDD00000000        	lea rbx, [rbx*8]
 25779 000140BB 4801DD                  	add rbp, rbx
 25780 000140BE 4889EC                  	mov rsp, rbp         ; fix stack pointers
 25781 000140C1 5D                      	pop rbp
 25782 000140C2 41FFE0                  	jmp r8
 25783 000140C5 C9                      	leave	; Restore the previous stack frame
 25784 000140C6 C21800                  	ret AND_KILL_FRAME(1)
 25785                                  .L_lambda_opt_end_005f:	; new closure is in rax
 25786 000140C9 C9                      	leave
 25787 000140CA C22000                  	ret AND_KILL_FRAME(2)
 25788                                  .L_lambda_simple_end_02c7:	; new closure is in rax
 25789 000140CD 803804                  	cmp byte [rax], T_closure
 25790 000140D0 0F85D32F0000            	jne L_error_non_closure
 25791 000140D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25792 000140D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25793 000140DC 48890425[CF150000]      	mov qword [free_var_120], rax
 25794 000140E4 48B8-                   	mov rax, sob_void
 25794 000140E6 [0000000000000000] 
 25795                                  
 25796 000140EE 4889C7                  	mov rdi, rax
 25797 000140F1 E8B1320000              	call print_sexpr_if_not_void
 25798                                  	; preparing a non-tail-call
 25799 000140F6 48B8-                   	mov rax, L_constants + 1993
 25799 000140F8 [C907000000000000] 
 25800 00014100 50                      	push rax
 25801 00014101 48B8-                   	mov rax, L_constants + 1993
 25801 00014103 [C907000000000000] 
 25802 0001410B 50                      	push rax
 25803 0001410C 6A02                    	push 2	; arg count
 25804 0001410E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25805 00014113 E83A300000              	call malloc
 25806 00014118 50                      	push rax
 25807 00014119 BF00000000              	mov rdi, 8 * 0	; new rib
 25808 0001411E E82F300000              	call malloc
 25809 00014123 50                      	push rax
 25810 00014124 BF08000000              	mov rdi, 8 * 1	; extended env
 25811 00014129 E824300000              	call malloc
 25812 0001412E 488B7D10                	mov rdi, ENV
 25813 00014132 BE00000000              	mov rsi, 0
 25814 00014137 BA01000000              	mov rdx, 1
 25815                                  .L_lambda_simple_env_loop_02cb:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 25816 0001413C 4883FE00                	cmp rsi, 0
 25817 00014140 7410                    	je .L_lambda_simple_env_end_02cb
 25818 00014142 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25819 00014146 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25820 0001414A 48FFC6                  	inc rsi
 25821 0001414D 48FFC2                  	inc rdx
 25822 00014150 EBEA                    	jmp .L_lambda_simple_env_loop_02cb
 25823                                  .L_lambda_simple_env_end_02cb:
 25824 00014152 5B                      	pop rbx
 25825 00014153 BE00000000              	mov rsi, 0
 25826                                  .L_lambda_simple_params_loop_02cb:	; copy params
 25827 00014158 4883FE00                	cmp rsi, 0
 25828 0001415C 740E                    	je .L_lambda_simple_params_end_02cb
 25829 0001415E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25830 00014163 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25831 00014167 48FFC6                  	inc rsi
 25832 0001416A EBEC                    	jmp .L_lambda_simple_params_loop_02cb
 25833                                  .L_lambda_simple_params_end_02cb:
 25834 0001416C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 25835 0001416F 4889C3                  	mov rbx, rax
 25836 00014172 58                      	pop rax
 25837 00014173 C60004                  	mov byte [rax], T_closure
 25838 00014176 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25839 0001417A 48C74009[87410100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02cb
 25840 00014182 E934080000              	jmp .L_lambda_simple_end_02cb
 25841                                  .L_lambda_simple_code_02cb:	; lambda-simple body
 25842 00014187 48837C241002            	cmp qword [rsp + 8 * 2], 2
 25843 0001418D 740B                    	je .L_lambda_simple_arity_check_ok_02cb
 25844 0001418F FF742410                	push qword [rsp + 8 * 2]
 25845 00014193 6A02                    	push 2
 25846 00014195 E9712F0000              	jmp L_error_incorrect_arity_simple
 25847                                  .L_lambda_simple_arity_check_ok_02cb:
 25848 0001419A C8000000                	enter 0, 0
 25849 0001419E BF08000000              	mov rdi, 8
 25850 000141A3 E8AA2F0000              	call malloc
 25851 000141A8 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
 25852 000141AC 488918                  	mov qword[rax], rbx
 25853 000141AF 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 25854 000141B3 48B8-                   	mov rax, sob_void
 25854 000141B5 [0000000000000000] 
 25855                                  
 25856 000141BD BF08000000              	mov rdi, 8
 25857 000141C2 E88B2F0000              	call malloc
 25858 000141C7 488B5D28                	mov rbx, qword [rbp + 8 * (4 + 1)]
 25859 000141CB 488918                  	mov qword[rax], rbx
 25860 000141CE 48894528                	mov qword [rbp + 8 * (4 + 1)], rax
 25861 000141D2 48B8-                   	mov rax, sob_void
 25861 000141D4 [0000000000000000] 
 25862                                  
 25863 000141DC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25864 000141E1 E86C2F0000              	call malloc
 25865 000141E6 50                      	push rax
 25866 000141E7 BF10000000              	mov rdi, 8 * 2	; new rib
 25867 000141EC E8612F0000              	call malloc
 25868 000141F1 50                      	push rax
 25869 000141F2 BF10000000              	mov rdi, 8 * 2	; extended env
 25870 000141F7 E8562F0000              	call malloc
 25871 000141FC 488B7D10                	mov rdi, ENV
 25872 00014200 BE00000000              	mov rsi, 0
 25873 00014205 BA01000000              	mov rdx, 1
 25874                                  .L_lambda_simple_env_loop_02cc:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 25875 0001420A 4883FE01                	cmp rsi, 1
 25876 0001420E 7410                    	je .L_lambda_simple_env_end_02cc
 25877 00014210 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25878 00014214 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25879 00014218 48FFC6                  	inc rsi
 25880 0001421B 48FFC2                  	inc rdx
 25881 0001421E EBEA                    	jmp .L_lambda_simple_env_loop_02cc
 25882                                  .L_lambda_simple_env_end_02cc:
 25883 00014220 5B                      	pop rbx
 25884 00014221 BE00000000              	mov rsi, 0
 25885                                  .L_lambda_simple_params_loop_02cc:	; copy params
 25886 00014226 4883FE02                	cmp rsi, 2
 25887 0001422A 740E                    	je .L_lambda_simple_params_end_02cc
 25888 0001422C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25889 00014231 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25890 00014235 48FFC6                  	inc rsi
 25891 00014238 EBEC                    	jmp .L_lambda_simple_params_loop_02cc
 25892                                  .L_lambda_simple_params_end_02cc:
 25893 0001423A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 25894 0001423D 4889C3                  	mov rbx, rax
 25895 00014240 58                      	pop rax
 25896 00014241 C60004                  	mov byte [rax], T_closure
 25897 00014244 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25898 00014248 48C74009[55420100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02cc
 25899 00014250 E9B2020000              	jmp .L_lambda_simple_end_02cc
 25900                                  .L_lambda_simple_code_02cc:	; lambda-simple body
 25901 00014255 48837C241003            	cmp qword [rsp + 8 * 2], 3
 25902 0001425B 740B                    	je .L_lambda_simple_arity_check_ok_02cc
 25903 0001425D FF742410                	push qword [rsp + 8 * 2]
 25904 00014261 6A03                    	push 3
 25905 00014263 E9A32E0000              	jmp L_error_incorrect_arity_simple
 25906                                  .L_lambda_simple_arity_check_ok_02cc:
 25907 00014268 C8000000                	enter 0, 0
 25908                                  	; preparing a non-tail-call
 25909 0001426C 488B4530                	mov rax, PARAM(2)	; param s
 25910 00014270 50                      	push rax
 25911 00014271 6A01                    	push 1	; arg count
 25912 00014273 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 25913 0001427B 803805                  	cmp byte [rax], T_undefined
 25914 0001427E 0F84A12D0000            	je L_error_fvar_undefined
 25915 00014284 803804                  	cmp byte [rax], T_closure
 25916 00014287 0F851C2E0000            	jne L_error_non_closure
 25917 0001428D FF7001                  	push SOB_CLOSURE_ENV(rax)
 25918 00014290 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25919 00014293 483D[02000000]          	cmp rax, sob_boolean_false
 25920 00014299 7409                    	je .L_if_else_0215
 25921 0001429B 488B4520                	mov rax, PARAM(0)	; param target
 25922 0001429F E95F020000              	jmp .L_if_end_0215
 25923                                  .L_if_else_0215:
 25924                                  	; preparing a tail-call
 25925                                  	; preparing a non-tail-call
 25926                                  	; preparing a non-tail-call
 25927                                  	; preparing a non-tail-call
 25928 000142A4 488B4530                	mov rax, PARAM(2)	; param s
 25929 000142A8 50                      	push rax
 25930 000142A9 6A01                    	push 1	; arg count
 25931 000142AB 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 25932 000142B3 803805                  	cmp byte [rax], T_undefined
 25933 000142B6 0F84692D0000            	je L_error_fvar_undefined
 25934 000142BC 803804                  	cmp byte [rax], T_closure
 25935 000142BF 0F85E42D0000            	jne L_error_non_closure
 25936 000142C5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25937 000142C8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25938 000142CB 50                      	push rax
 25939 000142CC 6A01                    	push 1	; arg count
 25940 000142CE 488B0425[56170000]      	mov rax, qword [free_var_143]	; free var vector-length
 25941 000142D6 803805                  	cmp byte [rax], T_undefined
 25942 000142D9 0F84462D0000            	je L_error_fvar_undefined
 25943 000142DF 803804                  	cmp byte [rax], T_closure
 25944 000142E2 0F85C12D0000            	jne L_error_non_closure
 25945 000142E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25946 000142EB FF5009                  	call SOB_CLOSURE_CODE(rax)
 25947 000142EE 50                      	push rax
 25948 000142EF 48B8-                   	mov rax, L_constants + 2135
 25948 000142F1 [5708000000000000] 
 25949 000142F9 50                      	push rax
 25950                                  	; preparing a non-tail-call
 25951 000142FA 488B4530                	mov rax, PARAM(2)	; param s
 25952 000142FE 50                      	push rax
 25953 000142FF 6A01                    	push 1	; arg count
 25954 00014301 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 25955 00014309 803805                  	cmp byte [rax], T_undefined
 25956 0001430C 0F84132D0000            	je L_error_fvar_undefined
 25957 00014312 803804                  	cmp byte [rax], T_closure
 25958 00014315 0F858E2D0000            	jne L_error_non_closure
 25959 0001431B FF7001                  	push SOB_CLOSURE_ENV(rax)
 25960 0001431E FF5009                  	call SOB_CLOSURE_CODE(rax)
 25961 00014321 50                      	push rax
 25962 00014322 488B4528                	mov rax, PARAM(1)	; param i
 25963 00014326 50                      	push rax
 25964 00014327 488B4520                	mov rax, PARAM(0)	; param target
 25965 0001432B 50                      	push rax
 25966 0001432C 6A05                    	push 5	; arg count
 25967 0001432E 488B4510                	mov rax, ENV
 25968 00014332 488B00                  	mov rax, qword [rax + 8 * 0]
 25969 00014335 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 25970 00014339 488B00                  	mov rax, qword [rax]
 25971 0001433C 803804                  	cmp byte [rax], T_closure
 25972 0001433F 0F85642D0000            	jne L_error_non_closure
 25973 00014345 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25974 00014348 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25975 0001434B 50                      	push rax
 25976 0001434C 6A01                    	push 1	; arg count
 25977 0001434E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25978 00014353 E8FA2D0000              	call malloc
 25979 00014358 50                      	push rax
 25980 00014359 BF18000000              	mov rdi, 8 * 3	; new rib
 25981 0001435E E8EF2D0000              	call malloc
 25982 00014363 50                      	push rax
 25983 00014364 BF18000000              	mov rdi, 8 * 3	; extended env
 25984 00014369 E8E42D0000              	call malloc
 25985 0001436E 488B7D10                	mov rdi, ENV
 25986 00014372 BE00000000              	mov rsi, 0
 25987 00014377 BA01000000              	mov rdx, 1
 25988                                  .L_lambda_simple_env_loop_02cd:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 25989 0001437C 4883FE02                	cmp rsi, 2
 25990 00014380 7410                    	je .L_lambda_simple_env_end_02cd
 25991 00014382 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25992 00014386 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25993 0001438A 48FFC6                  	inc rsi
 25994 0001438D 48FFC2                  	inc rdx
 25995 00014390 EBEA                    	jmp .L_lambda_simple_env_loop_02cd
 25996                                  .L_lambda_simple_env_end_02cd:
 25997 00014392 5B                      	pop rbx
 25998 00014393 BE00000000              	mov rsi, 0
 25999                                  .L_lambda_simple_params_loop_02cd:	; copy params
 26000 00014398 4883FE03                	cmp rsi, 3
 26001 0001439C 740E                    	je .L_lambda_simple_params_end_02cd
 26002 0001439E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26003 000143A3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26004 000143A7 48FFC6                  	inc rsi
 26005 000143AA EBEC                    	jmp .L_lambda_simple_params_loop_02cd
 26006                                  .L_lambda_simple_params_end_02cd:
 26007 000143AC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 26008 000143AF 4889C3                  	mov rbx, rax
 26009 000143B2 58                      	pop rax
 26010 000143B3 C60004                  	mov byte [rax], T_closure
 26011 000143B6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26012 000143BA 48C74009[C7430100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02cd
 26013 000143C2 E9D3000000              	jmp .L_lambda_simple_end_02cd
 26014                                  .L_lambda_simple_code_02cd:	; lambda-simple body
 26015 000143C7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26016 000143CD 740B                    	je .L_lambda_simple_arity_check_ok_02cd
 26017 000143CF FF742410                	push qword [rsp + 8 * 2]
 26018 000143D3 6A01                    	push 1
 26019 000143D5 E9312D0000              	jmp L_error_incorrect_arity_simple
 26020                                  .L_lambda_simple_arity_check_ok_02cd:
 26021 000143DA C8000000                	enter 0, 0
 26022                                  	; preparing a tail-call
 26023                                  	; preparing a non-tail-call
 26024 000143DE 488B4510                	mov rax, ENV
 26025 000143E2 488B00                  	mov rax, qword [rax + 8 * 0]
 26026 000143E5 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var s
 26027 000143E9 50                      	push rax
 26028 000143EA 6A01                    	push 1	; arg count
 26029 000143EC 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 26030 000143F4 803805                  	cmp byte [rax], T_undefined
 26031 000143F7 0F84282C0000            	je L_error_fvar_undefined
 26032 000143FD 803804                  	cmp byte [rax], T_closure
 26033 00014400 0F85A32C0000            	jne L_error_non_closure
 26034 00014406 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26035 00014409 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26036 0001440C 50                      	push rax
 26037 0001440D 488B4520                	mov rax, PARAM(0)	; param i
 26038 00014411 50                      	push rax
 26039 00014412 488B4510                	mov rax, ENV
 26040 00014416 488B00                  	mov rax, qword [rax + 8 * 0]
 26041 00014419 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var target
 26042 0001441C 50                      	push rax
 26043 0001441D 6A03                    	push 3	; arg count
 26044 0001441F 488B4510                	mov rax, ENV
 26045 00014423 488B4008                	mov rax, qword [rax + 8 * 1]
 26046 00014427 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 26047 0001442A 488B00                  	mov rax, qword [rax]
 26048 0001442D 803804                  	cmp byte [rax], T_closure
 26049 00014430 0F85732C0000            	jne L_error_non_closure
 26050 00014436 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26051 00014439 4C8B4009                	mov r8, qword [rax + 1 + 8]
 26052 0001443D FF7508                  	push qword [rbp + 8]				; push old return address
 26053 00014440 FF7500                  	push qword [rbp]					; push old rbp
 26054                                  	;; move stack up ;;
 26055 00014443 488B5D18                	mov rbx, [rbp + 3*8]
 26056 00014447 4889DE                  	mov rsi, rbx						; save old size in rsi
 26057 0001444A 4883C303                	add rbx, 3
 26058 0001444E 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 26059 00014456 B903000000              	mov rcx, 3
 26060 0001445B 4883C104                	add rcx, 4				; num of iterations in rcx
 26061                                  .L_tc_recycle_frame_loop_03ae:
 26062 0001445F 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 26063 00014467 488B143C                	mov rdx, [rsp + rdi]
 26064 0001446B 4889541D00              	mov [rbp + rbx], rdx
 26065 00014470 4883EB08                	sub rbx, 8
 26066 00014474 48FFC9                  	dec rcx
 26067 00014477 4883F900                	cmp rcx, 0
 26068 0001447B 75E2                    	jne .L_tc_recycle_frame_loop_03ae
 26069 0001447D 4889F3                  	mov rbx, rsi
 26070 00014480 4883EB03                	sub rbx, 3
 26071 00014484 488D1CDD00000000        	lea rbx, [rbx*8]
 26072 0001448C 4801DD                  	add rbp, rbx
 26073 0001448F 4889EC                  	mov rsp, rbp         ; fix stack pointers
 26074 00014492 5D                      	pop rbp
 26075 00014493 41FFE0                  	jmp r8
 26076 00014496 C9                      	leave
 26077 00014497 C21800                  	ret AND_KILL_FRAME(1)
 26078                                  .L_lambda_simple_end_02cd:	; new closure is in rax
 26079 0001449A 803804                  	cmp byte [rax], T_closure
 26080 0001449D 0F85062C0000            	jne L_error_non_closure
 26081 000144A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26082 000144A6 4C8B4009                	mov r8, qword [rax + 1 + 8]
 26083 000144AA FF7508                  	push qword [rbp + 8]				; push old return address
 26084 000144AD FF7500                  	push qword [rbp]					; push old rbp
 26085                                  	;; move stack up ;;
 26086 000144B0 488B5D18                	mov rbx, [rbp + 3*8]
 26087 000144B4 4889DE                  	mov rsi, rbx						; save old size in rsi
 26088 000144B7 4883C303                	add rbx, 3
 26089 000144BB 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 26090 000144C3 B901000000              	mov rcx, 1
 26091 000144C8 4883C104                	add rcx, 4				; num of iterations in rcx
 26092                                  .L_tc_recycle_frame_loop_03ad:
 26093 000144CC 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 26094 000144D4 488B143C                	mov rdx, [rsp + rdi]
 26095 000144D8 4889541D00              	mov [rbp + rbx], rdx
 26096 000144DD 4883EB08                	sub rbx, 8
 26097 000144E1 48FFC9                  	dec rcx
 26098 000144E4 4883F900                	cmp rcx, 0
 26099 000144E8 75E2                    	jne .L_tc_recycle_frame_loop_03ad
 26100 000144EA 4889F3                  	mov rbx, rsi
 26101 000144ED 4883EB01                	sub rbx, 1
 26102 000144F1 488D1CDD00000000        	lea rbx, [rbx*8]
 26103 000144F9 4801DD                  	add rbp, rbx
 26104 000144FC 4889EC                  	mov rsp, rbp         ; fix stack pointers
 26105 000144FF 5D                      	pop rbp
 26106 00014500 41FFE0                  	jmp r8
 26107                                  .L_if_end_0215:
 26108 00014503 C9                      	leave
 26109 00014504 C22800                  	ret AND_KILL_FRAME(3)
 26110                                  .L_lambda_simple_end_02cc:	; new closure is in rax
 26111 00014507 50                      	push rax
 26112 00014508 488B4520                	mov rax, PARAM(0)	; param run
 26113 0001450C 8F00                    	pop qword [rax]
 26114 0001450E 48B8-                   	mov rax, sob_void
 26114 00014510 [0000000000000000] 
 26115                                  
 26116 00014518 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26117 0001451D E8302C0000              	call malloc
 26118 00014522 50                      	push rax
 26119 00014523 BF10000000              	mov rdi, 8 * 2	; new rib
 26120 00014528 E8252C0000              	call malloc
 26121 0001452D 50                      	push rax
 26122 0001452E BF10000000              	mov rdi, 8 * 2	; extended env
 26123 00014533 E81A2C0000              	call malloc
 26124 00014538 488B7D10                	mov rdi, ENV
 26125 0001453C BE00000000              	mov rsi, 0
 26126 00014541 BA01000000              	mov rdx, 1
 26127                                  .L_lambda_simple_env_loop_02ce:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 26128 00014546 4883FE01                	cmp rsi, 1
 26129 0001454A 7410                    	je .L_lambda_simple_env_end_02ce
 26130 0001454C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26131 00014550 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26132 00014554 48FFC6                  	inc rsi
 26133 00014557 48FFC2                  	inc rdx
 26134 0001455A EBEA                    	jmp .L_lambda_simple_env_loop_02ce
 26135                                  .L_lambda_simple_env_end_02ce:
 26136 0001455C 5B                      	pop rbx
 26137 0001455D BE00000000              	mov rsi, 0
 26138                                  .L_lambda_simple_params_loop_02ce:	; copy params
 26139 00014562 4883FE02                	cmp rsi, 2
 26140 00014566 740E                    	je .L_lambda_simple_params_end_02ce
 26141 00014568 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26142 0001456D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26143 00014571 48FFC6                  	inc rsi
 26144 00014574 EBEC                    	jmp .L_lambda_simple_params_loop_02ce
 26145                                  .L_lambda_simple_params_end_02ce:
 26146 00014576 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 26147 00014579 4889C3                  	mov rbx, rax
 26148 0001457C 58                      	pop rax
 26149 0001457D C60004                  	mov byte [rax], T_closure
 26150 00014580 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26151 00014584 48C74009[91450100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02ce
 26152 0001458C E9A0010000              	jmp .L_lambda_simple_end_02ce
 26153                                  .L_lambda_simple_code_02ce:	; lambda-simple body
 26154 00014591 48837C241005            	cmp qword [rsp + 8 * 2], 5
 26155 00014597 740B                    	je .L_lambda_simple_arity_check_ok_02ce
 26156 00014599 FF742410                	push qword [rsp + 8 * 2]
 26157 0001459D 6A05                    	push 5
 26158 0001459F E9672B0000              	jmp L_error_incorrect_arity_simple
 26159                                  .L_lambda_simple_arity_check_ok_02ce:
 26160 000145A4 C8000000                	enter 0, 0
 26161                                  	; preparing a non-tail-call
 26162 000145A8 488B4540                	mov rax, PARAM(4)	; param limit
 26163 000145AC 50                      	push rax
 26164 000145AD 488B4538                	mov rax, PARAM(3)	; param j
 26165 000145B1 50                      	push rax
 26166 000145B2 6A02                    	push 2	; arg count
 26167 000145B4 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 26168 000145BC 803805                  	cmp byte [rax], T_undefined
 26169 000145BF 0F84602A0000            	je L_error_fvar_undefined
 26170 000145C5 803804                  	cmp byte [rax], T_closure
 26171 000145C8 0F85DB2A0000            	jne L_error_non_closure
 26172 000145CE FF7001                  	push SOB_CLOSURE_ENV(rax)
 26173 000145D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26174 000145D4 483D[02000000]          	cmp rax, sob_boolean_false
 26175 000145DA 0F8449010000            	je .L_if_else_0216
 26176                                  	; preparing a non-tail-call
 26177                                  	; preparing a non-tail-call
 26178 000145E0 488B4538                	mov rax, PARAM(3)	; param j
 26179 000145E4 50                      	push rax
 26180 000145E5 488B4530                	mov rax, PARAM(2)	; param vec
 26181 000145E9 50                      	push rax
 26182 000145EA 6A02                    	push 2	; arg count
 26183 000145EC 488B0425[67170000]      	mov rax, qword [free_var_144]	; free var vector-ref
 26184 000145F4 803805                  	cmp byte [rax], T_undefined
 26185 000145F7 0F84282A0000            	je L_error_fvar_undefined
 26186 000145FD 803804                  	cmp byte [rax], T_closure
 26187 00014600 0F85A32A0000            	jne L_error_non_closure
 26188 00014606 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26189 00014609 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26190 0001460C 50                      	push rax
 26191 0001460D 488B4528                	mov rax, PARAM(1)	; param i
 26192 00014611 50                      	push rax
 26193 00014612 488B4520                	mov rax, PARAM(0)	; param target
 26194 00014616 50                      	push rax
 26195 00014617 6A03                    	push 3	; arg count
 26196 00014619 488B0425[9A170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 26197 00014621 803805                  	cmp byte [rax], T_undefined
 26198 00014624 0F84FB290000            	je L_error_fvar_undefined
 26199 0001462A 803804                  	cmp byte [rax], T_closure
 26200 0001462D 0F85762A0000            	jne L_error_non_closure
 26201 00014633 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26202 00014636 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26203                                  
 26204                                  	; preparing a tail-call
 26205 00014639 488B4540                	mov rax, PARAM(4)	; param limit
 26206 0001463D 50                      	push rax
 26207                                  	; preparing a non-tail-call
 26208 0001463E 48B8-                   	mov rax, L_constants + 2270
 26208 00014640 [DE08000000000000] 
 26209 00014648 50                      	push rax
 26210 00014649 488B4538                	mov rax, PARAM(3)	; param j
 26211 0001464D 50                      	push rax
 26212 0001464E 6A02                    	push 2	; arg count
 26213 00014650 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 26214 00014658 803805                  	cmp byte [rax], T_undefined
 26215 0001465B 0F84C4290000            	je L_error_fvar_undefined
 26216 00014661 803804                  	cmp byte [rax], T_closure
 26217 00014664 0F853F2A0000            	jne L_error_non_closure
 26218 0001466A FF7001                  	push SOB_CLOSURE_ENV(rax)
 26219 0001466D FF5009                  	call SOB_CLOSURE_CODE(rax)
 26220 00014670 50                      	push rax
 26221 00014671 488B4530                	mov rax, PARAM(2)	; param vec
 26222 00014675 50                      	push rax
 26223                                  	; preparing a non-tail-call
 26224 00014676 48B8-                   	mov rax, L_constants + 2270
 26224 00014678 [DE08000000000000] 
 26225 00014680 50                      	push rax
 26226 00014681 488B4528                	mov rax, PARAM(1)	; param i
 26227 00014685 50                      	push rax
 26228 00014686 6A02                    	push 2	; arg count
 26229 00014688 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 26230 00014690 803805                  	cmp byte [rax], T_undefined
 26231 00014693 0F848C290000            	je L_error_fvar_undefined
 26232 00014699 803804                  	cmp byte [rax], T_closure
 26233 0001469C 0F85072A0000            	jne L_error_non_closure
 26234 000146A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26235 000146A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26236 000146A8 50                      	push rax
 26237 000146A9 488B4520                	mov rax, PARAM(0)	; param target
 26238 000146AD 50                      	push rax
 26239 000146AE 6A05                    	push 5	; arg count
 26240 000146B0 488B4510                	mov rax, ENV
 26241 000146B4 488B00                  	mov rax, qword [rax + 8 * 0]
 26242 000146B7 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 26243 000146BB 488B00                  	mov rax, qword [rax]
 26244 000146BE 803804                  	cmp byte [rax], T_closure
 26245 000146C1 0F85E2290000            	jne L_error_non_closure
 26246 000146C7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26247 000146CA 4C8B4009                	mov r8, qword [rax + 1 + 8]
 26248 000146CE FF7508                  	push qword [rbp + 8]				; push old return address
 26249 000146D1 FF7500                  	push qword [rbp]					; push old rbp
 26250                                  	;; move stack up ;;
 26251 000146D4 488B5D18                	mov rbx, [rbp + 3*8]
 26252 000146D8 4889DE                  	mov rsi, rbx						; save old size in rsi
 26253 000146DB 4883C303                	add rbx, 3
 26254 000146DF 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 26255 000146E7 B905000000              	mov rcx, 5
 26256 000146EC 4883C104                	add rcx, 4				; num of iterations in rcx
 26257                                  .L_tc_recycle_frame_loop_03af:
 26258 000146F0 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 26259 000146F8 488B143C                	mov rdx, [rsp + rdi]
 26260 000146FC 4889541D00              	mov [rbp + rbx], rdx
 26261 00014701 4883EB08                	sub rbx, 8
 26262 00014705 48FFC9                  	dec rcx
 26263 00014708 4883F900                	cmp rcx, 0
 26264 0001470C 75E2                    	jne .L_tc_recycle_frame_loop_03af
 26265 0001470E 4889F3                  	mov rbx, rsi
 26266 00014711 4883EB05                	sub rbx, 5
 26267 00014715 488D1CDD00000000        	lea rbx, [rbx*8]
 26268 0001471D 4801DD                  	add rbp, rbx
 26269 00014720 4889EC                  	mov rsp, rbp         ; fix stack pointers
 26270 00014723 5D                      	pop rbp
 26271 00014724 41FFE0                  	jmp r8
 26272 00014727 EB04                    	jmp .L_if_end_0216
 26273                                  .L_if_else_0216:
 26274 00014729 488B4528                	mov rax, PARAM(1)	; param i
 26275                                  .L_if_end_0216:
 26276 0001472D C9                      	leave
 26277 0001472E C23800                  	ret AND_KILL_FRAME(5)
 26278                                  .L_lambda_simple_end_02ce:	; new closure is in rax
 26279 00014731 50                      	push rax
 26280 00014732 488B4528                	mov rax, PARAM(1)	; param add
 26281 00014736 8F00                    	pop qword [rax]
 26282 00014738 48B8-                   	mov rax, sob_void
 26282 0001473A [0000000000000000] 
 26283                                  
 26284 00014742 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26285 00014747 E8062A0000              	call malloc
 26286 0001474C 50                      	push rax
 26287 0001474D BF10000000              	mov rdi, 8 * 2	; new rib
 26288 00014752 E8FB290000              	call malloc
 26289 00014757 50                      	push rax
 26290 00014758 BF10000000              	mov rdi, 8 * 2	; extended env
 26291 0001475D E8F0290000              	call malloc
 26292 00014762 488B7D10                	mov rdi, ENV
 26293 00014766 BE00000000              	mov rsi, 0
 26294 0001476B BA01000000              	mov rdx, 1
 26295                                  .L_lambda_opt_env_loop_0060:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 26296 00014770 4883FE01                	cmp rsi, 1
 26297 00014774 7410                    	je .L_lambda_opt_env_end_0060
 26298 00014776 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26299 0001477A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26300 0001477E 48FFC6                  	inc rsi
 26301 00014781 48FFC2                  	inc rdx
 26302 00014784 EBEA                    	jmp .L_lambda_opt_env_loop_0060
 26303                                  .L_lambda_opt_env_end_0060:
 26304 00014786 5B                      	pop rbx
 26305 00014787 BE00000000              	mov rsi, 0
 26306                                  .L_lambda_opt_params_loop_0060:	; copy params
 26307 0001478C 4883FE02                	cmp rsi, 2
 26308 00014790 740E                    	je .L_lambda_opt_params_end_0060
 26309 00014792 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26310 00014797 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26311 0001479B 48FFC6                  	inc rsi
 26312 0001479E EBEC                    	jmp .L_lambda_opt_params_loop_0060
 26313                                  .L_lambda_opt_params_end_0060:
 26314 000147A0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 26315 000147A3 4889C3                  	mov rbx, rax
 26316 000147A6 58                      	pop rax
 26317 000147A7 C60004                  	mov byte [rax], T_closure
 26318 000147AA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26319 000147AE 48C74009[BB470100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0060
 26320 000147B6 E9FC010000              	jmp .L_lambda_opt_end_0060
 26321                                  .L_lambda_opt_code_0060:	; lambda-opt body
 26322 000147BB 48837C241000            	cmp qword [rsp + 8 * 2], 0
 26323 000147C1 740D                    	je .L_lambda_opt_arity_check_exact_0060
 26324 000147C3 7F48                    	jg .L_lambda_opt_arity_check_more_0060
 26325 000147C5 FF742410                	push qword [rsp + 8 * 2]
 26326 000147C9 6A00                    	push 0
 26327 000147CB E94F290000              	jmp L_error_incorrect_arity_opt
 26328                                  .L_lambda_opt_arity_check_exact_0060:
 26329 000147D0 48C744241001000000      	mov qword [rsp + 8 * 2], 1	; Update argument count (fixed params + 1 for nil)
 26330 000147D9 41BA03000000            	mov r10, 3	; r10 = total addresses to adjust (fixed params + 3)
 26331 000147DF FF3424                  	push qword [rsp]	; Save the top stack element
 26332 000147E2 41BB01000000            	mov r11, 1	; r11 = loop index, starts at 1
 26333                                  .L_lambda_opt_stack_shrink_loop_011e:
 26334 000147E8 4D39D3                  	cmp r11, r10	; Compare loop index with total elements to adjust
 26335 000147EB 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_011e	; Exit loop if all elements processed
 26336 000147ED 4E8D64DC08              	lea r12, [rsp + 8 + r11 * 8]	; Calculate address of current stack element
 26337 000147F2 4D8B2C24                	mov r13, [r12]	; Load value from current stack element into r13
 26338 000147F6 4D896C24F8              	mov qword [r12 - 8], r13	; Shift value downward by 8 bytes
 26339 000147FB 49FFC3                  	inc r11	; Increment loop index
 26340 000147FE EBE8                    	jmp .L_lambda_opt_stack_shrink_loop_011e	; Jump back to loop start
 26341                                  .L_lambda_opt_stack_shrink_loop_exit_011e:
 26342 00014800 49C70424[01000000]      	mov qword [r12], sob_nil	; Place sob_nil in the freed slot to represent an empty optional argument list
 26343 00014808 E988000000              	jmp .L_lambda_opt_stack_adjusted_0060
 26344                                  .L_lambda_opt_arity_check_more_0060:
 26345 0001480D 4C8B442410              	mov r8, qword [rsp + 8 * 2]	; r8 = the total number of params in stack
 26346 00014812 4983E800                	sub r8, 0	; r8 = count of optional params
 26347 00014816 48C744241001000000      	mov qword [rsp + 8 * 2], 1	; Update the number of params (fixed params + 1 for list opt)
 26348 0001481F 41B900000000            	mov r9, 0	; r9 = index of optional argument list
 26349 00014825 4E8D54C410              	lea r10, [rsp + 2 * 8 + 0 * 8 + r8 * 8]	; r10 = address of first optional param
 26350 0001482A 49BB-                   	mov r11, sob_nil	; r11 = sob_nil, current pair in the linked list
 26350 0001482C [0100000000000000] 
 26351                                  .L_lambda_opt_stack_shrink_loop_011f:
 26352 00014834 4D39C1                  	cmp r9, r8	; Compare index with count of optional params
 26353 00014837 7427                    	je .L_lambda_opt_stack_shrink_loop_exit_011f	; Exit loop if all optional params are processed
 26354 00014839 BF11000000              	mov rdi, 1 + 8 + 8	; rdi = size for malloc of pair
 26355 0001483E E80F290000              	call malloc	; Allocate memory for a new pair
 26356 00014843 4C895809                	mov SOB_PAIR_CDR(rax), r11	; Set CDR of the pair to the current list
 26357 00014847 49F7D9                  	neg r9	; Negate index to access in reverse
 26358 0001484A 4F8B1CCA                	mov r11, qword [r10 + r9 * 8]	; Load optional param into r11
 26359 0001484E 49F7D9                  	neg r9	; Negate index back
 26360 00014851 4C895801                	mov SOB_PAIR_CAR(rax), r11	; Set CAR of the pair to the current value
 26361 00014855 C60021                  	mov byte [rax], T_pair	; Mark the object as a pair
 26362 00014858 4989C3                  	mov r11, rax	; Update current pair to the newly created one
 26363 0001485B 49FFC1                  	inc r9	; Increment the index
 26364 0001485E EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_011f	; Repeat the loop for the next param
 26365                                  .L_lambda_opt_stack_shrink_loop_exit_011f:
 26366 00014860 4D891A                  	mov qword [r10], r11	; Place the list of optional parameters at the top of the stack
 26367 00014863 4983EA08                	sub r10, 8	; Move r10 to the previous stack location
 26368 00014867 4989E4                  	mov r12, rsp	; r12 = current stack pointer (address to copy values from)
 26369 0001486A 4983C410                	add r12, 16	; Skip fixed params and return address
 26370 0001486E 41BD03000000            	mov r13, 3	; r13 = loop counter (number of params, old fp, ret addr, lex env)
 26371                                  .L_lambda_opt_stack_shrink_loop_0120:
 26372 00014874 4983FD00                	cmp r13, 0	; Check if there are more values to copy
 26373 00014878 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0120	; Exit loop if all values are copied
 26374 0001487A 4D8B1C24                	mov r11, qword [r12]	; Load the current value from the source stack pointer
 26375 0001487E 4D891A                  	mov [r10], r11	; Store the value at the destination stack pointer
 26376 00014881 49FFCD                  	dec r13	; Decrement the loop counter
 26377 00014884 4983EA08                	sub r10, 8	; Move the destination pointer to the next location
 26378 00014888 4983EC08                	sub r12, 8	; Move the source pointer to the next location
 26379 0001488C EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0120	; Repeat the loop for the next value
 26380                                  .L_lambda_opt_stack_shrink_loop_exit_0120:
 26381 0001488E 4983C208                	add r10, 8	; Adjust r10 to point to the correct new stack top
 26382 00014892 4C89D4                  	mov rsp, r10	; Update the stack pointer to the new top
 26383                                  .L_lambda_opt_stack_adjusted_0060:
 26384 00014895 C8000000                	enter 0, 0	; Set up a new stack frame for the lambda body
 26385                                  	; preparing a tail-call
 26386 00014899 488B4520                	mov rax, PARAM(0)	; param vectors
 26387 0001489D 50                      	push rax
 26388 0001489E 48B8-                   	mov rax, L_constants + 2135
 26388 000148A0 [5708000000000000] 
 26389 000148A8 50                      	push rax
 26390                                  	; preparing a non-tail-call
 26391                                  	; preparing a non-tail-call
 26392                                  	; preparing a non-tail-call
 26393 000148A9 488B4520                	mov rax, PARAM(0)	; param vectors
 26394 000148AD 50                      	push rax
 26395 000148AE 488B0425[56170000]      	mov rax, qword [free_var_143]	; free var vector-length
 26396 000148B6 803805                  	cmp byte [rax], T_undefined
 26397 000148B9 0F8466270000            	je L_error_fvar_undefined
 26398 000148BF 50                      	push rax
 26399 000148C0 6A02                    	push 2	; arg count
 26400 000148C2 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
 26401 000148CA 803805                  	cmp byte [rax], T_undefined
 26402 000148CD 0F8452270000            	je L_error_fvar_undefined
 26403 000148D3 803804                  	cmp byte [rax], T_closure
 26404 000148D6 0F85CD270000            	jne L_error_non_closure
 26405 000148DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 26406 000148DF FF5009                  	call SOB_CLOSURE_CODE(rax)
 26407 000148E2 50                      	push rax
 26408 000148E3 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 26409 000148EB 803805                  	cmp byte [rax], T_undefined
 26410 000148EE 0F8431270000            	je L_error_fvar_undefined
 26411 000148F4 50                      	push rax
 26412 000148F5 6A02                    	push 2	; arg count
 26413 000148F7 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
 26414 000148FF 803805                  	cmp byte [rax], T_undefined
 26415 00014902 0F841D270000            	je L_error_fvar_undefined
 26416 00014908 803804                  	cmp byte [rax], T_closure
 26417 0001490B 0F8598270000            	jne L_error_non_closure
 26418 00014911 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26419 00014914 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26420 00014917 50                      	push rax
 26421 00014918 6A01                    	push 1	; arg count
 26422 0001491A 488B0425[8C140000]      	mov rax, qword [free_var_101]	; free var make-vector
 26423 00014922 803805                  	cmp byte [rax], T_undefined
 26424 00014925 0F84FA260000            	je L_error_fvar_undefined
 26425 0001492B 803804                  	cmp byte [rax], T_closure
 26426 0001492E 0F8575270000            	jne L_error_non_closure
 26427 00014934 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26428 00014937 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26429 0001493A 50                      	push rax
 26430 0001493B 6A03                    	push 3	; arg count
 26431 0001493D 488B4510                	mov rax, ENV
 26432 00014941 488B00                  	mov rax, qword [rax + 8 * 0]
 26433 00014944 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 26434 00014947 488B00                  	mov rax, qword [rax]
 26435 0001494A 803804                  	cmp byte [rax], T_closure
 26436 0001494D 0F8556270000            	jne L_error_non_closure
 26437 00014953 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26438 00014956 4C8B4009                	mov r8, qword [rax + 1 + 8]
 26439 0001495A FF7508                  	push qword [rbp + 8]				; push old return address
 26440 0001495D FF7500                  	push qword [rbp]					; push old rbp
 26441                                  	;; move stack up ;;
 26442 00014960 488B5D18                	mov rbx, [rbp + 3*8]
 26443 00014964 4889DE                  	mov rsi, rbx						; save old size in rsi
 26444 00014967 4883C303                	add rbx, 3
 26445 0001496B 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 26446 00014973 B903000000              	mov rcx, 3
 26447 00014978 4883C104                	add rcx, 4				; num of iterations in rcx
 26448                                  .L_tc_recycle_frame_loop_03b0:
 26449 0001497C 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 26450 00014984 488B143C                	mov rdx, [rsp + rdi]
 26451 00014988 4889541D00              	mov [rbp + rbx], rdx
 26452 0001498D 4883EB08                	sub rbx, 8
 26453 00014991 48FFC9                  	dec rcx
 26454 00014994 4883F900                	cmp rcx, 0
 26455 00014998 75E2                    	jne .L_tc_recycle_frame_loop_03b0
 26456 0001499A 4889F3                  	mov rbx, rsi
 26457 0001499D 4883EB03                	sub rbx, 3
 26458 000149A1 488D1CDD00000000        	lea rbx, [rbx*8]
 26459 000149A9 4801DD                  	add rbp, rbx
 26460 000149AC 4889EC                  	mov rsp, rbp         ; fix stack pointers
 26461 000149AF 5D                      	pop rbp
 26462 000149B0 41FFE0                  	jmp r8
 26463 000149B3 C9                      	leave	; Restore the previous stack frame
 26464 000149B4 C21800                  	ret AND_KILL_FRAME(1)
 26465                                  .L_lambda_opt_end_0060:	; new closure is in rax
 26466 000149B7 C9                      	leave
 26467 000149B8 C22000                  	ret AND_KILL_FRAME(2)
 26468                                  .L_lambda_simple_end_02cb:	; new closure is in rax
 26469 000149BB 803804                  	cmp byte [rax], T_closure
 26470 000149BE 0F85E5260000            	jne L_error_non_closure
 26471 000149C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26472 000149C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26473 000149CA 48890425[45170000]      	mov qword [free_var_142], rax
 26474 000149D2 48B8-                   	mov rax, sob_void
 26474 000149D4 [0000000000000000] 
 26475                                  
 26476 000149DC 4889C7                  	mov rdi, rax
 26477 000149DF E8C3290000              	call print_sexpr_if_not_void
 26478 000149E4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26479 000149E9 E864270000              	call malloc
 26480 000149EE 50                      	push rax
 26481 000149EF BF00000000              	mov rdi, 8 * 0	; new rib
 26482 000149F4 E859270000              	call malloc
 26483 000149F9 50                      	push rax
 26484 000149FA BF08000000              	mov rdi, 8 * 1	; extended env
 26485 000149FF E84E270000              	call malloc
 26486 00014A04 488B7D10                	mov rdi, ENV
 26487 00014A08 BE00000000              	mov rsi, 0
 26488 00014A0D BA01000000              	mov rdx, 1
 26489                                  .L_lambda_simple_env_loop_02cf:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 26490 00014A12 4883FE00                	cmp rsi, 0
 26491 00014A16 7410                    	je .L_lambda_simple_env_end_02cf
 26492 00014A18 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26493 00014A1C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26494 00014A20 48FFC6                  	inc rsi
 26495 00014A23 48FFC2                  	inc rdx
 26496 00014A26 EBEA                    	jmp .L_lambda_simple_env_loop_02cf
 26497                                  .L_lambda_simple_env_end_02cf:
 26498 00014A28 5B                      	pop rbx
 26499 00014A29 BE00000000              	mov rsi, 0
 26500                                  .L_lambda_simple_params_loop_02cf:	; copy params
 26501 00014A2E 4883FE00                	cmp rsi, 0
 26502 00014A32 740E                    	je .L_lambda_simple_params_end_02cf
 26503 00014A34 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26504 00014A39 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26505 00014A3D 48FFC6                  	inc rsi
 26506 00014A40 EBEC                    	jmp .L_lambda_simple_params_loop_02cf
 26507                                  .L_lambda_simple_params_end_02cf:
 26508 00014A42 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 26509 00014A45 4889C3                  	mov rbx, rax
 26510 00014A48 58                      	pop rax
 26511 00014A49 C60004                  	mov byte [rax], T_closure
 26512 00014A4C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26513 00014A50 48C74009[5D4A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02cf
 26514 00014A58 E9E2000000              	jmp .L_lambda_simple_end_02cf
 26515                                  .L_lambda_simple_code_02cf:	; lambda-simple body
 26516 00014A5D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26517 00014A63 740B                    	je .L_lambda_simple_arity_check_ok_02cf
 26518 00014A65 FF742410                	push qword [rsp + 8 * 2]
 26519 00014A69 6A01                    	push 1
 26520 00014A6B E99B260000              	jmp L_error_incorrect_arity_simple
 26521                                  .L_lambda_simple_arity_check_ok_02cf:
 26522 00014A70 C8000000                	enter 0, 0
 26523                                  	; preparing a tail-call
 26524                                  	; preparing a non-tail-call
 26525                                  	; preparing a non-tail-call
 26526 00014A74 488B4520                	mov rax, PARAM(0)	; param str
 26527 00014A78 50                      	push rax
 26528 00014A79 6A01                    	push 1	; arg count
 26529 00014A7B 488B0425[BE150000]      	mov rax, qword [free_var_119]	; free var string->list
 26530 00014A83 803805                  	cmp byte [rax], T_undefined
 26531 00014A86 0F8499250000            	je L_error_fvar_undefined
 26532 00014A8C 803804                  	cmp byte [rax], T_closure
 26533 00014A8F 0F8514260000            	jne L_error_non_closure
 26534 00014A95 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26535 00014A98 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26536 00014A9B 50                      	push rax
 26537 00014A9C 6A01                    	push 1	; arg count
 26538 00014A9E 488B0425[AD150000]      	mov rax, qword [free_var_118]	; free var reverse
 26539 00014AA6 803805                  	cmp byte [rax], T_undefined
 26540 00014AA9 0F8476250000            	je L_error_fvar_undefined
 26541 00014AAF 803804                  	cmp byte [rax], T_closure
 26542 00014AB2 0F85F1250000            	jne L_error_non_closure
 26543 00014AB8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26544 00014ABB FF5009                  	call SOB_CLOSURE_CODE(rax)
 26545 00014ABE 50                      	push rax
 26546 00014ABF 6A01                    	push 1	; arg count
 26547 00014AC1 488B0425[15140000]      	mov rax, qword [free_var_94]	; free var list->string
 26548 00014AC9 803805                  	cmp byte [rax], T_undefined
 26549 00014ACC 0F8453250000            	je L_error_fvar_undefined
 26550 00014AD2 803804                  	cmp byte [rax], T_closure
 26551 00014AD5 0F85CE250000            	jne L_error_non_closure
 26552 00014ADB FF7001                  	push SOB_CLOSURE_ENV(rax)
 26553 00014ADE 4C8B4009                	mov r8, qword [rax + 1 + 8]
 26554 00014AE2 FF7508                  	push qword [rbp + 8]				; push old return address
 26555 00014AE5 FF7500                  	push qword [rbp]					; push old rbp
 26556                                  	;; move stack up ;;
 26557 00014AE8 488B5D18                	mov rbx, [rbp + 3*8]
 26558 00014AEC 4889DE                  	mov rsi, rbx						; save old size in rsi
 26559 00014AEF 4883C303                	add rbx, 3
 26560 00014AF3 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 26561 00014AFB B901000000              	mov rcx, 1
 26562 00014B00 4883C104                	add rcx, 4				; num of iterations in rcx
 26563                                  .L_tc_recycle_frame_loop_03b1:
 26564 00014B04 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 26565 00014B0C 488B143C                	mov rdx, [rsp + rdi]
 26566 00014B10 4889541D00              	mov [rbp + rbx], rdx
 26567 00014B15 4883EB08                	sub rbx, 8
 26568 00014B19 48FFC9                  	dec rcx
 26569 00014B1C 4883F900                	cmp rcx, 0
 26570 00014B20 75E2                    	jne .L_tc_recycle_frame_loop_03b1
 26571 00014B22 4889F3                  	mov rbx, rsi
 26572 00014B25 4883EB01                	sub rbx, 1
 26573 00014B29 488D1CDD00000000        	lea rbx, [rbx*8]
 26574 00014B31 4801DD                  	add rbp, rbx
 26575 00014B34 4889EC                  	mov rsp, rbp         ; fix stack pointers
 26576 00014B37 5D                      	pop rbp
 26577 00014B38 41FFE0                  	jmp r8
 26578 00014B3B C9                      	leave
 26579 00014B3C C21800                  	ret AND_KILL_FRAME(1)
 26580                                  .L_lambda_simple_end_02cf:	; new closure is in rax
 26581 00014B3F 48890425[68160000]      	mov qword [free_var_129], rax
 26582 00014B47 48B8-                   	mov rax, sob_void
 26582 00014B49 [0000000000000000] 
 26583                                  
 26584 00014B51 4889C7                  	mov rdi, rax
 26585 00014B54 E84E280000              	call print_sexpr_if_not_void
 26586 00014B59 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26587 00014B5E E8EF250000              	call malloc
 26588 00014B63 50                      	push rax
 26589 00014B64 BF00000000              	mov rdi, 8 * 0	; new rib
 26590 00014B69 E8E4250000              	call malloc
 26591 00014B6E 50                      	push rax
 26592 00014B6F BF08000000              	mov rdi, 8 * 1	; extended env
 26593 00014B74 E8D9250000              	call malloc
 26594 00014B79 488B7D10                	mov rdi, ENV
 26595 00014B7D BE00000000              	mov rsi, 0
 26596 00014B82 BA01000000              	mov rdx, 1
 26597                                  .L_lambda_simple_env_loop_02d0:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 26598 00014B87 4883FE00                	cmp rsi, 0
 26599 00014B8B 7410                    	je .L_lambda_simple_env_end_02d0
 26600 00014B8D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26601 00014B91 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26602 00014B95 48FFC6                  	inc rsi
 26603 00014B98 48FFC2                  	inc rdx
 26604 00014B9B EBEA                    	jmp .L_lambda_simple_env_loop_02d0
 26605                                  .L_lambda_simple_env_end_02d0:
 26606 00014B9D 5B                      	pop rbx
 26607 00014B9E BE00000000              	mov rsi, 0
 26608                                  .L_lambda_simple_params_loop_02d0:	; copy params
 26609 00014BA3 4883FE00                	cmp rsi, 0
 26610 00014BA7 740E                    	je .L_lambda_simple_params_end_02d0
 26611 00014BA9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26612 00014BAE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26613 00014BB2 48FFC6                  	inc rsi
 26614 00014BB5 EBEC                    	jmp .L_lambda_simple_params_loop_02d0
 26615                                  .L_lambda_simple_params_end_02d0:
 26616 00014BB7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 26617 00014BBA 4889C3                  	mov rbx, rax
 26618 00014BBD 58                      	pop rax
 26619 00014BBE C60004                  	mov byte [rax], T_closure
 26620 00014BC1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26621 00014BC5 48C74009[D24B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02d0
 26622 00014BCD E9E2000000              	jmp .L_lambda_simple_end_02d0
 26623                                  .L_lambda_simple_code_02d0:	; lambda-simple body
 26624 00014BD2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26625 00014BD8 740B                    	je .L_lambda_simple_arity_check_ok_02d0
 26626 00014BDA FF742410                	push qword [rsp + 8 * 2]
 26627 00014BDE 6A01                    	push 1
 26628 00014BE0 E926250000              	jmp L_error_incorrect_arity_simple
 26629                                  .L_lambda_simple_arity_check_ok_02d0:
 26630 00014BE5 C8000000                	enter 0, 0
 26631                                  	; preparing a tail-call
 26632                                  	; preparing a non-tail-call
 26633                                  	; preparing a non-tail-call
 26634 00014BE9 488B4520                	mov rax, PARAM(0)	; param vec
 26635 00014BED 50                      	push rax
 26636 00014BEE 6A01                    	push 1	; arg count
 26637 00014BF0 488B0425[34170000]      	mov rax, qword [free_var_141]	; free var vector->list
 26638 00014BF8 803805                  	cmp byte [rax], T_undefined
 26639 00014BFB 0F8424240000            	je L_error_fvar_undefined
 26640 00014C01 803804                  	cmp byte [rax], T_closure
 26641 00014C04 0F859F240000            	jne L_error_non_closure
 26642 00014C0A FF7001                  	push SOB_CLOSURE_ENV(rax)
 26643 00014C0D FF5009                  	call SOB_CLOSURE_CODE(rax)
 26644 00014C10 50                      	push rax
 26645 00014C11 6A01                    	push 1	; arg count
 26646 00014C13 488B0425[AD150000]      	mov rax, qword [free_var_118]	; free var reverse
 26647 00014C1B 803805                  	cmp byte [rax], T_undefined
 26648 00014C1E 0F8401240000            	je L_error_fvar_undefined
 26649 00014C24 803804                  	cmp byte [rax], T_closure
 26650 00014C27 0F857C240000            	jne L_error_non_closure
 26651 00014C2D FF7001                  	push SOB_CLOSURE_ENV(rax)
 26652 00014C30 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26653 00014C33 50                      	push rax
 26654 00014C34 6A01                    	push 1	; arg count
 26655 00014C36 488B0425[26140000]      	mov rax, qword [free_var_95]	; free var list->vector
 26656 00014C3E 803805                  	cmp byte [rax], T_undefined
 26657 00014C41 0F84DE230000            	je L_error_fvar_undefined
 26658 00014C47 803804                  	cmp byte [rax], T_closure
 26659 00014C4A 0F8559240000            	jne L_error_non_closure
 26660 00014C50 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26661 00014C53 4C8B4009                	mov r8, qword [rax + 1 + 8]
 26662 00014C57 FF7508                  	push qword [rbp + 8]				; push old return address
 26663 00014C5A FF7500                  	push qword [rbp]					; push old rbp
 26664                                  	;; move stack up ;;
 26665 00014C5D 488B5D18                	mov rbx, [rbp + 3*8]
 26666 00014C61 4889DE                  	mov rsi, rbx						; save old size in rsi
 26667 00014C64 4883C303                	add rbx, 3
 26668 00014C68 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 26669 00014C70 B901000000              	mov rcx, 1
 26670 00014C75 4883C104                	add rcx, 4				; num of iterations in rcx
 26671                                  .L_tc_recycle_frame_loop_03b2:
 26672 00014C79 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 26673 00014C81 488B143C                	mov rdx, [rsp + rdi]
 26674 00014C85 4889541D00              	mov [rbp + rbx], rdx
 26675 00014C8A 4883EB08                	sub rbx, 8
 26676 00014C8E 48FFC9                  	dec rcx
 26677 00014C91 4883F900                	cmp rcx, 0
 26678 00014C95 75E2                    	jne .L_tc_recycle_frame_loop_03b2
 26679 00014C97 4889F3                  	mov rbx, rsi
 26680 00014C9A 4883EB01                	sub rbx, 1
 26681 00014C9E 488D1CDD00000000        	lea rbx, [rbx*8]
 26682 00014CA6 4801DD                  	add rbp, rbx
 26683 00014CA9 4889EC                  	mov rsp, rbp         ; fix stack pointers
 26684 00014CAC 5D                      	pop rbp
 26685 00014CAD 41FFE0                  	jmp r8
 26686 00014CB0 C9                      	leave
 26687 00014CB1 C21800                  	ret AND_KILL_FRAME(1)
 26688                                  .L_lambda_simple_end_02d0:	; new closure is in rax
 26689 00014CB4 48890425[78170000]      	mov qword [free_var_145], rax
 26690 00014CBC 48B8-                   	mov rax, sob_void
 26690 00014CBE [0000000000000000] 
 26691                                  
 26692 00014CC6 4889C7                  	mov rdi, rax
 26693 00014CC9 E8D9260000              	call print_sexpr_if_not_void
 26694                                  	; preparing a non-tail-call
 26695 00014CCE 48B8-                   	mov rax, L_constants + 1993
 26695 00014CD0 [C907000000000000] 
 26696 00014CD8 50                      	push rax
 26697 00014CD9 6A01                    	push 1	; arg count
 26698 00014CDB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26699 00014CE0 E86D240000              	call malloc
 26700 00014CE5 50                      	push rax
 26701 00014CE6 BF00000000              	mov rdi, 8 * 0	; new rib
 26702 00014CEB E862240000              	call malloc
 26703 00014CF0 50                      	push rax
 26704 00014CF1 BF08000000              	mov rdi, 8 * 1	; extended env
 26705 00014CF6 E857240000              	call malloc
 26706 00014CFB 488B7D10                	mov rdi, ENV
 26707 00014CFF BE00000000              	mov rsi, 0
 26708 00014D04 BA01000000              	mov rdx, 1
 26709                                  .L_lambda_simple_env_loop_02d1:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 26710 00014D09 4883FE00                	cmp rsi, 0
 26711 00014D0D 7410                    	je .L_lambda_simple_env_end_02d1
 26712 00014D0F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26713 00014D13 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26714 00014D17 48FFC6                  	inc rsi
 26715 00014D1A 48FFC2                  	inc rdx
 26716 00014D1D EBEA                    	jmp .L_lambda_simple_env_loop_02d1
 26717                                  .L_lambda_simple_env_end_02d1:
 26718 00014D1F 5B                      	pop rbx
 26719 00014D20 BE00000000              	mov rsi, 0
 26720                                  .L_lambda_simple_params_loop_02d1:	; copy params
 26721 00014D25 4883FE00                	cmp rsi, 0
 26722 00014D29 740E                    	je .L_lambda_simple_params_end_02d1
 26723 00014D2B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26724 00014D30 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26725 00014D34 48FFC6                  	inc rsi
 26726 00014D37 EBEC                    	jmp .L_lambda_simple_params_loop_02d1
 26727                                  .L_lambda_simple_params_end_02d1:
 26728 00014D39 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 26729 00014D3C 4889C3                  	mov rbx, rax
 26730 00014D3F 58                      	pop rax
 26731 00014D40 C60004                  	mov byte [rax], T_closure
 26732 00014D43 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26733 00014D47 48C74009[544D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02d1
 26734 00014D4F E9AD060000              	jmp .L_lambda_simple_end_02d1
 26735                                  .L_lambda_simple_code_02d1:	; lambda-simple body
 26736 00014D54 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26737 00014D5A 740B                    	je .L_lambda_simple_arity_check_ok_02d1
 26738 00014D5C FF742410                	push qword [rsp + 8 * 2]
 26739 00014D60 6A01                    	push 1
 26740 00014D62 E9A4230000              	jmp L_error_incorrect_arity_simple
 26741                                  .L_lambda_simple_arity_check_ok_02d1:
 26742 00014D67 C8000000                	enter 0, 0
 26743 00014D6B BF08000000              	mov rdi, 8
 26744 00014D70 E8DD230000              	call malloc
 26745 00014D75 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
 26746 00014D79 488918                  	mov qword[rax], rbx
 26747 00014D7C 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 26748 00014D80 48B8-                   	mov rax, sob_void
 26748 00014D82 [0000000000000000] 
 26749                                  
 26750 00014D8A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26751 00014D8F E8BE230000              	call malloc
 26752 00014D94 50                      	push rax
 26753 00014D95 BF08000000              	mov rdi, 8 * 1	; new rib
 26754 00014D9A E8B3230000              	call malloc
 26755 00014D9F 50                      	push rax
 26756 00014DA0 BF10000000              	mov rdi, 8 * 2	; extended env
 26757 00014DA5 E8A8230000              	call malloc
 26758 00014DAA 488B7D10                	mov rdi, ENV
 26759 00014DAE BE00000000              	mov rsi, 0
 26760 00014DB3 BA01000000              	mov rdx, 1
 26761                                  .L_lambda_simple_env_loop_02d2:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 26762 00014DB8 4883FE01                	cmp rsi, 1
 26763 00014DBC 7410                    	je .L_lambda_simple_env_end_02d2
 26764 00014DBE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26765 00014DC2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26766 00014DC6 48FFC6                  	inc rsi
 26767 00014DC9 48FFC2                  	inc rdx
 26768 00014DCC EBEA                    	jmp .L_lambda_simple_env_loop_02d2
 26769                                  .L_lambda_simple_env_end_02d2:
 26770 00014DCE 5B                      	pop rbx
 26771 00014DCF BE00000000              	mov rsi, 0
 26772                                  .L_lambda_simple_params_loop_02d2:	; copy params
 26773 00014DD4 4883FE01                	cmp rsi, 1
 26774 00014DD8 740E                    	je .L_lambda_simple_params_end_02d2
 26775 00014DDA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26776 00014DDF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26777 00014DE3 48FFC6                  	inc rsi
 26778 00014DE6 EBEC                    	jmp .L_lambda_simple_params_loop_02d2
 26779                                  .L_lambda_simple_params_end_02d2:
 26780 00014DE8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 26781 00014DEB 4889C3                  	mov rbx, rax
 26782 00014DEE 58                      	pop rax
 26783 00014DEF C60004                  	mov byte [rax], T_closure
 26784 00014DF2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26785 00014DF6 48C74009[034E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02d2
 26786 00014DFE E92E030000              	jmp .L_lambda_simple_end_02d2
 26787                                  .L_lambda_simple_code_02d2:	; lambda-simple body
 26788 00014E03 48837C241003            	cmp qword [rsp + 8 * 2], 3
 26789 00014E09 740B                    	je .L_lambda_simple_arity_check_ok_02d2
 26790 00014E0B FF742410                	push qword [rsp + 8 * 2]
 26791 00014E0F 6A03                    	push 3
 26792 00014E11 E9F5220000              	jmp L_error_incorrect_arity_simple
 26793                                  .L_lambda_simple_arity_check_ok_02d2:
 26794 00014E16 C8000000                	enter 0, 0
 26795                                  	; preparing a non-tail-call
 26796 00014E1A 488B4530                	mov rax, PARAM(2)	; param j
 26797 00014E1E 50                      	push rax
 26798 00014E1F 488B4528                	mov rax, PARAM(1)	; param i
 26799 00014E23 50                      	push rax
 26800 00014E24 6A02                    	push 2	; arg count
 26801 00014E26 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 26802 00014E2E 803805                  	cmp byte [rax], T_undefined
 26803 00014E31 0F84EE210000            	je L_error_fvar_undefined
 26804 00014E37 803804                  	cmp byte [rax], T_closure
 26805 00014E3A 0F8569220000            	jne L_error_non_closure
 26806 00014E40 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26807 00014E43 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26808 00014E46 483D[02000000]          	cmp rax, sob_boolean_false
 26809 00014E4C 0F84D7020000            	je .L_if_else_0217
 26810                                  	; preparing a tail-call
 26811                                  	; preparing a non-tail-call
 26812 00014E52 488B4528                	mov rax, PARAM(1)	; param i
 26813 00014E56 50                      	push rax
 26814 00014E57 488B4520                	mov rax, PARAM(0)	; param str
 26815 00014E5B 50                      	push rax
 26816 00014E5C 6A02                    	push 2	; arg count
 26817 00014E5E 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 26818 00014E66 803805                  	cmp byte [rax], T_undefined
 26819 00014E69 0F84B6210000            	je L_error_fvar_undefined
 26820 00014E6F 803804                  	cmp byte [rax], T_closure
 26821 00014E72 0F8531220000            	jne L_error_non_closure
 26822 00014E78 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26823 00014E7B FF5009                  	call SOB_CLOSURE_CODE(rax)
 26824 00014E7E 50                      	push rax
 26825 00014E7F 6A01                    	push 1	; arg count
 26826 00014E81 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26827 00014E86 E8C7220000              	call malloc
 26828 00014E8B 50                      	push rax
 26829 00014E8C BF18000000              	mov rdi, 8 * 3	; new rib
 26830 00014E91 E8BC220000              	call malloc
 26831 00014E96 50                      	push rax
 26832 00014E97 BF18000000              	mov rdi, 8 * 3	; extended env
 26833 00014E9C E8B1220000              	call malloc
 26834 00014EA1 488B7D10                	mov rdi, ENV
 26835 00014EA5 BE00000000              	mov rsi, 0
 26836 00014EAA BA01000000              	mov rdx, 1
 26837                                  .L_lambda_simple_env_loop_02d3:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 26838 00014EAF 4883FE02                	cmp rsi, 2
 26839 00014EB3 7410                    	je .L_lambda_simple_env_end_02d3
 26840 00014EB5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26841 00014EB9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26842 00014EBD 48FFC6                  	inc rsi
 26843 00014EC0 48FFC2                  	inc rdx
 26844 00014EC3 EBEA                    	jmp .L_lambda_simple_env_loop_02d3
 26845                                  .L_lambda_simple_env_end_02d3:
 26846 00014EC5 5B                      	pop rbx
 26847 00014EC6 BE00000000              	mov rsi, 0
 26848                                  .L_lambda_simple_params_loop_02d3:	; copy params
 26849 00014ECB 4883FE03                	cmp rsi, 3
 26850 00014ECF 740E                    	je .L_lambda_simple_params_end_02d3
 26851 00014ED1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26852 00014ED6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26853 00014EDA 48FFC6                  	inc rsi
 26854 00014EDD EBEC                    	jmp .L_lambda_simple_params_loop_02d3
 26855                                  .L_lambda_simple_params_end_02d3:
 26856 00014EDF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 26857 00014EE2 4889C3                  	mov rbx, rax
 26858 00014EE5 58                      	pop rax
 26859 00014EE6 C60004                  	mov byte [rax], T_closure
 26860 00014EE9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26861 00014EED 48C74009[FA4E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02d3
 26862 00014EF5 E9C4010000              	jmp .L_lambda_simple_end_02d3
 26863                                  .L_lambda_simple_code_02d3:	; lambda-simple body
 26864 00014EFA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26865 00014F00 740B                    	je .L_lambda_simple_arity_check_ok_02d3
 26866 00014F02 FF742410                	push qword [rsp + 8 * 2]
 26867 00014F06 6A01                    	push 1
 26868 00014F08 E9FE210000              	jmp L_error_incorrect_arity_simple
 26869                                  .L_lambda_simple_arity_check_ok_02d3:
 26870 00014F0D C8000000                	enter 0, 0
 26871                                  	; preparing a non-tail-call
 26872                                  	; preparing a non-tail-call
 26873 00014F11 488B4510                	mov rax, ENV
 26874 00014F15 488B00                  	mov rax, qword [rax + 8 * 0]
 26875 00014F18 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 26876 00014F1C 50                      	push rax
 26877 00014F1D 488B4510                	mov rax, ENV
 26878 00014F21 488B00                  	mov rax, qword [rax + 8 * 0]
 26879 00014F24 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 26880 00014F27 50                      	push rax
 26881 00014F28 6A02                    	push 2	; arg count
 26882 00014F2A 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 26883 00014F32 803805                  	cmp byte [rax], T_undefined
 26884 00014F35 0F84EA200000            	je L_error_fvar_undefined
 26885 00014F3B 803804                  	cmp byte [rax], T_closure
 26886 00014F3E 0F8565210000            	jne L_error_non_closure
 26887 00014F44 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26888 00014F47 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26889 00014F4A 50                      	push rax
 26890 00014F4B 488B4510                	mov rax, ENV
 26891 00014F4F 488B00                  	mov rax, qword [rax + 8 * 0]
 26892 00014F52 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 26893 00014F56 50                      	push rax
 26894 00014F57 488B4510                	mov rax, ENV
 26895 00014F5B 488B00                  	mov rax, qword [rax + 8 * 0]
 26896 00014F5E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 26897 00014F61 50                      	push rax
 26898 00014F62 6A03                    	push 3	; arg count
 26899 00014F64 488B0425[8A160000]      	mov rax, qword [free_var_131]	; free var string-set!
 26900 00014F6C 803805                  	cmp byte [rax], T_undefined
 26901 00014F6F 0F84B0200000            	je L_error_fvar_undefined
 26902 00014F75 803804                  	cmp byte [rax], T_closure
 26903 00014F78 0F852B210000            	jne L_error_non_closure
 26904 00014F7E FF7001                  	push SOB_CLOSURE_ENV(rax)
 26905 00014F81 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26906                                  
 26907                                  	; preparing a non-tail-call
 26908 00014F84 488B4520                	mov rax, PARAM(0)	; param ch
 26909 00014F88 50                      	push rax
 26910 00014F89 488B4510                	mov rax, ENV
 26911 00014F8D 488B00                  	mov rax, qword [rax + 8 * 0]
 26912 00014F90 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 26913 00014F94 50                      	push rax
 26914 00014F95 488B4510                	mov rax, ENV
 26915 00014F99 488B00                  	mov rax, qword [rax + 8 * 0]
 26916 00014F9C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 26917 00014F9F 50                      	push rax
 26918 00014FA0 6A03                    	push 3	; arg count
 26919 00014FA2 488B0425[8A160000]      	mov rax, qword [free_var_131]	; free var string-set!
 26920 00014FAA 803805                  	cmp byte [rax], T_undefined
 26921 00014FAD 0F8472200000            	je L_error_fvar_undefined
 26922 00014FB3 803804                  	cmp byte [rax], T_closure
 26923 00014FB6 0F85ED200000            	jne L_error_non_closure
 26924 00014FBC FF7001                  	push SOB_CLOSURE_ENV(rax)
 26925 00014FBF FF5009                  	call SOB_CLOSURE_CODE(rax)
 26926                                  
 26927                                  	; preparing a tail-call
 26928                                  	; preparing a non-tail-call
 26929 00014FC2 48B8-                   	mov rax, L_constants + 2270
 26929 00014FC4 [DE08000000000000] 
 26930 00014FCC 50                      	push rax
 26931 00014FCD 488B4510                	mov rax, ENV
 26932 00014FD1 488B00                  	mov rax, qword [rax + 8 * 0]
 26933 00014FD4 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 26934 00014FD8 50                      	push rax
 26935 00014FD9 6A02                    	push 2	; arg count
 26936 00014FDB 488B0425[F90D0000]      	mov rax, qword [free_var_2]	; free var -
 26937 00014FE3 803805                  	cmp byte [rax], T_undefined
 26938 00014FE6 0F8439200000            	je L_error_fvar_undefined
 26939 00014FEC 803804                  	cmp byte [rax], T_closure
 26940 00014FEF 0F85B4200000            	jne L_error_non_closure
 26941 00014FF5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26942 00014FF8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26943 00014FFB 50                      	push rax
 26944                                  	; preparing a non-tail-call
 26945 00014FFC 48B8-                   	mov rax, L_constants + 2270
 26945 00014FFE [DE08000000000000] 
 26946 00015006 50                      	push rax
 26947 00015007 488B4510                	mov rax, ENV
 26948 0001500B 488B00                  	mov rax, qword [rax + 8 * 0]
 26949 0001500E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 26950 00015012 50                      	push rax
 26951 00015013 6A02                    	push 2	; arg count
 26952 00015015 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 26953 0001501D 803805                  	cmp byte [rax], T_undefined
 26954 00015020 0F84FF1F0000            	je L_error_fvar_undefined
 26955 00015026 803804                  	cmp byte [rax], T_closure
 26956 00015029 0F857A200000            	jne L_error_non_closure
 26957 0001502F FF7001                  	push SOB_CLOSURE_ENV(rax)
 26958 00015032 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26959 00015035 50                      	push rax
 26960 00015036 488B4510                	mov rax, ENV
 26961 0001503A 488B00                  	mov rax, qword [rax + 8 * 0]
 26962 0001503D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 26963 00015040 50                      	push rax
 26964 00015041 6A03                    	push 3	; arg count
 26965 00015043 488B4510                	mov rax, ENV
 26966 00015047 488B4008                	mov rax, qword [rax + 8 * 1]
 26967 0001504B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 26968 0001504E 488B00                  	mov rax, qword [rax]
 26969 00015051 803804                  	cmp byte [rax], T_closure
 26970 00015054 0F854F200000            	jne L_error_non_closure
 26971 0001505A FF7001                  	push SOB_CLOSURE_ENV(rax)
 26972 0001505D 4C8B4009                	mov r8, qword [rax + 1 + 8]
 26973 00015061 FF7508                  	push qword [rbp + 8]				; push old return address
 26974 00015064 FF7500                  	push qword [rbp]					; push old rbp
 26975                                  	;; move stack up ;;
 26976 00015067 488B5D18                	mov rbx, [rbp + 3*8]
 26977 0001506B 4889DE                  	mov rsi, rbx						; save old size in rsi
 26978 0001506E 4883C303                	add rbx, 3
 26979 00015072 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 26980 0001507A B903000000              	mov rcx, 3
 26981 0001507F 4883C104                	add rcx, 4				; num of iterations in rcx
 26982                                  .L_tc_recycle_frame_loop_03b4:
 26983 00015083 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 26984 0001508B 488B143C                	mov rdx, [rsp + rdi]
 26985 0001508F 4889541D00              	mov [rbp + rbx], rdx
 26986 00015094 4883EB08                	sub rbx, 8
 26987 00015098 48FFC9                  	dec rcx
 26988 0001509B 4883F900                	cmp rcx, 0
 26989 0001509F 75E2                    	jne .L_tc_recycle_frame_loop_03b4
 26990 000150A1 4889F3                  	mov rbx, rsi
 26991 000150A4 4883EB03                	sub rbx, 3
 26992 000150A8 488D1CDD00000000        	lea rbx, [rbx*8]
 26993 000150B0 4801DD                  	add rbp, rbx
 26994 000150B3 4889EC                  	mov rsp, rbp         ; fix stack pointers
 26995 000150B6 5D                      	pop rbp
 26996 000150B7 41FFE0                  	jmp r8
 26997 000150BA C9                      	leave
 26998 000150BB C21800                  	ret AND_KILL_FRAME(1)
 26999                                  .L_lambda_simple_end_02d3:	; new closure is in rax
 27000 000150BE 803804                  	cmp byte [rax], T_closure
 27001 000150C1 0F85E21F0000            	jne L_error_non_closure
 27002 000150C7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27003 000150CA 4C8B4009                	mov r8, qword [rax + 1 + 8]
 27004 000150CE FF7508                  	push qword [rbp + 8]				; push old return address
 27005 000150D1 FF7500                  	push qword [rbp]					; push old rbp
 27006                                  	;; move stack up ;;
 27007 000150D4 488B5D18                	mov rbx, [rbp + 3*8]
 27008 000150D8 4889DE                  	mov rsi, rbx						; save old size in rsi
 27009 000150DB 4883C303                	add rbx, 3
 27010 000150DF 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 27011 000150E7 B901000000              	mov rcx, 1
 27012 000150EC 4883C104                	add rcx, 4				; num of iterations in rcx
 27013                                  .L_tc_recycle_frame_loop_03b3:
 27014 000150F0 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 27015 000150F8 488B143C                	mov rdx, [rsp + rdi]
 27016 000150FC 4889541D00              	mov [rbp + rbx], rdx
 27017 00015101 4883EB08                	sub rbx, 8
 27018 00015105 48FFC9                  	dec rcx
 27019 00015108 4883F900                	cmp rcx, 0
 27020 0001510C 75E2                    	jne .L_tc_recycle_frame_loop_03b3
 27021 0001510E 4889F3                  	mov rbx, rsi
 27022 00015111 4883EB01                	sub rbx, 1
 27023 00015115 488D1CDD00000000        	lea rbx, [rbx*8]
 27024 0001511D 4801DD                  	add rbp, rbx
 27025 00015120 4889EC                  	mov rsp, rbp         ; fix stack pointers
 27026 00015123 5D                      	pop rbp
 27027 00015124 41FFE0                  	jmp r8
 27028 00015127 EB04                    	jmp .L_if_end_0217
 27029                                  .L_if_else_0217:
 27030 00015129 488B4520                	mov rax, PARAM(0)	; param str
 27031                                  .L_if_end_0217:
 27032 0001512D C9                      	leave
 27033 0001512E C22800                  	ret AND_KILL_FRAME(3)
 27034                                  .L_lambda_simple_end_02d2:	; new closure is in rax
 27035 00015131 50                      	push rax
 27036 00015132 488B4520                	mov rax, PARAM(0)	; param run
 27037 00015136 8F00                    	pop qword [rax]
 27038 00015138 48B8-                   	mov rax, sob_void
 27038 0001513A [0000000000000000] 
 27039                                  
 27040 00015142 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27041 00015147 E806200000              	call malloc
 27042 0001514C 50                      	push rax
 27043 0001514D BF08000000              	mov rdi, 8 * 1	; new rib
 27044 00015152 E8FB1F0000              	call malloc
 27045 00015157 50                      	push rax
 27046 00015158 BF10000000              	mov rdi, 8 * 2	; extended env
 27047 0001515D E8F01F0000              	call malloc
 27048 00015162 488B7D10                	mov rdi, ENV
 27049 00015166 BE00000000              	mov rsi, 0
 27050 0001516B BA01000000              	mov rdx, 1
 27051                                  .L_lambda_simple_env_loop_02d4:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 27052 00015170 4883FE01                	cmp rsi, 1
 27053 00015174 7410                    	je .L_lambda_simple_env_end_02d4
 27054 00015176 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27055 0001517A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27056 0001517E 48FFC6                  	inc rsi
 27057 00015181 48FFC2                  	inc rdx
 27058 00015184 EBEA                    	jmp .L_lambda_simple_env_loop_02d4
 27059                                  .L_lambda_simple_env_end_02d4:
 27060 00015186 5B                      	pop rbx
 27061 00015187 BE00000000              	mov rsi, 0
 27062                                  .L_lambda_simple_params_loop_02d4:	; copy params
 27063 0001518C 4883FE01                	cmp rsi, 1
 27064 00015190 740E                    	je .L_lambda_simple_params_end_02d4
 27065 00015192 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27066 00015197 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27067 0001519B 48FFC6                  	inc rsi
 27068 0001519E EBEC                    	jmp .L_lambda_simple_params_loop_02d4
 27069                                  .L_lambda_simple_params_end_02d4:
 27070 000151A0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 27071 000151A3 4889C3                  	mov rbx, rax
 27072 000151A6 58                      	pop rax
 27073 000151A7 C60004                  	mov byte [rax], T_closure
 27074 000151AA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27075 000151AE 48C74009[BB510100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02d4
 27076 000151B6 E942020000              	jmp .L_lambda_simple_end_02d4
 27077                                  .L_lambda_simple_code_02d4:	; lambda-simple body
 27078 000151BB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27079 000151C1 740B                    	je .L_lambda_simple_arity_check_ok_02d4
 27080 000151C3 FF742410                	push qword [rsp + 8 * 2]
 27081 000151C7 6A01                    	push 1
 27082 000151C9 E93D1F0000              	jmp L_error_incorrect_arity_simple
 27083                                  .L_lambda_simple_arity_check_ok_02d4:
 27084 000151CE C8000000                	enter 0, 0
 27085                                  	; preparing a tail-call
 27086                                  	; preparing a non-tail-call
 27087 000151D2 488B4520                	mov rax, PARAM(0)	; param str
 27088 000151D6 50                      	push rax
 27089 000151D7 6A01                    	push 1	; arg count
 27090 000151D9 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 27091 000151E1 803805                  	cmp byte [rax], T_undefined
 27092 000151E4 0F843B1E0000            	je L_error_fvar_undefined
 27093 000151EA 803804                  	cmp byte [rax], T_closure
 27094 000151ED 0F85B61E0000            	jne L_error_non_closure
 27095 000151F3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27096 000151F6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27097 000151F9 50                      	push rax
 27098 000151FA 6A01                    	push 1	; arg count
 27099 000151FC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27100 00015201 E84C1F0000              	call malloc
 27101 00015206 50                      	push rax
 27102 00015207 BF08000000              	mov rdi, 8 * 1	; new rib
 27103 0001520C E8411F0000              	call malloc
 27104 00015211 50                      	push rax
 27105 00015212 BF18000000              	mov rdi, 8 * 3	; extended env
 27106 00015217 E8361F0000              	call malloc
 27107 0001521C 488B7D10                	mov rdi, ENV
 27108 00015220 BE00000000              	mov rsi, 0
 27109 00015225 BA01000000              	mov rdx, 1
 27110                                  .L_lambda_simple_env_loop_02d5:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 27111 0001522A 4883FE02                	cmp rsi, 2
 27112 0001522E 7410                    	je .L_lambda_simple_env_end_02d5
 27113 00015230 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27114 00015234 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27115 00015238 48FFC6                  	inc rsi
 27116 0001523B 48FFC2                  	inc rdx
 27117 0001523E EBEA                    	jmp .L_lambda_simple_env_loop_02d5
 27118                                  .L_lambda_simple_env_end_02d5:
 27119 00015240 5B                      	pop rbx
 27120 00015241 BE00000000              	mov rsi, 0
 27121                                  .L_lambda_simple_params_loop_02d5:	; copy params
 27122 00015246 4883FE01                	cmp rsi, 1
 27123 0001524A 740E                    	je .L_lambda_simple_params_end_02d5
 27124 0001524C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27125 00015251 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27126 00015255 48FFC6                  	inc rsi
 27127 00015258 EBEC                    	jmp .L_lambda_simple_params_loop_02d5
 27128                                  .L_lambda_simple_params_end_02d5:
 27129 0001525A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 27130 0001525D 4889C3                  	mov rbx, rax
 27131 00015260 58                      	pop rax
 27132 00015261 C60004                  	mov byte [rax], T_closure
 27133 00015264 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27134 00015268 48C74009[75520100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02d5
 27135 00015270 E91B010000              	jmp .L_lambda_simple_end_02d5
 27136                                  .L_lambda_simple_code_02d5:	; lambda-simple body
 27137 00015275 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27138 0001527B 740B                    	je .L_lambda_simple_arity_check_ok_02d5
 27139 0001527D FF742410                	push qword [rsp + 8 * 2]
 27140 00015281 6A01                    	push 1
 27141 00015283 E9831E0000              	jmp L_error_incorrect_arity_simple
 27142                                  .L_lambda_simple_arity_check_ok_02d5:
 27143 00015288 C8000000                	enter 0, 0
 27144                                  	; preparing a non-tail-call
 27145 0001528C 488B4520                	mov rax, PARAM(0)	; param n
 27146 00015290 50                      	push rax
 27147 00015291 6A01                    	push 1	; arg count
 27148 00015293 488B0425[DE170000]      	mov rax, qword [free_var_151]	; free var zero?
 27149 0001529B 803805                  	cmp byte [rax], T_undefined
 27150 0001529E 0F84811D0000            	je L_error_fvar_undefined
 27151 000152A4 803804                  	cmp byte [rax], T_closure
 27152 000152A7 0F85FC1D0000            	jne L_error_non_closure
 27153 000152AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 27154 000152B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27155 000152B3 483D[02000000]          	cmp rax, sob_boolean_false
 27156 000152B9 740F                    	je .L_if_else_0218
 27157 000152BB 488B4510                	mov rax, ENV
 27158 000152BF 488B00                  	mov rax, qword [rax + 8 * 0]
 27159 000152C2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27160 000152C5 E9C2000000              	jmp .L_if_end_0218
 27161                                  .L_if_else_0218:
 27162                                  	; preparing a tail-call
 27163                                  	; preparing a non-tail-call
 27164 000152CA 48B8-                   	mov rax, L_constants + 2270
 27164 000152CC [DE08000000000000] 
 27165 000152D4 50                      	push rax
 27166 000152D5 488B4520                	mov rax, PARAM(0)	; param n
 27167 000152D9 50                      	push rax
 27168 000152DA 6A02                    	push 2	; arg count
 27169 000152DC 488B0425[F90D0000]      	mov rax, qword [free_var_2]	; free var -
 27170 000152E4 803805                  	cmp byte [rax], T_undefined
 27171 000152E7 0F84381D0000            	je L_error_fvar_undefined
 27172 000152ED 803804                  	cmp byte [rax], T_closure
 27173 000152F0 0F85B31D0000            	jne L_error_non_closure
 27174 000152F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27175 000152F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27176 000152FC 50                      	push rax
 27177 000152FD 48B8-                   	mov rax, L_constants + 2135
 27177 000152FF [5708000000000000] 
 27178 00015307 50                      	push rax
 27179 00015308 488B4510                	mov rax, ENV
 27180 0001530C 488B00                  	mov rax, qword [rax + 8 * 0]
 27181 0001530F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27182 00015312 50                      	push rax
 27183 00015313 6A03                    	push 3	; arg count
 27184 00015315 488B4510                	mov rax, ENV
 27185 00015319 488B4008                	mov rax, qword [rax + 8 * 1]
 27186 0001531D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27187 00015320 488B00                  	mov rax, qword [rax]
 27188 00015323 803804                  	cmp byte [rax], T_closure
 27189 00015326 0F857D1D0000            	jne L_error_non_closure
 27190 0001532C FF7001                  	push SOB_CLOSURE_ENV(rax)
 27191 0001532F 4C8B4009                	mov r8, qword [rax + 1 + 8]
 27192 00015333 FF7508                  	push qword [rbp + 8]				; push old return address
 27193 00015336 FF7500                  	push qword [rbp]					; push old rbp
 27194                                  	;; move stack up ;;
 27195 00015339 488B5D18                	mov rbx, [rbp + 3*8]
 27196 0001533D 4889DE                  	mov rsi, rbx						; save old size in rsi
 27197 00015340 4883C303                	add rbx, 3
 27198 00015344 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 27199 0001534C B903000000              	mov rcx, 3
 27200 00015351 4883C104                	add rcx, 4				; num of iterations in rcx
 27201                                  .L_tc_recycle_frame_loop_03b6:
 27202 00015355 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 27203 0001535D 488B143C                	mov rdx, [rsp + rdi]
 27204 00015361 4889541D00              	mov [rbp + rbx], rdx
 27205 00015366 4883EB08                	sub rbx, 8
 27206 0001536A 48FFC9                  	dec rcx
 27207 0001536D 4883F900                	cmp rcx, 0
 27208 00015371 75E2                    	jne .L_tc_recycle_frame_loop_03b6
 27209 00015373 4889F3                  	mov rbx, rsi
 27210 00015376 4883EB03                	sub rbx, 3
 27211 0001537A 488D1CDD00000000        	lea rbx, [rbx*8]
 27212 00015382 4801DD                  	add rbp, rbx
 27213 00015385 4889EC                  	mov rsp, rbp         ; fix stack pointers
 27214 00015388 5D                      	pop rbp
 27215 00015389 41FFE0                  	jmp r8
 27216                                  .L_if_end_0218:
 27217 0001538C C9                      	leave
 27218 0001538D C21800                  	ret AND_KILL_FRAME(1)
 27219                                  .L_lambda_simple_end_02d5:	; new closure is in rax
 27220 00015390 803804                  	cmp byte [rax], T_closure
 27221 00015393 0F85101D0000            	jne L_error_non_closure
 27222 00015399 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27223 0001539C 4C8B4009                	mov r8, qword [rax + 1 + 8]
 27224 000153A0 FF7508                  	push qword [rbp + 8]				; push old return address
 27225 000153A3 FF7500                  	push qword [rbp]					; push old rbp
 27226                                  	;; move stack up ;;
 27227 000153A6 488B5D18                	mov rbx, [rbp + 3*8]
 27228 000153AA 4889DE                  	mov rsi, rbx						; save old size in rsi
 27229 000153AD 4883C303                	add rbx, 3
 27230 000153B1 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 27231 000153B9 B901000000              	mov rcx, 1
 27232 000153BE 4883C104                	add rcx, 4				; num of iterations in rcx
 27233                                  .L_tc_recycle_frame_loop_03b5:
 27234 000153C2 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 27235 000153CA 488B143C                	mov rdx, [rsp + rdi]
 27236 000153CE 4889541D00              	mov [rbp + rbx], rdx
 27237 000153D3 4883EB08                	sub rbx, 8
 27238 000153D7 48FFC9                  	dec rcx
 27239 000153DA 4883F900                	cmp rcx, 0
 27240 000153DE 75E2                    	jne .L_tc_recycle_frame_loop_03b5
 27241 000153E0 4889F3                  	mov rbx, rsi
 27242 000153E3 4883EB01                	sub rbx, 1
 27243 000153E7 488D1CDD00000000        	lea rbx, [rbx*8]
 27244 000153EF 4801DD                  	add rbp, rbx
 27245 000153F2 4889EC                  	mov rsp, rbp         ; fix stack pointers
 27246 000153F5 5D                      	pop rbp
 27247 000153F6 41FFE0                  	jmp r8
 27248 000153F9 C9                      	leave
 27249 000153FA C21800                  	ret AND_KILL_FRAME(1)
 27250                                  .L_lambda_simple_end_02d4:	; new closure is in rax
 27251 000153FD C9                      	leave
 27252 000153FE C21800                  	ret AND_KILL_FRAME(1)
 27253                                  .L_lambda_simple_end_02d1:	; new closure is in rax
 27254 00015401 803804                  	cmp byte [rax], T_closure
 27255 00015404 0F859F1C0000            	jne L_error_non_closure
 27256 0001540A FF7001                  	push SOB_CLOSURE_ENV(rax)
 27257 0001540D FF5009                  	call SOB_CLOSURE_CODE(rax)
 27258 00015410 48890425[79160000]      	mov qword [free_var_130], rax
 27259 00015418 48B8-                   	mov rax, sob_void
 27259 0001541A [0000000000000000] 
 27260                                  
 27261 00015422 4889C7                  	mov rdi, rax
 27262 00015425 E87D1F0000              	call print_sexpr_if_not_void
 27263                                  	; preparing a non-tail-call
 27264 0001542A 48B8-                   	mov rax, L_constants + 1993
 27264 0001542C [C907000000000000] 
 27265 00015434 50                      	push rax
 27266 00015435 6A01                    	push 1	; arg count
 27267 00015437 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27268 0001543C E8111D0000              	call malloc
 27269 00015441 50                      	push rax
 27270 00015442 BF00000000              	mov rdi, 8 * 0	; new rib
 27271 00015447 E8061D0000              	call malloc
 27272 0001544C 50                      	push rax
 27273 0001544D BF08000000              	mov rdi, 8 * 1	; extended env
 27274 00015452 E8FB1C0000              	call malloc
 27275 00015457 488B7D10                	mov rdi, ENV
 27276 0001545B BE00000000              	mov rsi, 0
 27277 00015460 BA01000000              	mov rdx, 1
 27278                                  .L_lambda_simple_env_loop_02d6:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 27279 00015465 4883FE00                	cmp rsi, 0
 27280 00015469 7410                    	je .L_lambda_simple_env_end_02d6
 27281 0001546B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27282 0001546F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27283 00015473 48FFC6                  	inc rsi
 27284 00015476 48FFC2                  	inc rdx
 27285 00015479 EBEA                    	jmp .L_lambda_simple_env_loop_02d6
 27286                                  .L_lambda_simple_env_end_02d6:
 27287 0001547B 5B                      	pop rbx
 27288 0001547C BE00000000              	mov rsi, 0
 27289                                  .L_lambda_simple_params_loop_02d6:	; copy params
 27290 00015481 4883FE00                	cmp rsi, 0
 27291 00015485 740E                    	je .L_lambda_simple_params_end_02d6
 27292 00015487 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27293 0001548C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27294 00015490 48FFC6                  	inc rsi
 27295 00015493 EBEC                    	jmp .L_lambda_simple_params_loop_02d6
 27296                                  .L_lambda_simple_params_end_02d6:
 27297 00015495 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 27298 00015498 4889C3                  	mov rbx, rax
 27299 0001549B 58                      	pop rax
 27300 0001549C C60004                  	mov byte [rax], T_closure
 27301 0001549F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27302 000154A3 48C74009[B0540100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02d6
 27303 000154AB E9AD060000              	jmp .L_lambda_simple_end_02d6
 27304                                  .L_lambda_simple_code_02d6:	; lambda-simple body
 27305 000154B0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27306 000154B6 740B                    	je .L_lambda_simple_arity_check_ok_02d6
 27307 000154B8 FF742410                	push qword [rsp + 8 * 2]
 27308 000154BC 6A01                    	push 1
 27309 000154BE E9481C0000              	jmp L_error_incorrect_arity_simple
 27310                                  .L_lambda_simple_arity_check_ok_02d6:
 27311 000154C3 C8000000                	enter 0, 0
 27312 000154C7 BF08000000              	mov rdi, 8
 27313 000154CC E8811C0000              	call malloc
 27314 000154D1 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
 27315 000154D5 488918                  	mov qword[rax], rbx
 27316 000154D8 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 27317 000154DC 48B8-                   	mov rax, sob_void
 27317 000154DE [0000000000000000] 
 27318                                  
 27319 000154E6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27320 000154EB E8621C0000              	call malloc
 27321 000154F0 50                      	push rax
 27322 000154F1 BF08000000              	mov rdi, 8 * 1	; new rib
 27323 000154F6 E8571C0000              	call malloc
 27324 000154FB 50                      	push rax
 27325 000154FC BF10000000              	mov rdi, 8 * 2	; extended env
 27326 00015501 E84C1C0000              	call malloc
 27327 00015506 488B7D10                	mov rdi, ENV
 27328 0001550A BE00000000              	mov rsi, 0
 27329 0001550F BA01000000              	mov rdx, 1
 27330                                  .L_lambda_simple_env_loop_02d7:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 27331 00015514 4883FE01                	cmp rsi, 1
 27332 00015518 7410                    	je .L_lambda_simple_env_end_02d7
 27333 0001551A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27334 0001551E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27335 00015522 48FFC6                  	inc rsi
 27336 00015525 48FFC2                  	inc rdx
 27337 00015528 EBEA                    	jmp .L_lambda_simple_env_loop_02d7
 27338                                  .L_lambda_simple_env_end_02d7:
 27339 0001552A 5B                      	pop rbx
 27340 0001552B BE00000000              	mov rsi, 0
 27341                                  .L_lambda_simple_params_loop_02d7:	; copy params
 27342 00015530 4883FE01                	cmp rsi, 1
 27343 00015534 740E                    	je .L_lambda_simple_params_end_02d7
 27344 00015536 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27345 0001553B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27346 0001553F 48FFC6                  	inc rsi
 27347 00015542 EBEC                    	jmp .L_lambda_simple_params_loop_02d7
 27348                                  .L_lambda_simple_params_end_02d7:
 27349 00015544 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 27350 00015547 4889C3                  	mov rbx, rax
 27351 0001554A 58                      	pop rax
 27352 0001554B C60004                  	mov byte [rax], T_closure
 27353 0001554E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27354 00015552 48C74009[5F550100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02d7
 27355 0001555A E92E030000              	jmp .L_lambda_simple_end_02d7
 27356                                  .L_lambda_simple_code_02d7:	; lambda-simple body
 27357 0001555F 48837C241003            	cmp qword [rsp + 8 * 2], 3
 27358 00015565 740B                    	je .L_lambda_simple_arity_check_ok_02d7
 27359 00015567 FF742410                	push qword [rsp + 8 * 2]
 27360 0001556B 6A03                    	push 3
 27361 0001556D E9991B0000              	jmp L_error_incorrect_arity_simple
 27362                                  .L_lambda_simple_arity_check_ok_02d7:
 27363 00015572 C8000000                	enter 0, 0
 27364                                  	; preparing a non-tail-call
 27365 00015576 488B4530                	mov rax, PARAM(2)	; param j
 27366 0001557A 50                      	push rax
 27367 0001557B 488B4528                	mov rax, PARAM(1)	; param i
 27368 0001557F 50                      	push rax
 27369 00015580 6A02                    	push 2	; arg count
 27370 00015582 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 27371 0001558A 803805                  	cmp byte [rax], T_undefined
 27372 0001558D 0F84921A0000            	je L_error_fvar_undefined
 27373 00015593 803804                  	cmp byte [rax], T_closure
 27374 00015596 0F850D1B0000            	jne L_error_non_closure
 27375 0001559C FF7001                  	push SOB_CLOSURE_ENV(rax)
 27376 0001559F FF5009                  	call SOB_CLOSURE_CODE(rax)
 27377 000155A2 483D[02000000]          	cmp rax, sob_boolean_false
 27378 000155A8 0F84D7020000            	je .L_if_else_0219
 27379                                  	; preparing a tail-call
 27380                                  	; preparing a non-tail-call
 27381 000155AE 488B4528                	mov rax, PARAM(1)	; param i
 27382 000155B2 50                      	push rax
 27383 000155B3 488B4520                	mov rax, PARAM(0)	; param vec
 27384 000155B7 50                      	push rax
 27385 000155B8 6A02                    	push 2	; arg count
 27386 000155BA 488B0425[67170000]      	mov rax, qword [free_var_144]	; free var vector-ref
 27387 000155C2 803805                  	cmp byte [rax], T_undefined
 27388 000155C5 0F845A1A0000            	je L_error_fvar_undefined
 27389 000155CB 803804                  	cmp byte [rax], T_closure
 27390 000155CE 0F85D51A0000            	jne L_error_non_closure
 27391 000155D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27392 000155D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27393 000155DA 50                      	push rax
 27394 000155DB 6A01                    	push 1	; arg count
 27395 000155DD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27396 000155E2 E86B1B0000              	call malloc
 27397 000155E7 50                      	push rax
 27398 000155E8 BF18000000              	mov rdi, 8 * 3	; new rib
 27399 000155ED E8601B0000              	call malloc
 27400 000155F2 50                      	push rax
 27401 000155F3 BF18000000              	mov rdi, 8 * 3	; extended env
 27402 000155F8 E8551B0000              	call malloc
 27403 000155FD 488B7D10                	mov rdi, ENV
 27404 00015601 BE00000000              	mov rsi, 0
 27405 00015606 BA01000000              	mov rdx, 1
 27406                                  .L_lambda_simple_env_loop_02d8:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 27407 0001560B 4883FE02                	cmp rsi, 2
 27408 0001560F 7410                    	je .L_lambda_simple_env_end_02d8
 27409 00015611 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27410 00015615 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27411 00015619 48FFC6                  	inc rsi
 27412 0001561C 48FFC2                  	inc rdx
 27413 0001561F EBEA                    	jmp .L_lambda_simple_env_loop_02d8
 27414                                  .L_lambda_simple_env_end_02d8:
 27415 00015621 5B                      	pop rbx
 27416 00015622 BE00000000              	mov rsi, 0
 27417                                  .L_lambda_simple_params_loop_02d8:	; copy params
 27418 00015627 4883FE03                	cmp rsi, 3
 27419 0001562B 740E                    	je .L_lambda_simple_params_end_02d8
 27420 0001562D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27421 00015632 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27422 00015636 48FFC6                  	inc rsi
 27423 00015639 EBEC                    	jmp .L_lambda_simple_params_loop_02d8
 27424                                  .L_lambda_simple_params_end_02d8:
 27425 0001563B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 27426 0001563E 4889C3                  	mov rbx, rax
 27427 00015641 58                      	pop rax
 27428 00015642 C60004                  	mov byte [rax], T_closure
 27429 00015645 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27430 00015649 48C74009[56560100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02d8
 27431 00015651 E9C4010000              	jmp .L_lambda_simple_end_02d8
 27432                                  .L_lambda_simple_code_02d8:	; lambda-simple body
 27433 00015656 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27434 0001565C 740B                    	je .L_lambda_simple_arity_check_ok_02d8
 27435 0001565E FF742410                	push qword [rsp + 8 * 2]
 27436 00015662 6A01                    	push 1
 27437 00015664 E9A21A0000              	jmp L_error_incorrect_arity_simple
 27438                                  .L_lambda_simple_arity_check_ok_02d8:
 27439 00015669 C8000000                	enter 0, 0
 27440                                  	; preparing a non-tail-call
 27441                                  	; preparing a non-tail-call
 27442 0001566D 488B4510                	mov rax, ENV
 27443 00015671 488B00                  	mov rax, qword [rax + 8 * 0]
 27444 00015674 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27445 00015678 50                      	push rax
 27446 00015679 488B4510                	mov rax, ENV
 27447 0001567D 488B00                  	mov rax, qword [rax + 8 * 0]
 27448 00015680 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27449 00015683 50                      	push rax
 27450 00015684 6A02                    	push 2	; arg count
 27451 00015686 488B0425[67170000]      	mov rax, qword [free_var_144]	; free var vector-ref
 27452 0001568E 803805                  	cmp byte [rax], T_undefined
 27453 00015691 0F848E190000            	je L_error_fvar_undefined
 27454 00015697 803804                  	cmp byte [rax], T_closure
 27455 0001569A 0F85091A0000            	jne L_error_non_closure
 27456 000156A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27457 000156A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27458 000156A6 50                      	push rax
 27459 000156A7 488B4510                	mov rax, ENV
 27460 000156AB 488B00                  	mov rax, qword [rax + 8 * 0]
 27461 000156AE 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 27462 000156B2 50                      	push rax
 27463 000156B3 488B4510                	mov rax, ENV
 27464 000156B7 488B00                  	mov rax, qword [rax + 8 * 0]
 27465 000156BA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27466 000156BD 50                      	push rax
 27467 000156BE 6A03                    	push 3	; arg count
 27468 000156C0 488B0425[9A170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 27469 000156C8 803805                  	cmp byte [rax], T_undefined
 27470 000156CB 0F8454190000            	je L_error_fvar_undefined
 27471 000156D1 803804                  	cmp byte [rax], T_closure
 27472 000156D4 0F85CF190000            	jne L_error_non_closure
 27473 000156DA FF7001                  	push SOB_CLOSURE_ENV(rax)
 27474 000156DD FF5009                  	call SOB_CLOSURE_CODE(rax)
 27475                                  
 27476                                  	; preparing a non-tail-call
 27477 000156E0 488B4520                	mov rax, PARAM(0)	; param ch
 27478 000156E4 50                      	push rax
 27479 000156E5 488B4510                	mov rax, ENV
 27480 000156E9 488B00                  	mov rax, qword [rax + 8 * 0]
 27481 000156EC 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27482 000156F0 50                      	push rax
 27483 000156F1 488B4510                	mov rax, ENV
 27484 000156F5 488B00                  	mov rax, qword [rax + 8 * 0]
 27485 000156F8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27486 000156FB 50                      	push rax
 27487 000156FC 6A03                    	push 3	; arg count
 27488 000156FE 488B0425[9A170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 27489 00015706 803805                  	cmp byte [rax], T_undefined
 27490 00015709 0F8416190000            	je L_error_fvar_undefined
 27491 0001570F 803804                  	cmp byte [rax], T_closure
 27492 00015712 0F8591190000            	jne L_error_non_closure
 27493 00015718 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27494 0001571B FF5009                  	call SOB_CLOSURE_CODE(rax)
 27495                                  
 27496                                  	; preparing a tail-call
 27497                                  	; preparing a non-tail-call
 27498 0001571E 48B8-                   	mov rax, L_constants + 2270
 27498 00015720 [DE08000000000000] 
 27499 00015728 50                      	push rax
 27500 00015729 488B4510                	mov rax, ENV
 27501 0001572D 488B00                  	mov rax, qword [rax + 8 * 0]
 27502 00015730 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27503 00015734 50                      	push rax
 27504 00015735 6A02                    	push 2	; arg count
 27505 00015737 488B0425[F90D0000]      	mov rax, qword [free_var_2]	; free var -
 27506 0001573F 803805                  	cmp byte [rax], T_undefined
 27507 00015742 0F84DD180000            	je L_error_fvar_undefined
 27508 00015748 803804                  	cmp byte [rax], T_closure
 27509 0001574B 0F8558190000            	jne L_error_non_closure
 27510 00015751 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27511 00015754 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27512 00015757 50                      	push rax
 27513                                  	; preparing a non-tail-call
 27514 00015758 48B8-                   	mov rax, L_constants + 2270
 27514 0001575A [DE08000000000000] 
 27515 00015762 50                      	push rax
 27516 00015763 488B4510                	mov rax, ENV
 27517 00015767 488B00                  	mov rax, qword [rax + 8 * 0]
 27518 0001576A 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 27519 0001576E 50                      	push rax
 27520 0001576F 6A02                    	push 2	; arg count
 27521 00015771 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 27522 00015779 803805                  	cmp byte [rax], T_undefined
 27523 0001577C 0F84A3180000            	je L_error_fvar_undefined
 27524 00015782 803804                  	cmp byte [rax], T_closure
 27525 00015785 0F851E190000            	jne L_error_non_closure
 27526 0001578B FF7001                  	push SOB_CLOSURE_ENV(rax)
 27527 0001578E FF5009                  	call SOB_CLOSURE_CODE(rax)
 27528 00015791 50                      	push rax
 27529 00015792 488B4510                	mov rax, ENV
 27530 00015796 488B00                  	mov rax, qword [rax + 8 * 0]
 27531 00015799 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27532 0001579C 50                      	push rax
 27533 0001579D 6A03                    	push 3	; arg count
 27534 0001579F 488B4510                	mov rax, ENV
 27535 000157A3 488B4008                	mov rax, qword [rax + 8 * 1]
 27536 000157A7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27537 000157AA 488B00                  	mov rax, qword [rax]
 27538 000157AD 803804                  	cmp byte [rax], T_closure
 27539 000157B0 0F85F3180000            	jne L_error_non_closure
 27540 000157B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27541 000157B9 4C8B4009                	mov r8, qword [rax + 1 + 8]
 27542 000157BD FF7508                  	push qword [rbp + 8]				; push old return address
 27543 000157C0 FF7500                  	push qword [rbp]					; push old rbp
 27544                                  	;; move stack up ;;
 27545 000157C3 488B5D18                	mov rbx, [rbp + 3*8]
 27546 000157C7 4889DE                  	mov rsi, rbx						; save old size in rsi
 27547 000157CA 4883C303                	add rbx, 3
 27548 000157CE 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 27549 000157D6 B903000000              	mov rcx, 3
 27550 000157DB 4883C104                	add rcx, 4				; num of iterations in rcx
 27551                                  .L_tc_recycle_frame_loop_03b8:
 27552 000157DF 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 27553 000157E7 488B143C                	mov rdx, [rsp + rdi]
 27554 000157EB 4889541D00              	mov [rbp + rbx], rdx
 27555 000157F0 4883EB08                	sub rbx, 8
 27556 000157F4 48FFC9                  	dec rcx
 27557 000157F7 4883F900                	cmp rcx, 0
 27558 000157FB 75E2                    	jne .L_tc_recycle_frame_loop_03b8
 27559 000157FD 4889F3                  	mov rbx, rsi
 27560 00015800 4883EB03                	sub rbx, 3
 27561 00015804 488D1CDD00000000        	lea rbx, [rbx*8]
 27562 0001580C 4801DD                  	add rbp, rbx
 27563 0001580F 4889EC                  	mov rsp, rbp         ; fix stack pointers
 27564 00015812 5D                      	pop rbp
 27565 00015813 41FFE0                  	jmp r8
 27566 00015816 C9                      	leave
 27567 00015817 C21800                  	ret AND_KILL_FRAME(1)
 27568                                  .L_lambda_simple_end_02d8:	; new closure is in rax
 27569 0001581A 803804                  	cmp byte [rax], T_closure
 27570 0001581D 0F8586180000            	jne L_error_non_closure
 27571 00015823 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27572 00015826 4C8B4009                	mov r8, qword [rax + 1 + 8]
 27573 0001582A FF7508                  	push qword [rbp + 8]				; push old return address
 27574 0001582D FF7500                  	push qword [rbp]					; push old rbp
 27575                                  	;; move stack up ;;
 27576 00015830 488B5D18                	mov rbx, [rbp + 3*8]
 27577 00015834 4889DE                  	mov rsi, rbx						; save old size in rsi
 27578 00015837 4883C303                	add rbx, 3
 27579 0001583B 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 27580 00015843 B901000000              	mov rcx, 1
 27581 00015848 4883C104                	add rcx, 4				; num of iterations in rcx
 27582                                  .L_tc_recycle_frame_loop_03b7:
 27583 0001584C 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 27584 00015854 488B143C                	mov rdx, [rsp + rdi]
 27585 00015858 4889541D00              	mov [rbp + rbx], rdx
 27586 0001585D 4883EB08                	sub rbx, 8
 27587 00015861 48FFC9                  	dec rcx
 27588 00015864 4883F900                	cmp rcx, 0
 27589 00015868 75E2                    	jne .L_tc_recycle_frame_loop_03b7
 27590 0001586A 4889F3                  	mov rbx, rsi
 27591 0001586D 4883EB01                	sub rbx, 1
 27592 00015871 488D1CDD00000000        	lea rbx, [rbx*8]
 27593 00015879 4801DD                  	add rbp, rbx
 27594 0001587C 4889EC                  	mov rsp, rbp         ; fix stack pointers
 27595 0001587F 5D                      	pop rbp
 27596 00015880 41FFE0                  	jmp r8
 27597 00015883 EB04                    	jmp .L_if_end_0219
 27598                                  .L_if_else_0219:
 27599 00015885 488B4520                	mov rax, PARAM(0)	; param vec
 27600                                  .L_if_end_0219:
 27601 00015889 C9                      	leave
 27602 0001588A C22800                  	ret AND_KILL_FRAME(3)
 27603                                  .L_lambda_simple_end_02d7:	; new closure is in rax
 27604 0001588D 50                      	push rax
 27605 0001588E 488B4520                	mov rax, PARAM(0)	; param run
 27606 00015892 8F00                    	pop qword [rax]
 27607 00015894 48B8-                   	mov rax, sob_void
 27607 00015896 [0000000000000000] 
 27608                                  
 27609 0001589E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27610 000158A3 E8AA180000              	call malloc
 27611 000158A8 50                      	push rax
 27612 000158A9 BF08000000              	mov rdi, 8 * 1	; new rib
 27613 000158AE E89F180000              	call malloc
 27614 000158B3 50                      	push rax
 27615 000158B4 BF10000000              	mov rdi, 8 * 2	; extended env
 27616 000158B9 E894180000              	call malloc
 27617 000158BE 488B7D10                	mov rdi, ENV
 27618 000158C2 BE00000000              	mov rsi, 0
 27619 000158C7 BA01000000              	mov rdx, 1
 27620                                  .L_lambda_simple_env_loop_02d9:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 27621 000158CC 4883FE01                	cmp rsi, 1
 27622 000158D0 7410                    	je .L_lambda_simple_env_end_02d9
 27623 000158D2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27624 000158D6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27625 000158DA 48FFC6                  	inc rsi
 27626 000158DD 48FFC2                  	inc rdx
 27627 000158E0 EBEA                    	jmp .L_lambda_simple_env_loop_02d9
 27628                                  .L_lambda_simple_env_end_02d9:
 27629 000158E2 5B                      	pop rbx
 27630 000158E3 BE00000000              	mov rsi, 0
 27631                                  .L_lambda_simple_params_loop_02d9:	; copy params
 27632 000158E8 4883FE01                	cmp rsi, 1
 27633 000158EC 740E                    	je .L_lambda_simple_params_end_02d9
 27634 000158EE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27635 000158F3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27636 000158F7 48FFC6                  	inc rsi
 27637 000158FA EBEC                    	jmp .L_lambda_simple_params_loop_02d9
 27638                                  .L_lambda_simple_params_end_02d9:
 27639 000158FC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 27640 000158FF 4889C3                  	mov rbx, rax
 27641 00015902 58                      	pop rax
 27642 00015903 C60004                  	mov byte [rax], T_closure
 27643 00015906 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27644 0001590A 48C74009[17590100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02d9
 27645 00015912 E942020000              	jmp .L_lambda_simple_end_02d9
 27646                                  .L_lambda_simple_code_02d9:	; lambda-simple body
 27647 00015917 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27648 0001591D 740B                    	je .L_lambda_simple_arity_check_ok_02d9
 27649 0001591F FF742410                	push qword [rsp + 8 * 2]
 27650 00015923 6A01                    	push 1
 27651 00015925 E9E1170000              	jmp L_error_incorrect_arity_simple
 27652                                  .L_lambda_simple_arity_check_ok_02d9:
 27653 0001592A C8000000                	enter 0, 0
 27654                                  	; preparing a tail-call
 27655                                  	; preparing a non-tail-call
 27656 0001592E 488B4520                	mov rax, PARAM(0)	; param vec
 27657 00015932 50                      	push rax
 27658 00015933 6A01                    	push 1	; arg count
 27659 00015935 488B0425[56170000]      	mov rax, qword [free_var_143]	; free var vector-length
 27660 0001593D 803805                  	cmp byte [rax], T_undefined
 27661 00015940 0F84DF160000            	je L_error_fvar_undefined
 27662 00015946 803804                  	cmp byte [rax], T_closure
 27663 00015949 0F855A170000            	jne L_error_non_closure
 27664 0001594F FF7001                  	push SOB_CLOSURE_ENV(rax)
 27665 00015952 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27666 00015955 50                      	push rax
 27667 00015956 6A01                    	push 1	; arg count
 27668 00015958 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27669 0001595D E8F0170000              	call malloc
 27670 00015962 50                      	push rax
 27671 00015963 BF08000000              	mov rdi, 8 * 1	; new rib
 27672 00015968 E8E5170000              	call malloc
 27673 0001596D 50                      	push rax
 27674 0001596E BF18000000              	mov rdi, 8 * 3	; extended env
 27675 00015973 E8DA170000              	call malloc
 27676 00015978 488B7D10                	mov rdi, ENV
 27677 0001597C BE00000000              	mov rsi, 0
 27678 00015981 BA01000000              	mov rdx, 1
 27679                                  .L_lambda_simple_env_loop_02da:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 27680 00015986 4883FE02                	cmp rsi, 2
 27681 0001598A 7410                    	je .L_lambda_simple_env_end_02da
 27682 0001598C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27683 00015990 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27684 00015994 48FFC6                  	inc rsi
 27685 00015997 48FFC2                  	inc rdx
 27686 0001599A EBEA                    	jmp .L_lambda_simple_env_loop_02da
 27687                                  .L_lambda_simple_env_end_02da:
 27688 0001599C 5B                      	pop rbx
 27689 0001599D BE00000000              	mov rsi, 0
 27690                                  .L_lambda_simple_params_loop_02da:	; copy params
 27691 000159A2 4883FE01                	cmp rsi, 1
 27692 000159A6 740E                    	je .L_lambda_simple_params_end_02da
 27693 000159A8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27694 000159AD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27695 000159B1 48FFC6                  	inc rsi
 27696 000159B4 EBEC                    	jmp .L_lambda_simple_params_loop_02da
 27697                                  .L_lambda_simple_params_end_02da:
 27698 000159B6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 27699 000159B9 4889C3                  	mov rbx, rax
 27700 000159BC 58                      	pop rax
 27701 000159BD C60004                  	mov byte [rax], T_closure
 27702 000159C0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27703 000159C4 48C74009[D1590100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02da
 27704 000159CC E91B010000              	jmp .L_lambda_simple_end_02da
 27705                                  .L_lambda_simple_code_02da:	; lambda-simple body
 27706 000159D1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27707 000159D7 740B                    	je .L_lambda_simple_arity_check_ok_02da
 27708 000159D9 FF742410                	push qword [rsp + 8 * 2]
 27709 000159DD 6A01                    	push 1
 27710 000159DF E927170000              	jmp L_error_incorrect_arity_simple
 27711                                  .L_lambda_simple_arity_check_ok_02da:
 27712 000159E4 C8000000                	enter 0, 0
 27713                                  	; preparing a non-tail-call
 27714 000159E8 488B4520                	mov rax, PARAM(0)	; param n
 27715 000159EC 50                      	push rax
 27716 000159ED 6A01                    	push 1	; arg count
 27717 000159EF 488B0425[DE170000]      	mov rax, qword [free_var_151]	; free var zero?
 27718 000159F7 803805                  	cmp byte [rax], T_undefined
 27719 000159FA 0F8425160000            	je L_error_fvar_undefined
 27720 00015A00 803804                  	cmp byte [rax], T_closure
 27721 00015A03 0F85A0160000            	jne L_error_non_closure
 27722 00015A09 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27723 00015A0C FF5009                  	call SOB_CLOSURE_CODE(rax)
 27724 00015A0F 483D[02000000]          	cmp rax, sob_boolean_false
 27725 00015A15 740F                    	je .L_if_else_021a
 27726 00015A17 488B4510                	mov rax, ENV
 27727 00015A1B 488B00                  	mov rax, qword [rax + 8 * 0]
 27728 00015A1E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27729 00015A21 E9C2000000              	jmp .L_if_end_021a
 27730                                  .L_if_else_021a:
 27731                                  	; preparing a tail-call
 27732                                  	; preparing a non-tail-call
 27733 00015A26 48B8-                   	mov rax, L_constants + 2270
 27733 00015A28 [DE08000000000000] 
 27734 00015A30 50                      	push rax
 27735 00015A31 488B4520                	mov rax, PARAM(0)	; param n
 27736 00015A35 50                      	push rax
 27737 00015A36 6A02                    	push 2	; arg count
 27738 00015A38 488B0425[F90D0000]      	mov rax, qword [free_var_2]	; free var -
 27739 00015A40 803805                  	cmp byte [rax], T_undefined
 27740 00015A43 0F84DC150000            	je L_error_fvar_undefined
 27741 00015A49 803804                  	cmp byte [rax], T_closure
 27742 00015A4C 0F8557160000            	jne L_error_non_closure
 27743 00015A52 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27744 00015A55 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27745 00015A58 50                      	push rax
 27746 00015A59 48B8-                   	mov rax, L_constants + 2135
 27746 00015A5B [5708000000000000] 
 27747 00015A63 50                      	push rax
 27748 00015A64 488B4510                	mov rax, ENV
 27749 00015A68 488B00                  	mov rax, qword [rax + 8 * 0]
 27750 00015A6B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27751 00015A6E 50                      	push rax
 27752 00015A6F 6A03                    	push 3	; arg count
 27753 00015A71 488B4510                	mov rax, ENV
 27754 00015A75 488B4008                	mov rax, qword [rax + 8 * 1]
 27755 00015A79 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27756 00015A7C 488B00                  	mov rax, qword [rax]
 27757 00015A7F 803804                  	cmp byte [rax], T_closure
 27758 00015A82 0F8521160000            	jne L_error_non_closure
 27759 00015A88 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27760 00015A8B 4C8B4009                	mov r8, qword [rax + 1 + 8]
 27761 00015A8F FF7508                  	push qword [rbp + 8]				; push old return address
 27762 00015A92 FF7500                  	push qword [rbp]					; push old rbp
 27763                                  	;; move stack up ;;
 27764 00015A95 488B5D18                	mov rbx, [rbp + 3*8]
 27765 00015A99 4889DE                  	mov rsi, rbx						; save old size in rsi
 27766 00015A9C 4883C303                	add rbx, 3
 27767 00015AA0 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 27768 00015AA8 B903000000              	mov rcx, 3
 27769 00015AAD 4883C104                	add rcx, 4				; num of iterations in rcx
 27770                                  .L_tc_recycle_frame_loop_03ba:
 27771 00015AB1 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 27772 00015AB9 488B143C                	mov rdx, [rsp + rdi]
 27773 00015ABD 4889541D00              	mov [rbp + rbx], rdx
 27774 00015AC2 4883EB08                	sub rbx, 8
 27775 00015AC6 48FFC9                  	dec rcx
 27776 00015AC9 4883F900                	cmp rcx, 0
 27777 00015ACD 75E2                    	jne .L_tc_recycle_frame_loop_03ba
 27778 00015ACF 4889F3                  	mov rbx, rsi
 27779 00015AD2 4883EB03                	sub rbx, 3
 27780 00015AD6 488D1CDD00000000        	lea rbx, [rbx*8]
 27781 00015ADE 4801DD                  	add rbp, rbx
 27782 00015AE1 4889EC                  	mov rsp, rbp         ; fix stack pointers
 27783 00015AE4 5D                      	pop rbp
 27784 00015AE5 41FFE0                  	jmp r8
 27785                                  .L_if_end_021a:
 27786 00015AE8 C9                      	leave
 27787 00015AE9 C21800                  	ret AND_KILL_FRAME(1)
 27788                                  .L_lambda_simple_end_02da:	; new closure is in rax
 27789 00015AEC 803804                  	cmp byte [rax], T_closure
 27790 00015AEF 0F85B4150000            	jne L_error_non_closure
 27791 00015AF5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27792 00015AF8 4C8B4009                	mov r8, qword [rax + 1 + 8]
 27793 00015AFC FF7508                  	push qword [rbp + 8]				; push old return address
 27794 00015AFF FF7500                  	push qword [rbp]					; push old rbp
 27795                                  	;; move stack up ;;
 27796 00015B02 488B5D18                	mov rbx, [rbp + 3*8]
 27797 00015B06 4889DE                  	mov rsi, rbx						; save old size in rsi
 27798 00015B09 4883C303                	add rbx, 3
 27799 00015B0D 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 27800 00015B15 B901000000              	mov rcx, 1
 27801 00015B1A 4883C104                	add rcx, 4				; num of iterations in rcx
 27802                                  .L_tc_recycle_frame_loop_03b9:
 27803 00015B1E 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 27804 00015B26 488B143C                	mov rdx, [rsp + rdi]
 27805 00015B2A 4889541D00              	mov [rbp + rbx], rdx
 27806 00015B2F 4883EB08                	sub rbx, 8
 27807 00015B33 48FFC9                  	dec rcx
 27808 00015B36 4883F900                	cmp rcx, 0
 27809 00015B3A 75E2                    	jne .L_tc_recycle_frame_loop_03b9
 27810 00015B3C 4889F3                  	mov rbx, rsi
 27811 00015B3F 4883EB01                	sub rbx, 1
 27812 00015B43 488D1CDD00000000        	lea rbx, [rbx*8]
 27813 00015B4B 4801DD                  	add rbp, rbx
 27814 00015B4E 4889EC                  	mov rsp, rbp         ; fix stack pointers
 27815 00015B51 5D                      	pop rbp
 27816 00015B52 41FFE0                  	jmp r8
 27817 00015B55 C9                      	leave
 27818 00015B56 C21800                  	ret AND_KILL_FRAME(1)
 27819                                  .L_lambda_simple_end_02d9:	; new closure is in rax
 27820 00015B59 C9                      	leave
 27821 00015B5A C21800                  	ret AND_KILL_FRAME(1)
 27822                                  .L_lambda_simple_end_02d6:	; new closure is in rax
 27823 00015B5D 803804                  	cmp byte [rax], T_closure
 27824 00015B60 0F8543150000            	jne L_error_non_closure
 27825 00015B66 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27826 00015B69 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27827 00015B6C 48890425[89170000]      	mov qword [free_var_146], rax
 27828 00015B74 48B8-                   	mov rax, sob_void
 27828 00015B76 [0000000000000000] 
 27829                                  
 27830 00015B7E 4889C7                  	mov rdi, rax
 27831 00015B81 E821180000              	call print_sexpr_if_not_void
 27832 00015B86 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27833 00015B8B E8C2150000              	call malloc
 27834 00015B90 50                      	push rax
 27835 00015B91 BF00000000              	mov rdi, 8 * 0	; new rib
 27836 00015B96 E8B7150000              	call malloc
 27837 00015B9B 50                      	push rax
 27838 00015B9C BF08000000              	mov rdi, 8 * 1	; extended env
 27839 00015BA1 E8AC150000              	call malloc
 27840 00015BA6 488B7D10                	mov rdi, ENV
 27841 00015BAA BE00000000              	mov rsi, 0
 27842 00015BAF BA01000000              	mov rdx, 1
 27843                                  .L_lambda_simple_env_loop_02db:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 27844 00015BB4 4883FE00                	cmp rsi, 0
 27845 00015BB8 7410                    	je .L_lambda_simple_env_end_02db
 27846 00015BBA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27847 00015BBE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27848 00015BC2 48FFC6                  	inc rsi
 27849 00015BC5 48FFC2                  	inc rdx
 27850 00015BC8 EBEA                    	jmp .L_lambda_simple_env_loop_02db
 27851                                  .L_lambda_simple_env_end_02db:
 27852 00015BCA 5B                      	pop rbx
 27853 00015BCB BE00000000              	mov rsi, 0
 27854                                  .L_lambda_simple_params_loop_02db:	; copy params
 27855 00015BD0 4883FE00                	cmp rsi, 0
 27856 00015BD4 740E                    	je .L_lambda_simple_params_end_02db
 27857 00015BD6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27858 00015BDB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27859 00015BDF 48FFC6                  	inc rsi
 27860 00015BE2 EBEC                    	jmp .L_lambda_simple_params_loop_02db
 27861                                  .L_lambda_simple_params_end_02db:
 27862 00015BE4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 27863 00015BE7 4889C3                  	mov rbx, rax
 27864 00015BEA 58                      	pop rax
 27865 00015BEB C60004                  	mov byte [rax], T_closure
 27866 00015BEE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27867 00015BF2 48C74009[FF5B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02db
 27868 00015BFA E9A2030000              	jmp .L_lambda_simple_end_02db
 27869                                  .L_lambda_simple_code_02db:	; lambda-simple body
 27870 00015BFF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 27871 00015C05 740B                    	je .L_lambda_simple_arity_check_ok_02db
 27872 00015C07 FF742410                	push qword [rsp + 8 * 2]
 27873 00015C0B 6A02                    	push 2
 27874 00015C0D E9F9140000              	jmp L_error_incorrect_arity_simple
 27875                                  .L_lambda_simple_arity_check_ok_02db:
 27876 00015C12 C8000000                	enter 0, 0
 27877                                  	; preparing a tail-call
 27878 00015C16 48B8-                   	mov rax, L_constants + 1993
 27878 00015C18 [C907000000000000] 
 27879 00015C20 50                      	push rax
 27880 00015C21 6A01                    	push 1	; arg count
 27881 00015C23 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27882 00015C28 E825150000              	call malloc
 27883 00015C2D 50                      	push rax
 27884 00015C2E BF10000000              	mov rdi, 8 * 2	; new rib
 27885 00015C33 E81A150000              	call malloc
 27886 00015C38 50                      	push rax
 27887 00015C39 BF10000000              	mov rdi, 8 * 2	; extended env
 27888 00015C3E E80F150000              	call malloc
 27889 00015C43 488B7D10                	mov rdi, ENV
 27890 00015C47 BE00000000              	mov rsi, 0
 27891 00015C4C BA01000000              	mov rdx, 1
 27892                                  .L_lambda_simple_env_loop_02dc:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 27893 00015C51 4883FE01                	cmp rsi, 1
 27894 00015C55 7410                    	je .L_lambda_simple_env_end_02dc
 27895 00015C57 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27896 00015C5B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27897 00015C5F 48FFC6                  	inc rsi
 27898 00015C62 48FFC2                  	inc rdx
 27899 00015C65 EBEA                    	jmp .L_lambda_simple_env_loop_02dc
 27900                                  .L_lambda_simple_env_end_02dc:
 27901 00015C67 5B                      	pop rbx
 27902 00015C68 BE00000000              	mov rsi, 0
 27903                                  .L_lambda_simple_params_loop_02dc:	; copy params
 27904 00015C6D 4883FE02                	cmp rsi, 2
 27905 00015C71 740E                    	je .L_lambda_simple_params_end_02dc
 27906 00015C73 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27907 00015C78 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27908 00015C7C 48FFC6                  	inc rsi
 27909 00015C7F EBEC                    	jmp .L_lambda_simple_params_loop_02dc
 27910                                  .L_lambda_simple_params_end_02dc:
 27911 00015C81 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 27912 00015C84 4889C3                  	mov rbx, rax
 27913 00015C87 58                      	pop rax
 27914 00015C88 C60004                  	mov byte [rax], T_closure
 27915 00015C8B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27916 00015C8F 48C74009[9C5C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02dc
 27917 00015C97 E998020000              	jmp .L_lambda_simple_end_02dc
 27918                                  .L_lambda_simple_code_02dc:	; lambda-simple body
 27919 00015C9C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27920 00015CA2 740B                    	je .L_lambda_simple_arity_check_ok_02dc
 27921 00015CA4 FF742410                	push qword [rsp + 8 * 2]
 27922 00015CA8 6A01                    	push 1
 27923 00015CAA E95C140000              	jmp L_error_incorrect_arity_simple
 27924                                  .L_lambda_simple_arity_check_ok_02dc:
 27925 00015CAF C8000000                	enter 0, 0
 27926 00015CB3 BF08000000              	mov rdi, 8
 27927 00015CB8 E895140000              	call malloc
 27928 00015CBD 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
 27929 00015CC1 488918                  	mov qword[rax], rbx
 27930 00015CC4 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 27931 00015CC8 48B8-                   	mov rax, sob_void
 27931 00015CCA [0000000000000000] 
 27932                                  
 27933 00015CD2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27934 00015CD7 E876140000              	call malloc
 27935 00015CDC 50                      	push rax
 27936 00015CDD BF08000000              	mov rdi, 8 * 1	; new rib
 27937 00015CE2 E86B140000              	call malloc
 27938 00015CE7 50                      	push rax
 27939 00015CE8 BF18000000              	mov rdi, 8 * 3	; extended env
 27940 00015CED E860140000              	call malloc
 27941 00015CF2 488B7D10                	mov rdi, ENV
 27942 00015CF6 BE00000000              	mov rsi, 0
 27943 00015CFB BA01000000              	mov rdx, 1
 27944                                  .L_lambda_simple_env_loop_02dd:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 27945 00015D00 4883FE02                	cmp rsi, 2
 27946 00015D04 7410                    	je .L_lambda_simple_env_end_02dd
 27947 00015D06 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27948 00015D0A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27949 00015D0E 48FFC6                  	inc rsi
 27950 00015D11 48FFC2                  	inc rdx
 27951 00015D14 EBEA                    	jmp .L_lambda_simple_env_loop_02dd
 27952                                  .L_lambda_simple_env_end_02dd:
 27953 00015D16 5B                      	pop rbx
 27954 00015D17 BE00000000              	mov rsi, 0
 27955                                  .L_lambda_simple_params_loop_02dd:	; copy params
 27956 00015D1C 4883FE01                	cmp rsi, 1
 27957 00015D20 740E                    	je .L_lambda_simple_params_end_02dd
 27958 00015D22 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27959 00015D27 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27960 00015D2B 48FFC6                  	inc rsi
 27961 00015D2E EBEC                    	jmp .L_lambda_simple_params_loop_02dd
 27962                                  .L_lambda_simple_params_end_02dd:
 27963 00015D30 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 27964 00015D33 4889C3                  	mov rbx, rax
 27965 00015D36 58                      	pop rax
 27966 00015D37 C60004                  	mov byte [rax], T_closure
 27967 00015D3A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27968 00015D3E 48C74009[4B5D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02dd
 27969 00015D46 E957010000              	jmp .L_lambda_simple_end_02dd
 27970                                  .L_lambda_simple_code_02dd:	; lambda-simple body
 27971 00015D4B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27972 00015D51 740B                    	je .L_lambda_simple_arity_check_ok_02dd
 27973 00015D53 FF742410                	push qword [rsp + 8 * 2]
 27974 00015D57 6A01                    	push 1
 27975 00015D59 E9AD130000              	jmp L_error_incorrect_arity_simple
 27976                                  .L_lambda_simple_arity_check_ok_02dd:
 27977 00015D5E C8000000                	enter 0, 0
 27978                                  	; preparing a non-tail-call
 27979 00015D62 488B4510                	mov rax, ENV
 27980 00015D66 488B4008                	mov rax, qword [rax + 8 * 1]
 27981 00015D6A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 27982 00015D6D 50                      	push rax
 27983 00015D6E 488B4520                	mov rax, PARAM(0)	; param i
 27984 00015D72 50                      	push rax
 27985 00015D73 6A02                    	push 2	; arg count
 27986 00015D75 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 27987 00015D7D 803805                  	cmp byte [rax], T_undefined
 27988 00015D80 0F849F120000            	je L_error_fvar_undefined
 27989 00015D86 803804                  	cmp byte [rax], T_closure
 27990 00015D89 0F851A130000            	jne L_error_non_closure
 27991 00015D8F FF7001                  	push SOB_CLOSURE_ENV(rax)
 27992 00015D92 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27993 00015D95 483D[02000000]          	cmp rax, sob_boolean_false
 27994 00015D9B 0F84F3000000            	je .L_if_else_021b
 27995                                  	; preparing a tail-call
 27996                                  	; preparing a non-tail-call
 27997                                  	; preparing a non-tail-call
 27998 00015DA1 48B8-                   	mov rax, L_constants + 2270
 27998 00015DA3 [DE08000000000000] 
 27999 00015DAB 50                      	push rax
 28000 00015DAC 488B4520                	mov rax, PARAM(0)	; param i
 28001 00015DB0 50                      	push rax
 28002 00015DB1 6A02                    	push 2	; arg count
 28003 00015DB3 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 28004 00015DBB 803805                  	cmp byte [rax], T_undefined
 28005 00015DBE 0F8461120000            	je L_error_fvar_undefined
 28006 00015DC4 803804                  	cmp byte [rax], T_closure
 28007 00015DC7 0F85DC120000            	jne L_error_non_closure
 28008 00015DCD FF7001                  	push SOB_CLOSURE_ENV(rax)
 28009 00015DD0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28010 00015DD3 50                      	push rax
 28011 00015DD4 6A01                    	push 1	; arg count
 28012 00015DD6 488B4510                	mov rax, ENV
 28013 00015DDA 488B00                  	mov rax, qword [rax + 8 * 0]
 28014 00015DDD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28015 00015DE0 488B00                  	mov rax, qword [rax]
 28016 00015DE3 803804                  	cmp byte [rax], T_closure
 28017 00015DE6 0F85BD120000            	jne L_error_non_closure
 28018 00015DEC FF7001                  	push SOB_CLOSURE_ENV(rax)
 28019 00015DEF FF5009                  	call SOB_CLOSURE_CODE(rax)
 28020 00015DF2 50                      	push rax
 28021                                  	; preparing a non-tail-call
 28022 00015DF3 488B4520                	mov rax, PARAM(0)	; param i
 28023 00015DF7 50                      	push rax
 28024 00015DF8 6A01                    	push 1	; arg count
 28025 00015DFA 488B4510                	mov rax, ENV
 28026 00015DFE 488B4008                	mov rax, qword [rax + 8 * 1]
 28027 00015E02 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 28028 00015E06 803804                  	cmp byte [rax], T_closure
 28029 00015E09 0F859A120000            	jne L_error_non_closure
 28030 00015E0F FF7001                  	push SOB_CLOSURE_ENV(rax)
 28031 00015E12 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28032 00015E15 50                      	push rax
 28033 00015E16 6A02                    	push 2	; arg count
 28034 00015E18 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
 28035 00015E20 803805                  	cmp byte [rax], T_undefined
 28036 00015E23 0F84FC110000            	je L_error_fvar_undefined
 28037 00015E29 803804                  	cmp byte [rax], T_closure
 28038 00015E2C 0F8577120000            	jne L_error_non_closure
 28039 00015E32 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28040 00015E35 4C8B4009                	mov r8, qword [rax + 1 + 8]
 28041 00015E39 FF7508                  	push qword [rbp + 8]				; push old return address
 28042 00015E3C FF7500                  	push qword [rbp]					; push old rbp
 28043                                  	;; move stack up ;;
 28044 00015E3F 488B5D18                	mov rbx, [rbp + 3*8]
 28045 00015E43 4889DE                  	mov rsi, rbx						; save old size in rsi
 28046 00015E46 4883C303                	add rbx, 3
 28047 00015E4A 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 28048 00015E52 B902000000              	mov rcx, 2
 28049 00015E57 4883C104                	add rcx, 4				; num of iterations in rcx
 28050                                  .L_tc_recycle_frame_loop_03bc:
 28051 00015E5B 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 28052 00015E63 488B143C                	mov rdx, [rsp + rdi]
 28053 00015E67 4889541D00              	mov [rbp + rbx], rdx
 28054 00015E6C 4883EB08                	sub rbx, 8
 28055 00015E70 48FFC9                  	dec rcx
 28056 00015E73 4883F900                	cmp rcx, 0
 28057 00015E77 75E2                    	jne .L_tc_recycle_frame_loop_03bc
 28058 00015E79 4889F3                  	mov rbx, rsi
 28059 00015E7C 4883EB02                	sub rbx, 2
 28060 00015E80 488D1CDD00000000        	lea rbx, [rbx*8]
 28061 00015E88 4801DD                  	add rbp, rbx
 28062 00015E8B 4889EC                  	mov rsp, rbp         ; fix stack pointers
 28063 00015E8E 5D                      	pop rbp
 28064 00015E8F 41FFE0                  	jmp r8
 28065 00015E92 EB0A                    	jmp .L_if_end_021b
 28066                                  .L_if_else_021b:
 28067 00015E94 48B8-                   	mov rax, L_constants + 1
 28067 00015E96 [0100000000000000] 
 28068                                  .L_if_end_021b:
 28069 00015E9E C9                      	leave
 28070 00015E9F C21800                  	ret AND_KILL_FRAME(1)
 28071                                  .L_lambda_simple_end_02dd:	; new closure is in rax
 28072 00015EA2 50                      	push rax
 28073 00015EA3 488B4520                	mov rax, PARAM(0)	; param run
 28074 00015EA7 8F00                    	pop qword [rax]
 28075 00015EA9 48B8-                   	mov rax, sob_void
 28075 00015EAB [0000000000000000] 
 28076                                  
 28077                                  	; preparing a tail-call
 28078 00015EB3 48B8-                   	mov rax, L_constants + 2135
 28078 00015EB5 [5708000000000000] 
 28079 00015EBD 50                      	push rax
 28080 00015EBE 6A01                    	push 1	; arg count
 28081 00015EC0 488B4520                	mov rax, PARAM(0)	; param run
 28082 00015EC4 488B00                  	mov rax, qword [rax]
 28083 00015EC7 803804                  	cmp byte [rax], T_closure
 28084 00015ECA 0F85D9110000            	jne L_error_non_closure
 28085 00015ED0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28086 00015ED3 4C8B4009                	mov r8, qword [rax + 1 + 8]
 28087 00015ED7 FF7508                  	push qword [rbp + 8]				; push old return address
 28088 00015EDA FF7500                  	push qword [rbp]					; push old rbp
 28089                                  	;; move stack up ;;
 28090 00015EDD 488B5D18                	mov rbx, [rbp + 3*8]
 28091 00015EE1 4889DE                  	mov rsi, rbx						; save old size in rsi
 28092 00015EE4 4883C303                	add rbx, 3
 28093 00015EE8 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 28094 00015EF0 B901000000              	mov rcx, 1
 28095 00015EF5 4883C104                	add rcx, 4				; num of iterations in rcx
 28096                                  .L_tc_recycle_frame_loop_03bd:
 28097 00015EF9 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 28098 00015F01 488B143C                	mov rdx, [rsp + rdi]
 28099 00015F05 4889541D00              	mov [rbp + rbx], rdx
 28100 00015F0A 4883EB08                	sub rbx, 8
 28101 00015F0E 48FFC9                  	dec rcx
 28102 00015F11 4883F900                	cmp rcx, 0
 28103 00015F15 75E2                    	jne .L_tc_recycle_frame_loop_03bd
 28104 00015F17 4889F3                  	mov rbx, rsi
 28105 00015F1A 4883EB01                	sub rbx, 1
 28106 00015F1E 488D1CDD00000000        	lea rbx, [rbx*8]
 28107 00015F26 4801DD                  	add rbp, rbx
 28108 00015F29 4889EC                  	mov rsp, rbp         ; fix stack pointers
 28109 00015F2C 5D                      	pop rbp
 28110 00015F2D 41FFE0                  	jmp r8
 28111 00015F30 C9                      	leave
 28112 00015F31 C21800                  	ret AND_KILL_FRAME(1)
 28113                                  .L_lambda_simple_end_02dc:	; new closure is in rax
 28114 00015F34 803804                  	cmp byte [rax], T_closure
 28115 00015F37 0F856C110000            	jne L_error_non_closure
 28116 00015F3D FF7001                  	push SOB_CLOSURE_ENV(rax)
 28117 00015F40 4C8B4009                	mov r8, qword [rax + 1 + 8]
 28118 00015F44 FF7508                  	push qword [rbp + 8]				; push old return address
 28119 00015F47 FF7500                  	push qword [rbp]					; push old rbp
 28120                                  	;; move stack up ;;
 28121 00015F4A 488B5D18                	mov rbx, [rbp + 3*8]
 28122 00015F4E 4889DE                  	mov rsi, rbx						; save old size in rsi
 28123 00015F51 4883C303                	add rbx, 3
 28124 00015F55 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 28125 00015F5D B901000000              	mov rcx, 1
 28126 00015F62 4883C104                	add rcx, 4				; num of iterations in rcx
 28127                                  .L_tc_recycle_frame_loop_03bb:
 28128 00015F66 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 28129 00015F6E 488B143C                	mov rdx, [rsp + rdi]
 28130 00015F72 4889541D00              	mov [rbp + rbx], rdx
 28131 00015F77 4883EB08                	sub rbx, 8
 28132 00015F7B 48FFC9                  	dec rcx
 28133 00015F7E 4883F900                	cmp rcx, 0
 28134 00015F82 75E2                    	jne .L_tc_recycle_frame_loop_03bb
 28135 00015F84 4889F3                  	mov rbx, rsi
 28136 00015F87 4883EB01                	sub rbx, 1
 28137 00015F8B 488D1CDD00000000        	lea rbx, [rbx*8]
 28138 00015F93 4801DD                  	add rbp, rbx
 28139 00015F96 4889EC                  	mov rsp, rbp         ; fix stack pointers
 28140 00015F99 5D                      	pop rbp
 28141 00015F9A 41FFE0                  	jmp r8
 28142 00015F9D C9                      	leave
 28143 00015F9E C22000                  	ret AND_KILL_FRAME(2)
 28144                                  .L_lambda_simple_end_02db:	; new closure is in rax
 28145 00015FA1 48890425[59140000]      	mov qword [free_var_98], rax
 28146 00015FA9 48B8-                   	mov rax, sob_void
 28146 00015FAB [0000000000000000] 
 28147                                  
 28148 00015FB3 4889C7                  	mov rdi, rax
 28149 00015FB6 E8EC130000              	call print_sexpr_if_not_void
 28150 00015FBB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28151 00015FC0 E88D110000              	call malloc
 28152 00015FC5 50                      	push rax
 28153 00015FC6 BF00000000              	mov rdi, 8 * 0	; new rib
 28154 00015FCB E882110000              	call malloc
 28155 00015FD0 50                      	push rax
 28156 00015FD1 BF08000000              	mov rdi, 8 * 1	; extended env
 28157 00015FD6 E877110000              	call malloc
 28158 00015FDB 488B7D10                	mov rdi, ENV
 28159 00015FDF BE00000000              	mov rsi, 0
 28160 00015FE4 BA01000000              	mov rdx, 1
 28161                                  .L_lambda_simple_env_loop_02de:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 28162 00015FE9 4883FE00                	cmp rsi, 0
 28163 00015FED 7410                    	je .L_lambda_simple_env_end_02de
 28164 00015FEF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28165 00015FF3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28166 00015FF7 48FFC6                  	inc rsi
 28167 00015FFA 48FFC2                  	inc rdx
 28168 00015FFD EBEA                    	jmp .L_lambda_simple_env_loop_02de
 28169                                  .L_lambda_simple_env_end_02de:
 28170 00015FFF 5B                      	pop rbx
 28171 00016000 BE00000000              	mov rsi, 0
 28172                                  .L_lambda_simple_params_loop_02de:	; copy params
 28173 00016005 4883FE00                	cmp rsi, 0
 28174 00016009 740E                    	je .L_lambda_simple_params_end_02de
 28175 0001600B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28176 00016010 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28177 00016014 48FFC6                  	inc rsi
 28178 00016017 EBEC                    	jmp .L_lambda_simple_params_loop_02de
 28179                                  .L_lambda_simple_params_end_02de:
 28180 00016019 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 28181 0001601C 4889C3                  	mov rbx, rax
 28182 0001601F 58                      	pop rax
 28183 00016020 C60004                  	mov byte [rax], T_closure
 28184 00016023 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28185 00016027 48C74009[34600100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02de
 28186 0001602F E9DA040000              	jmp .L_lambda_simple_end_02de
 28187                                  .L_lambda_simple_code_02de:	; lambda-simple body
 28188 00016034 48837C241002            	cmp qword [rsp + 8 * 2], 2
 28189 0001603A 740B                    	je .L_lambda_simple_arity_check_ok_02de
 28190 0001603C FF742410                	push qword [rsp + 8 * 2]
 28191 00016040 6A02                    	push 2
 28192 00016042 E9C4100000              	jmp L_error_incorrect_arity_simple
 28193                                  .L_lambda_simple_arity_check_ok_02de:
 28194 00016047 C8000000                	enter 0, 0
 28195                                  	; preparing a tail-call
 28196                                  	; preparing a non-tail-call
 28197 0001604B 488B4520                	mov rax, PARAM(0)	; param n
 28198 0001604F 50                      	push rax
 28199 00016050 6A01                    	push 1	; arg count
 28200 00016052 488B0425[6A140000]      	mov rax, qword [free_var_99]	; free var make-string
 28201 0001605A 803805                  	cmp byte [rax], T_undefined
 28202 0001605D 0F84C20F0000            	je L_error_fvar_undefined
 28203 00016063 803804                  	cmp byte [rax], T_closure
 28204 00016066 0F853D100000            	jne L_error_non_closure
 28205 0001606C FF7001                  	push SOB_CLOSURE_ENV(rax)
 28206 0001606F FF5009                  	call SOB_CLOSURE_CODE(rax)
 28207 00016072 50                      	push rax
 28208 00016073 6A01                    	push 1	; arg count
 28209 00016075 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28210 0001607A E8D3100000              	call malloc
 28211 0001607F 50                      	push rax
 28212 00016080 BF10000000              	mov rdi, 8 * 2	; new rib
 28213 00016085 E8C8100000              	call malloc
 28214 0001608A 50                      	push rax
 28215 0001608B BF10000000              	mov rdi, 8 * 2	; extended env
 28216 00016090 E8BD100000              	call malloc
 28217 00016095 488B7D10                	mov rdi, ENV
 28218 00016099 BE00000000              	mov rsi, 0
 28219 0001609E BA01000000              	mov rdx, 1
 28220                                  .L_lambda_simple_env_loop_02df:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 28221 000160A3 4883FE01                	cmp rsi, 1
 28222 000160A7 7410                    	je .L_lambda_simple_env_end_02df
 28223 000160A9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28224 000160AD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28225 000160B1 48FFC6                  	inc rsi
 28226 000160B4 48FFC2                  	inc rdx
 28227 000160B7 EBEA                    	jmp .L_lambda_simple_env_loop_02df
 28228                                  .L_lambda_simple_env_end_02df:
 28229 000160B9 5B                      	pop rbx
 28230 000160BA BE00000000              	mov rsi, 0
 28231                                  .L_lambda_simple_params_loop_02df:	; copy params
 28232 000160BF 4883FE02                	cmp rsi, 2
 28233 000160C3 740E                    	je .L_lambda_simple_params_end_02df
 28234 000160C5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28235 000160CA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28236 000160CE 48FFC6                  	inc rsi
 28237 000160D1 EBEC                    	jmp .L_lambda_simple_params_loop_02df
 28238                                  .L_lambda_simple_params_end_02df:
 28239 000160D3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 28240 000160D6 4889C3                  	mov rbx, rax
 28241 000160D9 58                      	pop rax
 28242 000160DA C60004                  	mov byte [rax], T_closure
 28243 000160DD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28244 000160E1 48C74009[EE600100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02df
 28245 000160E9 E9B3030000              	jmp .L_lambda_simple_end_02df
 28246                                  .L_lambda_simple_code_02df:	; lambda-simple body
 28247 000160EE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28248 000160F4 740B                    	je .L_lambda_simple_arity_check_ok_02df
 28249 000160F6 FF742410                	push qword [rsp + 8 * 2]
 28250 000160FA 6A01                    	push 1
 28251 000160FC E90A100000              	jmp L_error_incorrect_arity_simple
 28252                                  .L_lambda_simple_arity_check_ok_02df:
 28253 00016101 C8000000                	enter 0, 0
 28254                                  	; preparing a tail-call
 28255 00016105 48B8-                   	mov rax, L_constants + 1993
 28255 00016107 [C907000000000000] 
 28256 0001610F 50                      	push rax
 28257 00016110 6A01                    	push 1	; arg count
 28258 00016112 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28259 00016117 E836100000              	call malloc
 28260 0001611C 50                      	push rax
 28261 0001611D BF08000000              	mov rdi, 8 * 1	; new rib
 28262 00016122 E82B100000              	call malloc
 28263 00016127 50                      	push rax
 28264 00016128 BF18000000              	mov rdi, 8 * 3	; extended env
 28265 0001612D E820100000              	call malloc
 28266 00016132 488B7D10                	mov rdi, ENV
 28267 00016136 BE00000000              	mov rsi, 0
 28268 0001613B BA01000000              	mov rdx, 1
 28269                                  .L_lambda_simple_env_loop_02e0:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 28270 00016140 4883FE02                	cmp rsi, 2
 28271 00016144 7410                    	je .L_lambda_simple_env_end_02e0
 28272 00016146 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28273 0001614A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28274 0001614E 48FFC6                  	inc rsi
 28275 00016151 48FFC2                  	inc rdx
 28276 00016154 EBEA                    	jmp .L_lambda_simple_env_loop_02e0
 28277                                  .L_lambda_simple_env_end_02e0:
 28278 00016156 5B                      	pop rbx
 28279 00016157 BE00000000              	mov rsi, 0
 28280                                  .L_lambda_simple_params_loop_02e0:	; copy params
 28281 0001615C 4883FE01                	cmp rsi, 1
 28282 00016160 740E                    	je .L_lambda_simple_params_end_02e0
 28283 00016162 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28284 00016167 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28285 0001616B 48FFC6                  	inc rsi
 28286 0001616E EBEC                    	jmp .L_lambda_simple_params_loop_02e0
 28287                                  .L_lambda_simple_params_end_02e0:
 28288 00016170 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 28289 00016173 4889C3                  	mov rbx, rax
 28290 00016176 58                      	pop rax
 28291 00016177 C60004                  	mov byte [rax], T_closure
 28292 0001617A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28293 0001617E 48C74009[8B610100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02e0
 28294 00016186 E9A9020000              	jmp .L_lambda_simple_end_02e0
 28295                                  .L_lambda_simple_code_02e0:	; lambda-simple body
 28296 0001618B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28297 00016191 740B                    	je .L_lambda_simple_arity_check_ok_02e0
 28298 00016193 FF742410                	push qword [rsp + 8 * 2]
 28299 00016197 6A01                    	push 1
 28300 00016199 E96D0F0000              	jmp L_error_incorrect_arity_simple
 28301                                  .L_lambda_simple_arity_check_ok_02e0:
 28302 0001619E C8000000                	enter 0, 0
 28303 000161A2 BF08000000              	mov rdi, 8
 28304 000161A7 E8A60F0000              	call malloc
 28305 000161AC 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
 28306 000161B0 488918                  	mov qword[rax], rbx
 28307 000161B3 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 28308 000161B7 48B8-                   	mov rax, sob_void
 28308 000161B9 [0000000000000000] 
 28309                                  
 28310 000161C1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28311 000161C6 E8870F0000              	call malloc
 28312 000161CB 50                      	push rax
 28313 000161CC BF08000000              	mov rdi, 8 * 1	; new rib
 28314 000161D1 E87C0F0000              	call malloc
 28315 000161D6 50                      	push rax
 28316 000161D7 BF20000000              	mov rdi, 8 * 4	; extended env
 28317 000161DC E8710F0000              	call malloc
 28318 000161E1 488B7D10                	mov rdi, ENV
 28319 000161E5 BE00000000              	mov rsi, 0
 28320 000161EA BA01000000              	mov rdx, 1
 28321                                  .L_lambda_simple_env_loop_02e1:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 28322 000161EF 4883FE03                	cmp rsi, 3
 28323 000161F3 7410                    	je .L_lambda_simple_env_end_02e1
 28324 000161F5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28325 000161F9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28326 000161FD 48FFC6                  	inc rsi
 28327 00016200 48FFC2                  	inc rdx
 28328 00016203 EBEA                    	jmp .L_lambda_simple_env_loop_02e1
 28329                                  .L_lambda_simple_env_end_02e1:
 28330 00016205 5B                      	pop rbx
 28331 00016206 BE00000000              	mov rsi, 0
 28332                                  .L_lambda_simple_params_loop_02e1:	; copy params
 28333 0001620B 4883FE01                	cmp rsi, 1
 28334 0001620F 740E                    	je .L_lambda_simple_params_end_02e1
 28335 00016211 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28336 00016216 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28337 0001621A 48FFC6                  	inc rsi
 28338 0001621D EBEC                    	jmp .L_lambda_simple_params_loop_02e1
 28339                                  .L_lambda_simple_params_end_02e1:
 28340 0001621F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 28341 00016222 4889C3                  	mov rbx, rax
 28342 00016225 58                      	pop rax
 28343 00016226 C60004                  	mov byte [rax], T_closure
 28344 00016229 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28345 0001622D 48C74009[3A620100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02e1
 28346 00016235 E968010000              	jmp .L_lambda_simple_end_02e1
 28347                                  .L_lambda_simple_code_02e1:	; lambda-simple body
 28348 0001623A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28349 00016240 740B                    	je .L_lambda_simple_arity_check_ok_02e1
 28350 00016242 FF742410                	push qword [rsp + 8 * 2]
 28351 00016246 6A01                    	push 1
 28352 00016248 E9BE0E0000              	jmp L_error_incorrect_arity_simple
 28353                                  .L_lambda_simple_arity_check_ok_02e1:
 28354 0001624D C8000000                	enter 0, 0
 28355                                  	; preparing a non-tail-call
 28356 00016251 488B4510                	mov rax, ENV
 28357 00016255 488B4010                	mov rax, qword [rax + 8 * 2]
 28358 00016259 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 28359 0001625C 50                      	push rax
 28360 0001625D 488B4520                	mov rax, PARAM(0)	; param i
 28361 00016261 50                      	push rax
 28362 00016262 6A02                    	push 2	; arg count
 28363 00016264 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 28364 0001626C 803805                  	cmp byte [rax], T_undefined
 28365 0001626F 0F84B00D0000            	je L_error_fvar_undefined
 28366 00016275 803804                  	cmp byte [rax], T_closure
 28367 00016278 0F852B0E0000            	jne L_error_non_closure
 28368 0001627E FF7001                  	push SOB_CLOSURE_ENV(rax)
 28369 00016281 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28370 00016284 483D[02000000]          	cmp rax, sob_boolean_false
 28371 0001628A 0F8403010000            	je .L_if_else_021c
 28372                                  	; preparing a non-tail-call
 28373                                  	; preparing a non-tail-call
 28374 00016290 488B4520                	mov rax, PARAM(0)	; param i
 28375 00016294 50                      	push rax
 28376 00016295 6A01                    	push 1	; arg count
 28377 00016297 488B4510                	mov rax, ENV
 28378 0001629B 488B4010                	mov rax, qword [rax + 8 * 2]
 28379 0001629F 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 28380 000162A3 803804                  	cmp byte [rax], T_closure
 28381 000162A6 0F85FD0D0000            	jne L_error_non_closure
 28382 000162AC FF7001                  	push SOB_CLOSURE_ENV(rax)
 28383 000162AF FF5009                  	call SOB_CLOSURE_CODE(rax)
 28384 000162B2 50                      	push rax
 28385 000162B3 488B4520                	mov rax, PARAM(0)	; param i
 28386 000162B7 50                      	push rax
 28387 000162B8 488B4510                	mov rax, ENV
 28388 000162BC 488B4008                	mov rax, qword [rax + 8 * 1]
 28389 000162C0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 28390 000162C3 50                      	push rax
 28391 000162C4 6A03                    	push 3	; arg count
 28392 000162C6 488B0425[8A160000]      	mov rax, qword [free_var_131]	; free var string-set!
 28393 000162CE 803805                  	cmp byte [rax], T_undefined
 28394 000162D1 0F844E0D0000            	je L_error_fvar_undefined
 28395 000162D7 803804                  	cmp byte [rax], T_closure
 28396 000162DA 0F85C90D0000            	jne L_error_non_closure
 28397 000162E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28398 000162E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28399                                  
 28400                                  	; preparing a tail-call
 28401                                  	; preparing a non-tail-call
 28402 000162E6 48B8-                   	mov rax, L_constants + 2270
 28402 000162E8 [DE08000000000000] 
 28403 000162F0 50                      	push rax
 28404 000162F1 488B4520                	mov rax, PARAM(0)	; param i
 28405 000162F5 50                      	push rax
 28406 000162F6 6A02                    	push 2	; arg count
 28407 000162F8 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 28408 00016300 803805                  	cmp byte [rax], T_undefined
 28409 00016303 0F841C0D0000            	je L_error_fvar_undefined
 28410 00016309 803804                  	cmp byte [rax], T_closure
 28411 0001630C 0F85970D0000            	jne L_error_non_closure
 28412 00016312 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28413 00016315 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28414 00016318 50                      	push rax
 28415 00016319 6A01                    	push 1	; arg count
 28416 0001631B 488B4510                	mov rax, ENV
 28417 0001631F 488B00                  	mov rax, qword [rax + 8 * 0]
 28418 00016322 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28419 00016325 488B00                  	mov rax, qword [rax]
 28420 00016328 803804                  	cmp byte [rax], T_closure
 28421 0001632B 0F85780D0000            	jne L_error_non_closure
 28422 00016331 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28423 00016334 4C8B4009                	mov r8, qword [rax + 1 + 8]
 28424 00016338 FF7508                  	push qword [rbp + 8]				; push old return address
 28425 0001633B FF7500                  	push qword [rbp]					; push old rbp
 28426                                  	;; move stack up ;;
 28427 0001633E 488B5D18                	mov rbx, [rbp + 3*8]
 28428 00016342 4889DE                  	mov rsi, rbx						; save old size in rsi
 28429 00016345 4883C303                	add rbx, 3
 28430 00016349 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 28431 00016351 B901000000              	mov rcx, 1
 28432 00016356 4883C104                	add rcx, 4				; num of iterations in rcx
 28433                                  .L_tc_recycle_frame_loop_03c0:
 28434 0001635A 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 28435 00016362 488B143C                	mov rdx, [rsp + rdi]
 28436 00016366 4889541D00              	mov [rbp + rbx], rdx
 28437 0001636B 4883EB08                	sub rbx, 8
 28438 0001636F 48FFC9                  	dec rcx
 28439 00016372 4883F900                	cmp rcx, 0
 28440 00016376 75E2                    	jne .L_tc_recycle_frame_loop_03c0
 28441 00016378 4889F3                  	mov rbx, rsi
 28442 0001637B 4883EB01                	sub rbx, 1
 28443 0001637F 488D1CDD00000000        	lea rbx, [rbx*8]
 28444 00016387 4801DD                  	add rbp, rbx
 28445 0001638A 4889EC                  	mov rsp, rbp         ; fix stack pointers
 28446 0001638D 5D                      	pop rbp
 28447 0001638E 41FFE0                  	jmp r8
 28448 00016391 EB0B                    	jmp .L_if_end_021c
 28449                                  .L_if_else_021c:
 28450 00016393 488B4510                	mov rax, ENV
 28451 00016397 488B4008                	mov rax, qword [rax + 8 * 1]
 28452 0001639B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 28453                                  .L_if_end_021c:
 28454 0001639E C9                      	leave
 28455 0001639F C21800                  	ret AND_KILL_FRAME(1)
 28456                                  .L_lambda_simple_end_02e1:	; new closure is in rax
 28457 000163A2 50                      	push rax
 28458 000163A3 488B4520                	mov rax, PARAM(0)	; param run
 28459 000163A7 8F00                    	pop qword [rax]
 28460 000163A9 48B8-                   	mov rax, sob_void
 28460 000163AB [0000000000000000] 
 28461                                  
 28462                                  	; preparing a tail-call
 28463 000163B3 48B8-                   	mov rax, L_constants + 2135
 28463 000163B5 [5708000000000000] 
 28464 000163BD 50                      	push rax
 28465 000163BE 6A01                    	push 1	; arg count
 28466 000163C0 488B4520                	mov rax, PARAM(0)	; param run
 28467 000163C4 488B00                  	mov rax, qword [rax]
 28468 000163C7 803804                  	cmp byte [rax], T_closure
 28469 000163CA 0F85D90C0000            	jne L_error_non_closure
 28470 000163D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28471 000163D3 4C8B4009                	mov r8, qword [rax + 1 + 8]
 28472 000163D7 FF7508                  	push qword [rbp + 8]				; push old return address
 28473 000163DA FF7500                  	push qword [rbp]					; push old rbp
 28474                                  	;; move stack up ;;
 28475 000163DD 488B5D18                	mov rbx, [rbp + 3*8]
 28476 000163E1 4889DE                  	mov rsi, rbx						; save old size in rsi
 28477 000163E4 4883C303                	add rbx, 3
 28478 000163E8 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 28479 000163F0 B901000000              	mov rcx, 1
 28480 000163F5 4883C104                	add rcx, 4				; num of iterations in rcx
 28481                                  .L_tc_recycle_frame_loop_03c1:
 28482 000163F9 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 28483 00016401 488B143C                	mov rdx, [rsp + rdi]
 28484 00016405 4889541D00              	mov [rbp + rbx], rdx
 28485 0001640A 4883EB08                	sub rbx, 8
 28486 0001640E 48FFC9                  	dec rcx
 28487 00016411 4883F900                	cmp rcx, 0
 28488 00016415 75E2                    	jne .L_tc_recycle_frame_loop_03c1
 28489 00016417 4889F3                  	mov rbx, rsi
 28490 0001641A 4883EB01                	sub rbx, 1
 28491 0001641E 488D1CDD00000000        	lea rbx, [rbx*8]
 28492 00016426 4801DD                  	add rbp, rbx
 28493 00016429 4889EC                  	mov rsp, rbp         ; fix stack pointers
 28494 0001642C 5D                      	pop rbp
 28495 0001642D 41FFE0                  	jmp r8
 28496 00016430 C9                      	leave
 28497 00016431 C21800                  	ret AND_KILL_FRAME(1)
 28498                                  .L_lambda_simple_end_02e0:	; new closure is in rax
 28499 00016434 803804                  	cmp byte [rax], T_closure
 28500 00016437 0F856C0C0000            	jne L_error_non_closure
 28501 0001643D FF7001                  	push SOB_CLOSURE_ENV(rax)
 28502 00016440 4C8B4009                	mov r8, qword [rax + 1 + 8]
 28503 00016444 FF7508                  	push qword [rbp + 8]				; push old return address
 28504 00016447 FF7500                  	push qword [rbp]					; push old rbp
 28505                                  	;; move stack up ;;
 28506 0001644A 488B5D18                	mov rbx, [rbp + 3*8]
 28507 0001644E 4889DE                  	mov rsi, rbx						; save old size in rsi
 28508 00016451 4883C303                	add rbx, 3
 28509 00016455 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 28510 0001645D B901000000              	mov rcx, 1
 28511 00016462 4883C104                	add rcx, 4				; num of iterations in rcx
 28512                                  .L_tc_recycle_frame_loop_03bf:
 28513 00016466 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 28514 0001646E 488B143C                	mov rdx, [rsp + rdi]
 28515 00016472 4889541D00              	mov [rbp + rbx], rdx
 28516 00016477 4883EB08                	sub rbx, 8
 28517 0001647B 48FFC9                  	dec rcx
 28518 0001647E 4883F900                	cmp rcx, 0
 28519 00016482 75E2                    	jne .L_tc_recycle_frame_loop_03bf
 28520 00016484 4889F3                  	mov rbx, rsi
 28521 00016487 4883EB01                	sub rbx, 1
 28522 0001648B 488D1CDD00000000        	lea rbx, [rbx*8]
 28523 00016493 4801DD                  	add rbp, rbx
 28524 00016496 4889EC                  	mov rsp, rbp         ; fix stack pointers
 28525 00016499 5D                      	pop rbp
 28526 0001649A 41FFE0                  	jmp r8
 28527 0001649D C9                      	leave
 28528 0001649E C21800                  	ret AND_KILL_FRAME(1)
 28529                                  .L_lambda_simple_end_02df:	; new closure is in rax
 28530 000164A1 803804                  	cmp byte [rax], T_closure
 28531 000164A4 0F85FF0B0000            	jne L_error_non_closure
 28532 000164AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 28533 000164AD 4C8B4009                	mov r8, qword [rax + 1 + 8]
 28534 000164B1 FF7508                  	push qword [rbp + 8]				; push old return address
 28535 000164B4 FF7500                  	push qword [rbp]					; push old rbp
 28536                                  	;; move stack up ;;
 28537 000164B7 488B5D18                	mov rbx, [rbp + 3*8]
 28538 000164BB 4889DE                  	mov rsi, rbx						; save old size in rsi
 28539 000164BE 4883C303                	add rbx, 3
 28540 000164C2 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 28541 000164CA B901000000              	mov rcx, 1
 28542 000164CF 4883C104                	add rcx, 4				; num of iterations in rcx
 28543                                  .L_tc_recycle_frame_loop_03be:
 28544 000164D3 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 28545 000164DB 488B143C                	mov rdx, [rsp + rdi]
 28546 000164DF 4889541D00              	mov [rbp + rbx], rdx
 28547 000164E4 4883EB08                	sub rbx, 8
 28548 000164E8 48FFC9                  	dec rcx
 28549 000164EB 4883F900                	cmp rcx, 0
 28550 000164EF 75E2                    	jne .L_tc_recycle_frame_loop_03be
 28551 000164F1 4889F3                  	mov rbx, rsi
 28552 000164F4 4883EB01                	sub rbx, 1
 28553 000164F8 488D1CDD00000000        	lea rbx, [rbx*8]
 28554 00016500 4801DD                  	add rbp, rbx
 28555 00016503 4889EC                  	mov rsp, rbp         ; fix stack pointers
 28556 00016506 5D                      	pop rbp
 28557 00016507 41FFE0                  	jmp r8
 28558 0001650A C9                      	leave
 28559 0001650B C22000                  	ret AND_KILL_FRAME(2)
 28560                                  .L_lambda_simple_end_02de:	; new closure is in rax
 28561 0001650E 48890425[7B140000]      	mov qword [free_var_100], rax
 28562 00016516 48B8-                   	mov rax, sob_void
 28562 00016518 [0000000000000000] 
 28563                                  
 28564 00016520 4889C7                  	mov rdi, rax
 28565 00016523 E87F0E0000              	call print_sexpr_if_not_void
 28566 00016528 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28567 0001652D E8200C0000              	call malloc
 28568 00016532 50                      	push rax
 28569 00016533 BF00000000              	mov rdi, 8 * 0	; new rib
 28570 00016538 E8150C0000              	call malloc
 28571 0001653D 50                      	push rax
 28572 0001653E BF08000000              	mov rdi, 8 * 1	; extended env
 28573 00016543 E80A0C0000              	call malloc
 28574 00016548 488B7D10                	mov rdi, ENV
 28575 0001654C BE00000000              	mov rsi, 0
 28576 00016551 BA01000000              	mov rdx, 1
 28577                                  .L_lambda_simple_env_loop_02e2:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 28578 00016556 4883FE00                	cmp rsi, 0
 28579 0001655A 7410                    	je .L_lambda_simple_env_end_02e2
 28580 0001655C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28581 00016560 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28582 00016564 48FFC6                  	inc rsi
 28583 00016567 48FFC2                  	inc rdx
 28584 0001656A EBEA                    	jmp .L_lambda_simple_env_loop_02e2
 28585                                  .L_lambda_simple_env_end_02e2:
 28586 0001656C 5B                      	pop rbx
 28587 0001656D BE00000000              	mov rsi, 0
 28588                                  .L_lambda_simple_params_loop_02e2:	; copy params
 28589 00016572 4883FE00                	cmp rsi, 0
 28590 00016576 740E                    	je .L_lambda_simple_params_end_02e2
 28591 00016578 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28592 0001657D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28593 00016581 48FFC6                  	inc rsi
 28594 00016584 EBEC                    	jmp .L_lambda_simple_params_loop_02e2
 28595                                  .L_lambda_simple_params_end_02e2:
 28596 00016586 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 28597 00016589 4889C3                  	mov rbx, rax
 28598 0001658C 58                      	pop rax
 28599 0001658D C60004                  	mov byte [rax], T_closure
 28600 00016590 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28601 00016594 48C74009[A1650100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02e2
 28602 0001659C E9DA040000              	jmp .L_lambda_simple_end_02e2
 28603                                  .L_lambda_simple_code_02e2:	; lambda-simple body
 28604 000165A1 48837C241002            	cmp qword [rsp + 8 * 2], 2
 28605 000165A7 740B                    	je .L_lambda_simple_arity_check_ok_02e2
 28606 000165A9 FF742410                	push qword [rsp + 8 * 2]
 28607 000165AD 6A02                    	push 2
 28608 000165AF E9570B0000              	jmp L_error_incorrect_arity_simple
 28609                                  .L_lambda_simple_arity_check_ok_02e2:
 28610 000165B4 C8000000                	enter 0, 0
 28611                                  	; preparing a tail-call
 28612                                  	; preparing a non-tail-call
 28613 000165B8 488B4520                	mov rax, PARAM(0)	; param n
 28614 000165BC 50                      	push rax
 28615 000165BD 6A01                    	push 1	; arg count
 28616 000165BF 488B0425[8C140000]      	mov rax, qword [free_var_101]	; free var make-vector
 28617 000165C7 803805                  	cmp byte [rax], T_undefined
 28618 000165CA 0F84550A0000            	je L_error_fvar_undefined
 28619 000165D0 803804                  	cmp byte [rax], T_closure
 28620 000165D3 0F85D00A0000            	jne L_error_non_closure
 28621 000165D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28622 000165DC FF5009                  	call SOB_CLOSURE_CODE(rax)
 28623 000165DF 50                      	push rax
 28624 000165E0 6A01                    	push 1	; arg count
 28625 000165E2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28626 000165E7 E8660B0000              	call malloc
 28627 000165EC 50                      	push rax
 28628 000165ED BF10000000              	mov rdi, 8 * 2	; new rib
 28629 000165F2 E85B0B0000              	call malloc
 28630 000165F7 50                      	push rax
 28631 000165F8 BF10000000              	mov rdi, 8 * 2	; extended env
 28632 000165FD E8500B0000              	call malloc
 28633 00016602 488B7D10                	mov rdi, ENV
 28634 00016606 BE00000000              	mov rsi, 0
 28635 0001660B BA01000000              	mov rdx, 1
 28636                                  .L_lambda_simple_env_loop_02e3:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 28637 00016610 4883FE01                	cmp rsi, 1
 28638 00016614 7410                    	je .L_lambda_simple_env_end_02e3
 28639 00016616 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28640 0001661A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28641 0001661E 48FFC6                  	inc rsi
 28642 00016621 48FFC2                  	inc rdx
 28643 00016624 EBEA                    	jmp .L_lambda_simple_env_loop_02e3
 28644                                  .L_lambda_simple_env_end_02e3:
 28645 00016626 5B                      	pop rbx
 28646 00016627 BE00000000              	mov rsi, 0
 28647                                  .L_lambda_simple_params_loop_02e3:	; copy params
 28648 0001662C 4883FE02                	cmp rsi, 2
 28649 00016630 740E                    	je .L_lambda_simple_params_end_02e3
 28650 00016632 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28651 00016637 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28652 0001663B 48FFC6                  	inc rsi
 28653 0001663E EBEC                    	jmp .L_lambda_simple_params_loop_02e3
 28654                                  .L_lambda_simple_params_end_02e3:
 28655 00016640 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 28656 00016643 4889C3                  	mov rbx, rax
 28657 00016646 58                      	pop rax
 28658 00016647 C60004                  	mov byte [rax], T_closure
 28659 0001664A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28660 0001664E 48C74009[5B660100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02e3
 28661 00016656 E9B3030000              	jmp .L_lambda_simple_end_02e3
 28662                                  .L_lambda_simple_code_02e3:	; lambda-simple body
 28663 0001665B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28664 00016661 740B                    	je .L_lambda_simple_arity_check_ok_02e3
 28665 00016663 FF742410                	push qword [rsp + 8 * 2]
 28666 00016667 6A01                    	push 1
 28667 00016669 E99D0A0000              	jmp L_error_incorrect_arity_simple
 28668                                  .L_lambda_simple_arity_check_ok_02e3:
 28669 0001666E C8000000                	enter 0, 0
 28670                                  	; preparing a tail-call
 28671 00016672 48B8-                   	mov rax, L_constants + 1993
 28671 00016674 [C907000000000000] 
 28672 0001667C 50                      	push rax
 28673 0001667D 6A01                    	push 1	; arg count
 28674 0001667F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28675 00016684 E8C90A0000              	call malloc
 28676 00016689 50                      	push rax
 28677 0001668A BF08000000              	mov rdi, 8 * 1	; new rib
 28678 0001668F E8BE0A0000              	call malloc
 28679 00016694 50                      	push rax
 28680 00016695 BF18000000              	mov rdi, 8 * 3	; extended env
 28681 0001669A E8B30A0000              	call malloc
 28682 0001669F 488B7D10                	mov rdi, ENV
 28683 000166A3 BE00000000              	mov rsi, 0
 28684 000166A8 BA01000000              	mov rdx, 1
 28685                                  .L_lambda_simple_env_loop_02e4:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 28686 000166AD 4883FE02                	cmp rsi, 2
 28687 000166B1 7410                    	je .L_lambda_simple_env_end_02e4
 28688 000166B3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28689 000166B7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28690 000166BB 48FFC6                  	inc rsi
 28691 000166BE 48FFC2                  	inc rdx
 28692 000166C1 EBEA                    	jmp .L_lambda_simple_env_loop_02e4
 28693                                  .L_lambda_simple_env_end_02e4:
 28694 000166C3 5B                      	pop rbx
 28695 000166C4 BE00000000              	mov rsi, 0
 28696                                  .L_lambda_simple_params_loop_02e4:	; copy params
 28697 000166C9 4883FE01                	cmp rsi, 1
 28698 000166CD 740E                    	je .L_lambda_simple_params_end_02e4
 28699 000166CF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28700 000166D4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28701 000166D8 48FFC6                  	inc rsi
 28702 000166DB EBEC                    	jmp .L_lambda_simple_params_loop_02e4
 28703                                  .L_lambda_simple_params_end_02e4:
 28704 000166DD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 28705 000166E0 4889C3                  	mov rbx, rax
 28706 000166E3 58                      	pop rax
 28707 000166E4 C60004                  	mov byte [rax], T_closure
 28708 000166E7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28709 000166EB 48C74009[F8660100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02e4
 28710 000166F3 E9A9020000              	jmp .L_lambda_simple_end_02e4
 28711                                  .L_lambda_simple_code_02e4:	; lambda-simple body
 28712 000166F8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28713 000166FE 740B                    	je .L_lambda_simple_arity_check_ok_02e4
 28714 00016700 FF742410                	push qword [rsp + 8 * 2]
 28715 00016704 6A01                    	push 1
 28716 00016706 E9000A0000              	jmp L_error_incorrect_arity_simple
 28717                                  .L_lambda_simple_arity_check_ok_02e4:
 28718 0001670B C8000000                	enter 0, 0
 28719 0001670F BF08000000              	mov rdi, 8
 28720 00016714 E8390A0000              	call malloc
 28721 00016719 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
 28722 0001671D 488918                  	mov qword[rax], rbx
 28723 00016720 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 28724 00016724 48B8-                   	mov rax, sob_void
 28724 00016726 [0000000000000000] 
 28725                                  
 28726 0001672E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28727 00016733 E81A0A0000              	call malloc
 28728 00016738 50                      	push rax
 28729 00016739 BF08000000              	mov rdi, 8 * 1	; new rib
 28730 0001673E E80F0A0000              	call malloc
 28731 00016743 50                      	push rax
 28732 00016744 BF20000000              	mov rdi, 8 * 4	; extended env
 28733 00016749 E8040A0000              	call malloc
 28734 0001674E 488B7D10                	mov rdi, ENV
 28735 00016752 BE00000000              	mov rsi, 0
 28736 00016757 BA01000000              	mov rdx, 1
 28737                                  .L_lambda_simple_env_loop_02e5:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 28738 0001675C 4883FE03                	cmp rsi, 3
 28739 00016760 7410                    	je .L_lambda_simple_env_end_02e5
 28740 00016762 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28741 00016766 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28742 0001676A 48FFC6                  	inc rsi
 28743 0001676D 48FFC2                  	inc rdx
 28744 00016770 EBEA                    	jmp .L_lambda_simple_env_loop_02e5
 28745                                  .L_lambda_simple_env_end_02e5:
 28746 00016772 5B                      	pop rbx
 28747 00016773 BE00000000              	mov rsi, 0
 28748                                  .L_lambda_simple_params_loop_02e5:	; copy params
 28749 00016778 4883FE01                	cmp rsi, 1
 28750 0001677C 740E                    	je .L_lambda_simple_params_end_02e5
 28751 0001677E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28752 00016783 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28753 00016787 48FFC6                  	inc rsi
 28754 0001678A EBEC                    	jmp .L_lambda_simple_params_loop_02e5
 28755                                  .L_lambda_simple_params_end_02e5:
 28756 0001678C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 28757 0001678F 4889C3                  	mov rbx, rax
 28758 00016792 58                      	pop rax
 28759 00016793 C60004                  	mov byte [rax], T_closure
 28760 00016796 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28761 0001679A 48C74009[A7670100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02e5
 28762 000167A2 E968010000              	jmp .L_lambda_simple_end_02e5
 28763                                  .L_lambda_simple_code_02e5:	; lambda-simple body
 28764 000167A7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28765 000167AD 740B                    	je .L_lambda_simple_arity_check_ok_02e5
 28766 000167AF FF742410                	push qword [rsp + 8 * 2]
 28767 000167B3 6A01                    	push 1
 28768 000167B5 E951090000              	jmp L_error_incorrect_arity_simple
 28769                                  .L_lambda_simple_arity_check_ok_02e5:
 28770 000167BA C8000000                	enter 0, 0
 28771                                  	; preparing a non-tail-call
 28772 000167BE 488B4510                	mov rax, ENV
 28773 000167C2 488B4010                	mov rax, qword [rax + 8 * 2]
 28774 000167C6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 28775 000167C9 50                      	push rax
 28776 000167CA 488B4520                	mov rax, PARAM(0)	; param i
 28777 000167CE 50                      	push rax
 28778 000167CF 6A02                    	push 2	; arg count
 28779 000167D1 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 28780 000167D9 803805                  	cmp byte [rax], T_undefined
 28781 000167DC 0F8443080000            	je L_error_fvar_undefined
 28782 000167E2 803804                  	cmp byte [rax], T_closure
 28783 000167E5 0F85BE080000            	jne L_error_non_closure
 28784 000167EB FF7001                  	push SOB_CLOSURE_ENV(rax)
 28785 000167EE FF5009                  	call SOB_CLOSURE_CODE(rax)
 28786 000167F1 483D[02000000]          	cmp rax, sob_boolean_false
 28787 000167F7 0F8403010000            	je .L_if_else_021d
 28788                                  	; preparing a non-tail-call
 28789                                  	; preparing a non-tail-call
 28790 000167FD 488B4520                	mov rax, PARAM(0)	; param i
 28791 00016801 50                      	push rax
 28792 00016802 6A01                    	push 1	; arg count
 28793 00016804 488B4510                	mov rax, ENV
 28794 00016808 488B4010                	mov rax, qword [rax + 8 * 2]
 28795 0001680C 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 28796 00016810 803804                  	cmp byte [rax], T_closure
 28797 00016813 0F8590080000            	jne L_error_non_closure
 28798 00016819 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28799 0001681C FF5009                  	call SOB_CLOSURE_CODE(rax)
 28800 0001681F 50                      	push rax
 28801 00016820 488B4520                	mov rax, PARAM(0)	; param i
 28802 00016824 50                      	push rax
 28803 00016825 488B4510                	mov rax, ENV
 28804 00016829 488B4008                	mov rax, qword [rax + 8 * 1]
 28805 0001682D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 28806 00016830 50                      	push rax
 28807 00016831 6A03                    	push 3	; arg count
 28808 00016833 488B0425[9A170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 28809 0001683B 803805                  	cmp byte [rax], T_undefined
 28810 0001683E 0F84E1070000            	je L_error_fvar_undefined
 28811 00016844 803804                  	cmp byte [rax], T_closure
 28812 00016847 0F855C080000            	jne L_error_non_closure
 28813 0001684D FF7001                  	push SOB_CLOSURE_ENV(rax)
 28814 00016850 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28815                                  
 28816                                  	; preparing a tail-call
 28817                                  	; preparing a non-tail-call
 28818 00016853 48B8-                   	mov rax, L_constants + 2270
 28818 00016855 [DE08000000000000] 
 28819 0001685D 50                      	push rax
 28820 0001685E 488B4520                	mov rax, PARAM(0)	; param i
 28821 00016862 50                      	push rax
 28822 00016863 6A02                    	push 2	; arg count
 28823 00016865 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 28824 0001686D 803805                  	cmp byte [rax], T_undefined
 28825 00016870 0F84AF070000            	je L_error_fvar_undefined
 28826 00016876 803804                  	cmp byte [rax], T_closure
 28827 00016879 0F852A080000            	jne L_error_non_closure
 28828 0001687F FF7001                  	push SOB_CLOSURE_ENV(rax)
 28829 00016882 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28830 00016885 50                      	push rax
 28831 00016886 6A01                    	push 1	; arg count
 28832 00016888 488B4510                	mov rax, ENV
 28833 0001688C 488B00                  	mov rax, qword [rax + 8 * 0]
 28834 0001688F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28835 00016892 488B00                  	mov rax, qword [rax]
 28836 00016895 803804                  	cmp byte [rax], T_closure
 28837 00016898 0F850B080000            	jne L_error_non_closure
 28838 0001689E FF7001                  	push SOB_CLOSURE_ENV(rax)
 28839 000168A1 4C8B4009                	mov r8, qword [rax + 1 + 8]
 28840 000168A5 FF7508                  	push qword [rbp + 8]				; push old return address
 28841 000168A8 FF7500                  	push qword [rbp]					; push old rbp
 28842                                  	;; move stack up ;;
 28843 000168AB 488B5D18                	mov rbx, [rbp + 3*8]
 28844 000168AF 4889DE                  	mov rsi, rbx						; save old size in rsi
 28845 000168B2 4883C303                	add rbx, 3
 28846 000168B6 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 28847 000168BE B901000000              	mov rcx, 1
 28848 000168C3 4883C104                	add rcx, 4				; num of iterations in rcx
 28849                                  .L_tc_recycle_frame_loop_03c4:
 28850 000168C7 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 28851 000168CF 488B143C                	mov rdx, [rsp + rdi]
 28852 000168D3 4889541D00              	mov [rbp + rbx], rdx
 28853 000168D8 4883EB08                	sub rbx, 8
 28854 000168DC 48FFC9                  	dec rcx
 28855 000168DF 4883F900                	cmp rcx, 0
 28856 000168E3 75E2                    	jne .L_tc_recycle_frame_loop_03c4
 28857 000168E5 4889F3                  	mov rbx, rsi
 28858 000168E8 4883EB01                	sub rbx, 1
 28859 000168EC 488D1CDD00000000        	lea rbx, [rbx*8]
 28860 000168F4 4801DD                  	add rbp, rbx
 28861 000168F7 4889EC                  	mov rsp, rbp         ; fix stack pointers
 28862 000168FA 5D                      	pop rbp
 28863 000168FB 41FFE0                  	jmp r8
 28864 000168FE EB0B                    	jmp .L_if_end_021d
 28865                                  .L_if_else_021d:
 28866 00016900 488B4510                	mov rax, ENV
 28867 00016904 488B4008                	mov rax, qword [rax + 8 * 1]
 28868 00016908 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 28869                                  .L_if_end_021d:
 28870 0001690B C9                      	leave
 28871 0001690C C21800                  	ret AND_KILL_FRAME(1)
 28872                                  .L_lambda_simple_end_02e5:	; new closure is in rax
 28873 0001690F 50                      	push rax
 28874 00016910 488B4520                	mov rax, PARAM(0)	; param run
 28875 00016914 8F00                    	pop qword [rax]
 28876 00016916 48B8-                   	mov rax, sob_void
 28876 00016918 [0000000000000000] 
 28877                                  
 28878                                  	; preparing a tail-call
 28879 00016920 48B8-                   	mov rax, L_constants + 2135
 28879 00016922 [5708000000000000] 
 28880 0001692A 50                      	push rax
 28881 0001692B 6A01                    	push 1	; arg count
 28882 0001692D 488B4520                	mov rax, PARAM(0)	; param run
 28883 00016931 488B00                  	mov rax, qword [rax]
 28884 00016934 803804                  	cmp byte [rax], T_closure
 28885 00016937 0F856C070000            	jne L_error_non_closure
 28886 0001693D FF7001                  	push SOB_CLOSURE_ENV(rax)
 28887 00016940 4C8B4009                	mov r8, qword [rax + 1 + 8]
 28888 00016944 FF7508                  	push qword [rbp + 8]				; push old return address
 28889 00016947 FF7500                  	push qword [rbp]					; push old rbp
 28890                                  	;; move stack up ;;
 28891 0001694A 488B5D18                	mov rbx, [rbp + 3*8]
 28892 0001694E 4889DE                  	mov rsi, rbx						; save old size in rsi
 28893 00016951 4883C303                	add rbx, 3
 28894 00016955 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 28895 0001695D B901000000              	mov rcx, 1
 28896 00016962 4883C104                	add rcx, 4				; num of iterations in rcx
 28897                                  .L_tc_recycle_frame_loop_03c5:
 28898 00016966 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 28899 0001696E 488B143C                	mov rdx, [rsp + rdi]
 28900 00016972 4889541D00              	mov [rbp + rbx], rdx
 28901 00016977 4883EB08                	sub rbx, 8
 28902 0001697B 48FFC9                  	dec rcx
 28903 0001697E 4883F900                	cmp rcx, 0
 28904 00016982 75E2                    	jne .L_tc_recycle_frame_loop_03c5
 28905 00016984 4889F3                  	mov rbx, rsi
 28906 00016987 4883EB01                	sub rbx, 1
 28907 0001698B 488D1CDD00000000        	lea rbx, [rbx*8]
 28908 00016993 4801DD                  	add rbp, rbx
 28909 00016996 4889EC                  	mov rsp, rbp         ; fix stack pointers
 28910 00016999 5D                      	pop rbp
 28911 0001699A 41FFE0                  	jmp r8
 28912 0001699D C9                      	leave
 28913 0001699E C21800                  	ret AND_KILL_FRAME(1)
 28914                                  .L_lambda_simple_end_02e4:	; new closure is in rax
 28915 000169A1 803804                  	cmp byte [rax], T_closure
 28916 000169A4 0F85FF060000            	jne L_error_non_closure
 28917 000169AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 28918 000169AD 4C8B4009                	mov r8, qword [rax + 1 + 8]
 28919 000169B1 FF7508                  	push qword [rbp + 8]				; push old return address
 28920 000169B4 FF7500                  	push qword [rbp]					; push old rbp
 28921                                  	;; move stack up ;;
 28922 000169B7 488B5D18                	mov rbx, [rbp + 3*8]
 28923 000169BB 4889DE                  	mov rsi, rbx						; save old size in rsi
 28924 000169BE 4883C303                	add rbx, 3
 28925 000169C2 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 28926 000169CA B901000000              	mov rcx, 1
 28927 000169CF 4883C104                	add rcx, 4				; num of iterations in rcx
 28928                                  .L_tc_recycle_frame_loop_03c3:
 28929 000169D3 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 28930 000169DB 488B143C                	mov rdx, [rsp + rdi]
 28931 000169DF 4889541D00              	mov [rbp + rbx], rdx
 28932 000169E4 4883EB08                	sub rbx, 8
 28933 000169E8 48FFC9                  	dec rcx
 28934 000169EB 4883F900                	cmp rcx, 0
 28935 000169EF 75E2                    	jne .L_tc_recycle_frame_loop_03c3
 28936 000169F1 4889F3                  	mov rbx, rsi
 28937 000169F4 4883EB01                	sub rbx, 1
 28938 000169F8 488D1CDD00000000        	lea rbx, [rbx*8]
 28939 00016A00 4801DD                  	add rbp, rbx
 28940 00016A03 4889EC                  	mov rsp, rbp         ; fix stack pointers
 28941 00016A06 5D                      	pop rbp
 28942 00016A07 41FFE0                  	jmp r8
 28943 00016A0A C9                      	leave
 28944 00016A0B C21800                  	ret AND_KILL_FRAME(1)
 28945                                  .L_lambda_simple_end_02e3:	; new closure is in rax
 28946 00016A0E 803804                  	cmp byte [rax], T_closure
 28947 00016A11 0F8592060000            	jne L_error_non_closure
 28948 00016A17 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28949 00016A1A 4C8B4009                	mov r8, qword [rax + 1 + 8]
 28950 00016A1E FF7508                  	push qword [rbp + 8]				; push old return address
 28951 00016A21 FF7500                  	push qword [rbp]					; push old rbp
 28952                                  	;; move stack up ;;
 28953 00016A24 488B5D18                	mov rbx, [rbp + 3*8]
 28954 00016A28 4889DE                  	mov rsi, rbx						; save old size in rsi
 28955 00016A2B 4883C303                	add rbx, 3
 28956 00016A2F 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 28957 00016A37 B901000000              	mov rcx, 1
 28958 00016A3C 4883C104                	add rcx, 4				; num of iterations in rcx
 28959                                  .L_tc_recycle_frame_loop_03c2:
 28960 00016A40 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 28961 00016A48 488B143C                	mov rdx, [rsp + rdi]
 28962 00016A4C 4889541D00              	mov [rbp + rbx], rdx
 28963 00016A51 4883EB08                	sub rbx, 8
 28964 00016A55 48FFC9                  	dec rcx
 28965 00016A58 4883F900                	cmp rcx, 0
 28966 00016A5C 75E2                    	jne .L_tc_recycle_frame_loop_03c2
 28967 00016A5E 4889F3                  	mov rbx, rsi
 28968 00016A61 4883EB01                	sub rbx, 1
 28969 00016A65 488D1CDD00000000        	lea rbx, [rbx*8]
 28970 00016A6D 4801DD                  	add rbp, rbx
 28971 00016A70 4889EC                  	mov rsp, rbp         ; fix stack pointers
 28972 00016A73 5D                      	pop rbp
 28973 00016A74 41FFE0                  	jmp r8
 28974 00016A77 C9                      	leave
 28975 00016A78 C22000                  	ret AND_KILL_FRAME(2)
 28976                                  .L_lambda_simple_end_02e2:	; new closure is in rax
 28977 00016A7B 48890425[9D140000]      	mov qword [free_var_102], rax
 28978 00016A83 48B8-                   	mov rax, sob_void
 28978 00016A85 [0000000000000000] 
 28979                                  
 28980 00016A8D 4889C7                  	mov rdi, rax
 28981 00016A90 E812090000              	call print_sexpr_if_not_void
 28982 00016A95 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28983 00016A9A E8B3060000              	call malloc
 28984 00016A9F 50                      	push rax
 28985 00016AA0 BF00000000              	mov rdi, 8 * 0	; new rib
 28986 00016AA5 E8A8060000              	call malloc
 28987 00016AAA 50                      	push rax
 28988 00016AAB BF08000000              	mov rdi, 8 * 1	; extended env
 28989 00016AB0 E89D060000              	call malloc
 28990 00016AB5 488B7D10                	mov rdi, ENV
 28991 00016AB9 BE00000000              	mov rsi, 0
 28992 00016ABE BA01000000              	mov rdx, 1
 28993                                  .L_lambda_simple_env_loop_02e6:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 28994 00016AC3 4883FE00                	cmp rsi, 0
 28995 00016AC7 7410                    	je .L_lambda_simple_env_end_02e6
 28996 00016AC9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28997 00016ACD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28998 00016AD1 48FFC6                  	inc rsi
 28999 00016AD4 48FFC2                  	inc rdx
 29000 00016AD7 EBEA                    	jmp .L_lambda_simple_env_loop_02e6
 29001                                  .L_lambda_simple_env_end_02e6:
 29002 00016AD9 5B                      	pop rbx
 29003 00016ADA BE00000000              	mov rsi, 0
 29004                                  .L_lambda_simple_params_loop_02e6:	; copy params
 29005 00016ADF 4883FE00                	cmp rsi, 0
 29006 00016AE3 740E                    	je .L_lambda_simple_params_end_02e6
 29007 00016AE5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29008 00016AEA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29009 00016AEE 48FFC6                  	inc rsi
 29010 00016AF1 EBEC                    	jmp .L_lambda_simple_params_loop_02e6
 29011                                  .L_lambda_simple_params_end_02e6:
 29012 00016AF3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 29013 00016AF6 4889C3                  	mov rbx, rax
 29014 00016AF9 58                      	pop rax
 29015 00016AFA C60004                  	mov byte [rax], T_closure
 29016 00016AFD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29017 00016B01 48C74009[0E6B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02e6
 29018 00016B09 E9A1020000              	jmp .L_lambda_simple_end_02e6
 29019                                  .L_lambda_simple_code_02e6:	; lambda-simple body
 29020 00016B0E 48837C241003            	cmp qword [rsp + 8 * 2], 3
 29021 00016B14 740B                    	je .L_lambda_simple_arity_check_ok_02e6
 29022 00016B16 FF742410                	push qword [rsp + 8 * 2]
 29023 00016B1A 6A03                    	push 3
 29024 00016B1C E9EA050000              	jmp L_error_incorrect_arity_simple
 29025                                  .L_lambda_simple_arity_check_ok_02e6:
 29026 00016B21 C8000000                	enter 0, 0
 29027                                  	; preparing a non-tail-call
 29028 00016B25 488B4530                	mov rax, PARAM(2)	; param n
 29029 00016B29 50                      	push rax
 29030 00016B2A 6A01                    	push 1	; arg count
 29031 00016B2C 488B0425[DE170000]      	mov rax, qword [free_var_151]	; free var zero?
 29032 00016B34 803805                  	cmp byte [rax], T_undefined
 29033 00016B37 0F84E8040000            	je L_error_fvar_undefined
 29034 00016B3D 803804                  	cmp byte [rax], T_closure
 29035 00016B40 0F8563050000            	jne L_error_non_closure
 29036 00016B46 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29037 00016B49 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29038 00016B4C 483D[02000000]          	cmp rax, sob_boolean_false
 29039 00016B52 740F                    	je .L_if_else_0220
 29040 00016B54 48B8-                   	mov rax, L_constants + 3485
 29040 00016B56 [9D0D000000000000] 
 29041 00016B5E E948020000              	jmp .L_if_end_0220
 29042                                  .L_if_else_0220:
 29043                                  	; preparing a non-tail-call
 29044 00016B63 488B4528                	mov rax, PARAM(1)	; param b
 29045 00016B67 50                      	push rax
 29046 00016B68 488B4520                	mov rax, PARAM(0)	; param a
 29047 00016B6C 50                      	push rax
 29048 00016B6D 6A02                    	push 2	; arg count
 29049 00016B6F 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 29050 00016B77 803805                  	cmp byte [rax], T_undefined
 29051 00016B7A 0F84A5040000            	je L_error_fvar_undefined
 29052 00016B80 803804                  	cmp byte [rax], T_closure
 29053 00016B83 0F8520050000            	jne L_error_non_closure
 29054 00016B89 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29055 00016B8C FF5009                  	call SOB_CLOSURE_CODE(rax)
 29056 00016B8F 483D[02000000]          	cmp rax, sob_boolean_false
 29057 00016B95 0F84E6000000            	je .L_if_else_021f
 29058                                  	; preparing a tail-call
 29059                                  	; preparing a non-tail-call
 29060 00016B9B 488B4530                	mov rax, PARAM(2)	; param n
 29061 00016B9F 50                      	push rax
 29062                                  	; preparing a non-tail-call
 29063 00016BA0 488B4520                	mov rax, PARAM(0)	; param a
 29064 00016BA4 50                      	push rax
 29065 00016BA5 488B4528                	mov rax, PARAM(1)	; param b
 29066 00016BA9 50                      	push rax
 29067 00016BAA 6A02                    	push 2	; arg count
 29068 00016BAC 488B0425[0A0E0000]      	mov rax, qword [free_var_3]	; free var /
 29069 00016BB4 803805                  	cmp byte [rax], T_undefined
 29070 00016BB7 0F8468040000            	je L_error_fvar_undefined
 29071 00016BBD 803804                  	cmp byte [rax], T_closure
 29072 00016BC0 0F85E3040000            	jne L_error_non_closure
 29073 00016BC6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29074 00016BC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29075 00016BCC 50                      	push rax
 29076 00016BCD 488B4520                	mov rax, PARAM(0)	; param a
 29077 00016BD1 50                      	push rax
 29078 00016BD2 6A03                    	push 3	; arg count
 29079 00016BD4 488B0425[48140000]      	mov rax, qword [free_var_97]	; free var logarithm
 29080 00016BDC 803805                  	cmp byte [rax], T_undefined
 29081 00016BDF 0F8440040000            	je L_error_fvar_undefined
 29082 00016BE5 803804                  	cmp byte [rax], T_closure
 29083 00016BE8 0F85BB040000            	jne L_error_non_closure
 29084 00016BEE FF7001                  	push SOB_CLOSURE_ENV(rax)
 29085 00016BF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29086 00016BF4 50                      	push rax
 29087 00016BF5 48B8-                   	mov rax, L_constants + 3485
 29087 00016BF7 [9D0D000000000000] 
 29088 00016BFF 50                      	push rax
 29089 00016C00 6A02                    	push 2	; arg count
 29090 00016C02 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 29091 00016C0A 803805                  	cmp byte [rax], T_undefined
 29092 00016C0D 0F8412040000            	je L_error_fvar_undefined
 29093 00016C13 803804                  	cmp byte [rax], T_closure
 29094 00016C16 0F858D040000            	jne L_error_non_closure
 29095 00016C1C FF7001                  	push SOB_CLOSURE_ENV(rax)
 29096 00016C1F 4C8B4009                	mov r8, qword [rax + 1 + 8]
 29097 00016C23 FF7508                  	push qword [rbp + 8]				; push old return address
 29098 00016C26 FF7500                  	push qword [rbp]					; push old rbp
 29099                                  	;; move stack up ;;
 29100 00016C29 488B5D18                	mov rbx, [rbp + 3*8]
 29101 00016C2D 4889DE                  	mov rsi, rbx						; save old size in rsi
 29102 00016C30 4883C303                	add rbx, 3
 29103 00016C34 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 29104 00016C3C B902000000              	mov rcx, 2
 29105 00016C41 4883C104                	add rcx, 4				; num of iterations in rcx
 29106                                  .L_tc_recycle_frame_loop_03c6:
 29107 00016C45 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 29108 00016C4D 488B143C                	mov rdx, [rsp + rdi]
 29109 00016C51 4889541D00              	mov [rbp + rbx], rdx
 29110 00016C56 4883EB08                	sub rbx, 8
 29111 00016C5A 48FFC9                  	dec rcx
 29112 00016C5D 4883F900                	cmp rcx, 0
 29113 00016C61 75E2                    	jne .L_tc_recycle_frame_loop_03c6
 29114 00016C63 4889F3                  	mov rbx, rsi
 29115 00016C66 4883EB02                	sub rbx, 2
 29116 00016C6A 488D1CDD00000000        	lea rbx, [rbx*8]
 29117 00016C72 4801DD                  	add rbp, rbx
 29118 00016C75 4889EC                  	mov rsp, rbp         ; fix stack pointers
 29119 00016C78 5D                      	pop rbp
 29120 00016C79 41FFE0                  	jmp r8
 29121 00016C7C E92A010000              	jmp .L_if_end_021f
 29122                                  .L_if_else_021f:
 29123                                  	; preparing a non-tail-call
 29124 00016C81 488B4528                	mov rax, PARAM(1)	; param b
 29125 00016C85 50                      	push rax
 29126 00016C86 488B4520                	mov rax, PARAM(0)	; param a
 29127 00016C8A 50                      	push rax
 29128 00016C8B 6A02                    	push 2	; arg count
 29129 00016C8D 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 29130 00016C95 803805                  	cmp byte [rax], T_undefined
 29131 00016C98 0F8487030000            	je L_error_fvar_undefined
 29132 00016C9E 803804                  	cmp byte [rax], T_closure
 29133 00016CA1 0F8502040000            	jne L_error_non_closure
 29134 00016CA7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29135 00016CAA FF5009                  	call SOB_CLOSURE_CODE(rax)
 29136 00016CAD 483D[02000000]          	cmp rax, sob_boolean_false
 29137 00016CB3 740F                    	je .L_if_else_021e
 29138 00016CB5 48B8-                   	mov rax, L_constants + 3485
 29138 00016CB7 [9D0D000000000000] 
 29139 00016CBF E9E7000000              	jmp .L_if_end_021e
 29140                                  .L_if_else_021e:
 29141                                  	; preparing a tail-call
 29142                                  	; preparing a non-tail-call
 29143                                  	; preparing a non-tail-call
 29144 00016CC4 48B8-                   	mov rax, L_constants + 2270
 29144 00016CC6 [DE08000000000000] 
 29145 00016CCE 50                      	push rax
 29146 00016CCF 488B4530                	mov rax, PARAM(2)	; param n
 29147 00016CD3 50                      	push rax
 29148 00016CD4 6A02                    	push 2	; arg count
 29149 00016CD6 488B0425[F90D0000]      	mov rax, qword [free_var_2]	; free var -
 29150 00016CDE 803805                  	cmp byte [rax], T_undefined
 29151 00016CE1 0F843E030000            	je L_error_fvar_undefined
 29152 00016CE7 803804                  	cmp byte [rax], T_closure
 29153 00016CEA 0F85B9030000            	jne L_error_non_closure
 29154 00016CF0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29155 00016CF3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29156 00016CF6 50                      	push rax
 29157 00016CF7 488B4520                	mov rax, PARAM(0)	; param a
 29158 00016CFB 50                      	push rax
 29159 00016CFC 488B4528                	mov rax, PARAM(1)	; param b
 29160 00016D00 50                      	push rax
 29161 00016D01 6A03                    	push 3	; arg count
 29162 00016D03 488B0425[48140000]      	mov rax, qword [free_var_97]	; free var logarithm
 29163 00016D0B 803805                  	cmp byte [rax], T_undefined
 29164 00016D0E 0F8411030000            	je L_error_fvar_undefined
 29165 00016D14 803804                  	cmp byte [rax], T_closure
 29166 00016D17 0F858C030000            	jne L_error_non_closure
 29167 00016D1D FF7001                  	push SOB_CLOSURE_ENV(rax)
 29168 00016D20 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29169 00016D23 50                      	push rax
 29170 00016D24 48B8-                   	mov rax, L_constants + 3485
 29170 00016D26 [9D0D000000000000] 
 29171 00016D2E 50                      	push rax
 29172 00016D2F 6A02                    	push 2	; arg count
 29173 00016D31 488B0425[0A0E0000]      	mov rax, qword [free_var_3]	; free var /
 29174 00016D39 803805                  	cmp byte [rax], T_undefined
 29175 00016D3C 0F84E3020000            	je L_error_fvar_undefined
 29176 00016D42 803804                  	cmp byte [rax], T_closure
 29177 00016D45 0F855E030000            	jne L_error_non_closure
 29178 00016D4B FF7001                  	push SOB_CLOSURE_ENV(rax)
 29179 00016D4E 4C8B4009                	mov r8, qword [rax + 1 + 8]
 29180 00016D52 FF7508                  	push qword [rbp + 8]				; push old return address
 29181 00016D55 FF7500                  	push qword [rbp]					; push old rbp
 29182                                  	;; move stack up ;;
 29183 00016D58 488B5D18                	mov rbx, [rbp + 3*8]
 29184 00016D5C 4889DE                  	mov rsi, rbx						; save old size in rsi
 29185 00016D5F 4883C303                	add rbx, 3
 29186 00016D63 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 29187 00016D6B B902000000              	mov rcx, 2
 29188 00016D70 4883C104                	add rcx, 4				; num of iterations in rcx
 29189                                  .L_tc_recycle_frame_loop_03c7:
 29190 00016D74 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 29191 00016D7C 488B143C                	mov rdx, [rsp + rdi]
 29192 00016D80 4889541D00              	mov [rbp + rbx], rdx
 29193 00016D85 4883EB08                	sub rbx, 8
 29194 00016D89 48FFC9                  	dec rcx
 29195 00016D8C 4883F900                	cmp rcx, 0
 29196 00016D90 75E2                    	jne .L_tc_recycle_frame_loop_03c7
 29197 00016D92 4889F3                  	mov rbx, rsi
 29198 00016D95 4883EB02                	sub rbx, 2
 29199 00016D99 488D1CDD00000000        	lea rbx, [rbx*8]
 29200 00016DA1 4801DD                  	add rbp, rbx
 29201 00016DA4 4889EC                  	mov rsp, rbp         ; fix stack pointers
 29202 00016DA7 5D                      	pop rbp
 29203 00016DA8 41FFE0                  	jmp r8
 29204                                  .L_if_end_021e:
 29205                                  .L_if_end_021f:
 29206                                  .L_if_end_0220:
 29207 00016DAB C9                      	leave
 29208 00016DAC C22800                  	ret AND_KILL_FRAME(3)
 29209                                  .L_lambda_simple_end_02e6:	; new closure is in rax
 29210 00016DAF 48890425[48140000]      	mov qword [free_var_97], rax
 29211 00016DB7 48B8-                   	mov rax, sob_void
 29211 00016DB9 [0000000000000000] 
 29212                                  
 29213 00016DC1 4889C7                  	mov rdi, rax
 29214 00016DC4 E8DE050000              	call print_sexpr_if_not_void
 29215 00016DC9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29216 00016DCE E87F030000              	call malloc
 29217 00016DD3 50                      	push rax
 29218 00016DD4 BF00000000              	mov rdi, 8 * 0	; new rib
 29219 00016DD9 E874030000              	call malloc
 29220 00016DDE 50                      	push rax
 29221 00016DDF BF08000000              	mov rdi, 8 * 1	; extended env
 29222 00016DE4 E869030000              	call malloc
 29223 00016DE9 488B7D10                	mov rdi, ENV
 29224 00016DED BE00000000              	mov rsi, 0
 29225 00016DF2 BA01000000              	mov rdx, 1
 29226                                  .L_lambda_simple_env_loop_02e7:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 29227 00016DF7 4883FE00                	cmp rsi, 0
 29228 00016DFB 7410                    	je .L_lambda_simple_env_end_02e7
 29229 00016DFD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29230 00016E01 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29231 00016E05 48FFC6                  	inc rsi
 29232 00016E08 48FFC2                  	inc rdx
 29233 00016E0B EBEA                    	jmp .L_lambda_simple_env_loop_02e7
 29234                                  .L_lambda_simple_env_end_02e7:
 29235 00016E0D 5B                      	pop rbx
 29236 00016E0E BE00000000              	mov rsi, 0
 29237                                  .L_lambda_simple_params_loop_02e7:	; copy params
 29238 00016E13 4883FE00                	cmp rsi, 0
 29239 00016E17 740E                    	je .L_lambda_simple_params_end_02e7
 29240 00016E19 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29241 00016E1E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29242 00016E22 48FFC6                  	inc rsi
 29243 00016E25 EBEC                    	jmp .L_lambda_simple_params_loop_02e7
 29244                                  .L_lambda_simple_params_end_02e7:
 29245 00016E27 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 29246 00016E2A 4889C3                  	mov rbx, rax
 29247 00016E2D 58                      	pop rax
 29248 00016E2E C60004                  	mov byte [rax], T_closure
 29249 00016E31 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29250 00016E35 48C74009[426E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02e7
 29251 00016E3D E9A2000000              	jmp .L_lambda_simple_end_02e7
 29252                                  .L_lambda_simple_code_02e7:	; lambda-simple body
 29253 00016E42 48837C241000            	cmp qword [rsp + 8 * 2], 0
 29254 00016E48 740B                    	je .L_lambda_simple_arity_check_ok_02e7
 29255 00016E4A FF742410                	push qword [rsp + 8 * 2]
 29256 00016E4E 6A00                    	push 0
 29257 00016E50 E9B6020000              	jmp L_error_incorrect_arity_simple
 29258                                  .L_lambda_simple_arity_check_ok_02e7:
 29259 00016E55 C8000000                	enter 0, 0
 29260                                  	; preparing a tail-call
 29261 00016E59 48B8-                   	mov rax, L_constants + 3510
 29261 00016E5B [B60D000000000000] 
 29262 00016E63 50                      	push rax
 29263 00016E64 6A01                    	push 1	; arg count
 29264 00016E66 488B0425[CD170000]      	mov rax, qword [free_var_150]	; free var write-char
 29265 00016E6E 803805                  	cmp byte [rax], T_undefined
 29266 00016E71 0F84AE010000            	je L_error_fvar_undefined
 29267 00016E77 803804                  	cmp byte [rax], T_closure
 29268 00016E7A 0F8529020000            	jne L_error_non_closure
 29269 00016E80 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29270 00016E83 4C8B4009                	mov r8, qword [rax + 1 + 8]
 29271 00016E87 FF7508                  	push qword [rbp + 8]				; push old return address
 29272 00016E8A FF7500                  	push qword [rbp]					; push old rbp
 29273                                  	;; move stack up ;;
 29274 00016E8D 488B5D18                	mov rbx, [rbp + 3*8]
 29275 00016E91 4889DE                  	mov rsi, rbx						; save old size in rsi
 29276 00016E94 4883C303                	add rbx, 3
 29277 00016E98 488D1CDD00000000        	lea rbx, [rbx*8]			; offset we want to increase to in rbx
 29278 00016EA0 B901000000              	mov rcx, 1
 29279 00016EA5 4883C104                	add rcx, 4				; num of iterations in rcx
 29280                                  .L_tc_recycle_frame_loop_03c8:
 29281 00016EA9 488D3CCDF8FFFFFF        	lea rdi, [rcx*8 - 8]
 29282 00016EB1 488B143C                	mov rdx, [rsp + rdi]
 29283 00016EB5 4889541D00              	mov [rbp + rbx], rdx
 29284 00016EBA 4883EB08                	sub rbx, 8
 29285 00016EBE 48FFC9                  	dec rcx
 29286 00016EC1 4883F900                	cmp rcx, 0
 29287 00016EC5 75E2                    	jne .L_tc_recycle_frame_loop_03c8
 29288 00016EC7 4889F3                  	mov rbx, rsi
 29289 00016ECA 4883EB01                	sub rbx, 1
 29290 00016ECE 488D1CDD00000000        	lea rbx, [rbx*8]
 29291 00016ED6 4801DD                  	add rbp, rbx
 29292 00016ED9 4889EC                  	mov rsp, rbp         ; fix stack pointers
 29293 00016EDC 5D                      	pop rbp
 29294 00016EDD 41FFE0                  	jmp r8
 29295 00016EE0 C9                      	leave
 29296 00016EE1 C21000                  	ret AND_KILL_FRAME(0)
 29297                                  .L_lambda_simple_end_02e7:	; new closure is in rax
 29298 00016EE4 48890425[D0140000]      	mov qword [free_var_105], rax
 29299 00016EEC 48B8-                   	mov rax, sob_void
 29299 00016EEE [0000000000000000] 
 29300                                  
 29301 00016EF6 4889C7                  	mov rdi, rax
 29302 00016EF9 E8A9040000              	call print_sexpr_if_not_void
 29303 00016EFE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29304 00016F03 E84A020000              	call malloc
 29305 00016F08 50                      	push rax
 29306 00016F09 BF00000000              	mov rdi, 8 * 0	; new rib
 29307 00016F0E E83F020000              	call malloc
 29308 00016F13 50                      	push rax
 29309 00016F14 BF08000000              	mov rdi, 8 * 1	; extended env
 29310 00016F19 E834020000              	call malloc
 29311 00016F1E 488B7D10                	mov rdi, ENV
 29312 00016F22 BE00000000              	mov rsi, 0
 29313 00016F27 BA01000000              	mov rdx, 1
 29314                                  .L_lambda_simple_env_loop_02e8:	; ext_env[i + 1] <-- env[i] copy pointers from Env to ExtEnv
 29315 00016F2C 4883FE00                	cmp rsi, 0
 29316 00016F30 7410                    	je .L_lambda_simple_env_end_02e8
 29317 00016F32 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29318 00016F36 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29319 00016F3A 48FFC6                  	inc rsi
 29320 00016F3D 48FFC2                  	inc rdx
 29321 00016F40 EBEA                    	jmp .L_lambda_simple_env_loop_02e8
 29322                                  .L_lambda_simple_env_end_02e8:
 29323 00016F42 5B                      	pop rbx
 29324 00016F43 BE00000000              	mov rsi, 0
 29325                                  .L_lambda_simple_params_loop_02e8:	; copy params
 29326 00016F48 4883FE00                	cmp rsi, 0
 29327 00016F4C 740E                    	je .L_lambda_simple_params_end_02e8
 29328 00016F4E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29329 00016F53 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29330 00016F57 48FFC6                  	inc rsi
 29331 00016F5A EBEC                    	jmp .L_lambda_simple_params_loop_02e8
 29332                                  .L_lambda_simple_params_end_02e8:
 29333 00016F5C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib the vector where to store the parameters 
 29334 00016F5F 4889C3                  	mov rbx, rax
 29335 00016F62 58                      	pop rax
 29336 00016F63 C60004                  	mov byte [rax], T_closure
 29337 00016F66 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29338 00016F6A 48C74009[746F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02e8
 29339 00016F72 EB25                    	jmp .L_lambda_simple_end_02e8
 29340                                  .L_lambda_simple_code_02e8:	; lambda-simple body
 29341 00016F74 48837C241000            	cmp qword [rsp + 8 * 2], 0
 29342 00016F7A 740B                    	je .L_lambda_simple_arity_check_ok_02e8
 29343 00016F7C FF742410                	push qword [rsp + 8 * 2]
 29344 00016F80 6A00                    	push 0
 29345 00016F82 E984010000              	jmp L_error_incorrect_arity_simple
 29346                                  .L_lambda_simple_arity_check_ok_02e8:
 29347 00016F87 C8000000                	enter 0, 0
 29348 00016F8B 48B8-                   	mov rax, L_constants + 0
 29348 00016F8D [0000000000000000] 
 29349 00016F95 C9                      	leave
 29350 00016F96 C21000                  	ret AND_KILL_FRAME(0)
 29351                                  .L_lambda_simple_end_02e8:	; new closure is in rax
 29352 00016F99 48890425[BC170000]      	mov qword [free_var_149], rax
 29353 00016FA1 48B8-                   	mov rax, sob_void
 29353 00016FA3 [0000000000000000] 
 29354                                  
 29355 00016FAB 4889C7                  	mov rdi, rax
 29356 00016FAE E8F4030000              	call print_sexpr_if_not_void
 29357                                  	; preparing a non-tail-call
 29358 00016FB3 48B8-                   	mov rax, L_constants + 3534
 29358 00016FB5 [CE0D000000000000] 
 29359 00016FBD 50                      	push rax
 29360 00016FBE 48B8-                   	mov rax, L_constants + 3525
 29360 00016FC0 [C50D000000000000] 
 29361 00016FC8 50                      	push rax
 29362 00016FC9 6A02                    	push 2	; arg count
 29363 00016FCB 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 29364 00016FD3 803805                  	cmp byte [rax], T_undefined
 29365 00016FD6 744D                    	je L_error_fvar_undefined
 29366 00016FD8 803804                  	cmp byte [rax], T_closure
 29367 00016FDB 0F85C8000000            	jne L_error_non_closure
 29368 00016FE1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29369 00016FE4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29370                                  Lend:
 29371 00016FE7 4889C7                  	mov rdi, rax
 29372 00016FEA E8B8030000              	call print_sexpr_if_not_void
 29373                                  
 29374 00016FEF 48BF-                           mov rdi, fmt_memory_usage
 29374 00016FF1 [8718000000000000] 
 29375 00016FF9 488B3425[0D190000]              mov rsi, qword [top_of_memory]
 29376 00017001 4881EE[00000000]                sub rsi, memory
 29377 00017008 B800000000                      mov rax, 0
 29378                                          ENTER
    44 0001700D C8000000            <1>  enter 0, 0
    45 00017011 4883E4F0            <1>  and rsp, ~15
 29379 00017015 E8(00000000)                    call printf
 29380                                          LEAVE
    49 0001701A C9                  <1>  leave
 29381 0001701B B800000000                      mov rax, 0
 29382 00017020 E8(00000000)                    call exit
 29383                                  
 29384                                  L_error_fvar_undefined:
 29385 00017025 50                              push rax
 29386 00017026 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
 29387 0001702E 48BE-                           mov rsi, fmt_undefined_free_var_1
 29387 00017030 [EF17000000000000] 
 29388 00017038 B800000000                      mov rax, 0
 29389                                          ENTER
    44 0001703D C8000000            <1>  enter 0, 0
    45 00017041 4883E4F0            <1>  and rsp, ~15
 29390 00017045 E8(00000000)                    call fprintf
 29391                                          LEAVE
    49 0001704A C9                  <1>  leave
 29392 0001704B 58                              pop rax
 29393 0001704C 488B4001                        mov rax, qword [rax + 1] ; string
 29394 00017050 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 29395 00017054 BE01000000                      mov rsi, 1               ; sizeof(char)
 29396 00017059 488B5001                        mov rdx, qword [rax + 1] ; string-length
 29397 0001705D 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
 29398 00017065 B800000000                      mov rax, 0
 29399                                          ENTER
    44 0001706A C8000000            <1>  enter 0, 0
    45 0001706E 4883E4F0            <1>  and rsp, ~15
 29400 00017072 E8(00000000)                    call fwrite
 29401                                          LEAVE
    49 00017077 C9                  <1>  leave
 29402 00017078 488B3C25[00000000]              mov rdi, [stderr]       ; destination
 29403 00017080 48BE-                           mov rsi, fmt_undefined_free_var_2
 29403 00017082 [0618000000000000] 
 29404 0001708A B800000000                      mov rax, 0
 29405                                          ENTER
    44 0001708F C8000000            <1>  enter 0, 0
    45 00017093 4883E4F0            <1>  and rsp, ~15
 29406 00017097 E8(00000000)                    call fprintf
 29407                                          LEAVE
    49 0001709C C9                  <1>  leave
 29408 0001709D 48C7C0F6FFFFFF                  mov rax, -10
 29409 000170A4 E8(00000000)                    call exit
 29410                                  
 29411                                  L_error_non_closure:
 29412 000170A9 488B3C25[00000000]              mov rdi, qword [stderr]
 29413 000170B1 48BE-                           mov rsi, fmt_non_closure
 29413 000170B3 [BD18000000000000] 
 29414 000170BB B800000000                      mov rax, 0
 29415                                          ENTER
    44 000170C0 C8000000            <1>  enter 0, 0
    45 000170C4 4883E4F0            <1>  and rsp, ~15
 29416 000170C8 E8(00000000)                    call fprintf
 29417                                          LEAVE
    49 000170CD C9                  <1>  leave
 29418 000170CE 48C7C0FEFFFFFF                  mov rax, -2
 29419 000170D5 E8(00000000)                    call exit
 29420                                  
 29421                                  L_error_improper_list:
 29422 000170DA 488B3C25[00000000]      	mov rdi, qword [stderr]
 29423 000170E2 48BE-                   	mov rsi, fmt_error_improper_list
 29423 000170E4 [E518000000000000] 
 29424 000170EC B800000000              	mov rax, 0
 29425                                          ENTER
    44 000170F1 C8000000            <1>  enter 0, 0
    45 000170F5 4883E4F0            <1>  and rsp, ~15
 29426 000170F9 E8(00000000)            	call fprintf
 29427                                          LEAVE
    49 000170FE C9                  <1>  leave
 29428 000170FF 48C7C0F9FFFFFF          	mov rax, -7
 29429 00017106 E8(00000000)            	call exit
 29430                                  
 29431                                  L_error_incorrect_arity_simple:
 29432 0001710B 488B3C25[00000000]              mov rdi, qword [stderr]
 29433 00017113 48BE-                           mov rsi, fmt_incorrect_arity_simple
 29433 00017115 [2818000000000000] 
 29434 0001711D EB12                            jmp L_error_incorrect_arity_common
 29435                                  L_error_incorrect_arity_opt:
 29436 0001711F 488B3C25[00000000]              mov rdi, qword [stderr]
 29437 00017127 48BE-                           mov rsi, fmt_incorrect_arity_opt
 29437 00017129 [5318000000000000] 
 29438                                  L_error_incorrect_arity_common:
 29439 00017131 5A                              pop rdx
 29440 00017132 59                              pop rcx
 29441 00017133 B800000000                      mov rax, 0
 29442                                          ENTER
    44 00017138 C8000000            <1>  enter 0, 0
    45 0001713C 4883E4F0            <1>  and rsp, ~15
 29443 00017140 E8(00000000)                    call fprintf
 29444                                          LEAVE
    49 00017145 C9                  <1>  leave
 29445 00017146 48C7C0FAFFFFFF                  mov rax, -6
 29446 0001714D E8(00000000)                    call exit
 29447                                  
 29448                                  section .data
 29449                                  fmt_undefined_free_var_1:
 29450 000017EF 212121205468652066-             db `!!! The free variable \0`
 29450 000017F8 726565207661726961-
 29450 00001801 626C652000         
 29451                                  fmt_undefined_free_var_2:
 29452 00001806 207761732075736564-             db ` was used before it was defined.\n\0`
 29452 0000180F 206265666F72652069-
 29452 00001818 742077617320646566-
 29452 00001821 696E65642E0A00     
 29453                                  fmt_incorrect_arity_simple:
 29454 00001828 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
 29454 00001831 74656420256C642061-
 29454 0000183A 7267756D656E74732C-
 29454 00001843 206275742067697665-
 29454 0000184C 6E20256C640A00     
 29455                                  fmt_incorrect_arity_opt:
 29456 00001853 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
 29456 0000185C 746564206174206C65-
 29456 00001865 61737420256C642061-
 29456 0000186E 7267756D656E74732C-
 29456 00001877 206275742067697665-
 29456 00001880 6E20256C640A00     
 29457                                  fmt_memory_usage:
 29458 00001887 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
 29458 00001890 20256C642062797465-
 29458 00001899 73206F662064796E61-
 29458 000018A2 6D6963616C6C792D61-
 29458 000018AB 6C6C6F636174656420-
 29458 000018B4 6D656D6F72790A0A00 
 29459                                  fmt_non_closure:
 29460 000018BD 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
 29460 000018C6 7074696E6720746F20-
 29460 000018CF 6170706C792061206E-
 29460 000018D8 6F6E2D636C6F737572-
 29460 000018E1 65210A00           
 29461                                  fmt_error_improper_list:
 29462 000018E5 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
 29462 000018EE 7267756D656E742069-
 29462 000018F7 73206E6F7420612070-
 29462 00001900 726F706572206C6973-
 29462 00001909 74210A00           
 29463                                  
 29464                                  section .bss
 29465                                  memory:
 29466 00000000 <res 40000000h>         	resb gbytes(1)
 29467                                  
 29468                                  section .data
 29469                                  top_of_memory:
 29470 0000190D [0000000000000000]              dq memory
 29471                                  
 29472                                  section .text
 29473                                  malloc:
 29474 00017152 488B0425[0D190000]              mov rax, qword [top_of_memory]
 29475 0001715A 48013C25[0D190000]              add qword [top_of_memory], rdi
 29476 00017162 C3                              ret
 29477                                  
 29478                                  L_code_ptr_return:
 29479 00017163 48837C241002            	cmp qword [rsp + 8*2], 2
 29480 00017169 0F85F01C0000            	jne L_error_arg_count_2
 29481 0001716F 488B4C2418              	mov rcx, qword [rsp + 8*3]
 29482                                  	assert_integer(rcx)
    53 00017174 803911              <1>  cmp byte [%1], %2
    54 00017177 0F85811D0000        <1>  jne L_error_incorrect_type
 29483 0001717D 488B4901                	mov rcx, qword [rcx + 1]
 29484 00017181 4883F900                	cmp rcx, 0
 29485 00017185 0F8C081C0000            	jl L_error_integer_range
 29486 0001718B 488B442420              	mov rax, qword [rsp + 8*4]
 29487                                  .L0:
 29488 00017190 4883F900                        cmp rcx, 0
 29489 00017194 7409                            je .L1
 29490 00017196 488B6D00                	mov rbp, qword [rbp]
 29491 0001719A 48FFC9                  	dec rcx
 29492 0001719D 7FF1                    	jg .L0
 29493                                  .L1:
 29494 0001719F 4889EC                  	mov rsp, rbp
 29495 000171A2 5D                      	pop rbp
 29496 000171A3 5B                              pop rbx
 29497 000171A4 488B4C2408                      mov rcx, qword [rsp + 8*1]
 29498 000171A9 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
 29499 000171AE FFE3                    	jmp rbx
 29500                                  
 29501                                  L_code_ptr_make_list:
 29502 000171B0 C8000000                	enter 0, 0
 29503 000171B4 48837D1801                      cmp COUNT, 1
 29504 000171B9 740C                            je .L0
 29505 000171BB 48837D1802                      cmp COUNT, 2
 29506 000171C0 7411                            je .L1
 29507 000171C2 E9CD1C0000                      jmp L_error_arg_count_12
 29508                                  .L0:
 29509 000171C7 49B9-                           mov r9, sob_void
 29509 000171C9 [0000000000000000] 
 29510 000171D1 EB04                            jmp .L2
 29511                                  .L1:
 29512 000171D3 4C8B4D28                        mov r9, PARAM(1)
 29513                                  .L2:
 29514 000171D7 488B4D20                        mov rcx, PARAM(0)
 29515                                          assert_integer(rcx)
    53 000171DB 803911              <1>  cmp byte [%1], %2
    54 000171DE 0F851A1D0000        <1>  jne L_error_incorrect_type
 29516 000171E4 488B4901                        mov rcx, qword [rcx + 1]
 29517 000171E8 4883F900                        cmp rcx, 0
 29518 000171EC 0F8CD21B0000                    jl L_error_arg_negative
 29519 000171F2 49B8-                           mov r8, sob_nil
 29519 000171F4 [0100000000000000] 
 29520                                  .L3:
 29521 000171FC 4883F900                        cmp rcx, 0
 29522 00017200 7E1D                            jle .L4
 29523 00017202 BF11000000                      mov rdi, 1 + 8 + 8
 29524 00017207 E846FFFFFF                      call malloc
 29525 0001720C C60021                          mov byte [rax], T_pair
 29526 0001720F 4C894801                        mov qword [rax + 1], r9
 29527 00017213 4C894009                        mov qword [rax + 1 + 8], r8
 29528 00017217 4989C0                          mov r8, rax
 29529 0001721A 48FFC9                          dec rcx
 29530 0001721D EBDD                            jmp .L3
 29531                                  .L4:
 29532 0001721F 4C89C0                          mov rax, r8
 29533 00017222 48837D1802                      cmp COUNT, 2
 29534 00017227 7404                            je .L5
 29535 00017229 C9                              leave
 29536 0001722A C21800                          ret AND_KILL_FRAME(1)
 29537                                  .L5:
 29538 0001722D C9                      	leave
 29539 0001722E C22000                  	ret AND_KILL_FRAME(2)
 29540                                  
 29541                                  L_code_ptr_is_primitive:
 29542 00017231 C8000000                	enter 0, 0
 29543 00017235 48837D1801              	cmp COUNT, 1
 29544 0001723A 0F85EA1B0000            	jne L_error_arg_count_1
 29545 00017240 488B4520                	mov rax, PARAM(0)
 29546                                  	assert_closure(rax)
    53 00017244 803804              <1>  cmp byte [%1], %2
    54 00017247 0F85B11C0000        <1>  jne L_error_incorrect_type
 29547 0001724D 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
 29548 00017252 750C                    	jne .L_false
 29549 00017254 48B8-                   	mov rax, sob_boolean_true
 29549 00017256 [0300000000000000] 
 29550 0001725E EB0A                    	jmp .L_end
 29551                                  .L_false:
 29552 00017260 48B8-                   	mov rax, sob_boolean_false
 29552 00017262 [0200000000000000] 
 29553                                  .L_end:
 29554 0001726A C9                      	leave
 29555 0001726B C21800                  	ret AND_KILL_FRAME(1)
 29556                                  
 29557                                  L_code_ptr_length:
 29558 0001726E C8000000                	enter 0, 0
 29559 00017272 48837D1801              	cmp COUNT, 1
 29560 00017277 0F85AD1B0000            	jne L_error_arg_count_1
 29561 0001727D 488B5D20                	mov rbx, PARAM(0)
 29562 00017281 BF00000000              	mov rdi, 0
 29563                                  .L:
 29564 00017286 803B01                  	cmp byte [rbx], T_nil
 29565 00017289 7412                    	je .L_end
 29566                                  	assert_pair(rbx)
    53 0001728B 803B21              <1>  cmp byte [%1], %2
    54 0001728E 0F856A1C0000        <1>  jne L_error_incorrect_type
 29567 00017294 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
 29568 00017298 48FFC7                  	inc rdi
 29569 0001729B EBE9                    	jmp .L
 29570                                  .L_end:
 29571 0001729D E8D71A0000              	call make_integer
 29572 000172A2 C9                      	leave
 29573 000172A3 C21800                  	ret AND_KILL_FRAME(1)
 29574                                  
 29575                                  L_code_ptr_break:
 29576 000172A6 48837C241000                    cmp qword [rsp + 8 * 2], 0
 29577 000172AC 0F85431B0000                    jne L_error_arg_count_0
 29578 000172B2 CC                              int3
 29579 000172B3 48B8-                           mov rax, sob_void
 29579 000172B5 [0000000000000000] 
 29580 000172BD C21000                          ret AND_KILL_FRAME(0)        
 29581                                  
 29582                                  L_code_ptr_frame:
 29583 000172C0 C8000000                        enter 0, 0
 29584 000172C4 48837D1800                      cmp COUNT, 0
 29585 000172C9 0F85261B0000                    jne L_error_arg_count_0
 29586                                  
 29587 000172CF 48BF-                           mov rdi, fmt_frame
 29587 000172D1 [1519000000000000] 
 29588 000172D9 488B7500                        mov rsi, qword [rbp]    ; old rbp
 29589 000172DD 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
 29590 000172E1 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
 29591 000172E5 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
 29592 000172E9 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
 29593 000172ED 6A00                            push 0
 29594 000172EF 4151                            push r9
 29595 000172F1 4150                            push r8                   ; we'll use it when printing the params
 29596 000172F3 B800000000                      mov rax, 0
 29597                                          
 29598                                          ENTER
    44 000172F8 C8000000            <1>  enter 0, 0
    45 000172FC 4883E4F0            <1>  and rsp, ~15
 29599 00017300 E8(00000000)                    call printf
 29600                                          LEAVE
    49 00017305 C9                  <1>  leave
 29601                                  
 29602                                  .L:
 29603 00017306 488B0C24                        mov rcx, qword [rsp]
 29604 0001730A 4883F900                        cmp rcx, 0
 29605 0001730E 7467                            je .L_out
 29606 00017310 48BF-                           mov rdi, fmt_frame_param_prefix
 29606 00017312 [4E19000000000000] 
 29607 0001731A 488B742410                      mov rsi, qword [rsp + 8*2]
 29608 0001731F B800000000                      mov rax, 0
 29609                                          
 29610                                          ENTER
    44 00017324 C8000000            <1>  enter 0, 0
    45 00017328 4883E4F0            <1>  and rsp, ~15
 29611 0001732C E8(00000000)                    call printf
 29612                                          LEAVE
    49 00017331 C9                  <1>  leave
 29613                                  
 29614 00017332 488B0C24                        mov rcx, qword [rsp]
 29615 00017336 48FFC9                          dec rcx
 29616 00017339 48890C24                        mov qword [rsp], rcx    ; dec arg count
 29617 0001733D 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
 29618 00017342 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
 29619 00017347 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
 29620 0001734B 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
 29621 00017350 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
 29622 00017353 E87B000000                      call print_sexpr
 29623 00017358 48BF-                           mov rdi, fmt_newline
 29623 0001735A [7A19000000000000] 
 29624 00017362 B800000000                      mov rax, 0
 29625                                          ENTER
    44 00017367 C8000000            <1>  enter 0, 0
    45 0001736B 4883E4F0            <1>  and rsp, ~15
 29626 0001736F E8(00000000)                    call printf
 29627                                          LEAVE
    49 00017374 C9                  <1>  leave
 29628 00017375 EB8F                            jmp .L
 29629                                  .L_out:
 29630 00017377 48BF-                           mov rdi, fmt_frame_continue
 29630 00017379 [5F19000000000000] 
 29631 00017381 B800000000                      mov rax, 0
 29632                                          ENTER
    44 00017386 C8000000            <1>  enter 0, 0
    45 0001738A 4883E4F0            <1>  and rsp, ~15
 29633 0001738E E8(00000000)                    call printf
 29634 00017393 E8(00000000)                    call getchar
 29635                                          LEAVE
    49 00017398 C9                  <1>  leave
 29636                                          
 29637 00017399 48B8-                           mov rax, sob_void
 29637 0001739B [0000000000000000] 
 29638 000173A3 C9                              leave
 29639 000173A4 C21000                          ret AND_KILL_FRAME(0)
 29640                                          
 29641                                  print_sexpr_if_not_void:
 29642 000173A7 4881FF[00000000]        	cmp rdi, sob_void
 29643 000173AE 7422                    	je .done
 29644 000173B0 E81E000000              	call print_sexpr
 29645 000173B5 48BF-                   	mov rdi, fmt_newline
 29645 000173B7 [7A19000000000000] 
 29646 000173BF B800000000              	mov rax, 0
 29647                                  	ENTER
    44 000173C4 C8000000            <1>  enter 0, 0
    45 000173C8 4883E4F0            <1>  and rsp, ~15
 29648 000173CC E8(00000000)            	call printf
 29649                                  	LEAVE
    49 000173D1 C9                  <1>  leave
 29650                                  .done:
 29651 000173D2 C3                      	ret
 29652                                  
 29653                                  section .data
 29654                                  fmt_frame:
 29655 00001915 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
 29655 0000191E 207265742061646472-
 29655 00001927 203D2025703B206C65-
 29655 00001930 7820656E76203D2025-
 29655 00001939 703B20706172616D20-
 29655 00001942 636F756E74203D2025-
 29655 0000194B 640A00             
 29656                                  fmt_frame_param_prefix:
 29657 0000194E 3D3D5B706172616D20-             db `==[param %d]==> \0`
 29657 00001957 25645D3D3D3E2000   
 29658                                  fmt_frame_continue:
 29659 0000195F 486974203C456E7465-             db `Hit <Enter> to continue...\0`
 29659 00001968 723E20746F20636F6E-
 29659 00001971 74696E75652E2E2E00 
 29660                                  fmt_newline:
 29661 0000197A 0A00                    	db `\n\0`
 29662                                  fmt_void:
 29663 0000197C 233C766F69643E00        	db `#<void>\0`
 29664                                  fmt_nil:
 29665 00001984 282900                  	db `()\0`
 29666                                  fmt_boolean_false:
 29667 00001987 236600                  	db `#f\0`
 29668                                  fmt_boolean_true:
 29669 0000198A 237400                  	db `#t\0`
 29670                                  fmt_char_backslash:
 29671 0000198D 235C5C00                	db `#\\\\\0`
 29672                                  fmt_char_dquote:
 29673 00001991 235C2200                	db `#\\"\0`
 29674                                  fmt_char_simple:
 29675 00001995 235C256300              	db `#\\%c\0`
 29676                                  fmt_char_null:
 29677 0000199A 235C6E756C00            	db `#\\nul\0`
 29678                                  fmt_char_bell:
 29679 000019A0 235C62656C6C00          	db `#\\bell\0`
 29680                                  fmt_char_backspace:
 29681 000019A7 235C6261636B737061-     	db `#\\backspace\0`
 29681 000019B0 636500             
 29682                                  fmt_char_tab:
 29683 000019B3 235C74616200            	db `#\\tab\0`
 29684                                  fmt_char_newline:
 29685 000019B9 235C6E65776C696E65-     	db `#\\newline\0`
 29685 000019C2 00                 
 29686                                  fmt_char_formfeed:
 29687 000019C3 235C7061676500          	db `#\\page\0`
 29688                                  fmt_char_return:
 29689 000019CA 235C72657475726E00      	db `#\\return\0`
 29690                                  fmt_char_escape:
 29691 000019D3 235C65736300            	db `#\\esc\0`
 29692                                  fmt_char_space:
 29693 000019D9 235C737061636500        	db `#\\space\0`
 29694                                  fmt_char_hex:
 29695 000019E1 235C782530325800        	db `#\\x%02X\0`
 29696                                  fmt_gensym:
 29697 000019E9 47256C6400                      db `G%ld\0`
 29698                                  fmt_closure:
 29699 000019EE 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
 29699 000019F7 206174203078253038-
 29699 00001A00 5820656E763D307825-
 29699 00001A09 30385820636F64653D-
 29699 00001A12 3078253038583E00   
 29700                                  fmt_lparen:
 29701 00001A1A 2800                    	db `(\0`
 29702                                  fmt_dotted_pair:
 29703 00001A1C 202E2000                	db ` . \0`
 29704                                  fmt_rparen:
 29705 00001A20 2900                    	db `)\0`
 29706                                  fmt_space:
 29707 00001A22 2000                    	db ` \0`
 29708                                  fmt_empty_vector:
 29709 00001A24 23282900                	db `#()\0`
 29710                                  fmt_vector:
 29711 00001A28 232800                  	db `#(\0`
 29712                                  fmt_real:
 29713 00001A2B 256600                  	db `%f\0`
 29714                                  fmt_fraction:
 29715 00001A2E 256C642F256C6400        	db `%ld/%ld\0`
 29716                                  fmt_zero:
 29717 00001A36 3000                    	db `0\0`
 29718                                  fmt_int:
 29719 00001A38 256C6400                	db `%ld\0`
 29720                                  fmt_unknown_scheme_object_error:
 29721 00001A3C 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
 29721 00001A45 6F723A20556E6B6E6F-
 29721 00001A4E 776E20536368656D65-
 29721 00001A57 2D6F626A6563742028-
 29721 00001A60 525454492030782530-
 29721 00001A69 32582920           
 29722 00001A6D 617420616464726573-     	db `at address 0x%08X\n\n\0`
 29722 00001A76 73203078253038580A-
 29722 00001A7F 0A00               
 29723                                  fmt_dquote:
 29724 00001A81 2200                    	db `\"\0`
 29725                                  fmt_string_char:
 29726 00001A83 256300                          db `%c\0`
 29727                                  fmt_string_char_7:
 29728 00001A86 5C6100                          db `\\a\0`
 29729                                  fmt_string_char_8:
 29730 00001A89 5C6200                          db `\\b\0`
 29731                                  fmt_string_char_9:
 29732 00001A8C 5C7400                          db `\\t\0`
 29733                                  fmt_string_char_10:
 29734 00001A8F 5C6E00                          db `\\n\0`
 29735                                  fmt_string_char_11:
 29736 00001A92 5C7600                          db `\\v\0`
 29737                                  fmt_string_char_12:
 29738 00001A95 5C6600                          db `\\f\0`
 29739                                  fmt_string_char_13:
 29740 00001A98 5C7200                          db `\\r\0`
 29741                                  fmt_string_char_34:
 29742 00001A9B 5C2200                          db `\\"\0`
 29743                                  fmt_string_char_92:
 29744 00001A9E 5C5C00                          db `\\\\\0`
 29745                                  fmt_string_char_hex:
 29746 00001AA1 5C7825583B00                    db `\\x%X;\0`
 29747                                  
 29748                                  section .text
 29749                                  
 29750                                  print_sexpr:
 29751 000173D3 C8000000                	enter 0, 0
 29752 000173D7 8A07                    	mov al, byte [rdi]
 29753 000173D9 3C00                    	cmp al, T_void
 29754 000173DB 7465                    	je .Lvoid
 29755 000173DD 3C01                    	cmp al, T_nil
 29756 000173DF 7470                    	je .Lnil
 29757 000173E1 3C09                    	cmp al, T_boolean_false
 29758 000173E3 747B                    	je .Lboolean_false
 29759 000173E5 3C0A                    	cmp al, T_boolean_true
 29760 000173E7 0F8482000000            	je .Lboolean_true
 29761 000173ED 3C02                    	cmp al, T_char
 29762 000173EF 0F8489000000            	je .Lchar
 29763 000173F5 3C41                    	cmp al, T_interned_symbol
 29764 000173F7 0F84CB010000            	je .Linterned_symbol
 29765 000173FD 3C42                            cmp al, T_uninterned_symbol
 29766 000173FF 0F84EF010000                    je .Luninterned_symbol
 29767 00017405 3C21                    	cmp al, T_pair
 29768 00017407 0F84FA010000            	je .Lpair
 29769 0001740D 3C22                    	cmp al, T_vector
 29770 0001740F 0F84C3020000            	je .Lvector
 29771 00017415 3C04                    	cmp al, T_closure
 29772 00017417 0F8491010000            	je .Lclosure
 29773 0001741D 3C13                    	cmp al, T_real
 29774 0001741F 0F8454030000            	je .Lreal
 29775 00017425 3C12                    	cmp al, T_fraction
 29776 00017427 0F847A030000            	je .Lfraction
 29777 0001742D 3C11                    	cmp al, T_integer
 29778 0001742F 0F84B3030000            	je .Linteger
 29779 00017435 3C03                    	cmp al, T_string
 29780 00017437 0F84BE030000            	je .Lstring
 29781                                  
 29782 0001743D E9F6040000              	jmp .Lunknown_sexpr_type
 29783                                  
 29784                                  .Lvoid:
 29785 00017442 48BF-                   	mov rdi, fmt_void
 29785 00017444 [7C19000000000000] 
 29786 0001744C E91A050000              	jmp .Lemit
 29787                                  
 29788                                  .Lnil:
 29789 00017451 48BF-                   	mov rdi, fmt_nil
 29789 00017453 [8419000000000000] 
 29790 0001745B E90B050000              	jmp .Lemit
 29791                                  
 29792                                  .Lboolean_false:
 29793 00017460 48BF-                   	mov rdi, fmt_boolean_false
 29793 00017462 [8719000000000000] 
 29794 0001746A E9FC040000              	jmp .Lemit
 29795                                  
 29796                                  .Lboolean_true:
 29797 0001746F 48BF-                   	mov rdi, fmt_boolean_true
 29797 00017471 [8A19000000000000] 
 29798 00017479 E9ED040000              	jmp .Lemit
 29799                                  
 29800                                  .Lchar:
 29801 0001747E 8A4701                  	mov al, byte [rdi + 1]
 29802 00017481 3C20                    	cmp al, ' '
 29803 00017483 7E28                    	jle .Lchar_whitespace
 29804 00017485 3C5C                    	cmp al, 92 		; backslash
 29805 00017487 0F847C000000            	je .Lchar_backslash
 29806 0001748D 3C22                    	cmp al, '"'
 29807 0001748F 0F8483000000            	je .Lchar_dquote
 29808 00017495 4825FF000000            	and rax, 255
 29809 0001749B 48BF-                   	mov rdi, fmt_char_simple
 29809 0001749D [9519000000000000] 
 29810 000174A5 4889C6                  	mov rsi, rax
 29811 000174A8 E9BE040000              	jmp .Lemit
 29812                                  
 29813                                  .Lchar_whitespace:
 29814 000174AD 3C00                    	cmp al, 0
 29815 000174AF 7476                    	je .Lchar_null
 29816 000174B1 3C07                    	cmp al, 7
 29817 000174B3 0F847D000000            	je .Lchar_bell
 29818 000174B9 3C08                    	cmp al, 8
 29819 000174BB 0F8484000000            	je .Lchar_backspace
 29820 000174C1 3C09                    	cmp al, 9
 29821 000174C3 0F848B000000            	je .Lchar_tab
 29822 000174C9 3C0A                    	cmp al, 10
 29823 000174CB 0F8492000000            	je .Lchar_newline
 29824 000174D1 3C0C                    	cmp al, 12
 29825 000174D3 0F8499000000            	je .Lchar_formfeed
 29826 000174D9 3C0D                    	cmp al, 13
 29827 000174DB 0F84A0000000            	je .Lchar_return
 29828 000174E1 3C1B                    	cmp al, 27
 29829 000174E3 0F84A7000000            	je .Lchar_escape
 29830 000174E9 4825FF000000            	and rax, 255
 29831 000174EF 3C20                    	cmp al, ' '
 29832 000174F1 0F84A8000000            	je .Lchar_space
 29833 000174F7 48BF-                   	mov rdi, fmt_char_hex
 29833 000174F9 [E119000000000000] 
 29834 00017501 4889C6                  	mov rsi, rax
 29835 00017504 E962040000              	jmp .Lemit	
 29836                                  
 29837                                  .Lchar_backslash:
 29838 00017509 48BF-                   	mov rdi, fmt_char_backslash
 29838 0001750B [8D19000000000000] 
 29839 00017513 E953040000              	jmp .Lemit
 29840                                  
 29841                                  .Lchar_dquote:
 29842 00017518 48BF-                   	mov rdi, fmt_char_dquote
 29842 0001751A [9119000000000000] 
 29843 00017522 E944040000              	jmp .Lemit
 29844                                  
 29845                                  .Lchar_null:
 29846 00017527 48BF-                   	mov rdi, fmt_char_null
 29846 00017529 [9A19000000000000] 
 29847 00017531 E935040000              	jmp .Lemit
 29848                                  
 29849                                  .Lchar_bell:
 29850 00017536 48BF-                   	mov rdi, fmt_char_bell
 29850 00017538 [A019000000000000] 
 29851 00017540 E926040000              	jmp .Lemit
 29852                                  
 29853                                  .Lchar_backspace:
 29854 00017545 48BF-                   	mov rdi, fmt_char_backspace
 29854 00017547 [A719000000000000] 
 29855 0001754F E917040000              	jmp .Lemit
 29856                                  
 29857                                  .Lchar_tab:
 29858 00017554 48BF-                   	mov rdi, fmt_char_tab
 29858 00017556 [B319000000000000] 
 29859 0001755E E908040000              	jmp .Lemit
 29860                                  
 29861                                  .Lchar_newline:
 29862 00017563 48BF-                   	mov rdi, fmt_char_newline
 29862 00017565 [B919000000000000] 
 29863 0001756D E9F9030000              	jmp .Lemit
 29864                                  
 29865                                  .Lchar_formfeed:
 29866 00017572 48BF-                   	mov rdi, fmt_char_formfeed
 29866 00017574 [C319000000000000] 
 29867 0001757C E9EA030000              	jmp .Lemit
 29868                                  
 29869                                  .Lchar_return:
 29870 00017581 48BF-                   	mov rdi, fmt_char_return
 29870 00017583 [CA19000000000000] 
 29871 0001758B E9DB030000              	jmp .Lemit
 29872                                  
 29873                                  .Lchar_escape:
 29874 00017590 48BF-                   	mov rdi, fmt_char_escape
 29874 00017592 [D319000000000000] 
 29875 0001759A E9CC030000              	jmp .Lemit
 29876                                  
 29877                                  .Lchar_space:
 29878 0001759F 48BF-                   	mov rdi, fmt_char_space
 29878 000175A1 [D919000000000000] 
 29879 000175A9 E9BD030000              	jmp .Lemit
 29880                                  
 29881                                  .Lclosure:
 29882 000175AE 4889FE                  	mov rsi, qword rdi
 29883 000175B1 48BF-                   	mov rdi, fmt_closure
 29883 000175B3 [EE19000000000000] 
 29884 000175BB 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
 29885 000175BF 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
 29886 000175C3 E9A3030000              	jmp .Lemit
 29887                                  
 29888                                  .Linterned_symbol:
 29889 000175C8 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
 29890 000175CC BE01000000              	mov rsi, 1		 ; size = 1 byte
 29891 000175D1 488B5701                	mov rdx, qword [rdi + 1] ; length
 29892 000175D5 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
 29893 000175D9 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
 29894                                  	ENTER
    44 000175E1 C8000000            <1>  enter 0, 0
    45 000175E5 4883E4F0            <1>  and rsp, ~15
 29895 000175E9 E8(00000000)            	call fwrite
 29896                                  	LEAVE
    49 000175EE C9                  <1>  leave
 29897 000175EF E98C030000              	jmp .Lend
 29898                                  
 29899                                  .Luninterned_symbol:
 29900 000175F4 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
 29901 000175F8 48BF-                           mov rdi, fmt_gensym
 29901 000175FA [E919000000000000] 
 29902 00017602 E964030000                      jmp .Lemit
 29903                                  	
 29904                                  .Lpair:
 29905 00017607 57                      	push rdi
 29906 00017608 48BF-                   	mov rdi, fmt_lparen
 29906 0001760A [1A1A000000000000] 
 29907 00017612 B800000000              	mov rax, 0
 29908                                          ENTER
    44 00017617 C8000000            <1>  enter 0, 0
    45 0001761B 4883E4F0            <1>  and rsp, ~15
 29909 0001761F E8(00000000)            	call printf
 29910                                          LEAVE
    49 00017624 C9                  <1>  leave
 29911 00017625 488B3C24                	mov rdi, qword [rsp] 	; pair
 29912 00017629 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 29913 0001762D E8A1FDFFFF              	call print_sexpr
 29914 00017632 5F                      	pop rdi 		; pair
 29915 00017633 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 29916                                  .Lcdr:
 29917 00017637 8A07                    	mov al, byte [rdi]
 29918 00017639 3C01                    	cmp al, T_nil
 29919 0001763B 7447                    	je .Lcdr_nil
 29920 0001763D 3C21                    	cmp al, T_pair
 29921 0001763F 7462                    	je .Lcdr_pair
 29922 00017641 57                      	push rdi
 29923 00017642 48BF-                   	mov rdi, fmt_dotted_pair
 29923 00017644 [1C1A000000000000] 
 29924 0001764C B800000000              	mov rax, 0
 29925                                          ENTER
    44 00017651 C8000000            <1>  enter 0, 0
    45 00017655 4883E4F0            <1>  and rsp, ~15
 29926 00017659 E8(00000000)            	call printf
 29927                                          LEAVE
    49 0001765E C9                  <1>  leave
 29928 0001765F 5F                      	pop rdi
 29929 00017660 E86EFDFFFF              	call print_sexpr
 29930 00017665 48BF-                   	mov rdi, fmt_rparen
 29930 00017667 [201A000000000000] 
 29931 0001766F B800000000              	mov rax, 0
 29932                                          ENTER
    44 00017674 C8000000            <1>  enter 0, 0
    45 00017678 4883E4F0            <1>  and rsp, ~15
 29933 0001767C E8(00000000)            	call printf
 29934                                          LEAVE
    49 00017681 C9                  <1>  leave
 29935 00017682 C9                      	leave
 29936 00017683 C3                      	ret
 29937                                  
 29938                                  .Lcdr_nil:
 29939 00017684 48BF-                   	mov rdi, fmt_rparen
 29939 00017686 [201A000000000000] 
 29940 0001768E B800000000              	mov rax, 0
 29941                                          ENTER
    44 00017693 C8000000            <1>  enter 0, 0
    45 00017697 4883E4F0            <1>  and rsp, ~15
 29942 0001769B E8(00000000)            	call printf
 29943                                          LEAVE
    49 000176A0 C9                  <1>  leave
 29944 000176A1 C9                      	leave
 29945 000176A2 C3                      	ret
 29946                                  
 29947                                  .Lcdr_pair:
 29948 000176A3 57                      	push rdi
 29949 000176A4 48BF-                   	mov rdi, fmt_space
 29949 000176A6 [221A000000000000] 
 29950 000176AE B800000000              	mov rax, 0
 29951                                          ENTER
    44 000176B3 C8000000            <1>  enter 0, 0
    45 000176B7 4883E4F0            <1>  and rsp, ~15
 29952 000176BB E8(00000000)            	call printf
 29953                                          LEAVE
    49 000176C0 C9                  <1>  leave
 29954 000176C1 488B3C24                	mov rdi, qword [rsp]
 29955 000176C5 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 29956 000176C9 E805FDFFFF              	call print_sexpr
 29957 000176CE 5F                      	pop rdi
 29958 000176CF 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 29959 000176D3 E95FFFFFFF              	jmp .Lcdr
 29960                                  
 29961                                  .Lvector:
 29962 000176D8 488B4701                	mov rax, qword [rdi + 1] ; length
 29963 000176DC 4883F800                	cmp rax, 0
 29964 000176E0 0F8484000000            	je .Lvector_empty
 29965 000176E6 57                      	push rdi
 29966 000176E7 48BF-                   	mov rdi, fmt_vector
 29966 000176E9 [281A000000000000] 
 29967 000176F1 B800000000              	mov rax, 0
 29968                                          ENTER
    44 000176F6 C8000000            <1>  enter 0, 0
    45 000176FA 4883E4F0            <1>  and rsp, ~15
 29969 000176FE E8(00000000)            	call printf
 29970                                          LEAVE
    49 00017703 C9                  <1>  leave
 29971 00017704 488B3C24                	mov rdi, qword [rsp]
 29972 00017708 FF7701                  	push qword [rdi + 1]
 29973 0001770B 6A01                    	push 1
 29974 0001770D 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
 29975 00017711 E8BDFCFFFF              	call print_sexpr
 29976                                  .Lvector_loop:
 29977                                  	; [rsp] index
 29978                                  	; [rsp + 8*1] limit
 29979                                  	; [rsp + 8*2] vector
 29980 00017716 488B0424                	mov rax, qword [rsp]
 29981 0001771A 483B442408              	cmp rax, qword [rsp + 8*1]
 29982 0001771F 7436                    	je .Lvector_end
 29983 00017721 48BF-                   	mov rdi, fmt_space
 29983 00017723 [221A000000000000] 
 29984 0001772B B800000000              	mov rax, 0
 29985                                          ENTER
    44 00017730 C8000000            <1>  enter 0, 0
    45 00017734 4883E4F0            <1>  and rsp, ~15
 29986 00017738 E8(00000000)            	call printf
 29987                                          LEAVE
    49 0001773D C9                  <1>  leave
 29988 0001773E 488B0424                	mov rax, qword [rsp]
 29989 00017742 488B5C2410              	mov rbx, qword [rsp + 8*2]
 29990 00017747 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
 29991 0001774C E882FCFFFF              	call print_sexpr
 29992 00017751 48FF0424                	inc qword [rsp]
 29993 00017755 EBBF                    	jmp .Lvector_loop
 29994                                  
 29995                                  .Lvector_end:
 29996 00017757 4883C418                	add rsp, 8*3
 29997 0001775B 48BF-                   	mov rdi, fmt_rparen
 29997 0001775D [201A000000000000] 
 29998 00017765 E901020000              	jmp .Lemit	
 29999                                  
 30000                                  .Lvector_empty:
 30001 0001776A 48BF-                   	mov rdi, fmt_empty_vector
 30001 0001776C [241A000000000000] 
 30002 00017774 E9F2010000              	jmp .Lemit
 30003                                  
 30004                                  .Lreal:
 30005 00017779 FF7701                  	push qword [rdi + 1]
 30006 0001777C F20F100424              	movsd xmm0, qword [rsp]
 30007 00017781 4883C408                	add rsp, 8*1
 30008 00017785 48BF-                   	mov rdi, fmt_real
 30008 00017787 [2B1A000000000000] 
 30009 0001778F B801000000              	mov rax, 1
 30010                                  	ENTER
    44 00017794 C8000000            <1>  enter 0, 0
    45 00017798 4883E4F0            <1>  and rsp, ~15
 30011 0001779C E8(00000000)            	call printf
 30012                                  	LEAVE
    49 000177A1 C9                  <1>  leave
 30013 000177A2 E9D9010000              	jmp .Lend
 30014                                  
 30015                                  .Lfraction:
 30016 000177A7 488B7701                	mov rsi, qword [rdi + 1]
 30017 000177AB 488B5709                	mov rdx, qword [rdi + 1 + 8]
 30018 000177AF 4883FE00                	cmp rsi, 0
 30019 000177B3 7415                    	je .Lrat_zero
 30020 000177B5 4883FA01                	cmp rdx, 1
 30021 000177B9 741E                    	je .Lrat_int
 30022 000177BB 48BF-                   	mov rdi, fmt_fraction
 30022 000177BD [2E1A000000000000] 
 30023 000177C5 E9A1010000              	jmp .Lemit
 30024                                  
 30025                                  .Lrat_zero:
 30026 000177CA 48BF-                   	mov rdi, fmt_zero
 30026 000177CC [361A000000000000] 
 30027 000177D4 E992010000              	jmp .Lemit
 30028                                  
 30029                                  .Lrat_int:
 30030 000177D9 48BF-                   	mov rdi, fmt_int
 30030 000177DB [381A000000000000] 
 30031 000177E3 E983010000              	jmp .Lemit
 30032                                  
 30033                                  .Linteger:
 30034 000177E8 488B7701                	mov rsi, qword [rdi + 1]
 30035 000177EC 48BF-                   	mov rdi, fmt_int
 30035 000177EE [381A000000000000] 
 30036 000177F6 E970010000              	jmp .Lemit
 30037                                  
 30038                                  .Lstring:
 30039 000177FB 488D4709                	lea rax, [rdi + 1 + 8]
 30040 000177FF 50                      	push rax
 30041 00017800 FF7701                  	push qword [rdi + 1]
 30042 00017803 48BF-                   	mov rdi, fmt_dquote
 30042 00017805 [811A000000000000] 
 30043 0001780D B800000000              	mov rax, 0
 30044                                  	ENTER
    44 00017812 C8000000            <1>  enter 0, 0
    45 00017816 4883E4F0            <1>  and rsp, ~15
 30045 0001781A E8(00000000)            	call printf
 30046                                  	LEAVE
    49 0001781F C9                  <1>  leave
 30047                                  .Lstring_loop:
 30048                                  	; qword [rsp]: limit
 30049                                  	; qword [rsp + 8*1]: char *
 30050 00017820 48833C2400              	cmp qword [rsp], 0
 30051 00017825 0F84FD000000            	je .Lstring_end
 30052 0001782B 488B442408              	mov rax, qword [rsp + 8*1]
 30053 00017830 8A00                    	mov al, byte [rax]
 30054 00017832 4825FF000000            	and rax, 255
 30055 00017838 3C07                    	cmp al, 7
 30056 0001783A 7468                            je .Lstring_char_7
 30057 0001783C 3C08                            cmp al, 8
 30058 0001783E 7470                            je .Lstring_char_8
 30059 00017840 3C09                            cmp al, 9
 30060 00017842 7478                            je .Lstring_char_9
 30061 00017844 3C0A                            cmp al, 10
 30062 00017846 0F847C000000                    je .Lstring_char_10
 30063 0001784C 3C0B                            cmp al, 11
 30064 0001784E 0F8480000000                    je .Lstring_char_11
 30065 00017854 3C0C                            cmp al, 12
 30066 00017856 0F8484000000                    je .Lstring_char_12
 30067 0001785C 3C0D                            cmp al, 13
 30068 0001785E 0F8488000000                    je .Lstring_char_13
 30069 00017864 3C22                            cmp al, 34
 30070 00017866 0F848C000000                    je .Lstring_char_34
 30071 0001786C 3C5C                            cmp al, 92              ;         je .Lstring_char_92
 30073 0001786E 3C20                            cmp al, ' '
 30074 00017870 0F8CA0000000                    jl .Lstring_char_hex
 30075 00017876 48BF-                           mov rdi, fmt_string_char
 30075 00017878 [831A000000000000] 
 30076 00017880 4889C6                          mov rsi, rax
 30077                                  .Lstring_char_emit:
 30078 00017883 B800000000                      mov rax, 0
 30079                                          ENTER
    44 00017888 C8000000            <1>  enter 0, 0
    45 0001788C 4883E4F0            <1>  and rsp, ~15
 30080 00017890 E8(00000000)                    call printf
 30081                                          LEAVE
    49 00017895 C9                  <1>  leave
 30082 00017896 48FF0C24                        dec qword [rsp]
 30083 0001789A 48FF442408                      inc qword [rsp + 8*1]
 30084 0001789F E97CFFFFFF                      jmp .Lstring_loop
 30085                                  
 30086                                  .Lstring_char_7:
 30087 000178A4 48BF-                           mov rdi, fmt_string_char_7
 30087 000178A6 [861A000000000000] 
 30088 000178AE EBD3                            jmp .Lstring_char_emit
 30089                                  
 30090                                  .Lstring_char_8:
 30091 000178B0 48BF-                           mov rdi, fmt_string_char_8
 30091 000178B2 [891A000000000000] 
 30092 000178BA EBC7                            jmp .Lstring_char_emit
 30093                                          
 30094                                  .Lstring_char_9:
 30095 000178BC 48BF-                           mov rdi, fmt_string_char_9
 30095 000178BE [8C1A000000000000] 
 30096 000178C6 EBBB                            jmp .Lstring_char_emit
 30097                                  
 30098                                  .Lstring_char_10:
 30099 000178C8 48BF-                           mov rdi, fmt_string_char_10
 30099 000178CA [8F1A000000000000] 
 30100 000178D2 EBAF                            jmp .Lstring_char_emit
 30101                                  
 30102                                  .Lstring_char_11:
 30103 000178D4 48BF-                           mov rdi, fmt_string_char_11
 30103 000178D6 [921A000000000000] 
 30104 000178DE EBA3                            jmp .Lstring_char_emit
 30105                                  
 30106                                  .Lstring_char_12:
 30107 000178E0 48BF-                           mov rdi, fmt_string_char_12
 30107 000178E2 [951A000000000000] 
 30108 000178EA EB97                            jmp .Lstring_char_emit
 30109                                  
 30110                                  .Lstring_char_13:
 30111 000178EC 48BF-                           mov rdi, fmt_string_char_13
 30111 000178EE [981A000000000000] 
 30112 000178F6 EB8B                            jmp .Lstring_char_emit
 30113                                  
 30114                                  .Lstring_char_34:
 30115 000178F8 48BF-                           mov rdi, fmt_string_char_34
 30115 000178FA [9B1A000000000000] 
 30116 00017902 E97CFFFFFF                      jmp .Lstring_char_emit
 30117                                  
 30118                                  .Lstring_char_92:
 30119 00017907 48BF-                           mov rdi, fmt_string_char_92
 30119 00017909 [9E1A000000000000] 
 30120 00017911 E96DFFFFFF                      jmp .Lstring_char_emit
 30121                                  
 30122                                  .Lstring_char_hex:
 30123 00017916 48BF-                           mov rdi, fmt_string_char_hex
 30123 00017918 [A11A000000000000] 
 30124 00017920 4889C6                          mov rsi, rax
 30125 00017923 E95BFFFFFF                      jmp .Lstring_char_emit        
 30126                                  
 30127                                  .Lstring_end:
 30128 00017928 4883C410                	add rsp, 8 * 2
 30129 0001792C 48BF-                   	mov rdi, fmt_dquote
 30129 0001792E [811A000000000000] 
 30130 00017936 EB33                    	jmp .Lemit
 30131                                  
 30132                                  .Lunknown_sexpr_type:
 30133 00017938 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
 30133 0001793A [3C1A000000000000] 
 30134 00017942 4825FF000000            	and rax, 255
 30135 00017948 4889C2                  	mov rdx, rax
 30136 0001794B 4889F9                  	mov rcx, rdi
 30137 0001794E 488B3C25[00000000]      	mov rdi, qword [stderr]
 30138 00017956 B800000000              	mov rax, 0
 30139                                          ENTER
    44 0001795B C8000000            <1>  enter 0, 0
    45 0001795F 4883E4F0            <1>  and rsp, ~15
 30140 00017963 E8(00000000)            	call fprintf
 30141                                          LEAVE
    49 00017968 C9                  <1>  leave
 30142 00017969 C9                              leave
 30143 0001796A C3                              ret
 30144                                  
 30145                                  .Lemit:
 30146 0001796B B800000000              	mov rax, 0
 30147                                          ENTER
    44 00017970 C8000000            <1>  enter 0, 0
    45 00017974 4883E4F0            <1>  and rsp, ~15
 30148 00017978 E8(00000000)            	call printf
 30149                                          LEAVE
    49 0001797D C9                  <1>  leave
 30150 0001797E EB00                    	jmp .Lend
 30151                                  
 30152                                  .Lend:
 30153                                  	LEAVE
    49 00017980 C9                  <1>  leave
 30154 00017981 C3                      	ret
 30155                                  
 30156                                  ;;; rdi: address of free variable
 30157                                  ;;; rsi: address of code-pointer
 30158                                  bind_primitive:
 30159 00017982 C8000000                        enter 0, 0
 30160 00017986 57                              push rdi
 30161 00017987 BF11000000                      mov rdi, (1 + 8 + 8)
 30162 0001798C E8C1F7FFFF                      call malloc
 30163 00017991 5F                              pop rdi
 30164 00017992 C60004                          mov byte [rax], T_closure
 30165 00017995 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 30166 0001799D 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 30167 000179A1 488907                          mov qword [rdi], rax
 30168 000179A4 48B8-                           mov rax, sob_void
 30168 000179A6 [0000000000000000] 
 30169 000179AE C9                              leave
 30170 000179AF C3                              ret
 30171                                  
 30172                                  L_code_ptr_ash:
 30173 000179B0 C8000000                        enter 0, 0
 30174 000179B4 48837D1802                      cmp COUNT, 2
 30175 000179B9 0F85A0140000                    jne L_error_arg_count_2
 30176 000179BF 488B7D20                        mov rdi, PARAM(0)
 30177                                          assert_integer(rdi)
    53 000179C3 803F11              <1>  cmp byte [%1], %2
    54 000179C6 0F8532150000        <1>  jne L_error_incorrect_type
 30178 000179CC 488B4D28                        mov rcx, PARAM(1)
 30179                                          assert_integer(rcx)
    53 000179D0 803911              <1>  cmp byte [%1], %2
    54 000179D3 0F8525150000        <1>  jne L_error_incorrect_type
 30180 000179D9 488B7F01                        mov rdi, qword [rdi + 1]
 30181 000179DD 488B4901                        mov rcx, qword [rcx + 1]
 30182 000179E1 4883F900                        cmp rcx, 0
 30183 000179E5 7C0F                            jl .L_negative
 30184                                  .L_loop_positive:
 30185 000179E7 4883F900                        cmp rcx, 0
 30186 000179EB 741B                            je .L_exit
 30187 000179ED 48D3E7                          sal rdi, cl
 30188 000179F0 48C1E908                        shr rcx, 8
 30189 000179F4 EBF1                            jmp .L_loop_positive
 30190                                  .L_negative:
 30191 000179F6 48F7D9                          neg rcx
 30192                                  .L_loop_negative:
 30193 000179F9 4883F900                        cmp rcx, 0
 30194 000179FD 7409                            je .L_exit
 30195 000179FF 48D3FF                          sar rdi, cl
 30196 00017A02 48C1E908                        shr rcx, 8
 30197 00017A06 EBF1                            jmp .L_loop_negative
 30198                                  .L_exit:
 30199 00017A08 E86C130000                      call make_integer
 30200 00017A0D C9                              leave
 30201 00017A0E C22000                          ret AND_KILL_FRAME(2)
 30202                                  
 30203                                  L_code_ptr_logand:
 30204 00017A11 C8000000                        enter 0, 0
 30205 00017A15 48837D1802                      cmp COUNT, 2
 30206 00017A1A 0F853F140000                    jne L_error_arg_count_2
 30207 00017A20 4C8B4520                        mov r8, PARAM(0)
 30208                                          assert_integer(r8)
    53 00017A24 41803811            <1>  cmp byte [%1], %2
    54 00017A28 0F85D0140000        <1>  jne L_error_incorrect_type
 30209 00017A2E 4C8B4D28                        mov r9, PARAM(1)
 30210                                          assert_integer(r9)
    53 00017A32 41803911            <1>  cmp byte [%1], %2
    54 00017A36 0F85C2140000        <1>  jne L_error_incorrect_type
 30211 00017A3C 498B7801                        mov rdi, qword [r8 + 1]
 30212 00017A40 49237901                        and rdi, qword [r9 + 1]
 30213 00017A44 E830130000                      call make_integer
 30214 00017A49 C9                              leave
 30215 00017A4A C22000                          ret AND_KILL_FRAME(2)
 30216                                  
 30217                                  L_code_ptr_logor:
 30218 00017A4D C8000000                        enter 0, 0
 30219 00017A51 48837D1802                      cmp COUNT, 2
 30220 00017A56 0F8503140000                    jne L_error_arg_count_2
 30221 00017A5C 4C8B4520                        mov r8, PARAM(0)
 30222                                          assert_integer(r8)
    53 00017A60 41803811            <1>  cmp byte [%1], %2
    54 00017A64 0F8594140000        <1>  jne L_error_incorrect_type
 30223 00017A6A 4C8B4D28                        mov r9, PARAM(1)
 30224                                          assert_integer(r9)
    53 00017A6E 41803911            <1>  cmp byte [%1], %2
    54 00017A72 0F8586140000        <1>  jne L_error_incorrect_type
 30225 00017A78 498B7801                        mov rdi, qword [r8 + 1]
 30226 00017A7C 490B7901                        or rdi, qword [r9 + 1]
 30227 00017A80 E8F4120000                      call make_integer
 30228 00017A85 C9                              leave
 30229 00017A86 C22000                          ret AND_KILL_FRAME(2)
 30230                                  
 30231                                  L_code_ptr_logxor:
 30232 00017A89 C8000000                        enter 0, 0
 30233 00017A8D 48837D1802                      cmp COUNT, 2
 30234 00017A92 0F85C7130000                    jne L_error_arg_count_2
 30235 00017A98 4C8B4520                        mov r8, PARAM(0)
 30236                                          assert_integer(r8)
    53 00017A9C 41803811            <1>  cmp byte [%1], %2
    54 00017AA0 0F8558140000        <1>  jne L_error_incorrect_type
 30237 00017AA6 4C8B4D28                        mov r9, PARAM(1)
 30238                                          assert_integer(r9)
    53 00017AAA 41803911            <1>  cmp byte [%1], %2
    54 00017AAE 0F854A140000        <1>  jne L_error_incorrect_type
 30239 00017AB4 498B7801                        mov rdi, qword [r8 + 1]
 30240 00017AB8 49337901                        xor rdi, qword [r9 + 1]
 30241 00017ABC E8B8120000                      call make_integer
 30242                                          LEAVE
    49 00017AC1 C9                  <1>  leave
 30243 00017AC2 C22000                          ret AND_KILL_FRAME(2)
 30244                                  
 30245                                  L_code_ptr_lognot:
 30246 00017AC5 C8000000                        enter 0, 0
 30247 00017AC9 48837D1801                      cmp COUNT, 1
 30248 00017ACE 0F8556130000                    jne L_error_arg_count_1
 30249 00017AD4 4C8B4520                        mov r8, PARAM(0)
 30250                                          assert_integer(r8)
    53 00017AD8 41803811            <1>  cmp byte [%1], %2
    54 00017ADC 0F851C140000        <1>  jne L_error_incorrect_type
 30251 00017AE2 498B7801                        mov rdi, qword [r8 + 1]
 30252 00017AE6 48F7D7                          not rdi
 30253 00017AE9 E88B120000                      call make_integer
 30254 00017AEE C9                              leave
 30255 00017AEF C21800                          ret AND_KILL_FRAME(1)
 30256                                  
 30257                                  L_code_ptr_bin_apply:
 30258 00017AF2 48837C241002                    cmp qword[rsp + 8 * 2], 2
 30259 00017AF8 0F8561130000                    jne L_error_arg_count_2
 30260                                  
 30261 00017AFE 4C8B4C2418                      mov r9, qword[rsp + 8 * 3] ; put f into r9
 30262                                          assert_closure(r9) ; make sure its a closure
    53 00017B03 41803904            <1>  cmp byte [%1], %2
    54 00017B07 0F85F1130000        <1>  jne L_error_incorrect_type
 30263                                  
 30264 00017B0D 4C8B542420                      mov r10, qword[rsp + 8 * 4] ; put s into r10
 30265 00017B12 4C8B0424                        mov r8, qword[rsp] ; put ret address
 30266                                  
 30267 00017B16 4C8D642420                      lea r12, [rsp + 8 * 4] ; save top of frame address
 30268 00017B1B 4C89E7                          mov rdi, r12
 30269                                  
 30270 00017B1E B900000000                      mov rcx, 0
 30271                                  .stack_creation_loop:
 30272 00017B23 41803A01                        cmp byte[r10], T_nil
 30273 00017B27 741E                            je .end_stack_creation_loop
 30274 00017B29 41803A21                        cmp byte[r10],T_pair
 30275 00017B2D 0F85A7F5FFFF                    jne L_error_improper_list
 30276 00017B33 498B5A01                        mov rbx, SOB_PAIR_CAR(r10) ;car
 30277 00017B37 48891F                          mov qword[rdi], rbx
 30278 00017B3A 4D8B5209                        mov r10, SOB_PAIR_CDR(r10);cdr
 30279 00017B3E 48FFC1                          inc rcx
 30280 00017B41 4883EF08                        sub rdi, 8*1
 30281 00017B45 EBDC                            jmp .stack_creation_loop
 30282                                  .end_stack_creation_loop:
 30283                                  
 30284 00017B47 48890F                          mov qword[rdi], rcx ; put into the stack count of s
 30285 00017B4A 488D57F8                        lea rdx, [rdi - 8*1]; save the availabe rsp
 30286 00017B4E 4883C708                        add rdi, 8*1
 30287 00017B52 4C89E6                          mov rsi, r12 ; rsi from the top rdi from the bottom
 30288                                  .reverse_arguments:
 30289 00017B55 4839FE                          cmp rsi, rdi
 30290 00017B58 7E13                            jle .end_reverse_arguments
 30291 00017B5A 488B1E                          mov rbx, qword[rsi]
 30292 00017B5D 48871F                          xchg rbx, qword[rdi]
 30293 00017B60 48891E                          mov qword[rsi], rbx
 30294                                  
 30295 00017B63 4883EE08                        sub rsi, 8*1
 30296 00017B67 4883C708                        add rdi, 8*1
 30297 00017B6B EBE8                            jmp .reverse_arguments
 30298                                  .end_reverse_arguments:
 30299 00017B6D 498B5901                        mov rbx ,SOB_CLOSURE_ENV(r9) ;f env
 30300 00017B71 48891A                          mov qword[rdx], rbx
 30301 00017B74 4883EA08                        sub rdx, 8*1
 30302 00017B78 4C8902                          mov qword[rdx], r8
 30303 00017B7B 4889D4                          mov rsp, rdx
 30304 00017B7E 41FF6109                        jmp SOB_CLOSURE_CODE(r9)
 30305                                  
 30306                                  L_code_ptr_is_null:
 30307 00017B82 C8000000                        enter 0, 0
 30308 00017B86 48837D1801                      cmp COUNT, 1
 30309 00017B8B 0F8599120000                    jne L_error_arg_count_1
 30310 00017B91 488B4520                        mov rax, PARAM(0)
 30311 00017B95 803801                          cmp byte [rax], T_nil
 30312 00017B98 750C                            jne .L_false
 30313 00017B9A 48B8-                           mov rax, sob_boolean_true
 30313 00017B9C [0300000000000000] 
 30314 00017BA4 EB0A                            jmp .L_end
 30315                                  .L_false:
 30316 00017BA6 48B8-                           mov rax, sob_boolean_false
 30316 00017BA8 [0200000000000000] 
 30317                                  .L_end:
 30318 00017BB0 C9                              leave
 30319 00017BB1 C21800                          ret AND_KILL_FRAME(1)
 30320                                  
 30321                                  L_code_ptr_is_pair:
 30322 00017BB4 C8000000                        enter 0, 0
 30323 00017BB8 48837D1801                      cmp COUNT, 1
 30324 00017BBD 0F8567120000                    jne L_error_arg_count_1
 30325 00017BC3 488B4520                        mov rax, PARAM(0)
 30326 00017BC7 803821                          cmp byte [rax], T_pair
 30327 00017BCA 750C                            jne .L_false
 30328 00017BCC 48B8-                           mov rax, sob_boolean_true
 30328 00017BCE [0300000000000000] 
 30329 00017BD6 EB0A                            jmp .L_end
 30330                                  .L_false:
 30331 00017BD8 48B8-                           mov rax, sob_boolean_false
 30331 00017BDA [0200000000000000] 
 30332                                  .L_end:
 30333 00017BE2 C9                              leave
 30334 00017BE3 C21800                          ret AND_KILL_FRAME(1)
 30335                                          
 30336                                  L_code_ptr_is_void:
 30337 00017BE6 C8000000                        enter 0, 0
 30338 00017BEA 48837D1801                      cmp COUNT, 1
 30339 00017BEF 0F8535120000                    jne L_error_arg_count_1
 30340 00017BF5 488B4520                        mov rax, PARAM(0)
 30341 00017BF9 803800                          cmp byte [rax], T_void
 30342 00017BFC 750C                            jne .L_false
 30343 00017BFE 48B8-                           mov rax, sob_boolean_true
 30343 00017C00 [0300000000000000] 
 30344 00017C08 EB0A                            jmp .L_end
 30345                                  .L_false:
 30346 00017C0A 48B8-                           mov rax, sob_boolean_false
 30346 00017C0C [0200000000000000] 
 30347                                  .L_end:
 30348 00017C14 C9                              leave
 30349 00017C15 C21800                          ret AND_KILL_FRAME(1)
 30350                                  
 30351                                  L_code_ptr_is_char:
 30352 00017C18 C8000000                        enter 0, 0
 30353 00017C1C 48837D1801                      cmp COUNT, 1
 30354 00017C21 0F8503120000                    jne L_error_arg_count_1
 30355 00017C27 488B4520                        mov rax, PARAM(0)
 30356 00017C2B 803802                          cmp byte [rax], T_char
 30357 00017C2E 750C                            jne .L_false
 30358 00017C30 48B8-                           mov rax, sob_boolean_true
 30358 00017C32 [0300000000000000] 
 30359 00017C3A EB0A                            jmp .L_end
 30360                                  .L_false:
 30361 00017C3C 48B8-                           mov rax, sob_boolean_false
 30361 00017C3E [0200000000000000] 
 30362                                  .L_end:
 30363 00017C46 C9                              leave
 30364 00017C47 C21800                          ret AND_KILL_FRAME(1)
 30365                                  
 30366                                  L_code_ptr_is_string:
 30367 00017C4A C8000000                        enter 0, 0
 30368 00017C4E 48837D1801                      cmp COUNT, 1
 30369 00017C53 0F85D1110000                    jne L_error_arg_count_1
 30370 00017C59 488B4520                        mov rax, PARAM(0)
 30371 00017C5D 803803                          cmp byte [rax], T_string
 30372 00017C60 750C                            jne .L_false
 30373 00017C62 48B8-                           mov rax, sob_boolean_true
 30373 00017C64 [0300000000000000] 
 30374 00017C6C EB0A                            jmp .L_end
 30375                                  .L_false:
 30376 00017C6E 48B8-                           mov rax, sob_boolean_false
 30376 00017C70 [0200000000000000] 
 30377                                  .L_end:
 30378 00017C78 C9                              leave
 30379 00017C79 C21800                          ret AND_KILL_FRAME(1)
 30380                                  
 30381                                  L_code_ptr_is_symbol:
 30382 00017C7C C8000000                        enter 0, 0
 30383 00017C80 48837D1801                      cmp COUNT, 1
 30384 00017C85 0F859F110000                    jne L_error_arg_count_1
 30385 00017C8B 4C8B4520                        mov r8, PARAM(0)
 30386 00017C8F 41802040                        and byte [r8], T_symbol
 30387 00017C93 740C                            jz .L_false
 30388 00017C95 48B8-                           mov rax, sob_boolean_true
 30388 00017C97 [0300000000000000] 
 30389 00017C9F EB0A                            jmp .L_exit
 30390                                  .L_false:
 30391 00017CA1 48B8-                           mov rax, sob_boolean_false
 30391 00017CA3 [0200000000000000] 
 30392                                  .L_exit:
 30393 00017CAB C9                              leave
 30394 00017CAC C21800                          ret AND_KILL_FRAME(1)
 30395                                  
 30396                                  L_code_ptr_is_uninterned_symbol:
 30397 00017CAF C8000000                        enter 0, 0
 30398 00017CB3 48837D1801                      cmp COUNT, 1
 30399 00017CB8 0F856C110000                    jne L_error_arg_count_1
 30400 00017CBE 4C8B4520                        mov r8, PARAM(0)
 30401 00017CC2 41803842                        cmp byte [r8], T_uninterned_symbol
 30402 00017CC6 750C                            jne .L_false
 30403 00017CC8 48B8-                           mov rax, sob_boolean_true
 30403 00017CCA [0300000000000000] 
 30404 00017CD2 EB0A                            jmp .L_exit
 30405                                  .L_false:
 30406 00017CD4 48B8-                           mov rax, sob_boolean_false
 30406 00017CD6 [0200000000000000] 
 30407                                  .L_exit:
 30408 00017CDE C9                              leave
 30409 00017CDF C21800                          ret AND_KILL_FRAME(1)
 30410                                  
 30411                                  L_code_ptr_is_interned_symbol:
 30412 00017CE2 C8000000                        enter 0, 0
 30413 00017CE6 48837D1801                      cmp COUNT, 1
 30414 00017CEB 0F8539110000                    jne L_error_arg_count_1
 30415 00017CF1 488B4520                        mov rax, PARAM(0)
 30416 00017CF5 803841                          cmp byte [rax], T_interned_symbol
 30417 00017CF8 750C                            jne .L_false
 30418 00017CFA 48B8-                           mov rax, sob_boolean_true
 30418 00017CFC [0300000000000000] 
 30419 00017D04 EB0A                            jmp .L_end
 30420                                  .L_false:
 30421 00017D06 48B8-                           mov rax, sob_boolean_false
 30421 00017D08 [0200000000000000] 
 30422                                  .L_end:
 30423 00017D10 C9                              leave
 30424 00017D11 C21800                          ret AND_KILL_FRAME(1)
 30425                                  
 30426                                  L_code_ptr_gensym:
 30427 00017D14 C8000000                        enter 0, 0
 30428 00017D18 48837D1800                      cmp COUNT, 0
 30429 00017D1D 0F85D2100000                    jne L_error_arg_count_0
 30430 00017D23 48FF0425[A71A0000]              inc qword [gensym_count]
 30431 00017D2B BF09000000                      mov rdi, (1 + 8)
 30432 00017D30 E81DF4FFFF                      call malloc
 30433 00017D35 C60042                          mov byte [rax], T_uninterned_symbol
 30434 00017D38 488B0C25[A71A0000]              mov rcx, qword [gensym_count]
 30435 00017D40 48894801                        mov qword [rax + 1], rcx
 30436 00017D44 C9                              leave
 30437 00017D45 C21000                          ret AND_KILL_FRAME(0)
 30438                                  
 30439                                  L_code_ptr_is_vector:
 30440 00017D48 C8000000                        enter 0, 0
 30441 00017D4C 48837D1801                      cmp COUNT, 1
 30442 00017D51 0F85D3100000                    jne L_error_arg_count_1
 30443 00017D57 488B4520                        mov rax, PARAM(0)
 30444 00017D5B 803822                          cmp byte [rax], T_vector
 30445 00017D5E 750C                            jne .L_false
 30446 00017D60 48B8-                           mov rax, sob_boolean_true
 30446 00017D62 [0300000000000000] 
 30447 00017D6A EB0A                            jmp .L_end
 30448                                  .L_false:
 30449 00017D6C 48B8-                           mov rax, sob_boolean_false
 30449 00017D6E [0200000000000000] 
 30450                                  .L_end:
 30451 00017D76 C9                              leave
 30452 00017D77 C21800                          ret AND_KILL_FRAME(1)
 30453                                  
 30454                                  L_code_ptr_is_closure:
 30455 00017D7A C8000000                        enter 0, 0
 30456 00017D7E 48837D1801                      cmp COUNT, 1
 30457 00017D83 0F85A1100000                    jne L_error_arg_count_1
 30458 00017D89 488B4520                        mov rax, PARAM(0)
 30459 00017D8D 803804                          cmp byte [rax], T_closure
 30460 00017D90 750C                            jne .L_false
 30461 00017D92 48B8-                           mov rax, sob_boolean_true
 30461 00017D94 [0300000000000000] 
 30462 00017D9C EB0A                            jmp .L_end
 30463                                  .L_false:
 30464 00017D9E 48B8-                           mov rax, sob_boolean_false
 30464 00017DA0 [0200000000000000] 
 30465                                  .L_end:
 30466 00017DA8 C9                              leave
 30467 00017DA9 C21800                          ret AND_KILL_FRAME(1)
 30468                                  
 30469                                  L_code_ptr_is_real:
 30470 00017DAC C8000000                        enter 0, 0
 30471 00017DB0 48837D1801                      cmp COUNT, 1
 30472 00017DB5 0F856F100000                    jne L_error_arg_count_1
 30473 00017DBB 488B4520                        mov rax, PARAM(0)
 30474 00017DBF 803813                          cmp byte [rax], T_real
 30475 00017DC2 750C                            jne .L_false
 30476 00017DC4 48B8-                           mov rax, sob_boolean_true
 30476 00017DC6 [0300000000000000] 
 30477 00017DCE EB0A                            jmp .L_end
 30478                                  .L_false:
 30479 00017DD0 48B8-                           mov rax, sob_boolean_false
 30479 00017DD2 [0200000000000000] 
 30480                                  .L_end:
 30481 00017DDA C9                              leave
 30482 00017DDB C21800                          ret AND_KILL_FRAME(1)
 30483                                  
 30484                                  L_code_ptr_is_fraction:
 30485 00017DDE C8000000                        enter 0, 0
 30486 00017DE2 48837D1801                      cmp COUNT, 1
 30487 00017DE7 0F853D100000                    jne L_error_arg_count_1
 30488 00017DED 488B4520                        mov rax, PARAM(0)
 30489 00017DF1 803812                          cmp byte [rax], T_fraction
 30490 00017DF4 750C                            jne .L_false
 30491 00017DF6 48B8-                           mov rax, sob_boolean_true
 30491 00017DF8 [0300000000000000] 
 30492 00017E00 EB0A                            jmp .L_end
 30493                                  .L_false:
 30494 00017E02 48B8-                           mov rax, sob_boolean_false
 30494 00017E04 [0200000000000000] 
 30495                                  .L_end:
 30496 00017E0C C9                              leave
 30497 00017E0D C21800                          ret AND_KILL_FRAME(1)
 30498                                  
 30499                                  L_code_ptr_is_boolean:
 30500 00017E10 C8000000                        enter 0, 0
 30501 00017E14 48837D1801                      cmp COUNT, 1
 30502 00017E19 0F850B100000                    jne L_error_arg_count_1
 30503 00017E1F 488B4520                        mov rax, PARAM(0)
 30504 00017E23 8A18                            mov bl, byte [rax]
 30505 00017E25 80E308                          and bl, T_boolean
 30506 00017E28 740C                            je .L_false
 30507 00017E2A 48B8-                           mov rax, sob_boolean_true
 30507 00017E2C [0300000000000000] 
 30508 00017E34 EB0A                            jmp .L_end
 30509                                  .L_false:
 30510 00017E36 48B8-                           mov rax, sob_boolean_false
 30510 00017E38 [0200000000000000] 
 30511                                  .L_end:
 30512 00017E40 C9                              leave
 30513 00017E41 C21800                          ret AND_KILL_FRAME(1)
 30514                                          
 30515                                  L_code_ptr_is_boolean_false:
 30516 00017E44 C8000000                        enter 0, 0
 30517 00017E48 48837D1801                      cmp COUNT, 1
 30518 00017E4D 0F85D70F0000                    jne L_error_arg_count_1
 30519 00017E53 488B4520                        mov rax, PARAM(0)
 30520 00017E57 8A18                            mov bl, byte [rax]
 30521 00017E59 80FB09                          cmp bl, T_boolean_false
 30522 00017E5C 750C                            jne .L_false
 30523 00017E5E 48B8-                           mov rax, sob_boolean_true
 30523 00017E60 [0300000000000000] 
 30524 00017E68 EB0A                            jmp .L_end
 30525                                  .L_false:
 30526 00017E6A 48B8-                           mov rax, sob_boolean_false
 30526 00017E6C [0200000000000000] 
 30527                                  .L_end:
 30528 00017E74 C9                              leave
 30529 00017E75 C21800                          ret AND_KILL_FRAME(1)
 30530                                  
 30531                                  L_code_ptr_is_boolean_true:
 30532 00017E78 C8000000                        enter 0, 0
 30533 00017E7C 48837D1801                      cmp COUNT, 1
 30534 00017E81 0F85A30F0000                    jne L_error_arg_count_1
 30535 00017E87 488B4520                        mov rax, PARAM(0)
 30536 00017E8B 8A18                            mov bl, byte [rax]
 30537 00017E8D 80FB0A                          cmp bl, T_boolean_true
 30538 00017E90 750C                            jne .L_false
 30539 00017E92 48B8-                           mov rax, sob_boolean_true
 30539 00017E94 [0300000000000000] 
 30540 00017E9C EB0A                            jmp .L_end
 30541                                  .L_false:
 30542 00017E9E 48B8-                           mov rax, sob_boolean_false
 30542 00017EA0 [0200000000000000] 
 30543                                  .L_end:
 30544 00017EA8 C9                              leave
 30545 00017EA9 C21800                          ret AND_KILL_FRAME(1)
 30546                                  
 30547                                  L_code_ptr_is_number:
 30548 00017EAC C8000000                        enter 0, 0
 30549 00017EB0 48837D1801                      cmp COUNT, 1
 30550 00017EB5 0F856F0F0000                    jne L_error_arg_count_1
 30551 00017EBB 488B4520                        mov rax, PARAM(0)
 30552 00017EBF 8A18                            mov bl, byte [rax]
 30553 00017EC1 80E310                          and bl, T_number
 30554 00017EC4 740C                            jz .L_false
 30555 00017EC6 48B8-                           mov rax, sob_boolean_true
 30555 00017EC8 [0300000000000000] 
 30556 00017ED0 EB0A                            jmp .L_end
 30557                                  .L_false:
 30558 00017ED2 48B8-                           mov rax, sob_boolean_false
 30558 00017ED4 [0200000000000000] 
 30559                                  .L_end:
 30560 00017EDC C9                              leave
 30561 00017EDD C21800                          ret AND_KILL_FRAME(1)
 30562                                          
 30563                                  L_code_ptr_is_collection:
 30564 00017EE0 C8000000                        enter 0, 0
 30565 00017EE4 48837D1801                      cmp COUNT, 1
 30566 00017EE9 0F853B0F0000                    jne L_error_arg_count_1
 30567 00017EEF 488B4520                        mov rax, PARAM(0)
 30568 00017EF3 8A18                            mov bl, byte [rax]
 30569 00017EF5 80E320                          and bl, T_collection
 30570 00017EF8 740C                            je .L_false
 30571 00017EFA 48B8-                           mov rax, sob_boolean_true
 30571 00017EFC [0300000000000000] 
 30572 00017F04 EB0A                            jmp .L_end
 30573                                  .L_false:
 30574 00017F06 48B8-                           mov rax, sob_boolean_false
 30574 00017F08 [0200000000000000] 
 30575                                  .L_end:
 30576 00017F10 C9                              leave
 30577 00017F11 C21800                          ret AND_KILL_FRAME(1)
 30578                                  
 30579                                  L_code_ptr_cons:
 30580 00017F14 C8000000                        enter 0, 0
 30581 00017F18 48837D1802                      cmp COUNT, 2
 30582 00017F1D 0F853C0F0000                    jne L_error_arg_count_2
 30583 00017F23 BF11000000                      mov rdi, (1 + 8 + 8)
 30584 00017F28 E825F2FFFF                      call malloc
 30585 00017F2D C60021                          mov byte [rax], T_pair
 30586 00017F30 488B5D20                        mov rbx, PARAM(0)
 30587 00017F34 48895801                        mov SOB_PAIR_CAR(rax), rbx
 30588 00017F38 488B5D28                        mov rbx, PARAM(1)
 30589 00017F3C 48895809                        mov SOB_PAIR_CDR(rax), rbx
 30590 00017F40 C9                              leave
 30591 00017F41 C22000                          ret AND_KILL_FRAME(2)
 30592                                  
 30593                                  L_code_ptr_display_sexpr:
 30594 00017F44 C8000000                        enter 0, 0
 30595 00017F48 48837D1801                      cmp COUNT, 1
 30596 00017F4D 0F85D70E0000                    jne L_error_arg_count_1
 30597 00017F53 488B7D20                        mov rdi, PARAM(0)
 30598 00017F57 E877F4FFFF                      call print_sexpr
 30599 00017F5C 48B8-                           mov rax, sob_void
 30599 00017F5E [0000000000000000] 
 30600 00017F66 C9                              leave
 30601 00017F67 C21800                          ret AND_KILL_FRAME(1)
 30602                                  
 30603                                  L_code_ptr_write_char:
 30604 00017F6A C8000000                        enter 0, 0
 30605 00017F6E 48837D1801                      cmp COUNT, 1
 30606 00017F73 0F85B10E0000                    jne L_error_arg_count_1
 30607 00017F79 488B4520                        mov rax, PARAM(0)
 30608                                          assert_char(rax)
    53 00017F7D 803802              <1>  cmp byte [%1], %2
    54 00017F80 0F85780F0000        <1>  jne L_error_incorrect_type
 30609 00017F86 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 30610 00017F89 4825FF000000                    and rax, 255
 30611 00017F8F 48BF-                           mov rdi, fmt_char
 30611 00017F91 [AF1A000000000000] 
 30612 00017F99 4889C6                          mov rsi, rax
 30613 00017F9C B800000000                      mov rax, 0
 30614                                          ENTER
    44 00017FA1 C8000000            <1>  enter 0, 0
    45 00017FA5 4883E4F0            <1>  and rsp, ~15
 30615 00017FA9 E8(00000000)                    call printf
 30616                                          LEAVE
    49 00017FAE C9                  <1>  leave
 30617 00017FAF 48B8-                           mov rax, sob_void
 30617 00017FB1 [0000000000000000] 
 30618 00017FB9 C9                              leave
 30619 00017FBA C21800                          ret AND_KILL_FRAME(1)
 30620                                  
 30621                                  L_code_ptr_car:
 30622 00017FBD C8000000                        enter 0, 0
 30623 00017FC1 48837D1801                      cmp COUNT, 1
 30624 00017FC6 0F855E0E0000                    jne L_error_arg_count_1
 30625 00017FCC 488B4520                        mov rax, PARAM(0)
 30626                                          assert_pair(rax)
    53 00017FD0 803821              <1>  cmp byte [%1], %2
    54 00017FD3 0F85250F0000        <1>  jne L_error_incorrect_type
 30627 00017FD9 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 30628 00017FDD C9                              leave
 30629 00017FDE C21800                          ret AND_KILL_FRAME(1)
 30630                                          
 30631                                  L_code_ptr_cdr:
 30632 00017FE1 C8000000                        enter 0, 0
 30633 00017FE5 48837D1801                      cmp COUNT, 1
 30634 00017FEA 0F853A0E0000                    jne L_error_arg_count_1
 30635 00017FF0 488B4520                        mov rax, PARAM(0)
 30636                                          assert_pair(rax)
    53 00017FF4 803821              <1>  cmp byte [%1], %2
    54 00017FF7 0F85010F0000        <1>  jne L_error_incorrect_type
 30637 00017FFD 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 30638 00018001 C9                              leave
 30639 00018002 C21800                          ret AND_KILL_FRAME(1)
 30640                                          
 30641                                  L_code_ptr_string_length:
 30642 00018005 C8000000                        enter 0, 0
 30643 00018009 48837D1801                      cmp COUNT, 1
 30644 0001800E 0F85160E0000                    jne L_error_arg_count_1
 30645 00018014 488B4520                        mov rax, PARAM(0)
 30646                                          assert_string(rax)
    53 00018018 803803              <1>  cmp byte [%1], %2
    54 0001801B 0F85DD0E0000        <1>  jne L_error_incorrect_type
 30647 00018021 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 30648 00018025 E84F0D0000                      call make_integer
 30649 0001802A C9                              leave
 30650 0001802B C21800                          ret AND_KILL_FRAME(1)
 30651                                  
 30652                                  L_code_ptr_vector_length:
 30653 0001802E C8000000                        enter 0, 0
 30654 00018032 48837D1801                      cmp COUNT, 1
 30655 00018037 0F85ED0D0000                    jne L_error_arg_count_1
 30656 0001803D 488B4520                        mov rax, PARAM(0)
 30657                                          assert_vector(rax)
    53 00018041 803822              <1>  cmp byte [%1], %2
    54 00018044 0F85B40E0000        <1>  jne L_error_incorrect_type
 30658 0001804A 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 30659 0001804E E8260D0000                      call make_integer
 30660 00018053 C9                              leave
 30661 00018054 C21800                          ret AND_KILL_FRAME(1)
 30662                                  
 30663                                  L_code_ptr_real_to_integer:
 30664 00018057 C8000000                        enter 0, 0
 30665 0001805B 48837D1801                      cmp COUNT, 1
 30666 00018060 0F85C40D0000                    jne L_error_arg_count_1
 30667 00018066 488B5D20                        mov rbx, PARAM(0)
 30668                                          assert_real(rbx)
    53 0001806A 803B13              <1>  cmp byte [%1], %2
    54 0001806D 0F858B0E0000        <1>  jne L_error_incorrect_type
 30669 00018073 F20F104301                      movsd xmm0, qword [rbx + 1]
 30670 00018078 F2480F2CF8                      cvttsd2si rdi, xmm0
 30671 0001807D E8F70C0000                      call make_integer
 30672 00018082 C9                              leave
 30673 00018083 C21800                          ret AND_KILL_FRAME(1)
 30674                                  
 30675                                  L_code_ptr_exit:
 30676 00018086 C8000000                        enter 0, 0
 30677 0001808A 48837D1800                      cmp COUNT, 0
 30678 0001808F 0F85600D0000                    jne L_error_arg_count_0
 30679 00018095 B800000000                      mov rax, 0
 30680 0001809A E8(00000000)                    call exit
 30681                                  
 30682                                  L_code_ptr_integer_to_real:
 30683 0001809F C8000000                        enter 0, 0
 30684 000180A3 48837D1801                      cmp COUNT, 1
 30685 000180A8 0F857C0D0000                    jne L_error_arg_count_1
 30686 000180AE 488B4520                        mov rax, PARAM(0)
 30687                                          assert_integer(rax)
    53 000180B2 803811              <1>  cmp byte [%1], %2
    54 000180B5 0F85430E0000        <1>  jne L_error_incorrect_type
 30688 000180BB FF7001                          push qword [rax + 1]
 30689 000180BE F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 30690 000180C4 E8980C0000                      call make_real
 30691 000180C9 C9                              leave
 30692 000180CA C21800                          ret AND_KILL_FRAME(1)
 30693                                  
 30694                                  L_code_ptr_fraction_to_real:
 30695 000180CD C8000000                        enter 0, 0
 30696 000180D1 48837D1801                      cmp COUNT, 1
 30697 000180D6 0F854E0D0000                    jne L_error_arg_count_1
 30698 000180DC 488B4520                        mov rax, PARAM(0)
 30699                                          assert_fraction(rax)
    53 000180E0 803812              <1>  cmp byte [%1], %2
    54 000180E3 0F85150E0000        <1>  jne L_error_incorrect_type
 30700 000180E9 FF7001                          push qword [rax + 1]
 30701 000180EC F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 30702 000180F2 FF7009                          push qword [rax + 1 + 8]
 30703 000180F5 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 30704 000180FB F20F5EC1                        divsd xmm0, xmm1
 30705 000180FF E85D0C0000                      call make_real
 30706 00018104 C9                              leave
 30707 00018105 C21800                          ret AND_KILL_FRAME(1)
 30708                                  
 30709                                  L_code_ptr_char_to_integer:
 30710 00018108 C8000000                        enter 0, 0
 30711 0001810C 48837D1801                      cmp COUNT, 1
 30712 00018111 0F85130D0000                    jne L_error_arg_count_1
 30713 00018117 488B4520                        mov rax, PARAM(0)
 30714                                          assert_char(rax)
    53 0001811B 803802              <1>  cmp byte [%1], %2
    54 0001811E 0F85DA0D0000        <1>  jne L_error_incorrect_type
 30715 00018124 8A4001                          mov al, byte [rax + 1]
 30716 00018127 4825FF000000                    and rax, 255
 30717 0001812D 4889C7                          mov rdi, rax
 30718 00018130 E8440C0000                      call make_integer
 30719 00018135 C9                              leave
 30720 00018136 C21800                          ret AND_KILL_FRAME(1)
 30721                                  
 30722                                  L_code_ptr_integer_to_fraction:
 30723 00018139 C8000000                        enter 0, 0
 30724 0001813D 48837D1801                      cmp COUNT, 1
 30725 00018142 0F85E20C0000                    jne L_error_arg_count_1
 30726 00018148 4C8B4520                        mov r8, PARAM(0)
 30727                                          assert_integer(r8)
    53 0001814C 41803811            <1>  cmp byte [%1], %2
    54 00018150 0F85A80D0000        <1>  jne L_error_incorrect_type
 30728 00018156 BF11000000                      mov rdi, (1 + 8 + 8)
 30729 0001815B E8F2EFFFFF                      call malloc
 30730 00018160 498B5801                        mov rbx, qword [r8 + 1]
 30731 00018164 C60012                          mov byte [rax], T_fraction
 30732 00018167 48895801                        mov qword [rax + 1], rbx
 30733 0001816B 48C7400901000000                mov qword [rax + 1 + 8], 1
 30734 00018173 C9                              leave
 30735 00018174 C21800                          ret AND_KILL_FRAME(1)
 30736                                  
 30737                                  L_code_ptr_integer_to_char:
 30738 00018177 C8000000                        enter 0, 0
 30739 0001817B 48837D1801                      cmp COUNT, 1
 30740 00018180 0F85A40C0000                    jne L_error_arg_count_1
 30741 00018186 488B4520                        mov rax, PARAM(0)
 30742                                          assert_integer(rax)
    53 0001818A 803811              <1>  cmp byte [%1], %2
    54 0001818D 0F856B0D0000        <1>  jne L_error_incorrect_type
 30743 00018193 488B5801                        mov rbx, qword [rax + 1]
 30744 00018197 4883FB00                        cmp rbx, 0
 30745 0001819B 0F8EF20B0000                    jle L_error_integer_range
 30746 000181A1 4881FB00010000                  cmp rbx, 256
 30747 000181A8 0F8DE50B0000                    jge L_error_integer_range
 30748 000181AE BF02000000                      mov rdi, (1 + 1)
 30749 000181B3 E89AEFFFFF                      call malloc
 30750 000181B8 C60002                          mov byte [rax], T_char
 30751 000181BB 885801                          mov byte [rax + 1], bl
 30752 000181BE C9                              leave
 30753 000181BF C21800                          ret AND_KILL_FRAME(1)
 30754                                  
 30755                                  L_code_ptr_trng:
 30756 000181C2 C8000000                        enter 0, 0
 30757 000181C6 48837D1800                      cmp COUNT, 0
 30758 000181CB 0F85240C0000                    jne L_error_arg_count_0
 30759 000181D1 480FC7F7                        rdrand rdi
 30760 000181D5 48D1EF                          shr rdi, 1
 30761 000181D8 E89C0B0000                      call make_integer
 30762 000181DD C9                              leave
 30763 000181DE C21000                          ret AND_KILL_FRAME(0)
 30764                                  
 30765                                  L_code_ptr_is_zero:
 30766 000181E1 C8000000                        enter 0, 0
 30767 000181E5 48837D1801                      cmp COUNT, 1
 30768 000181EA 0F853A0C0000                    jne L_error_arg_count_1
 30769 000181F0 488B4520                        mov rax, PARAM(0)
 30770 000181F4 803811                          cmp byte [rax], T_integer
 30771 000181F7 740F                            je .L_integer
 30772 000181F9 803812                          cmp byte [rax], T_fraction
 30773 000181FC 7413                            je .L_fraction
 30774 000181FE 803813                          cmp byte [rax], T_real
 30775 00018201 7417                            je .L_real
 30776 00018203 E9F60C0000                      jmp L_error_incorrect_type
 30777                                  .L_integer:
 30778 00018208 4883780100                      cmp qword [rax + 1], 0
 30779 0001820D 7429                            je .L_zero
 30780 0001820F EB1B                            jmp .L_not_zero
 30781                                  .L_fraction:
 30782 00018211 4883780100                      cmp qword [rax + 1], 0
 30783 00018216 7420                            je .L_zero
 30784 00018218 EB12                            jmp .L_not_zero
 30785                                  .L_real:
 30786 0001821A 660FEFC0                        pxor xmm0, xmm0
 30787 0001821E FF7001                          push qword [rax + 1]
 30788 00018221 F20F100C24                      movsd xmm1, qword [rsp]
 30789 00018226 660F2EC1                        ucomisd xmm0, xmm1
 30790 0001822A 740C                            je .L_zero
 30791                                  .L_not_zero:
 30792 0001822C 48B8-                           mov rax, sob_boolean_false
 30792 0001822E [0200000000000000] 
 30793 00018236 EB0A                            jmp .L_end
 30794                                  .L_zero:
 30795 00018238 48B8-                           mov rax, sob_boolean_true
 30795 0001823A [0300000000000000] 
 30796                                  .L_end:
 30797 00018242 C9                              leave
 30798 00018243 C21800                          ret AND_KILL_FRAME(1)
 30799                                  
 30800                                  L_code_ptr_is_integer:
 30801 00018246 C8000000                        enter 0, 0
 30802 0001824A 48837D1801                      cmp COUNT, 1
 30803 0001824F 0F85D50B0000                    jne L_error_arg_count_1
 30804 00018255 488B4520                        mov rax, PARAM(0)
 30805 00018259 803811                          cmp byte [rax], T_integer
 30806 0001825C 750C                            jne .L_false
 30807 0001825E 48B8-                           mov rax, sob_boolean_true
 30807 00018260 [0300000000000000] 
 30808 00018268 EB0A                            jmp .L_exit
 30809                                  .L_false:
 30810 0001826A 48B8-                           mov rax, sob_boolean_false
 30810 0001826C [0200000000000000] 
 30811                                  .L_exit:
 30812 00018274 C9                              leave
 30813 00018275 C21800                          ret AND_KILL_FRAME(1)
 30814                                  
 30815                                  L_code_ptr_raw_bin_add_rr:
 30816 00018278 C8000000                        enter 0, 0
 30817 0001827C 48837D1802                      cmp COUNT, 2
 30818 00018281 0F85D80B0000                    jne L_error_arg_count_2
 30819 00018287 488B5D20                        mov rbx, PARAM(0)
 30820                                          assert_real(rbx)
    53 0001828B 803B13              <1>  cmp byte [%1], %2
    54 0001828E 0F856A0C0000        <1>  jne L_error_incorrect_type
 30821 00018294 488B4D28                        mov rcx, PARAM(1)
 30822                                          assert_real(rcx)
    53 00018298 803913              <1>  cmp byte [%1], %2
    54 0001829B 0F855D0C0000        <1>  jne L_error_incorrect_type
 30823 000182A1 F20F104301                      movsd xmm0, qword [rbx + 1]
 30824 000182A6 F20F104901                      movsd xmm1, qword [rcx + 1]
 30825 000182AB F20F58C1                        addsd xmm0, xmm1
 30826 000182AF E8AD0A0000                      call make_real
 30827 000182B4 C9                              leave
 30828 000182B5 C22000                          ret AND_KILL_FRAME(2)
 30829                                  
 30830                                  L_code_ptr_raw_bin_sub_rr:
 30831 000182B8 C8000000                        enter 0, 0
 30832 000182BC 48837D1802                      cmp COUNT, 2
 30833 000182C1 0F85980B0000                    jne L_error_arg_count_2
 30834 000182C7 488B5D20                        mov rbx, PARAM(0)
 30835                                          assert_real(rbx)
    53 000182CB 803B13              <1>  cmp byte [%1], %2
    54 000182CE 0F852A0C0000        <1>  jne L_error_incorrect_type
 30836 000182D4 488B4D28                        mov rcx, PARAM(1)
 30837                                          assert_real(rcx)
    53 000182D8 803913              <1>  cmp byte [%1], %2
    54 000182DB 0F851D0C0000        <1>  jne L_error_incorrect_type
 30838 000182E1 F20F104301                      movsd xmm0, qword [rbx + 1]
 30839 000182E6 F20F104901                      movsd xmm1, qword [rcx + 1]
 30840 000182EB F20F5CC1                        subsd xmm0, xmm1
 30841 000182EF E86D0A0000                      call make_real
 30842 000182F4 C9                              leave
 30843 000182F5 C22000                          ret AND_KILL_FRAME(2)
 30844                                  
 30845                                  L_code_ptr_raw_bin_mul_rr:
 30846 000182F8 C8000000                        enter 0, 0
 30847 000182FC 48837D1802                      cmp COUNT, 2
 30848 00018301 0F85580B0000                    jne L_error_arg_count_2
 30849 00018307 488B5D20                        mov rbx, PARAM(0)
 30850                                          assert_real(rbx)
    53 0001830B 803B13              <1>  cmp byte [%1], %2
    54 0001830E 0F85EA0B0000        <1>  jne L_error_incorrect_type
 30851 00018314 488B4D28                        mov rcx, PARAM(1)
 30852                                          assert_real(rcx)
    53 00018318 803913              <1>  cmp byte [%1], %2
    54 0001831B 0F85DD0B0000        <1>  jne L_error_incorrect_type
 30853 00018321 F20F104301                      movsd xmm0, qword [rbx + 1]
 30854 00018326 F20F104901                      movsd xmm1, qword [rcx + 1]
 30855 0001832B F20F59C1                        mulsd xmm0, xmm1
 30856 0001832F E82D0A0000                      call make_real
 30857 00018334 C9                              leave
 30858 00018335 C22000                          ret AND_KILL_FRAME(2)
 30859                                  
 30860                                  L_code_ptr_raw_bin_div_rr:
 30861 00018338 C8000000                        enter 0, 0
 30862 0001833C 48837D1802                      cmp COUNT, 2
 30863 00018341 0F85180B0000                    jne L_error_arg_count_2
 30864 00018347 488B5D20                        mov rbx, PARAM(0)
 30865                                          assert_real(rbx)
    53 0001834B 803B13              <1>  cmp byte [%1], %2
    54 0001834E 0F85AA0B0000        <1>  jne L_error_incorrect_type
 30866 00018354 488B4D28                        mov rcx, PARAM(1)
 30867                                          assert_real(rcx)
    53 00018358 803913              <1>  cmp byte [%1], %2
    54 0001835B 0F859D0B0000        <1>  jne L_error_incorrect_type
 30868 00018361 F20F104301                      movsd xmm0, qword [rbx + 1]
 30869 00018366 F20F104901                      movsd xmm1, qword [rcx + 1]
 30870 0001836B 660FEFD2                        pxor xmm2, xmm2
 30871 0001836F 660F2ECA                        ucomisd xmm1, xmm2
 30872 00018373 0F84B60B0000                    je L_error_division_by_zero
 30873 00018379 F20F5EC1                        divsd xmm0, xmm1
 30874 0001837D E8DF090000                      call make_real
 30875 00018382 C9                              leave
 30876 00018383 C22000                          ret AND_KILL_FRAME(2)
 30877                                  
 30878                                  L_code_ptr_raw_bin_add_zz:
 30879 00018386 C8000000                	enter 0, 0
 30880 0001838A 48837D1802              	cmp COUNT, 2
 30881 0001838F 0F85CA0A0000            	jne L_error_arg_count_2
 30882 00018395 4C8B4520                	mov r8, PARAM(0)
 30883                                  	assert_integer(r8)
    53 00018399 41803811            <1>  cmp byte [%1], %2
    54 0001839D 0F855B0B0000        <1>  jne L_error_incorrect_type
 30884 000183A3 4C8B4D28                	mov r9, PARAM(1)
 30885                                  	assert_integer(r9)
    53 000183A7 41803911            <1>  cmp byte [%1], %2
    54 000183AB 0F854D0B0000        <1>  jne L_error_incorrect_type
 30886 000183B1 498B7801                	mov rdi, qword [r8 + 1]
 30887 000183B5 49037901                	add rdi, qword [r9 + 1]
 30888 000183B9 E8BB090000              	call make_integer
 30889 000183BE C9                      	leave
 30890 000183BF C22000                  	ret AND_KILL_FRAME(2)
 30891                                  
 30892                                  L_code_ptr_raw_bin_add_qq:
 30893 000183C2 C8000000                        enter 0, 0
 30894 000183C6 48837D1802                      cmp COUNT, 2
 30895 000183CB 0F858E0A0000                    jne L_error_arg_count_2
 30896 000183D1 4C8B4520                        mov r8, PARAM(0)
 30897                                          assert_fraction(r8)
    53 000183D5 41803812            <1>  cmp byte [%1], %2
    54 000183D9 0F851F0B0000        <1>  jne L_error_incorrect_type
 30898 000183DF 4C8B4D28                        mov r9, PARAM(1)
 30899                                          assert_fraction(r9)
    53 000183E3 41803912            <1>  cmp byte [%1], %2
    54 000183E7 0F85110B0000        <1>  jne L_error_incorrect_type
 30900 000183ED 498B4001                        mov rax, qword [r8 + 1] ; num1
 30901 000183F1 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 30902 000183F5 4899                            cqo
 30903 000183F7 48F7EB                          imul rbx
 30904 000183FA 4889C6                          mov rsi, rax
 30905 000183FD 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30906 00018401 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 30907 00018405 4899                            cqo
 30908 00018407 48F7EB                          imul rbx
 30909 0001840A 4801C6                          add rsi, rax
 30910 0001840D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30911 00018411 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 30912 00018415 4899                            cqo
 30913 00018417 48F7EB                          imul rbx
 30914 0001841A 4889C7                          mov rdi, rax
 30915 0001841D E8DE010000                      call normalize_fraction
 30916 00018422 C9                              leave
 30917 00018423 C22000                          ret AND_KILL_FRAME(2)
 30918                                  
 30919                                  L_code_ptr_raw_bin_sub_zz:
 30920 00018426 C8000000                	enter 0, 0
 30921 0001842A 48837D1802              	cmp COUNT, 2
 30922 0001842F 0F852A0A0000            	jne L_error_arg_count_2
 30923 00018435 4C8B4520                	mov r8, PARAM(0)
 30924                                  	assert_integer(r8)
    53 00018439 41803811            <1>  cmp byte [%1], %2
    54 0001843D 0F85BB0A0000        <1>  jne L_error_incorrect_type
 30925 00018443 4C8B4D28                	mov r9, PARAM(1)
 30926                                  	assert_integer(r9)
    53 00018447 41803911            <1>  cmp byte [%1], %2
    54 0001844B 0F85AD0A0000        <1>  jne L_error_incorrect_type
 30927 00018451 498B7801                	mov rdi, qword [r8 + 1]
 30928 00018455 492B7901                	sub rdi, qword [r9 + 1]
 30929 00018459 E81B090000              	call make_integer
 30930 0001845E C9                      	leave
 30931 0001845F C22000                  	ret AND_KILL_FRAME(2)
 30932                                  
 30933                                  L_code_ptr_raw_bin_sub_qq:
 30934 00018462 C8000000                        enter 0, 0
 30935 00018466 48837D1802                      cmp COUNT, 2
 30936 0001846B 0F85EE090000                    jne L_error_arg_count_2
 30937 00018471 4C8B4520                        mov r8, PARAM(0)
 30938                                          assert_fraction(r8)
    53 00018475 41803812            <1>  cmp byte [%1], %2
    54 00018479 0F857F0A0000        <1>  jne L_error_incorrect_type
 30939 0001847F 4C8B4D28                        mov r9, PARAM(1)
 30940                                          assert_fraction(r9)
    53 00018483 41803912            <1>  cmp byte [%1], %2
    54 00018487 0F85710A0000        <1>  jne L_error_incorrect_type
 30941 0001848D 498B4001                        mov rax, qword [r8 + 1] ; num1
 30942 00018491 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 30943 00018495 4899                            cqo
 30944 00018497 48F7EB                          imul rbx
 30945 0001849A 4889C6                          mov rsi, rax
 30946 0001849D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30947 000184A1 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 30948 000184A5 4899                            cqo
 30949 000184A7 48F7EB                          imul rbx
 30950 000184AA 4829C6                          sub rsi, rax
 30951 000184AD 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30952 000184B1 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 30953 000184B5 4899                            cqo
 30954 000184B7 48F7EB                          imul rbx
 30955 000184BA 4889C7                          mov rdi, rax
 30956 000184BD E83E010000                      call normalize_fraction
 30957 000184C2 C9                              leave
 30958 000184C3 C22000                          ret AND_KILL_FRAME(2)
 30959                                  
 30960                                  L_code_ptr_raw_bin_mul_zz:
 30961 000184C6 C8000000                	enter 0, 0
 30962 000184CA 48837D1802              	cmp COUNT, 2
 30963 000184CF 0F858A090000            	jne L_error_arg_count_2
 30964 000184D5 4C8B4520                	mov r8, PARAM(0)
 30965                                  	assert_integer(r8)
    53 000184D9 41803811            <1>  cmp byte [%1], %2
    54 000184DD 0F851B0A0000        <1>  jne L_error_incorrect_type
 30966 000184E3 4C8B4D28                	mov r9, PARAM(1)
 30967                                  	assert_integer(r9)
    53 000184E7 41803911            <1>  cmp byte [%1], %2
    54 000184EB 0F850D0A0000        <1>  jne L_error_incorrect_type
 30968 000184F1 4899                    	cqo
 30969 000184F3 498B4001                	mov rax, qword [r8 + 1]
 30970 000184F7 49F76101                	mul qword [r9 + 1]
 30971 000184FB 4889C7                  	mov rdi, rax
 30972 000184FE E876080000              	call make_integer
 30973 00018503 C9                      	leave
 30974 00018504 C22000                  	ret AND_KILL_FRAME(2)
 30975                                  
 30976                                  L_code_ptr_raw_bin_mul_qq:
 30977 00018507 C8000000                        enter 0, 0
 30978 0001850B 48837D1802                      cmp COUNT, 2
 30979 00018510 0F8549090000                    jne L_error_arg_count_2
 30980 00018516 4C8B4520                        mov r8, PARAM(0)
 30981                                          assert_fraction(r8)
    53 0001851A 41803812            <1>  cmp byte [%1], %2
    54 0001851E 0F85DA090000        <1>  jne L_error_incorrect_type
 30982 00018524 4C8B4D28                        mov r9, PARAM(1)
 30983                                          assert_fraction(r9)
    53 00018528 41803912            <1>  cmp byte [%1], %2
    54 0001852C 0F85CC090000        <1>  jne L_error_incorrect_type
 30984 00018532 498B4001                        mov rax, qword [r8 + 1] ; num1
 30985 00018536 498B5901                        mov rbx, qword [r9 + 1] ; num2
 30986 0001853A 4899                            cqo
 30987 0001853C 48F7EB                          imul rbx
 30988 0001853F 4889C6                          mov rsi, rax
 30989 00018542 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30990 00018546 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 30991 0001854A 4899                            cqo
 30992 0001854C 48F7EB                          imul rbx
 30993 0001854F 4889C7                          mov rdi, rax
 30994 00018552 E8A9000000                      call normalize_fraction
 30995 00018557 C9                              leave
 30996 00018558 C22000                          ret AND_KILL_FRAME(2)
 30997                                          
 30998                                  L_code_ptr_raw_bin_div_zz:
 30999 0001855B C8000000                	enter 0, 0
 31000 0001855F 48837D1802              	cmp COUNT, 2
 31001 00018564 0F85F5080000            	jne L_error_arg_count_2
 31002 0001856A 4C8B4520                	mov r8, PARAM(0)
 31003                                  	assert_integer(r8)
    53 0001856E 41803811            <1>  cmp byte [%1], %2
    54 00018572 0F8586090000        <1>  jne L_error_incorrect_type
 31004 00018578 4C8B4D28                	mov r9, PARAM(1)
 31005                                  	assert_integer(r9)
    53 0001857C 41803911            <1>  cmp byte [%1], %2
    54 00018580 0F8578090000        <1>  jne L_error_incorrect_type
 31006 00018586 498B7901                	mov rdi, qword [r9 + 1]
 31007 0001858A 4883FF00                	cmp rdi, 0
 31008 0001858E 0F849B090000            	je L_error_division_by_zero
 31009 00018594 498B7001                	mov rsi, qword [r8 + 1]
 31010 00018598 E863000000              	call normalize_fraction
 31011 0001859D C9                      	leave
 31012 0001859E C22000                  	ret AND_KILL_FRAME(2)
 31013                                  
 31014                                  L_code_ptr_raw_bin_div_qq:
 31015 000185A1 C8000000                        enter 0, 0
 31016 000185A5 48837D1802                      cmp COUNT, 2
 31017 000185AA 0F85AF080000                    jne L_error_arg_count_2
 31018 000185B0 4C8B4520                        mov r8, PARAM(0)
 31019                                          assert_fraction(r8)
    53 000185B4 41803812            <1>  cmp byte [%1], %2
    54 000185B8 0F8540090000        <1>  jne L_error_incorrect_type
 31020 000185BE 4C8B4D28                        mov r9, PARAM(1)
 31021                                          assert_fraction(r9)
    53 000185C2 41803912            <1>  cmp byte [%1], %2
    54 000185C6 0F8532090000        <1>  jne L_error_incorrect_type
 31022 000185CC 4983790100                      cmp qword [r9 + 1], 0
 31023 000185D1 0F8458090000                    je L_error_division_by_zero
 31024 000185D7 498B4001                        mov rax, qword [r8 + 1] ; num1
 31025 000185DB 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 31026 000185DF 4899                            cqo
 31027 000185E1 48F7EB                          imul rbx
 31028 000185E4 4889C6                          mov rsi, rax
 31029 000185E7 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 31030 000185EB 498B5901                        mov rbx, qword [r9 + 1] ; num2
 31031 000185EF 4899                            cqo
 31032 000185F1 48F7EB                          imul rbx
 31033 000185F4 4889C7                          mov rdi, rax
 31034 000185F7 E804000000                      call normalize_fraction
 31035 000185FC C9                              leave
 31036 000185FD C22000                          ret AND_KILL_FRAME(2)
 31037                                          
 31038                                  normalize_fraction:
 31039 00018600 56                              push rsi
 31040 00018601 57                              push rdi
 31041 00018602 E859000000                      call gcd
 31042 00018607 4889C3                          mov rbx, rax
 31043 0001860A 58                              pop rax
 31044 0001860B 4899                            cqo
 31045 0001860D 48F7FB                          idiv rbx
 31046 00018610 4989C0                          mov r8, rax
 31047 00018613 58                              pop rax
 31048 00018614 4899                            cqo
 31049 00018616 48F7FB                          idiv rbx
 31050 00018619 4989C1                          mov r9, rax
 31051 0001861C 4983F900                        cmp r9, 0
 31052 00018620 741C                            je .L_zero
 31053 00018622 4983F801                        cmp r8, 1
 31054 00018626 7421                            je .L_int
 31055 00018628 BF11000000                      mov rdi, (1 + 8 + 8)
 31056 0001862D E820EBFFFF                      call malloc
 31057 00018632 C60012                          mov byte [rax], T_fraction
 31058 00018635 4C894801                        mov qword [rax + 1], r9
 31059 00018639 4C894009                        mov qword [rax + 1 + 8], r8
 31060 0001863D C3                              ret
 31061                                  .L_zero:
 31062 0001863E BF00000000                      mov rdi, 0
 31063 00018643 E831070000                      call make_integer
 31064 00018648 C3                              ret
 31065                                  .L_int:
 31066 00018649 4C89CF                          mov rdi, r9
 31067 0001864C E828070000                      call make_integer
 31068 00018651 C3                              ret
 31069                                  
 31070                                  iabs:
 31071 00018652 4889F8                          mov rax, rdi
 31072 00018655 4883F800                        cmp rax, 0
 31073 00018659 7C01                            jl .Lneg
 31074 0001865B C3                              ret
 31075                                  .Lneg:
 31076 0001865C 48F7D8                          neg rax
 31077 0001865F C3                              ret
 31078                                  
 31079                                  gcd:
 31080 00018660 E8EDFFFFFF                      call iabs
 31081 00018665 4889C3                          mov rbx, rax
 31082 00018668 4889F7                          mov rdi, rsi
 31083 0001866B E8E2FFFFFF                      call iabs
 31084 00018670 4883F800                        cmp rax, 0
 31085 00018674 7502                            jne .L0
 31086 00018676 4893                            xchg rax, rbx
 31087                                  .L0:
 31088 00018678 4883FB00                        cmp rbx, 0
 31089 0001867C 740C                            je .L1
 31090 0001867E 4899                            cqo
 31091 00018680 48F7F3                          div rbx
 31092 00018683 4889D0                          mov rax, rdx
 31093 00018686 4893                            xchg rax, rbx
 31094 00018688 EBEE                            jmp .L0
 31095                                  .L1:
 31096 0001868A C3                              ret
 31097                                  
 31098                                  L_code_ptr_error:
 31099 0001868B C8000000                        enter 0, 0
 31100 0001868F 48837D1802                      cmp COUNT, 2
 31101 00018694 0F85C5070000                    jne L_error_arg_count_2
 31102 0001869A 488B7520                        mov rsi, PARAM(0)
 31103                                          assert_interned_symbol(rsi)
    53 0001869E 803E41              <1>  cmp byte [%1], %2
    54 000186A1 0F8557080000        <1>  jne L_error_incorrect_type
 31104 000186A7 488B7528                        mov rsi, PARAM(1)
 31105                                          assert_string(rsi)
    53 000186AB 803E03              <1>  cmp byte [%1], %2
    54 000186AE 0F854A080000        <1>  jne L_error_incorrect_type
 31106 000186B4 48BF-                           mov rdi, fmt_scheme_error_part_1
 31106 000186B6 [0D1C000000000000] 
 31107 000186BE B800000000                      mov rax, 0
 31108                                          ENTER
    44 000186C3 C8000000            <1>  enter 0, 0
    45 000186C7 4883E4F0            <1>  and rsp, ~15
 31109 000186CB E8(00000000)                    call printf
 31110                                          LEAVE
    49 000186D0 C9                  <1>  leave
 31111 000186D1 488B7D20                        mov rdi, PARAM(0)
 31112 000186D5 E8F9ECFFFF                      call print_sexpr
 31113 000186DA 48BF-                           mov rdi, fmt_scheme_error_part_2
 31113 000186DC [211C000000000000] 
 31114 000186E4 B800000000                      mov rax, 0
 31115                                          ENTER
    44 000186E9 C8000000            <1>  enter 0, 0
    45 000186ED 4883E4F0            <1>  and rsp, ~15
 31116 000186F1 E8(00000000)                    call printf
 31117                                          LEAVE
    49 000186F6 C9                  <1>  leave
 31118 000186F7 488B4528                        mov rax, PARAM(1)       ; sob_string
 31119 000186FB BE01000000                      mov rsi, 1              ; size = 1 byte
 31120 00018700 488B5001                        mov rdx, qword [rax + 1] ; length
 31121 00018704 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 31122 00018708 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 31123                                  	ENTER
    44 00018710 C8000000            <1>  enter 0, 0
    45 00018714 4883E4F0            <1>  and rsp, ~15
 31124 00018718 E8(00000000)                    call fwrite
 31125                                  	LEAVE
    49 0001871D C9                  <1>  leave
 31126 0001871E 48BF-                           mov rdi, fmt_scheme_error_part_3
 31126 00018720 [631C000000000000] 
 31127 00018728 B800000000                      mov rax, 0
 31128                                          ENTER
    44 0001872D C8000000            <1>  enter 0, 0
    45 00018731 4883E4F0            <1>  and rsp, ~15
 31129 00018735 E8(00000000)                    call printf
 31130                                          LEAVE
    49 0001873A C9                  <1>  leave
 31131 0001873B 48C7C0F7FFFFFF                  mov rax, -9
 31132 00018742 E8(00000000)                    call exit
 31133                                  
 31134                                  L_code_ptr_raw_less_than_rr:
 31135 00018747 C8000000                        enter 0, 0
 31136 0001874B 48837D1802                      cmp COUNT, 2
 31137 00018750 0F8509070000                    jne L_error_arg_count_2
 31138 00018756 488B7520                        mov rsi, PARAM(0)
 31139                                          assert_real(rsi)
    53 0001875A 803E13              <1>  cmp byte [%1], %2
    54 0001875D 0F859B070000        <1>  jne L_error_incorrect_type
 31140 00018763 488B7D28                        mov rdi, PARAM(1)
 31141                                          assert_real(rdi)
    53 00018767 803F13              <1>  cmp byte [%1], %2
    54 0001876A 0F858E070000        <1>  jne L_error_incorrect_type
 31142 00018770 F20F104601                      movsd xmm0, qword [rsi + 1]
 31143 00018775 F20F104F01                      movsd xmm1, qword [rdi + 1]
 31144 0001877A 660F2FC1                        comisd xmm0, xmm1
 31145 0001877E 730C                            jae .L_false
 31146 00018780 48B8-                           mov rax, sob_boolean_true
 31146 00018782 [0300000000000000] 
 31147 0001878A EB0A                            jmp .L_exit
 31148                                  .L_false:
 31149 0001878C 48B8-                           mov rax, sob_boolean_false
 31149 0001878E [0200000000000000] 
 31150                                  .L_exit:
 31151 00018796 C9                              leave
 31152 00018797 C22000                          ret AND_KILL_FRAME(2)
 31153                                          
 31154                                  L_code_ptr_raw_less_than_zz:
 31155 0001879A C8000000                	enter 0, 0
 31156 0001879E 48837D1802              	cmp COUNT, 2
 31157 000187A3 0F85B6060000            	jne L_error_arg_count_2
 31158 000187A9 4C8B4520                	mov r8, PARAM(0)
 31159                                  	assert_integer(r8)
    53 000187AD 41803811            <1>  cmp byte [%1], %2
    54 000187B1 0F8547070000        <1>  jne L_error_incorrect_type
 31160 000187B7 4C8B4D28                	mov r9, PARAM(1)
 31161                                  	assert_integer(r9)
    53 000187BB 41803911            <1>  cmp byte [%1], %2
    54 000187BF 0F8539070000        <1>  jne L_error_incorrect_type
 31162 000187C5 498B7801                	mov rdi, qword [r8 + 1]
 31163 000187C9 493B7901                	cmp rdi, qword [r9 + 1]
 31164 000187CD 7D0C                    	jge .L_false
 31165 000187CF 48B8-                   	mov rax, sob_boolean_true
 31165 000187D1 [0300000000000000] 
 31166 000187D9 EB0A                    	jmp .L_exit
 31167                                  .L_false:
 31168 000187DB 48B8-                   	mov rax, sob_boolean_false
 31168 000187DD [0200000000000000] 
 31169                                  .L_exit:
 31170 000187E5 C9                      	leave
 31171 000187E6 C22000                  	ret AND_KILL_FRAME(2)
 31172                                  
 31173                                  L_code_ptr_raw_less_than_qq:
 31174 000187E9 C8000000                        enter 0, 0
 31175 000187ED 48837D1802                      cmp COUNT, 2
 31176 000187F2 0F8567060000                    jne L_error_arg_count_2
 31177 000187F8 488B7520                        mov rsi, PARAM(0)
 31178                                          assert_fraction(rsi)
    53 000187FC 803E12              <1>  cmp byte [%1], %2
    54 000187FF 0F85F9060000        <1>  jne L_error_incorrect_type
 31179 00018805 488B7D28                        mov rdi, PARAM(1)
 31180                                          assert_fraction(rdi)
    53 00018809 803F12              <1>  cmp byte [%1], %2
    54 0001880C 0F85EC060000        <1>  jne L_error_incorrect_type
 31181 00018812 488B4601                        mov rax, qword [rsi + 1] ; num1
 31182 00018816 4899                            cqo
 31183 00018818 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 31184 0001881C 4889C1                          mov rcx, rax
 31185 0001881F 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 31186 00018823 4899                            cqo
 31187 00018825 48F76F01                        imul qword [rdi + 1]          ; num2
 31188 00018829 4829C1                          sub rcx, rax
 31189 0001882C 7D0C                            jge .L_false
 31190 0001882E 48B8-                           mov rax, sob_boolean_true
 31190 00018830 [0300000000000000] 
 31191 00018838 EB0A                            jmp .L_exit
 31192                                  .L_false:
 31193 0001883A 48B8-                           mov rax, sob_boolean_false
 31193 0001883C [0200000000000000] 
 31194                                  .L_exit:
 31195 00018844 C9                              leave
 31196 00018845 C22000                          ret AND_KILL_FRAME(2)
 31197                                  
 31198                                  L_code_ptr_raw_equal_rr:
 31199 00018848 C8000000                        enter 0, 0
 31200 0001884C 48837D1802                      cmp COUNT, 2
 31201 00018851 0F8508060000                    jne L_error_arg_count_2
 31202 00018857 488B7520                        mov rsi, PARAM(0)
 31203                                          assert_real(rsi)
    53 0001885B 803E13              <1>  cmp byte [%1], %2
    54 0001885E 0F859A060000        <1>  jne L_error_incorrect_type
 31204 00018864 488B7D28                        mov rdi, PARAM(1)
 31205                                          assert_real(rdi)
    53 00018868 803F13              <1>  cmp byte [%1], %2
    54 0001886B 0F858D060000        <1>  jne L_error_incorrect_type
 31206 00018871 F20F104601                      movsd xmm0, qword [rsi + 1]
 31207 00018876 F20F104F01                      movsd xmm1, qword [rdi + 1]
 31208 0001887B 660F2FC1                        comisd xmm0, xmm1
 31209 0001887F 750C                            jne .L_false
 31210 00018881 48B8-                           mov rax, sob_boolean_true
 31210 00018883 [0300000000000000] 
 31211 0001888B EB0A                            jmp .L_exit
 31212                                  .L_false:
 31213 0001888D 48B8-                           mov rax, sob_boolean_false
 31213 0001888F [0200000000000000] 
 31214                                  .L_exit:
 31215 00018897 C9                              leave
 31216 00018898 C22000                          ret AND_KILL_FRAME(2)
 31217                                          
 31218                                  L_code_ptr_raw_equal_zz:
 31219 0001889B C8000000                	enter 0, 0
 31220 0001889F 48837D1802              	cmp COUNT, 2
 31221 000188A4 0F85B5050000            	jne L_error_arg_count_2
 31222 000188AA 4C8B4520                	mov r8, PARAM(0)
 31223                                  	assert_integer(r8)
    53 000188AE 41803811            <1>  cmp byte [%1], %2
    54 000188B2 0F8546060000        <1>  jne L_error_incorrect_type
 31224 000188B8 4C8B4D28                	mov r9, PARAM(1)
 31225                                  	assert_integer(r9)
    53 000188BC 41803911            <1>  cmp byte [%1], %2
    54 000188C0 0F8538060000        <1>  jne L_error_incorrect_type
 31226 000188C6 498B7801                	mov rdi, qword [r8 + 1]
 31227 000188CA 493B7901                	cmp rdi, qword [r9 + 1]
 31228 000188CE 750C                    	jne .L_false
 31229 000188D0 48B8-                   	mov rax, sob_boolean_true
 31229 000188D2 [0300000000000000] 
 31230 000188DA EB0A                    	jmp .L_exit
 31231                                  .L_false:
 31232 000188DC 48B8-                   	mov rax, sob_boolean_false
 31232 000188DE [0200000000000000] 
 31233                                  .L_exit:
 31234 000188E6 C9                      	leave
 31235 000188E7 C22000                  	ret AND_KILL_FRAME(2)
 31236                                  
 31237                                  L_code_ptr_raw_equal_qq:
 31238 000188EA C8000000                        enter 0, 0
 31239 000188EE 48837D1802                      cmp COUNT, 2
 31240 000188F3 0F8566050000                    jne L_error_arg_count_2
 31241 000188F9 488B7520                        mov rsi, PARAM(0)
 31242                                          assert_fraction(rsi)
    53 000188FD 803E12              <1>  cmp byte [%1], %2
    54 00018900 0F85F8050000        <1>  jne L_error_incorrect_type
 31243 00018906 488B7D28                        mov rdi, PARAM(1)
 31244                                          assert_fraction(rdi)
    53 0001890A 803F12              <1>  cmp byte [%1], %2
    54 0001890D 0F85EB050000        <1>  jne L_error_incorrect_type
 31245 00018913 488B4601                        mov rax, qword [rsi + 1] ; num1
 31246 00018917 4899                            cqo
 31247 00018919 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 31248 0001891D 4889C1                          mov rcx, rax
 31249 00018920 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 31250 00018924 4899                            cqo
 31251 00018926 48F76F01                        imul qword [rdi + 1]          ; num2
 31252 0001892A 4829C1                          sub rcx, rax
 31253 0001892D 750C                            jne .L_false
 31254 0001892F 48B8-                           mov rax, sob_boolean_true
 31254 00018931 [0300000000000000] 
 31255 00018939 EB0A                            jmp .L_exit
 31256                                  .L_false:
 31257 0001893B 48B8-                           mov rax, sob_boolean_false
 31257 0001893D [0200000000000000] 
 31258                                  .L_exit:
 31259 00018945 C9                              leave
 31260 00018946 C22000                          ret AND_KILL_FRAME(2)
 31261                                  
 31262                                  L_code_ptr_quotient:
 31263 00018949 C8000000                        enter 0, 0
 31264 0001894D 48837D1802                      cmp COUNT, 2
 31265 00018952 0F8507050000                    jne L_error_arg_count_2
 31266 00018958 488B7520                        mov rsi, PARAM(0)
 31267                                          assert_integer(rsi)
    53 0001895C 803E11              <1>  cmp byte [%1], %2
    54 0001895F 0F8599050000        <1>  jne L_error_incorrect_type
 31268 00018965 488B7D28                        mov rdi, PARAM(1)
 31269                                          assert_integer(rdi)
    53 00018969 803F11              <1>  cmp byte [%1], %2
    54 0001896C 0F858C050000        <1>  jne L_error_incorrect_type
 31270 00018972 488B4601                        mov rax, qword [rsi + 1]
 31271 00018976 488B5F01                        mov rbx, qword [rdi + 1]
 31272 0001897A 4883FB00                        cmp rbx, 0
 31273 0001897E 0F84AB050000                    je L_error_division_by_zero
 31274 00018984 4899                            cqo
 31275 00018986 48F7FB                          idiv rbx
 31276 00018989 4889C7                          mov rdi, rax
 31277 0001898C E8E8030000                      call make_integer
 31278 00018991 C9                              leave
 31279 00018992 C22000                          ret AND_KILL_FRAME(2)
 31280                                          
 31281                                  L_code_ptr_remainder:
 31282 00018995 C8000000                        enter 0, 0
 31283 00018999 48837D1802                      cmp COUNT, 2
 31284 0001899E 0F85BB040000                    jne L_error_arg_count_2
 31285 000189A4 488B7520                        mov rsi, PARAM(0)
 31286                                          assert_integer(rsi)
    53 000189A8 803E11              <1>  cmp byte [%1], %2
    54 000189AB 0F854D050000        <1>  jne L_error_incorrect_type
 31287 000189B1 488B7D28                        mov rdi, PARAM(1)
 31288                                          assert_integer(rdi)
    53 000189B5 803F11              <1>  cmp byte [%1], %2
    54 000189B8 0F8540050000        <1>  jne L_error_incorrect_type
 31289 000189BE 488B4601                        mov rax, qword [rsi + 1]
 31290 000189C2 488B5F01                        mov rbx, qword [rdi + 1]
 31291 000189C6 4883FB00                        cmp rbx, 0
 31292 000189CA 0F845F050000                    je L_error_division_by_zero
 31293 000189D0 4899                            cqo
 31294 000189D2 48F7FB                          idiv rbx
 31295 000189D5 4889D7                          mov rdi, rdx
 31296 000189D8 E89C030000                      call make_integer
 31297 000189DD C9                              leave
 31298 000189DE C22000                          ret AND_KILL_FRAME(2)
 31299                                  
 31300                                  L_code_ptr_set_car:
 31301 000189E1 C8000000                        enter 0, 0
 31302 000189E5 48837D1802                      cmp COUNT, 2
 31303 000189EA 0F856F040000                    jne L_error_arg_count_2
 31304 000189F0 488B4520                        mov rax, PARAM(0)
 31305                                          assert_pair(rax)
    53 000189F4 803821              <1>  cmp byte [%1], %2
    54 000189F7 0F8501050000        <1>  jne L_error_incorrect_type
 31306 000189FD 488B5D28                        mov rbx, PARAM(1)
 31307 00018A01 48895801                        mov SOB_PAIR_CAR(rax), rbx
 31308 00018A05 48B8-                           mov rax, sob_void
 31308 00018A07 [0000000000000000] 
 31309 00018A0F C9                              leave
 31310 00018A10 C22000                          ret AND_KILL_FRAME(2)
 31311                                  
 31312                                  L_code_ptr_set_cdr:
 31313 00018A13 C8000000                        enter 0, 0
 31314 00018A17 48837D1802                      cmp COUNT, 2
 31315 00018A1C 0F853D040000                    jne L_error_arg_count_2
 31316 00018A22 488B4520                        mov rax, PARAM(0)
 31317                                          assert_pair(rax)
    53 00018A26 803821              <1>  cmp byte [%1], %2
    54 00018A29 0F85CF040000        <1>  jne L_error_incorrect_type
 31318 00018A2F 488B5D28                        mov rbx, PARAM(1)
 31319 00018A33 48895809                        mov SOB_PAIR_CDR(rax), rbx
 31320 00018A37 48B8-                           mov rax, sob_void
 31320 00018A39 [0000000000000000] 
 31321 00018A41 C9                              leave
 31322 00018A42 C22000                          ret AND_KILL_FRAME(2)
 31323                                  
 31324                                  L_code_ptr_string_ref:
 31325 00018A45 C8000000                        enter 0, 0
 31326 00018A49 48837D1802                      cmp COUNT, 2
 31327 00018A4E 0F850B040000                    jne L_error_arg_count_2
 31328 00018A54 488B7D20                        mov rdi, PARAM(0)
 31329                                          assert_string(rdi)
    53 00018A58 803F03              <1>  cmp byte [%1], %2
    54 00018A5B 0F859D040000        <1>  jne L_error_incorrect_type
 31330 00018A61 488B7528                        mov rsi, PARAM(1)
 31331                                          assert_integer(rsi)
    53 00018A65 803E11              <1>  cmp byte [%1], %2
    54 00018A68 0F8590040000        <1>  jne L_error_incorrect_type
 31332 00018A6E 488B5701                        mov rdx, qword [rdi + 1]
 31333 00018A72 488B4E01                        mov rcx, qword [rsi + 1]
 31334 00018A76 4839D1                          cmp rcx, rdx
 31335 00018A79 0F8D14030000                    jge L_error_integer_range
 31336 00018A7F 4883F900                        cmp rcx, 0
 31337 00018A83 0F8C0A030000                    jl L_error_integer_range
 31338 00018A89 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 31339 00018A8D BF02000000                      mov rdi, 2
 31340 00018A92 E8BBE6FFFF                      call malloc
 31341 00018A97 C60002                          mov byte [rax], T_char
 31342 00018A9A 885801                          mov byte [rax + 1], bl
 31343 00018A9D C9                              leave
 31344 00018A9E C22000                          ret AND_KILL_FRAME(2)
 31345                                  
 31346                                  L_code_ptr_vector_ref:
 31347 00018AA1 C8000000                        enter 0, 0
 31348 00018AA5 48837D1802                      cmp COUNT, 2
 31349 00018AAA 0F85AF030000                    jne L_error_arg_count_2
 31350 00018AB0 488B7D20                        mov rdi, PARAM(0)
 31351                                          assert_vector(rdi)
    53 00018AB4 803F22              <1>  cmp byte [%1], %2
    54 00018AB7 0F8541040000        <1>  jne L_error_incorrect_type
 31352 00018ABD 488B7528                        mov rsi, PARAM(1)
 31353                                          assert_integer(rsi)
    53 00018AC1 803E11              <1>  cmp byte [%1], %2
    54 00018AC4 0F8534040000        <1>  jne L_error_incorrect_type
 31354 00018ACA 488B5701                        mov rdx, qword [rdi + 1]
 31355 00018ACE 488B4E01                        mov rcx, qword [rsi + 1]
 31356 00018AD2 4839D1                          cmp rcx, rdx
 31357 00018AD5 0F8DB8020000                    jge L_error_integer_range
 31358 00018ADB 4883F900                        cmp rcx, 0
 31359 00018ADF 0F8CAE020000                    jl L_error_integer_range
 31360 00018AE5 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 31361 00018AEA C9                              leave
 31362 00018AEB C22000                          ret AND_KILL_FRAME(2)
 31363                                  
 31364                                  L_code_ptr_vector_set:
 31365 00018AEE C8000000                        enter 0, 0
 31366 00018AF2 48837D1803                      cmp COUNT, 3
 31367 00018AF7 0F85CC030000                    jne L_error_arg_count_3
 31368 00018AFD 488B7D20                        mov rdi, PARAM(0)
 31369                                          assert_vector(rdi)
    53 00018B01 803F22              <1>  cmp byte [%1], %2
    54 00018B04 0F85F4030000        <1>  jne L_error_incorrect_type
 31370 00018B0A 488B7528                        mov rsi, PARAM(1)
 31371                                          assert_integer(rsi)
    53 00018B0E 803E11              <1>  cmp byte [%1], %2
    54 00018B11 0F85E7030000        <1>  jne L_error_incorrect_type
 31372 00018B17 488B5701                        mov rdx, qword [rdi + 1]
 31373 00018B1B 488B4E01                        mov rcx, qword [rsi + 1]
 31374 00018B1F 4839D1                          cmp rcx, rdx
 31375 00018B22 0F8D6B020000                    jge L_error_integer_range
 31376 00018B28 4883F900                        cmp rcx, 0
 31377 00018B2C 0F8C61020000                    jl L_error_integer_range
 31378 00018B32 488B4530                        mov rax, PARAM(2)
 31379 00018B36 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 31380 00018B3B 48B8-                           mov rax, sob_void
 31380 00018B3D [0000000000000000] 
 31381 00018B45 C9                              leave
 31382 00018B46 C22800                          ret AND_KILL_FRAME(3)
 31383                                  
 31384                                  L_code_ptr_string_set:
 31385 00018B49 C8000000                        enter 0, 0
 31386 00018B4D 48837D1803                      cmp COUNT, 3
 31387 00018B52 0F8571030000                    jne L_error_arg_count_3
 31388 00018B58 488B7D20                        mov rdi, PARAM(0)
 31389                                          assert_string(rdi)
    53 00018B5C 803F03              <1>  cmp byte [%1], %2
    54 00018B5F 0F8599030000        <1>  jne L_error_incorrect_type
 31390 00018B65 488B7528                        mov rsi, PARAM(1)
 31391                                          assert_integer(rsi)
    53 00018B69 803E11              <1>  cmp byte [%1], %2
    54 00018B6C 0F858C030000        <1>  jne L_error_incorrect_type
 31392 00018B72 488B5701                        mov rdx, qword [rdi + 1]
 31393 00018B76 488B4E01                        mov rcx, qword [rsi + 1]
 31394 00018B7A 4839D1                          cmp rcx, rdx
 31395 00018B7D 0F8D10020000                    jge L_error_integer_range
 31396 00018B83 4883F900                        cmp rcx, 0
 31397 00018B87 0F8C06020000                    jl L_error_integer_range
 31398 00018B8D 488B4530                        mov rax, PARAM(2)
 31399                                          assert_char(rax)
    53 00018B91 803802              <1>  cmp byte [%1], %2
    54 00018B94 0F8564030000        <1>  jne L_error_incorrect_type
 31400 00018B9A 8A4001                          mov al, byte [rax + 1]
 31401 00018B9D 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 31402 00018BA1 48B8-                           mov rax, sob_void
 31402 00018BA3 [0000000000000000] 
 31403 00018BAB C9                              leave
 31404 00018BAC C22800                          ret AND_KILL_FRAME(3)
 31405                                  
 31406                                  L_code_ptr_make_vector:
 31407 00018BAF C8000000                        enter 0, 0
 31408 00018BB3 48837D1802                      cmp COUNT, 2
 31409 00018BB8 0F85A1020000                    jne L_error_arg_count_2
 31410 00018BBE 488B4D20                        mov rcx, PARAM(0)
 31411                                          assert_integer(rcx)
    53 00018BC2 803911              <1>  cmp byte [%1], %2
    54 00018BC5 0F8533030000        <1>  jne L_error_incorrect_type
 31412 00018BCB 488B4901                        mov rcx, qword [rcx + 1]
 31413 00018BCF 4883F900                        cmp rcx, 0
 31414 00018BD3 0F8CBA010000                    jl L_error_integer_range
 31415 00018BD9 488B5528                        mov rdx, PARAM(1)
 31416 00018BDD 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 31417 00018BE5 E868E5FFFF                      call malloc
 31418 00018BEA C60022                          mov byte [rax], T_vector
 31419 00018BED 48894801                        mov qword [rax + 1], rcx
 31420 00018BF1 41B800000000                    mov r8, 0
 31421                                  .L0:
 31422 00018BF7 4939C8                          cmp r8, rcx
 31423 00018BFA 740A                            je .L1
 31424 00018BFC 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 31425 00018C01 49FFC0                          inc r8
 31426 00018C04 EBF1                            jmp .L0
 31427                                  .L1:
 31428 00018C06 C9                              leave
 31429 00018C07 C22000                          ret AND_KILL_FRAME(2)
 31430                                          
 31431                                  L_code_ptr_make_string:
 31432 00018C0A C8000000                        enter 0, 0
 31433 00018C0E 48837D1802                      cmp COUNT, 2
 31434 00018C13 0F8546020000                    jne L_error_arg_count_2
 31435 00018C19 488B4D20                        mov rcx, PARAM(0)
 31436                                          assert_integer(rcx)
    53 00018C1D 803911              <1>  cmp byte [%1], %2
    54 00018C20 0F85D8020000        <1>  jne L_error_incorrect_type
 31437 00018C26 488B4901                        mov rcx, qword [rcx + 1]
 31438 00018C2A 4883F900                        cmp rcx, 0
 31439 00018C2E 0F8C5F010000                    jl L_error_integer_range
 31440 00018C34 488B5528                        mov rdx, PARAM(1)
 31441                                          assert_char(rdx)
    53 00018C38 803A02              <1>  cmp byte [%1], %2
    54 00018C3B 0F85BD020000        <1>  jne L_error_incorrect_type
 31442 00018C41 8A5201                          mov dl, byte [rdx + 1]
 31443 00018C44 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 31444 00018C48 E805E5FFFF                      call malloc
 31445 00018C4D C60003                          mov byte [rax], T_string
 31446 00018C50 48894801                        mov qword [rax + 1], rcx
 31447 00018C54 41B800000000                    mov r8, 0
 31448                                  .L0:
 31449 00018C5A 4939C8                          cmp r8, rcx
 31450 00018C5D 740A                            je .L1
 31451 00018C5F 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 31452 00018C64 49FFC0                          inc r8
 31453 00018C67 EBF1                            jmp .L0
 31454                                  .L1:
 31455 00018C69 C9                              leave
 31456 00018C6A C22000                          ret AND_KILL_FRAME(2)
 31457                                  
 31458                                  L_code_ptr_numerator:
 31459 00018C6D C8000000                        enter 0, 0
 31460 00018C71 48837D1801                      cmp COUNT, 1
 31461 00018C76 0F85AE010000                    jne L_error_arg_count_1
 31462 00018C7C 488B4520                        mov rax, PARAM(0)
 31463                                          assert_fraction(rax)
    53 00018C80 803812              <1>  cmp byte [%1], %2
    54 00018C83 0F8575020000        <1>  jne L_error_incorrect_type
 31464 00018C89 488B7801                        mov rdi, qword [rax + 1]
 31465 00018C8D E8E7000000                      call make_integer
 31466 00018C92 C9                              leave
 31467 00018C93 C21800                          ret AND_KILL_FRAME(1)
 31468                                          
 31469                                  L_code_ptr_denominator:
 31470 00018C96 C8000000                        enter 0, 0
 31471 00018C9A 48837D1801                      cmp COUNT, 1
 31472 00018C9F 0F8585010000                    jne L_error_arg_count_1
 31473 00018CA5 488B4520                        mov rax, PARAM(0)
 31474                                          assert_fraction(rax)
    53 00018CA9 803812              <1>  cmp byte [%1], %2
    54 00018CAC 0F854C020000        <1>  jne L_error_incorrect_type
 31475 00018CB2 488B7809                        mov rdi, qword [rax + 1 + 8]
 31476 00018CB6 E8BE000000                      call make_integer
 31477 00018CBB C9                              leave
 31478 00018CBC C21800                          ret AND_KILL_FRAME(1)
 31479                                  
 31480                                  L_code_ptr_is_eq:
 31481 00018CBF C8000000                	enter 0, 0
 31482 00018CC3 48837D1802              	cmp COUNT, 2
 31483 00018CC8 0F8591010000            	jne L_error_arg_count_2
 31484 00018CCE 488B7D20                	mov rdi, PARAM(0)
 31485 00018CD2 488B7528                	mov rsi, PARAM(1)
 31486 00018CD6 4839F7                  	cmp rdi, rsi
 31487 00018CD9 746C                    	je .L_eq_true
 31488 00018CDB 8A17                    	mov dl, byte [rdi]
 31489 00018CDD 3A16                    	cmp dl, byte [rsi]
 31490 00018CDF 7572                    	jne .L_eq_false
 31491 00018CE1 80FA02                  	cmp dl, T_char
 31492 00018CE4 7459                    	je .L_char
 31493 00018CE6 80FA41                  	cmp dl, T_interned_symbol
 31494 00018CE9 7440                    	je .L_interned_symbol
 31495 00018CEB 80FA42                          cmp dl, T_uninterned_symbol
 31496 00018CEE 7443                            je .L_uninterned_symbol
 31497 00018CF0 80FA13                  	cmp dl, T_real
 31498 00018CF3 742E                    	je .L_real
 31499 00018CF5 80FA12                  	cmp dl, T_fraction
 31500 00018CF8 7413                    	je .L_fraction
 31501 00018CFA 80FA11                          cmp dl, T_integer
 31502 00018CFD 7402                            je .L_integer
 31503 00018CFF EB52                    	jmp .L_eq_false
 31504                                  .L_integer:
 31505 00018D01 488B4601                        mov rax, qword [rsi + 1]
 31506 00018D05 483B4701                        cmp rax, qword [rdi + 1]
 31507 00018D09 7548                            jne .L_eq_false
 31508 00018D0B EB3A                            jmp .L_eq_true
 31509                                  .L_fraction:
 31510 00018D0D 488B4601                	mov rax, qword [rsi + 1]
 31511 00018D11 483B4701                	cmp rax, qword [rdi + 1]
 31512 00018D15 753C                    	jne .L_eq_false
 31513 00018D17 488B4609                	mov rax, qword [rsi + 1 + 8]
 31514 00018D1B 483B4709                	cmp rax, qword [rdi + 1 + 8]
 31515 00018D1F 7532                    	jne .L_eq_false
 31516 00018D21 EB24                    	jmp .L_eq_true
 31517                                  .L_real:
 31518 00018D23 488B4601                	mov rax, qword [rsi + 1]
 31519 00018D27 483B4701                	cmp rax, qword [rdi + 1]
 31520                                  .L_interned_symbol:
 31521                                  	; never reached, because interned_symbols are static!
 31522                                  	; but I'm keeping it in case, I'll ever change
 31523                                  	; the implementation
 31524 00018D2B 488B4601                	mov rax, qword [rsi + 1]
 31525 00018D2F 483B4701                	cmp rax, qword [rdi + 1]
 31526                                  .L_uninterned_symbol:
 31527 00018D33 4C8B4701                        mov r8, qword [rdi + 1]
 31528 00018D37 4C3B4601                        cmp r8, qword [rsi + 1]
 31529 00018D3B 7516                            jne .L_eq_false
 31530 00018D3D EB08                            jmp .L_eq_true
 31531                                  .L_char:
 31532 00018D3F 8A5E01                  	mov bl, byte [rsi + 1]
 31533 00018D42 3A5F01                  	cmp bl, byte [rdi + 1]
 31534 00018D45 750C                    	jne .L_eq_false
 31535                                  .L_eq_true:
 31536 00018D47 48B8-                   	mov rax, sob_boolean_true
 31536 00018D49 [0300000000000000] 
 31537 00018D51 EB0A                    	jmp .L_eq_exit
 31538                                  .L_eq_false:
 31539 00018D53 48B8-                   	mov rax, sob_boolean_false
 31539 00018D55 [0200000000000000] 
 31540                                  .L_eq_exit:
 31541 00018D5D C9                      	leave
 31542 00018D5E C22000                  	ret AND_KILL_FRAME(2)
 31543                                  
 31544                                  make_real:
 31545 00018D61 C8000000                        enter 0, 0
 31546 00018D65 BF09000000                      mov rdi, (1 + 8)
 31547 00018D6A E8E3E3FFFF                      call malloc
 31548 00018D6F C60013                          mov byte [rax], T_real
 31549 00018D72 F20F114001                      movsd qword [rax + 1], xmm0
 31550 00018D77 C9                              leave 
 31551 00018D78 C3                              ret
 31552                                          
 31553                                  make_integer:
 31554 00018D79 C8000000                        enter 0, 0
 31555 00018D7D 4889FE                          mov rsi, rdi
 31556 00018D80 BF09000000                      mov rdi, (1 + 8)
 31557 00018D85 E8C8E3FFFF                      call malloc
 31558 00018D8A C60011                          mov byte [rax], T_integer
 31559 00018D8D 48897001                        mov qword [rax + 1], rsi
 31560 00018D91 C9                              leave
 31561 00018D92 C3                              ret
 31562                                          
 31563                                  L_error_integer_range:
 31564 00018D93 488B3C25[00000000]              mov rdi, qword [stderr]
 31565 00018D9B 48BE-                           mov rsi, fmt_integer_range
 31565 00018D9D [DA1B000000000000] 
 31566 00018DA5 B800000000                      mov rax, 0
 31567                                          ENTER
    44 00018DAA C8000000            <1>  enter 0, 0
    45 00018DAE 4883E4F0            <1>  and rsp, ~15
 31568 00018DB2 E8(00000000)                    call fprintf
 31569                                          LEAVE
    49 00018DB7 C9                  <1>  leave
 31570 00018DB8 48C7C0FBFFFFFF                  mov rax, -5
 31571 00018DBF E8(00000000)                    call exit
 31572                                  
 31573                                  L_error_arg_negative:
 31574 00018DC4 488B3C25[00000000]              mov rdi, qword [stderr]
 31575 00018DCC 48BE-                           mov rsi, fmt_arg_negative
 31575 00018DCE [B21A000000000000] 
 31576 00018DD6 B800000000                      mov rax, 0
 31577                                          ENTER
    44 00018DDB C8000000            <1>  enter 0, 0
    45 00018DDF 4883E4F0            <1>  and rsp, ~15
 31578 00018DE3 E8(00000000)                    call fprintf
 31579                                          LEAVE
    49 00018DE8 C9                  <1>  leave
 31580 00018DE9 48C7C0FDFFFFFF                  mov rax, -3
 31581 00018DF0 E8(00000000)                    call exit
 31582                                  
 31583                                  L_error_arg_count_0:
 31584 00018DF5 488B3C25[00000000]              mov rdi, qword [stderr]
 31585 00018DFD 48BE-                           mov rsi, fmt_arg_count_0
 31585 00018DFF [D81A000000000000] 
 31586 00018E07 488B5518                        mov rdx, COUNT
 31587 00018E0B B800000000                      mov rax, 0
 31588                                          ENTER
    44 00018E10 C8000000            <1>  enter 0, 0
    45 00018E14 4883E4F0            <1>  and rsp, ~15
 31589 00018E18 E8(00000000)                    call fprintf
 31590                                          LEAVE
    49 00018E1D C9                  <1>  leave
 31591 00018E1E 48C7C0FDFFFFFF                  mov rax, -3
 31592 00018E25 E8(00000000)                    call exit
 31593                                  
 31594                                  L_error_arg_count_1:
 31595 00018E2A 488B3C25[00000000]              mov rdi, qword [stderr]
 31596 00018E32 48BE-                           mov rsi, fmt_arg_count_1
 31596 00018E34 [001B000000000000] 
 31597 00018E3C 488B5518                        mov rdx, COUNT
 31598 00018E40 B800000000                      mov rax, 0
 31599                                          ENTER
    44 00018E45 C8000000            <1>  enter 0, 0
    45 00018E49 4883E4F0            <1>  and rsp, ~15
 31600 00018E4D E8(00000000)                    call fprintf
 31601                                          LEAVE
    49 00018E52 C9                  <1>  leave
 31602 00018E53 48C7C0FDFFFFFF                  mov rax, -3
 31603 00018E5A E8(00000000)                    call exit
 31604                                  
 31605                                  L_error_arg_count_2:
 31606 00018E5F 488B3C25[00000000]              mov rdi, qword [stderr]
 31607 00018E67 48BE-                           mov rsi, fmt_arg_count_2
 31607 00018E69 [661B000000000000] 
 31608 00018E71 488B5518                        mov rdx, COUNT
 31609 00018E75 B800000000                      mov rax, 0
 31610                                          ENTER
    44 00018E7A C8000000            <1>  enter 0, 0
    45 00018E7E 4883E4F0            <1>  and rsp, ~15
 31611 00018E82 E8(00000000)                    call fprintf
 31612                                          LEAVE
    49 00018E87 C9                  <1>  leave
 31613 00018E88 48C7C0FDFFFFFF                  mov rax, -3
 31614 00018E8F E8(00000000)                    call exit
 31615                                  
 31616                                  L_error_arg_count_12:
 31617 00018E94 488B3C25[00000000]              mov rdi, qword [stderr]
 31618 00018E9C 48BE-                           mov rsi, fmt_arg_count_12
 31618 00018E9E [261B000000000000] 
 31619 00018EA6 488B5518                        mov rdx, COUNT
 31620 00018EAA B800000000                      mov rax, 0
 31621                                          ENTER
    44 00018EAF C8000000            <1>  enter 0, 0
    45 00018EB3 4883E4F0            <1>  and rsp, ~15
 31622 00018EB7 E8(00000000)                    call fprintf
 31623                                          LEAVE
    49 00018EBC C9                  <1>  leave
 31624 00018EBD 48C7C0FDFFFFFF                  mov rax, -3
 31625 00018EC4 E8(00000000)                    call exit
 31626                                  
 31627                                  L_error_arg_count_3:
 31628 00018EC9 488B3C25[00000000]              mov rdi, qword [stderr]
 31629 00018ED1 48BE-                           mov rsi, fmt_arg_count_3
 31629 00018ED3 [8D1B000000000000] 
 31630 00018EDB 488B5518                        mov rdx, COUNT
 31631 00018EDF B800000000                      mov rax, 0
 31632                                          ENTER
    44 00018EE4 C8000000            <1>  enter 0, 0
    45 00018EE8 4883E4F0            <1>  and rsp, ~15
 31633 00018EEC E8(00000000)                    call fprintf
 31634                                          LEAVE
    49 00018EF1 C9                  <1>  leave
 31635 00018EF2 48C7C0FDFFFFFF                  mov rax, -3
 31636 00018EF9 E8(00000000)                    call exit
 31637                                          
 31638                                  L_error_incorrect_type:
 31639 00018EFE 488B3C25[00000000]              mov rdi, qword [stderr]
 31640 00018F06 48BE-                           mov rsi, fmt_type
 31640 00018F08 [B61B000000000000] 
 31641 00018F10 B800000000                      mov rax, 0
 31642                                          ENTER
    44 00018F15 C8000000            <1>  enter 0, 0
    45 00018F19 4883E4F0            <1>  and rsp, ~15
 31643 00018F1D E8(00000000)                    call fprintf
 31644                                          LEAVE
    49 00018F22 C9                  <1>  leave
 31645 00018F23 48C7C0FCFFFFFF                  mov rax, -4
 31646 00018F2A E8(00000000)                    call exit
 31647                                  
 31648                                  L_error_division_by_zero:
 31649 00018F2F 488B3C25[00000000]              mov rdi, qword [stderr]
 31650 00018F37 48BE-                           mov rsi, fmt_division_by_zero
 31650 00018F39 [F71B000000000000] 
 31651 00018F41 B800000000                      mov rax, 0
 31652                                          ENTER
    44 00018F46 C8000000            <1>  enter 0, 0
    45 00018F4A 4883E4F0            <1>  and rsp, ~15
 31653 00018F4E E8(00000000)                    call fprintf
 31654                                          LEAVE
    49 00018F53 C9                  <1>  leave
 31655 00018F54 48C7C0F8FFFFFF                  mov rax, -8
 31656 00018F5B E8(00000000)                    call exit
 31657                                  
 31658                                  section .data
 31659                                  gensym_count:
 31660 00001AA7 0000000000000000                dq 0
 31661                                  fmt_char:
 31662 00001AAF 256300                          db `%c\0`
 31663                                  fmt_arg_negative:
 31664 00001AB2 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
 31664 00001ABB 7267756D656E742063-
 31664 00001AC4 616E6E6F7420626520-
 31664 00001ACD 6E656761746976652E-
 31664 00001AD6 0A00               
 31665                                  fmt_arg_count_0:
 31666 00001AD8 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 31666 00001AE1 74696E67207A65726F-
 31666 00001AEA 20617267756D656E74-
 31666 00001AF3 732E20466F756E6420-
 31666 00001AFC 25640A00           
 31667                                  fmt_arg_count_1:
 31668 00001B00 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 31668 00001B09 74696E67206F6E6520-
 31668 00001B12 617267756D656E742E-
 31668 00001B1B 20466F756E64202564-
 31668 00001B24 0A00               
 31669                                  fmt_arg_count_12:
 31670 00001B26 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 31670 00001B2F 74696E67206F6E6520-
 31670 00001B38 726571756972656420-
 31670 00001B41 616E64206F6E65206F-
 31670 00001B4A 7074696F6E616C2061-
 31670 00001B53 7267756D656E742E20-
 31670 00001B5C 466F756E642025640A-
 31670 00001B65 00                 
 31671                                  fmt_arg_count_2:
 31672 00001B66 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 31672 00001B6F 74696E672074776F20-
 31672 00001B78 617267756D656E7473-
 31672 00001B81 2E20466F756E642025-
 31672 00001B8A 640A00             
 31673                                  fmt_arg_count_3:
 31674 00001B8D 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 31674 00001B96 74696E672074687265-
 31674 00001B9F 6520617267756D656E-
 31674 00001BA8 74732E20466F756E64-
 31674 00001BB1 2025640A00         
 31675                                  fmt_type:
 31676 00001BB6 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 31676 00001BBF 696F6E207061737365-
 31676 00001BC8 6420696E636F727265-
 31676 00001BD1 637420747970650A00 
 31677                                  fmt_integer_range:
 31678 00001BDA 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 31678 00001BE3 7265637420696E7465-
 31678 00001BEC 6765722072616E6765-
 31678 00001BF5 0A00               
 31679                                  fmt_division_by_zero:
 31680 00001BF7 212121204469766973-             db `!!! Division by zero\n\0`
 31680 00001C00 696F6E206279207A65-
 31680 00001C09 726F0A00           
 31681                                  fmt_scheme_error_part_1:
 31682 00001C0D 0A2121212054686520-             db `\n!!! The procedure \0`
 31682 00001C16 70726F636564757265-
 31682 00001C1F 2000               
 31683                                  fmt_scheme_error_part_2:
 31684 00001C21 2061736B656420746F-             db ` asked to terminate the program\n`
 31684 00001C2A 207465726D696E6174-
 31684 00001C33 65207468652070726F-
 31684 00001C3C 6772616D0A         
 31685 00001C41 202020207769746820-             db `    with the following message:\n\n\0`
 31685 00001C4A 74686520666F6C6C6F-
 31685 00001C53 77696E67206D657373-
 31685 00001C5C 6167653A0A0A00     
 31686                                  fmt_scheme_error_part_3:
 31687 00001C63 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 31687 00001C6C 210A0A00           
